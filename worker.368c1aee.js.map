{"mappings":"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I,O,wB,C,G;oB,K,C,C,S,I,C,E,U,G,E,Q,I,E,Y,A,K,C,I;wB,Y,C;wB,K;4B,O,C,C,E;wB;oB,C,G,O,c,C,G,G;gB,I,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C,G,C,C,E,G,C,C,E;gB,C,G,I,I,I,I,C,Y,I,S,C,E,C;oB,I,I,K,E,c,K,O,S,C,c,C,I,C,G,M,E,G,G;gB;gB,O,c,C,G,c;oB,O,C;gB,ICzCF,EAAA,EAAA,OAAA;gBACA,MAAA,IAAA,EAAA;gBAE+B;oBAC7B,MAAME,IAAgB,EAAA,MAAA,CAAA;oBACtB,CAAA,GAAA,EAAAC,eAAAA,AAAAA,EAAgB,SAASD,GAAAA;gB;gBAEG;oBAC5B,MAAME,IAAc,EAAA,MAAA,EAAA;oBACpB,CAAA,GAAA,EAAAD,eAAAA,AAAAA,EAAgB,OAAOC,GAAa,KAAA,AACpC,CAAA,GAAA,EAAAD,eAAAA,AAAAA,EAAgB,QAAQC,GAAa,KAAA,AACrC,CAAA,GAAA,EAAAD,eAAAA,AAAAA,EAAgB,WAAWC,GAAa;gB;Y;Y,K,C,G;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,2B,G,K;gBChB1C,MAAMC;oBACJzL,YAAYO,CAAAA,CAAAA;wBACVn1B,OAAOC,MAAAA,CAAO+H,IAAAA,EAAMmtB;oBACtB;oBAGWmL,IAAAA,WAAAA;wBAKT,OAJKt4B,IAAAA,CAAKu4B,SAAAA,IACRv4B,CAAAA,IAAAA,CAAKu4B,SAAAA,GACDvgC,OAAOwgC,mBAAAA,CAAoBx4B,IAAAA,EAAMy4B,IAAAA,GAAOC,GAAAA,CAAIz4B,CAAAA,IAAQ,CAAA,EAAID,IAAAA,CAAiCC,EAAAA,CAAAA,CAAAA,EAAS+a,IAAAA,CAAK,IAAA,GAEtGhb,IAAAA,CAAKu4B,SACd;oBAAA;gBAAA;gBAOW,EAAAI,2BAAAA,GAAkExL,CAAAA,IAC3E,IAAIkL,EAA0BlL;Y;Y,M,C,G,G;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,S,G,K;gBCnBlC,MAAA,IAAA,EAAA,OAEA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA;gBAEA,IAAOyL,IAAS,EAAAC,WAAAA,CAAYC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;Y;Y,M,S,C,E,C,E,C;gB;gB,I,I,I,I,I,C,e,I,C,O,M,G,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C;oB,I,I,O,wB,C,G;oB,K,C,C,S,I,C,E,U,G,E,Q,I,E,Y,A,K,C,I;wB,Y,C;wB,K;4B,O,C,C,E;wB;oB,C,G,O,c,C,G,G;gB,I,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C,G,C,C,E,G,C,C,E;gB,C,G,I,I,I,I,C,kB,I,C,O,M,G,S,C,E,C;oB,O,c,C,G,W;wB,Y,C;wB,O;oB;gB,I,S,C,E,C;oB,E,O,G;gB,C,G,I,I,I,I,C,Y,I,S,C;oB,I,K,E,U,E,O;oB,I,I,C;oB,I,Q,G,I,I,K,E,c,K,O,S,C,c,C,I,C,G,M,E,G,G;oB,O,E,G,I;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,sB,G,K;gBCpTF,MAAA,IAAA,EAAA,OACA,IAAA,EAAA,EAAA,QACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,MACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,EAAA,QACA,IAAA,EAAA,OACA,IAAA,EAAA;gBAEa,EAAAyD,sBAAAA,GAAuD;oBAClE;wBAAC;wBAAO;wBAAI;wBAAMC,EAASzkC,GAAAA;qBAAAA;oBAC3B;wBAAC;wBAAQ;wBAAI;wBAAMykC,EAASC,IAAAA;qBAAAA;oBAC5B;wBAAC;wBAAO;wBAAI;wBAAMC,EAAUvqC,GAAAA;qBAAAA;oBAC5B;wBAAC;wBAAO;wBAAI;wBAAMuqC,EAAUzoB,GAAAA;qBAAAA;oBAC5B;wBAAC;wBAAQ;wBAAI;wBAAMuoB,EAASG,IAAAA;qB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AA;wBACzB7N,YAAY;4BAAC;yBAAA;wBACb/T,QAAQ;4BAACqB,MAAM8pB;4BAAa7tB,MAAMyC,EAAM+f,MAAAA,CAAOxiB,IAAAA;4BAAMohB,aAAa,EAAAqB,WAAAA,CAAY4jB,oBAAAA;wBAAAA;wBAC9EhoB,cAAAA;wBACAC,SAAAA,CAAS;oBAAA;oBAEX,OAAOwN,EAAiBxK,cAAAA,CAAe9K,GAAa;wBAAC/T,EAAM+f,MAAAA;qBAAAA;gBAAQ;Y;Y,M,C,G,G;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,I,G,E,G,G,E,I,G,E,G,G,E,O,G,E,I,G,E,G,G,E,G,G,E,G,G,E,wB,G,E,S,G,E,Q,G,E,K,G,E,G,G,E,kB,G,E,G,G,E,G,G,E,I,G,E,O,G,E,mB,G,E,I,G,E,I,G,E,I,G,E,I,G,E,G,G,E,Q,G,E,O,G,E,Q,G,E,W,G,E,Q,G,E,O,G,E,O,G,E,O,G,E,O,G,E,a,G,E,Y,G,E,Q,G,E,S,G,E,O,G,E,O,G,E,O,G,E,Q,G,E,Q,G,E,Q,G,E,Q,G,E,O,G,K;gBClErE,MAAA,IAAA,EAAA,MAGA,IAAA,EAAA,OACA,IAAA,EAAA,OACA,IAAA,EAAA,OAEA,IAAA,EAAA;gBAEA,SAAgB8jB;oBACd,OAAOC,EAAiB;gBAC1B;gBACA,SAAgBC;oBACd,OAAOD,EAAiB;gBAC1B;gBACA,SAAgBE;oBACd,OAAOF,EAAiB;gBAC1B;gBACA,SAAgBG;oBACd,OAAOH,EAAiB;gBAC1B;gBACA,SAAgBI;oBACd,OAAOJ,EAAiB;gBAC1B;gBACA,SAAgBK;oBACd,OAAOL,EAAiB;gBAC1B;gBACA,SAAgBM,EAAQ3O,CAAAA;oBACtB,MAAMziD,IAAO;oBAWb,OAAO;wBAACylC,MAVK,CAAA,8BAAA,EACegd,EAAAA,cAAAA,EAEpBziD,EAAAA,4EAAAA,EAGDA,EAAAA,6BAAAA,EACSA,EAAAA,QAAAA,EAAeA,EAAAA,QAAAA,EAAeA,EAAAA,QAAAA,EAAeA,EAAAA,iBAAAA,CAAAA;wBAG/CA,MAAAA;wBAAMuqB,MAAM,EAAAwb,YAAAA,CAAakR,UAAAA;oBAAAA;gBACzC;gBACA,SAAgBoa;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B0+B,EAAmBL,CAAAA;oBACjC,IAAIU;oBACEV,KAA2B,aAAdA,KAAAA,CAA2B,CAAA,YAAYjb,CAAAA,IAE7Cib,KAA2B,YAAdA,KAAAA,CAA0B,CAAA,WAAWjb,CAAAA,KAC7D2b,CAAAA,IAAU3b,EAAM4a,KAAAA,AAAAA,IAFhBe,IAAU3b,EAAM46C,MAAAA,EAKlBj/B,IAAUA,KAAWo+B,EAAsB9+B,IAC3CA,IAAYA,KAAiC,MAApBU,EAAQhN,OAAAA,GAAgB,UAAU;oBAC3D,MAAMwjC,IAAKx2B,EAAQw2B,EAAAA;oBAInB,OAFAnyC,CAAAA,CAAMib,EAAAA,GAAaU,GAEfw2B,EAAG0I,aAAAA,KAAAA,CAAAA,OACE76C,CAAAA,CAAMib,EAAAA,EACNK,EAAmBL,EAAAA,IAG5Bk3B,CAAAA,EAAG2I,OAAAA,CAAQ3I,EAAG4I,UAAAA,GACd5I,EAAG2I,OAAAA,CAAQ3I,EAAG6I,YAAAA,GACd7I,EAAG2I,OAAAA,CAAQ3I,EAAG8I,KAAAA,GACd9I,EAAG2I,OAAAA,CAAQ3I,EAAG+I,MAAAA,GACd/I,EAAG2I,OAAAA,CAAQ3I,EAAGgJ,mBAAAA,GACdhJ,EAAG2I,OAAAA,CAAQ3I,EAAGiJ,eAAAA,GACdjJ,EAAGkJ,MAAAA,CAAOlJ,EAAGmJ,YAAAA,GACbnJ,EAAGkJ,MAAAA,CAAOlJ,EAAGoJ,SAAAA,GACbpJ,EAAGqJ,QAAAA,CAASrJ,EAAGsJ,IAAAA,GAER9/B,CAAAA;gBACT,GAEA,EAAA,qBAAA,GAAA;Y;Y,M,S,C,E,C,E,C;gB;gB,I,I,I,I,I,C,e,I,C,O,M,G,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C;oB,I,I,O,wB,C,G;oB,K,C,C,S,I,C,E,U,G,E,Q,I,E,Y,A,K,C,I;wB,Y,C;wB,K;4B,O,C,C,E;wB;oB,C,G,O,c,C,G,G;gB,I,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C,G,C,C,E,G,C,C,E;gB,C,G,I,I,I,I,C,kB,I,C,O,M,G,S,C,E,C;oB,O,c,C,G,W;wB,Y,C;wB,O;oB;gB,I,S,C,E,C;oB,E,O,G;gB,C,G,I,I,I,I,C,Y,I,S,C;oB,I,K,E,U,E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AAA,AAAQm9E,CAAAA,IAASI,IAAYpsC,CAAAA,IAAUtc,IAAU;gC;4BAEjE;gCACE,MAAM,IAAIriC,MAAM;wBAAA;oBAKxB;gBAAA;gBAvMF,EAAA,YAAA,GAAA,GA0Ma,EAAAojD,QAAAA,GAAAA,0CACA,EAAAC,QAAAA,GAAW,sBAExB,EAAA,gBAAA,GAAA,SAAiCnrD,CAAAA;oBAC/B,OAAA,AAAO,CAAA,IAAI6F,WAAAA,EAAcE,MAAAA,CAAO/F;gBAClC;Y;Y,M,C,G;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,mB,G,K,GC/tCa,EAAA8yF,mBAAAA,GACT,CAACr9D,GAAkCs9D,GAAgBC,GAClD1xD;oBACC,IAAsB,YAAA,OAAX7L,KAAmC,SAAZA,GAAkB;wBAClD,IAAIu9D,EAAKjjD,GAAAA,CAAIta,IACX,MAAM,IAAI3tB,MAAM;wBAEhBkrF,EAAKrjF,GAAAA,CAAI8lB;oB;oBAIbn0B,OAAO2xF,OAAAA,CAAQx9D,GAASppB,OAAAA,CAAQ,CAAA,CAAEirB,GAAKnO,EAAAA;wBACrC,MAAM5f,IAAO,IAAWwpF,IAASz7D,IAAMA;wBACvC,IAAqB,YAAA,OAAVnO,GAAAA,AACT,CAAA,GAAA,EAAA2pE,mBAAAA,AAAAA,EAAoB3pE,GAAkC5f,IAAO,KAAKypF,GAAM1xD;6BACnE,IAAqB,YAAA,OAAVnY,KAAuC,YAAA,OAAVA,GAC7CmY,EAAQ/3B,GAAM4f,EAAMnV,QAAAA;6BACf;4BAAA,IAAqB,aAAA,OAAVmV,GAGhB,MAAM,IAAIrhB,MAAM,qCAAA,OAA0CqhB;4BAF1DmY,EAAQ/3B,GAAM,IAAU,MAAM;wB;oB;gBAIhC;Y;Y,M,S,C,E,C,E,C;gB;gB,I,G,I,I,I,I,C,e,I,C,O,M,G,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C;oB,I,I,O,wB,C,G;oB,K,C,C,S,I,C,E,U,G,E,Q,I,E,Y,A,K,C,I;wB,Y,C;wB,K;4B,O,C,C,E;wB;oB,C,G,O,c,C,G,G;gB,I,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C,G,C,C,E,G,C,C,E;gB,C,G,I,I,I,I,C,kB,I,C,O,M,G,S,C,E,C;o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MAAM,IAAI54B,MAAM;oBAElB,MAAM+vF,IAAgBn3D,CAAAA,CAAQ,EAAA,EAGxB84D,IAAkBpvE,EAAK1L,gBAAAA,CAAiBm5E;oBAC9C,IAAwB,MAApB2B,GACF,MAAM,IAAI1xF,MAAM;oBAElBsiB,EAAK1M,QAAAA,CAAS87E;gBAAgB,GAGnB,EAAAxE,0BAAAA,GAA8BthE,CAAAA;oBACzC,MAAM+lE,IAA6B,EAAA;oBACnC,KAAK,MAAMnjD,KAAU5iB,EAAS;wBAC5B,MAAMlnB,IAAO8pC,CAAAA,CAAO,EAAA;wBAAA,CACf7gC,MAAM2f,OAAAA,CAAQ5oB,MAASA,EAAKxM,MAAAA,IAC/By5F,EAAQzvF,IAAAA,CAAKwC,EAAKxM,MAAAA;oB;oBAGtB,OAAOy5F;gBAAO;Y;Y,M,S,C,E,C,E,C;gB;gB,I,I,I,I,I,C,e,I,C,O,M,G,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C;oB,I,I,O,wB,C,G;oB,K,C,C,S,I,C,E,U,G,E,Q,I,E,Y,A,K,C,I;wB,Y,C;wB,K;4B,O,C,C,E;wB;oB,C,G,O,c,C,G,G;gB,I,S,C,E,C,E,C,E,C;oB,K,M,K,C,I,C,G,C,C,E,G,C,C,E;gB,C,G,I,I,I,I,C,kB,I,C,O,M,G,S,C,E,C;oB,O,c,C,G,W;wB,Y,C;wB,O;oB;gB,I,S,C,E,C;oB,E,O,G;gB,C,G,I,I,I,I,C,Y,I,S,C;oB,I,K,E,U,E,O;oB,I,I,C;oB,I,Q,G,I,I,K,E,c,K,O,S,C,c,C,I,C,G,M,E,G,G;oB,O,E,G,I;gB,G,I,I,I,I,C,e,I,S,C;oB,O,K,E,U,G,I;wB,S;oB;gB;gB,O,c,C,G,c;oB,O,C;gB,I,E,O,G,E,W,G,E,qB,G,K;gBC5ahB,MAAA,IAAA,EAAA,EAAA,QAIA,IAAA,EAAA,EAAA,OAEMC,IAEgC,EAAQ;gBAE9C,IAAItvE,GACAmpE,IAAAA,CAAc,GACdD,IAAAA,CAAe,GACfE,IAAAA,CAAU;gBAEd,MAiDMmG,IAAkB,CAACC,GAAkBC,IACrCA,IACKD,IAAU,gCAAgC,2BAE1CA,IAAU,uBAAuB;gBAI/B,EAAAvF,qBAAAA,GAAwB7zD,OAAMs5D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","sources":["node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/ort-web.min.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/webpack/universalModuleDefinition","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/binding/ort-wasm-threaded.min.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/binding/ort-wasm.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/@protobufjs/aspromise/index.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/@protobufjs/base64/index.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/@protobufjs/eventemitter/index.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/@protobufjs/float/index.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/@protobufjs/inquire/index.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/@protobufjs/pool/index.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/@protobufjs/utf8/index.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/guid-typescript/dist/guid.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/long/src/long.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/onnx-proto/dist/onnx.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/minimal.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/src/index-minimal.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/src/reader.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/src/reader_buffer.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/src/roots.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/src/rpc.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/src/rpc/service.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/src/util/longbits.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/src/util/minimal.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/src/writer.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/protobufjs/src/writer_buffer.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/backend-onnxjs.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/backend-wasm.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/index.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/attribute-with-cache-key.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/attribute.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backend.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/backend-webgl.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-definitions.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-function-inliner.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-preprocessor.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-registered-libs.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-source.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-vec-lib.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/inference-handler.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/op-resolve-rules.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/batch-normalization.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/binary-op.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/cast.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/concat-packed.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/concat.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-grouped.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-pack.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-transpose.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/depth-to-space.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/dot-product.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/flatten.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/fuse-utils.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/gather.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/gemm.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/im2col-pack.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/im2col.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/image-scaler.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/instance-normalization.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/matmul-pack.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/matmul.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pack.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/packing-utils.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pad.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pool.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reduce.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reshape-packed.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reshape.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/resize-packed.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/shape.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/slice.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/softmax.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/split.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/squeeze.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/sum.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/tile.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/transpose.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/uint8-encode.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unary-op.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unpack.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unsqueeze.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/ops/upsample.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/program-manager.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/session-handler.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/texture-data-encoder.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/texture-layout-strategy.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/texture-layout.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/texture-manager.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/types.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/utils.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/webgl-context-factory.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/backends/webgl/webgl-context.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/execution-plan.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/graph.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/instrument.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/model.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/operators.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/opset.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/ort-schema/ort-generated.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/session-handler.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/session.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/tensor.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/onnxjs/util.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/options-utils.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/proxy-wrapper.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/run-options.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/session-handler.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/session-options.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/string-utils.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/wasm-core-impl.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/wasm-factory.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/lib/wasm/proxy-worker/main.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/worker-loader/dist/runtime/inline.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/external umd {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/node_modules/flatbuffers/js/flatbuffers.mjs","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/webpack/bootstrap","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/webpack/runtime/compat get default export","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/webpack/runtime/define property getters","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/webpack/runtime/global","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/webpack/runtime/make namespace object","node_modules/.pnpm/registry.npmjs.org+onnxruntime-web@1.14.0/node_modules/onnxruntime-web/dist/webpack:/onnxruntime-web/webpack/startup","node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/dist/lib/index.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/lib/index.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/dist/lib/backend.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/lib/backend.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/dist/lib/backend-impl.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/lib/backend-impl.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/dist/lib/env.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/lib/env.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/dist/lib/env-impl.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/lib/env-impl.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/dist/lib/inference-session.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/lib/inference-session.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/dist/lib/inference-session-impl.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/lib/inference-session-impl.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/dist/lib/tensor.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/lib/tensor.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/dist/lib/tensor-impl.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/lib/tensor-impl.ts","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/dist/lib/onnx-value.js","node_modules/.pnpm/registry.npmjs.org+onnxruntime-common@1.14.0/node_modules/onnxruntime-common/lib/onnx-value.ts","web/store/embeddings/worker.ts","node_modules/.pnpm/gpt-3-encoder@1.1.4/node_modules/gpt-3-encoder/index.js","node_modules/.pnpm/gpt-3-encoder@1.1.4/node_modules/gpt-3-encoder/Encoder.js","node_modules/.pnpm/buffer@5.5.0/node_modules/buffer/index.js","node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js","node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js","node_modules/.pnpm/@parcel+node-resolver-core@3.3.0_@parcel+core@2.12.0/node_modules/@parcel/node-resolver-core/lib/_empty.js","node_modules/.pnpm/path-browserify@1.0.0/node_modules/path-browserify/index.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/transformers.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/pipelines.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/tokenizers.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/utils/core.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/utils/hub.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/env.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/backends/onnx.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/utils/maths.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/utils/tensor.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/utils/data-structures.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/models.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/configs.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/utils/generation.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/processors.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/utils/image.js","node_modules/.pnpm/registry.npmjs.org+@xenova+transformers@2.7.0/node_modules/@xenova/transformers/src/utils/audio.js","web/store/embeddings/cache.ts","node_modules/.pnpm/localforage@1.10.0/node_modules/localforage/dist/localforage.js"],"sourcesContent":["/*!\n* ONNX Runtime Web v1.14.0\n* Copyright (c) Microsoft Corporation. All rights reserved.\n* Licensed under the MIT License.\n*/\n!function(t,e){if(\"object\"==typeof exports&&\"object\"==typeof module)module.exports=e(require(\"onnxruntime-common\"));else if(\"function\"==typeof define&&define.amd)define([],e);else{var n=\"object\"==typeof exports?e(require(\"onnxruntime-common\")):e(t.ort);for(var r in n)(\"object\"==typeof exports?exports:t)[r]=n[r]}}(self,(__WEBPACK_EXTERNAL_MODULE__1670__=>(()=>{var __webpack_modules__={3474:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\"/index.js\",function(t){function e(){return $.buffer!=C&&H($.buffer),F}function r(){return $.buffer!=C&&H($.buffer),N}function i(){return $.buffer!=C&&H($.buffer),L}function o(){return $.buffer!=C&&H($.buffer),R}function a(){return $.buffer!=C&&H($.buffer),j}var s,u,c;t=t||{},s||(s=void 0!==t?t:{}),s.ready=new Promise((function(t,e){u=t,c=e}));var l,p,f,d,h,g,b=Object.assign({},s),m=\"./this.program\",y=(t,e)=>{throw e},_=\"object\"==typeof window,v=\"function\"==typeof importScripts,w=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,x=s.ENVIRONMENT_IS_PTHREAD||!1,T=\"\";function S(t){return s.locateFile?s.locateFile(t,T):T+t}if(w){let e;T=v?n(908).dirname(T)+\"/\":\"//\",g=()=>{h||(d=n(1384),h=n(908))},l=function(t,e){return g(),t=h.normalize(t),d.readFileSync(t,e?void 0:\"utf8\")},f=t=>((t=l(t,!0)).buffer||(t=new Uint8Array(t)),t),p=(t,e,n)=>{g(),t=h.normalize(t),d.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(t){if(!(t instanceof ut))throw t})),process.on(\"unhandledRejection\",(function(t){throw t})),y=(t,e)=>{if(J())throw process.exitCode=t,e;e instanceof ut||P(\"exiting due to exception: \"+e),process.exit(t)},s.inspect=function(){return\"[Emscripten Module object]\"};try{e=n(9925)}catch(t){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),t}n.g.Worker=e.Worker}else(_||v)&&(v?T=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(T=document.currentScript.src),_scriptDir&&(T=_scriptDir),T=0!==T.indexOf(\"blob:\")?T.substr(0,T.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",w||(l=t=>{var e=new XMLHttpRequest;return e.open(\"GET\",t,!1),e.send(null),e.responseText},v&&(f=t=>{var e=new XMLHttpRequest;return e.open(\"GET\",t,!1),e.responseType=\"arraybuffer\",e.send(null),new Uint8Array(e.response)}),p=(t,e,n)=>{var r=new XMLHttpRequest;r.open(\"GET\",t,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)}));w&&\"undefined\"==typeof performance&&(n.g.performance=n(6953).performance);var O=console.log.bind(console),A=console.warn.bind(console);w&&(g(),O=t=>d.writeSync(1,t+\"\\n\"),A=t=>d.writeSync(2,t+\"\\n\"));var E,I=s.print||O,P=s.printErr||A;Object.assign(s,b),b=null,s.thisProgram&&(m=s.thisProgram),s.quit&&(y=s.quit),s.wasmBinary&&(E=s.wasmBinary);var D=s.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&it(\"no native wasm support detected\");var $,k,C,F,N,L,R,j,M=!1,U=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function V(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&U)return U.decode(t.buffer instanceof SharedArrayBuffer?t.slice(e,n):t.subarray(e,n));for(r=\"\";e<n;){var i=t[e++];if(128&i){var o=63&t[e++];if(192==(224&i))r+=String.fromCharCode((31&i)<<6|o);else{var a=63&t[e++];65536>(i=224==(240&i)?(15&i)<<12|o<<6|a:(7&i)<<18|o<<12|a<<6|63&t[e++])?r+=String.fromCharCode(i):(i-=65536,r+=String.fromCharCode(55296|i>>10,56320|1023&i))}}else r+=String.fromCharCode(i)}return r}function B(t,e){return(t>>>=0)?V(r(),t,e):\"\"}function z(t,e,n,r){if(!(0<r))return 0;var i=n>>>=0;r=n+r-1;for(var o=0;o<t.length;++o){var a=t.charCodeAt(o);if(55296<=a&&57343>=a&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++o)),127>=a){if(n>=r)break;e[n++>>>0]=a}else{if(2047>=a){if(n+1>=r)break;e[n++>>>0]=192|a>>6}else{if(65535>=a){if(n+2>=r)break;e[n++>>>0]=224|a>>12}else{if(n+3>=r)break;e[n++>>>0]=240|a>>18,e[n++>>>0]=128|a>>12&63}e[n++>>>0]=128|a>>6&63}e[n++>>>0]=128|63&a}}return e[n>>>0]=0,n-i}function G(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function H(t){C=t,s.HEAP8=F=new Int8Array(t),s.HEAP16=new Int16Array(t),s.HEAP32=L=new Int32Array(t),s.HEAPU8=N=new Uint8Array(t),s.HEAPU16=new Uint16Array(t),s.HEAPU32=R=new Uint32Array(t),s.HEAPF32=new Float32Array(t),s.HEAPF64=j=new Float64Array(t)}x&&(C=s.buffer);var W=s.INITIAL_MEMORY||16777216;if(x)$=s.wasmMemory,C=s.buffer;else if(s.wasmMemory)$=s.wasmMemory;else if(!(($=new WebAssembly.Memory({initial:W/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw P(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),w&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");$&&(C=$.buffer),W=C.byteLength,H(C);var q,X=[],Y=[],K=[],Z=[];function J(){return D||!1}function Q(){var t=s.preRun.shift();X.unshift(t)}var tt,et=0,nt=null,rt=null;function it(t){throw x?postMessage({cmd:\"onAbort\",arg:t}):s.onAbort&&s.onAbort(t),P(t=\"Aborted(\"+t+\")\"),M=!0,t=new WebAssembly.RuntimeError(t+\". Build with -sASSERTIONS for more info.\"),c(t),t}function ot(){return tt.startsWith(\"data:application/octet-stream;base64,\")}function at(){var t=tt;try{if(t==tt&&E)return new Uint8Array(E);if(f)return f(t);throw\"both async and sync fetching of the wasm failed\"}catch(t){it(t)}}tt=\"ort-wasm-threaded.wasm\",ot()||(tt=S(tt));var st={};function ut(t){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+t+\")\",this.status=t}function ct(t){(t=dt.Vb[t])||it(),dt.mc(t)}function lt(t){var e=dt.Cc();if(!e)return 6;dt.ac.push(e),dt.Vb[t.Ub]=e,e.Ub=t.Ub;var n={cmd:\"run\",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return e.$b=()=>{n.time=performance.now(),e.postMessage(n,t.Nc)},e.loaded&&(e.$b(),delete e.$b),0}function pt(t){if(x)return qt(1,1,t);J()||(dt.oc(),s.onExit&&s.onExit(t),M=!0),y(t,new ut(t))}function ft(t,e){if(!e&&x)throw bt(t),\"unwind\";J()||x||(me(),ht(K),be(0),re[1].length&&ie(1,10),re[2].length&&ie(2,10),dt.oc()),pt(t)}var dt={Yb:[],ac:[],qc:[],Vb:{},fc:function(){x&&dt.Ec()},Pc:function(){},Ec:function(){dt.receiveObjectTransfer=dt.Gc,dt.threadInitTLS=dt.pc,dt.setExitStatus=dt.nc,D=!1},nc:function(){},oc:function(){for(var t of Object.values(dt.Vb))dt.mc(t);for(t of dt.Yb)t.terminate();dt.Yb=[]},mc:function(t){var e=t.Ub;delete dt.Vb[e],dt.Yb.push(t),dt.ac.splice(dt.ac.indexOf(t),1),t.Ub=0,xe(e)},Gc:function(){},pc:function(){dt.qc.forEach((t=>t()))},Fc:function(t,e){t.onmessage=n=>{var r=(n=n.data).cmd;if(t.Ub&&(dt.Bc=t.Ub),n.targetThread&&n.targetThread!=de()){var i=dt.Vb[n.Qc];i?i.postMessage(n,n.transferList):P('Internal error! Worker sent a message \"'+r+'\" to target pthread '+n.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?Vt(n.queue):\"spawnThread\"===r?lt(n):\"cleanupThread\"===r?ct(n.thread):\"killThread\"===r?(n=n.thread,r=dt.Vb[n],delete dt.Vb[n],r.terminate(),xe(n),dt.ac.splice(dt.ac.indexOf(r),1),r.Ub=0):\"cancelThread\"===r?dt.Vb[n.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(t.loaded=!0,e&&e(t),t.$b&&(t.$b(),delete t.$b)):\"print\"===r?I(\"Thread \"+n.threadId+\": \"+n.text):\"printErr\"===r?P(\"Thread \"+n.threadId+\": \"+n.text):\"alert\"===r?alert(\"Thread \"+n.threadId+\": \"+n.text):\"setimmediate\"===n.target?t.postMessage(n):\"onAbort\"===r?s.onAbort&&s.onAbort(n.arg):r&&P(\"worker sent an unknown command \"+r);dt.Bc=void 0},t.onerror=t=>{throw P(\"worker sent an error! \"+t.filename+\":\"+t.lineno+\": \"+t.message),t},w&&(t.on(\"message\",(function(e){t.onmessage({data:e})})),t.on(\"error\",(function(e){t.onerror(e)})),t.on(\"detachedExit\",(function(){}))),t.postMessage({cmd:\"load\",urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:$,wasmModule:k})},yc:function(){var t=S(\"ort-wasm-threaded.worker.js\");dt.Yb.push(new Worker(t))},Cc:function(){return 0==dt.Yb.length&&(dt.yc(),dt.Fc(dt.Yb[0])),dt.Yb.pop()}};function ht(t){for(;0<t.length;)t.shift()(s)}function gt(t){var e=Ae();return t=t(),Ee(e),t}function bt(t){if(x)return qt(2,0,t);try{ft(t)}catch(t){t instanceof ut||\"unwind\"==t||y(1,t)}}s.PThread=dt,s.establishStackSpace=function(){var t=de(),e=i()[t+44>>2>>>0];t=i()[t+48>>2>>>0],Oe(e,e-t),Ee(e)};var mt=[];function yt(t){var e=mt[t];return e||(t>=mt.length&&(mt.length=t+1),mt[t]=e=q.get(t)),e}s.invokeEntryPoint=function(t,e){t=yt(t)(e),J()?dt.nc(t):Te(t)};var _t,vt,wt=[],xt=0,Tt=0;function St(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){o()[this.Sb+4>>2>>>0]=t},this.bc=function(){return o()[this.Sb+4>>2>>>0]},this.wc=function(t){o()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return o()[this.Sb+8>>2>>>0]},this.rc=function(){i()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,e()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=e()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,e()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=e()[this.Sb+13>>0>>>0]},this.fc=function(t,e){this.cc(0),this.xc(t),this.wc(e),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(i(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(i(),this.Sb>>2,1)},this.cc=function(t){o()[this.Sb+16>>2>>>0]=t},this.tc=function(){return o()[this.Sb+16>>2>>>0]},this.vc=function(){if(De(this.bc()))return o()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function Ot(t){return ge(new St(t).Sb)}function At(t,e,n,r){return x?qt(3,1,t,e,n,r):Et(t,e,n,r)}function Et(t,e,n,r){if(\"undefined\"==typeof SharedArrayBuffer)return P(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var i=[];return x&&0===i.length?At(t,e,n,r):(t={Ic:n,Ub:t,zc:r,Nc:i},x?(t.Oc=\"spawnThread\",postMessage(t,i),0):lt(t))}function It(t,e,n){return x?qt(4,1,t,e,n):0}function Pt(t,e){if(x)return qt(5,1,t,e)}function Dt(t,e){if(x)return qt(6,1,t,e)}function $t(t,e,n){if(x)return qt(7,1,t,e,n)}function kt(t,e,n){return x?qt(8,1,t,e,n):0}function Ct(t,e){if(x)return qt(9,1,t,e)}function Ft(t,e,n){if(x)return qt(10,1,t,e,n)}function Nt(t,e,n,r){if(x)return qt(11,1,t,e,n,r)}function Lt(t,e,n,r){if(x)return qt(12,1,t,e,n,r)}function Rt(t,e,n,r){if(x)return qt(13,1,t,e,n,r)}function jt(t){if(x)return qt(14,1,t)}function Mt(t,e){if(x)return qt(15,1,t,e)}function Ut(t,e,n){if(x)return qt(16,1,t,e,n)}function Vt(t){Atomics.store(i(),t>>2,1),de()&&we(t),Atomics.compareExchange(i(),t>>2,1,0)}function Bt(t){return o()[t>>>2]+4294967296*i()[t+4>>>2]}function zt(t,e,n,r,i,o){return x?qt(17,1,t,e,n,r,i,o):-52}function Gt(t,e,n,r,i,o){if(x)return qt(18,1,t,e,n,r,i,o)}function Ht(t){var n=G(t)+1,r=he(n);return r&&z(t,e(),r,n),r}function Wt(t,e,n){function r(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:\"GMT\"}if(x)return qt(19,1,t,e,n);var a=(new Date).getFullYear(),s=new Date(a,0,1),u=new Date(a,6,1);a=s.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(a,c);i()[t>>2>>>0]=60*l,i()[e>>2>>>0]=Number(a!=c),t=r(s),e=r(u),t=Ht(t),e=Ht(e),c<a?(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e):(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t)}function qt(t,e){var n=arguments.length-2,r=arguments;return gt((()=>{for(var i=Ie(8*n),o=i>>3,s=0;s<n;s++){var u=r[2+s];a()[o+s>>>0]=u}return ve(t,n,i,e)}))}s.executeNotifiedProxyingQueue=Vt,vt=w?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:x?()=>performance.now()-s.__performance_now_clock_drift:()=>performance.now();var Xt,Yt=[],Kt={};function Zt(){if(!Xt){var t,e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:m||\"./this.program\"};for(t in Kt)void 0===Kt[t]?delete e[t]:e[t]=Kt[t];var n=[];for(t in e)n.push(t+\"=\"+e[t]);Xt=n}return Xt}function Jt(t,n){if(x)return qt(20,1,t,n);var r=0;return Zt().forEach((function(i,a){var s=n+r;for(a=o()[t+4*a>>2>>>0]=s,s=0;s<i.length;++s)e()[a++>>0>>>0]=i.charCodeAt(s);e()[a>>0>>>0]=0,r+=i.length+1})),0}function Qt(t,e){if(x)return qt(21,1,t,e);var n=Zt();o()[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),o()[e>>2>>>0]=r,0}function te(t){return x?qt(22,1,t):52}function ee(t,e,n,r){return x?qt(23,1,t,e,n,r):52}function ne(t,e,n,r,i){return x?qt(24,1,t,e,n,r,i):70}var re=[null,[],[]];function ie(t,e){var n=re[t];0===e||10===e?((1===t?I:P)(V(n,0)),n.length=0):n.push(e)}function oe(t,e,n,i){if(x)return qt(25,1,t,e,n,i);for(var a=0,s=0;s<n;s++){var u=o()[e>>2>>>0],c=o()[e+4>>2>>>0];e+=8;for(var l=0;l<c;l++)ie(t,r()[u+l>>>0]);a+=c}return o()[i>>2>>>0]=a,0}var ae=0;function se(t){return 0==t%4&&(0!=t%100||0==t%400)}var ue=[31,29,31,30,31,30,31,31,30,31,30,31],ce=[31,28,31,30,31,30,31,31,30,31,30,31];function le(t,n,r,o){function a(t,e,n){for(t=\"number\"==typeof t?t.toString():t||\"\";t.length<e;)t=n[0]+t;return t}function s(t,e){return a(t,e,\"0\")}function u(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function c(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function l(t){var e=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(se(t.getFullYear())?ue:ce)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=c(new Date(t.getFullYear(),0,4)),n=c(n),0>=u(e,t)?0>=u(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var p=i()[o+40>>2>>>0];for(var f in o={Lc:i()[o>>2>>>0],Kc:i()[o+4>>2>>>0],dc:i()[o+8>>2>>>0],jc:i()[o+12>>2>>>0],ec:i()[o+16>>2>>>0],Xb:i()[o+20>>2>>>0],Tb:i()[o+24>>2>>>0],Wb:i()[o+28>>2>>>0],Rc:i()[o+32>>2>>>0],Jc:i()[o+36>>2>>>0],Mc:p?B(p):\"\"},r=B(r),p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(f,\"g\"),p[f]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(f in p={\"%a\":function(t){return d[t.Tb].substring(0,3)},\"%A\":function(t){return d[t.Tb]},\"%b\":function(t){return h[t.ec].substring(0,3)},\"%B\":function(t){return h[t.ec]},\"%C\":function(t){return s((t.Xb+1900)/100|0,2)},\"%d\":function(t){return s(t.jc,2)},\"%e\":function(t){return a(t.jc,2,\" \")},\"%g\":function(t){return l(t).toString().substring(2)},\"%G\":function(t){return l(t)},\"%H\":function(t){return s(t.dc,2)},\"%I\":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),s(t,2)},\"%j\":function(t){for(var e=0,n=0;n<=t.ec-1;e+=(se(t.Xb+1900)?ue:ce)[n++]);return s(t.jc+e,3)},\"%m\":function(t){return s(t.ec+1,2)},\"%M\":function(t){return s(t.Kc,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(t){return 0<=t.dc&&12>t.dc?\"AM\":\"PM\"},\"%S\":function(t){return s(t.Lc,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(t){return t.Tb||7},\"%U\":function(t){return s(Math.floor((t.Wb+7-t.Tb)/7),2)},\"%V\":function(t){var e=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&e++,e)53==e&&(4==(n=(t.Tb+371-t.Wb)%7)||3==n&&se(t.Xb)||(e=1));else{e=52;var n=(t.Tb+7-t.Wb-1)%7;(4==n||5==n&&se(t.Xb%400-1))&&e++}return s(e,2)},\"%w\":function(t){return t.Tb},\"%W\":function(t){return s(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},\"%y\":function(t){return(t.Xb+1900).toString().substring(2)},\"%Y\":function(t){return t.Xb+1900},\"%z\":function(t){var e=0<=(t=t.Jc);return t=Math.abs(t)/60,(e?\"+\":\"-\")+String(\"0000\"+(t/60*100+t%60)).slice(-4)},\"%Z\":function(t){return t.Mc},\"%%\":function(){return\"%\"}},r=r.replace(/%%/g,\"\\0\\0\"),p)r.includes(f)&&(r=r.replace(new RegExp(f,\"g\"),p[f](o)));return f=function(t){var e=Array(G(t)+1);return z(t,e,0,e.length),e}(r=r.replace(/\\0\\0/g,\"%\")),f.length>n?0:(function(t,n){e().set(t,n>>>0)}(f,t),f.length-1)}dt.fc();var pe=[null,pt,bt,At,It,Pt,Dt,$t,kt,Ct,Ft,Nt,Lt,Rt,jt,Mt,Ut,zt,Gt,Wt,Jt,Qt,te,ee,ne,oe],fe={b:function(t){return he(t+24)+24},n:function(t){return(t=new St(t)).uc()||(t.hc(!0),xt--),t.ic(!1),wt.push(t),t.sc(),t.vc()},ma:function(t){throw P(\"Unexpected exception thrown, this is not properly supported - aborting\"),M=!0,t},x:function(){Se(0);var t=wt.pop();if(t.Hc()&&!t.kc()){var e=t.Dc();e&&yt(e)(t.Zb),Ot(t.Zb)}Tt=0},e:function(){var t=Tt;if(!t)return ae=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return ae=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var o=r[i];if(0===o||o===n)break;if(Pe(o,n,e.Sb+16))return ae=o,t}return ae=n,t},l:function(){var t=Tt;if(!t)return ae=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return ae=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var o=r[i];if(0===o||o===n)break;if(Pe(o,n,e.Sb+16))return ae=o,t}return ae=n,t},h:function(){var t=Tt;if(!t)return ae=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return ae=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var o=r[i];if(0===o||o===n)break;if(Pe(o,n,e.Sb+16))return ae=o,t}return ae=n,t},t:Ot,M:function(){var t=wt.pop();t||it(\"no exception to throw\");var e=t.Zb;throw t.kc()||(wt.push(t),t.ic(!0),t.hc(!1),xt++),Tt=e,e},c:function(t,e,n){throw new St(t).fc(e,n),Tt=t,xt++,t},pa:function(){return xt},Fa:function(t){ye(t,!v,1,!_),dt.pc()},T:function(t){x?postMessage({cmd:\"cleanupThread\",thread:t}):ct(t)},xa:Et,j:function(t){throw Tt||(Tt=t),t},H:It,Ma:Pt,ua:Dt,wa:$t,oa:kt,Ka:Ct,Ca:Ft,Ja:Nt,V:Lt,va:Rt,sa:jt,La:Mt,ta:Ut,Ta:function(){},X:function(){it(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Ua:function(){it(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,e,n,r){if(t==e)setTimeout((()=>Vt(r)));else if(x)postMessage({targetThread:t,cmd:\"processProxyingQueue\",queue:r});else{if(!(t=dt.Vb[t]))return;t.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,e){t=new Date(1e3*Bt(t)),i()[e>>2>>>0]=t.getUTCSeconds(),i()[e+4>>2>>>0]=t.getUTCMinutes(),i()[e+8>>2>>>0]=t.getUTCHours(),i()[e+12>>2>>>0]=t.getUTCDate(),i()[e+16>>2>>>0]=t.getUTCMonth(),i()[e+20>>2>>>0]=t.getUTCFullYear()-1900,i()[e+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[e+28>>2>>>0]=t},Qa:function(t,e){t=new Date(1e3*Bt(t)),i()[e>>2>>>0]=t.getSeconds(),i()[e+4>>2>>>0]=t.getMinutes(),i()[e+8>>2>>>0]=t.getHours(),i()[e+12>>2>>>0]=t.getDate(),i()[e+16>>2>>>0]=t.getMonth(),i()[e+20>>2>>>0]=t.getFullYear()-1900,i()[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1),r=(t.getTime()-n.getTime())/864e5|0;i()[e+28>>2>>>0]=r,i()[e+36>>2>>>0]=-60*t.getTimezoneOffset(),r=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(r!=(n=n.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(n,r)),i()[e+32>>2>>>0]=t},Ra:function(t){var e=new Date(i()[t+20>>2>>>0]+1900,i()[t+16>>2>>>0],i()[t+12>>2>>>0],i()[t+8>>2>>>0],i()[t+4>>2>>>0],i()[t>>2>>>0],0),n=i()[t+32>>2>>>0],r=e.getTimezoneOffset(),o=new Date(e.getFullYear(),0,1),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),s=o.getTimezoneOffset(),u=Math.min(s,a);return 0>n?i()[t+32>>2>>>0]=Number(a!=s&&u==r):0<n!=(u==r)&&(a=Math.max(s,a),e.setTime(e.getTime()+6e4*((0<n?u:a)-r))),i()[t+24>>2>>>0]=e.getDay(),n=(e.getTime()-o.getTime())/864e5|0,i()[t+28>>2>>>0]=n,i()[t>>2>>>0]=e.getSeconds(),i()[t+4>>2>>>0]=e.getMinutes(),i()[t+8>>2>>>0]=e.getHours(),i()[t+12>>2>>>0]=e.getDate(),i()[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},Aa:zt,Ba:Gt,Sa:function t(e,n,r){t.Ac||(t.Ac=!0,Wt(e,n,r))},y:function(){it(\"\")},U:function(){if(!w&&!v){var t=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";_t||(_t={}),_t[t]||(_t[t]=1,w&&(t=\"warning: \"+t),P(t))}},ra:function(){return 4294901760},B:vt,Ia:function(t,e,n){r().copyWithin(t>>>0,e>>>0,e+n>>>0)},F:function(){return w?n(3993).cpus().length:navigator.hardwareConcurrency},Da:function(t,e,n){Yt.length=e,n>>=3;for(var r=0;r<e;r++)Yt[r]=a()[n+r>>>0];return(0>t?st[-t-1]:pe[t]).apply(null,Yt)},qa:function(t){var e=r().length;if((t>>>=0)<=e||4294901760<t)return!1;for(var n=1;4>=n;n*=2){var i=e*(1+.2/n);i=Math.min(i,t+100663296);var o=Math;i=Math.max(t,i),o=o.min.call(o,4294901760,i+(65536-i%65536)%65536);t:{try{$.grow(o-C.byteLength+65535>>>16),H($.buffer);var a=1;break t}catch(t){}a=void 0}if(a)return!0}return!1},Na:function(){throw\"unwind\"},Ga:Jt,Ha:Qt,J:ft,I:te,S:ee,ga:ne,R:oe,d:function(){return ae},na:function t(r,i){t.lc||(t.lc=function(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(w)try{var e=n(Object(function(){var t=new Error(\"Cannot find module 'crypto'\");throw t.code=\"MODULE_NOT_FOUND\",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>it(\"randomDevice\")}());for(var o=0;o<i;o++)e()[r+o>>0>>>0]=t.lc();return 0},ia:function(t,e,n){var r=Ae();try{return yt(t)(e,n)}catch(t){if(Ee(r),t!==t+0)throw t;Se(1,0)}},ja:function(t,e,n){var r=Ae();try{return yt(t)(e,n)}catch(t){if(Ee(r),t!==t+0)throw t;Se(1,0)}},K:function(t){var e=Ae();try{return yt(t)()}catch(t){if(Ee(e),t!==t+0)throw t;Se(1,0)}},f:function(t,e){var n=Ae();try{return yt(t)(e)}catch(t){if(Ee(n),t!==t+0)throw t;Se(1,0)}},P:function(t,e,n){var r=Ae();try{return yt(t)(e,n)}catch(t){if(Ee(r),t!==t+0)throw t;Se(1,0)}},Q:function(t,e,n){var r=Ae();try{return yt(t)(e,n)}catch(t){if(Ee(r),t!==t+0)throw t;Se(1,0)}},k:function(t,e,n){var r=Ae();try{return yt(t)(e,n)}catch(t){if(Ee(r),t!==t+0)throw t;Se(1,0)}},p:function(t,e,n,r){var i=Ae();try{return yt(t)(e,n,r)}catch(t){if(Ee(i),t!==t+0)throw t;Se(1,0)}},q:function(t,e,n,r,i){var o=Ae();try{return yt(t)(e,n,r,i)}catch(t){if(Ee(o),t!==t+0)throw t;Se(1,0)}},N:function(t,e,n,r,i,o){var a=Ae();try{return yt(t)(e,n,r,i,o)}catch(t){if(Ee(a),t!==t+0)throw t;Se(1,0)}},s:function(t,e,n,r,i,o){var a=Ae();try{return yt(t)(e,n,r,i,o)}catch(t){if(Ee(a),t!==t+0)throw t;Se(1,0)}},w:function(t,e,n,r,i,o,a){var s=Ae();try{return yt(t)(e,n,r,i,o,a)}catch(t){if(Ee(s),t!==t+0)throw t;Se(1,0)}},L:function(t,e,n,r,i,o,a,s){var u=Ae();try{return yt(t)(e,n,r,i,o,a,s)}catch(t){if(Ee(u),t!==t+0)throw t;Se(1,0)}},E:function(t,e,n,r,i,o,a,s,u,c,l,p){var f=Ae();try{return yt(t)(e,n,r,i,o,a,s,u,c,l,p)}catch(t){if(Ee(f),t!==t+0)throw t;Se(1,0)}},aa:function(t,e,n,r,i,o,a,s){var u=Ae();try{return Me(t,e,n,r,i,o,a,s)}catch(t){if(Ee(u),t!==t+0)throw t;Se(1,0)}},_:function(t,e,n,r,i,o,a){var s=Ae();try{return ke(t,e,n,r,i,o,a)}catch(t){if(Ee(s),t!==t+0)throw t;Se(1,0)}},Z:function(t,e,n,r,i){var o=Ae();try{return Ue(t,e,n,r,i)}catch(t){if(Ee(o),t!==t+0)throw t;Se(1,0)}},ca:function(t,e,n,r){var i=Ae();try{return Re(t,e,n,r)}catch(t){if(Ee(i),t!==t+0)throw t;Se(1,0)}},$:function(t){var e=Ae();try{return $e(t)}catch(t){if(Ee(e),t!==t+0)throw t;Se(1,0)}},ba:function(t,e){var n=Ae();try{return je(t,e)}catch(t){if(Ee(n),t!==t+0)throw t;Se(1,0)}},Y:function(t,e,n){var r=Ae();try{return Ce(t,e,n)}catch(t){if(Ee(r),t!==t+0)throw t;Se(1,0)}},g:function(t){var e=Ae();try{yt(t)()}catch(t){if(Ee(e),t!==t+0)throw t;Se(1,0)}},r:function(t,e){var n=Ae();try{yt(t)(e)}catch(t){if(Ee(n),t!==t+0)throw t;Se(1,0)}},i:function(t,e,n){var r=Ae();try{yt(t)(e,n)}catch(t){if(Ee(r),t!==t+0)throw t;Se(1,0)}},ha:function(t,e,n,r){var i=Ae();try{yt(t)(e,n,r)}catch(t){if(Ee(i),t!==t+0)throw t;Se(1,0)}},m:function(t,e,n,r){var i=Ae();try{yt(t)(e,n,r)}catch(t){if(Ee(i),t!==t+0)throw t;Se(1,0)}},v:function(t,e,n,r,i){var o=Ae();try{yt(t)(e,n,r,i)}catch(t){if(Ee(o),t!==t+0)throw t;Se(1,0)}},u:function(t,e,n,r,i,o){var a=Ae();try{yt(t)(e,n,r,i,o)}catch(t){if(Ee(a),t!==t+0)throw t;Se(1,0)}},O:function(t,e,n,r,i,o,a){var s=Ae();try{yt(t)(e,n,r,i,o,a)}catch(t){if(Ee(s),t!==t+0)throw t;Se(1,0)}},A:function(t,e,n,r,i,o,a,s){var u=Ae();try{yt(t)(e,n,r,i,o,a,s)}catch(t){if(Ee(u),t!==t+0)throw t;Se(1,0)}},ka:function(t,e,n,r,i,o,a,s,u){var c=Ae();try{yt(t)(e,n,r,i,o,a,s,u)}catch(t){if(Ee(c),t!==t+0)throw t;Se(1,0)}},C:function(t,e,n,r,i,o,a,s,u,c,l){var p=Ae();try{yt(t)(e,n,r,i,o,a,s,u,c,l)}catch(t){if(Ee(p),t!==t+0)throw t;Se(1,0)}},D:function(t,e,n,r,i,o,a,s,u,c,l,p,f,d,h,g){var b=Ae();try{yt(t)(e,n,r,i,o,a,s,u,c,l,p,f,d,h,g)}catch(t){if(Ee(b),t!==t+0)throw t;Se(1,0)}},fa:function(t,e,n,r,i,o,a,s){var u=Ae();try{Fe(t,e,n,r,i,o,a,s)}catch(t){if(Ee(u),t!==t+0)throw t;Se(1,0)}},da:function(t,e,n,r,i,o,a,s,u,c,l,p){var f=Ae();try{Le(t,e,n,r,i,o,a,s,u,c,l,p)}catch(t){if(Ee(f),t!==t+0)throw t;Se(1,0)}},ea:function(t,e,n,r,i,o){var a=Ae();try{Ne(t,e,n,r,i,o)}catch(t){if(Ee(a),t!==t+0)throw t;Se(1,0)}},o:function(t){return t},a:$||s.wasmMemory,G:function(t){ae=t},la:le,z:function(t,e,n,r){return le(t,e,n,r)}};!function(){function t(t,e){s.asm=t.exports,dt.qc.push(s.asm.sb),q=s.asm.ub,Y.unshift(s.asm.Va),k=e,x||(et--,s.monitorRunDependencies&&s.monitorRunDependencies(et),0==et&&(null!==nt&&(clearInterval(nt),nt=null),rt&&(t=rt,rt=null,t())))}function e(e){t(e.instance,e.module)}function n(t){return function(){if(!E&&(_||v)){if(\"function\"==typeof fetch&&!tt.startsWith(\"file://\"))return fetch(tt,{credentials:\"same-origin\"}).then((function(t){if(!t.ok)throw\"failed to load wasm binary file at '\"+tt+\"'\";return t.arrayBuffer()})).catch((function(){return at()}));if(p)return new Promise((function(t,e){p(tt,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return at()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){P(\"failed to asynchronously prepare wasm: \"+t),it(t)}))}var r={a:fe};if(x||(et++,s.monitorRunDependencies&&s.monitorRunDependencies(et)),s.instantiateWasm)try{return s.instantiateWasm(r,t)}catch(t){return P(\"Module.instantiateWasm callback failed with error: \"+t),!1}(E||\"function\"!=typeof WebAssembly.instantiateStreaming||ot()||tt.startsWith(\"file://\")||w||\"function\"!=typeof fetch?n(e):fetch(tt,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(e,(function(t){return P(\"wasm streaming compile failed: \"+t),P(\"falling back to ArrayBuffer instantiation\"),n(e)}))}))).catch(c)}(),s.___wasm_call_ctors=function(){return(s.___wasm_call_ctors=s.asm.Va).apply(null,arguments)},s._OrtInit=function(){return(s._OrtInit=s.asm.Wa).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.Xa).apply(null,arguments)},s._OrtAppendExecutionProvider=function(){return(s._OrtAppendExecutionProvider=s.asm.Ya).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.Za).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm._a).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.$a).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.ab).apply(null,arguments)},s._OrtGetInputCount=function(){return(s._OrtGetInputCount=s.asm.bb).apply(null,arguments)},s._OrtGetOutputCount=function(){return(s._OrtGetOutputCount=s.asm.cb).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.db).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.eb).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.fb).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.gb).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.hb).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.ib).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.jb).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.kb).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.lb).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.mb).apply(null,arguments)},s._OrtEndProfiling=function(){return(s._OrtEndProfiling=s.asm.nb).apply(null,arguments)};var de=s._pthread_self=function(){return(de=s._pthread_self=s.asm.ob).apply(null,arguments)},he=s._malloc=function(){return(he=s._malloc=s.asm.pb).apply(null,arguments)},ge=s._free=function(){return(ge=s._free=s.asm.qb).apply(null,arguments)},be=s._fflush=function(){return(be=s._fflush=s.asm.rb).apply(null,arguments)};s.__emscripten_tls_init=function(){return(s.__emscripten_tls_init=s.asm.sb).apply(null,arguments)};var me=s.___funcs_on_exit=function(){return(me=s.___funcs_on_exit=s.asm.tb).apply(null,arguments)},ye=s.__emscripten_thread_init=function(){return(ye=s.__emscripten_thread_init=s.asm.vb).apply(null,arguments)};s.__emscripten_thread_crashed=function(){return(s.__emscripten_thread_crashed=s.asm.wb).apply(null,arguments)};var _e,ve=s._emscripten_run_in_main_runtime_thread_js=function(){return(ve=s._emscripten_run_in_main_runtime_thread_js=s.asm.xb).apply(null,arguments)},we=s.__emscripten_proxy_execute_task_queue=function(){return(we=s.__emscripten_proxy_execute_task_queue=s.asm.yb).apply(null,arguments)},xe=s.__emscripten_thread_free_data=function(){return(xe=s.__emscripten_thread_free_data=s.asm.zb).apply(null,arguments)},Te=s.__emscripten_thread_exit=function(){return(Te=s.__emscripten_thread_exit=s.asm.Ab).apply(null,arguments)},Se=s._setThrew=function(){return(Se=s._setThrew=s.asm.Bb).apply(null,arguments)},Oe=s._emscripten_stack_set_limits=function(){return(Oe=s._emscripten_stack_set_limits=s.asm.Cb).apply(null,arguments)},Ae=s.stackSave=function(){return(Ae=s.stackSave=s.asm.Db).apply(null,arguments)},Ee=s.stackRestore=function(){return(Ee=s.stackRestore=s.asm.Eb).apply(null,arguments)},Ie=s.stackAlloc=function(){return(Ie=s.stackAlloc=s.asm.Fb).apply(null,arguments)},Pe=s.___cxa_can_catch=function(){return(Pe=s.___cxa_can_catch=s.asm.Gb).apply(null,arguments)},De=s.___cxa_is_pointer_type=function(){return(De=s.___cxa_is_pointer_type=s.asm.Hb).apply(null,arguments)},$e=s.dynCall_j=function(){return($e=s.dynCall_j=s.asm.Ib).apply(null,arguments)},ke=s.dynCall_iiiiij=function(){return(ke=s.dynCall_iiiiij=s.asm.Jb).apply(null,arguments)},Ce=s.dynCall_jii=function(){return(Ce=s.dynCall_jii=s.asm.Kb).apply(null,arguments)},Fe=s.dynCall_viiiiij=function(){return(Fe=s.dynCall_viiiiij=s.asm.Lb).apply(null,arguments)},Ne=s.dynCall_vjji=function(){return(Ne=s.dynCall_vjji=s.asm.Mb).apply(null,arguments)},Le=s.dynCall_viiijjjii=function(){return(Le=s.dynCall_viiijjjii=s.asm.Nb).apply(null,arguments)},Re=s.dynCall_iij=function(){return(Re=s.dynCall_iij=s.asm.Ob).apply(null,arguments)},je=s.dynCall_ji=function(){return(je=s.dynCall_ji=s.asm.Pb).apply(null,arguments)},Me=s.dynCall_iiiiiij=function(){return(Me=s.dynCall_iiiiiij=s.asm.Qb).apply(null,arguments)},Ue=s.dynCall_iiij=function(){return(Ue=s.dynCall_iiij=s.asm.Rb).apply(null,arguments)};function Ve(){function t(){if(!_e&&(_e=!0,s.calledRun=!0,!M)&&(x||ht(Y),u(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!x)){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var t=s.postRun.shift();Z.unshift(t)}ht(Z)}}if(!(0<et))if(x)u(s),x||ht(Y),postMessage({cmd:\"loaded\"});else{if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)Q();ht(X),0<et||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){s.setStatus(\"\")}),1),t()}),1)):t())}}if(s.UTF8ToString=B,s.stringToUTF8=function(t,e,n){return z(t,r(),e,n)},s.lengthBytesUTF8=G,s.keepRuntimeAlive=J,s.wasmMemory=$,s.stackSave=Ae,s.stackRestore=Ee,s.stackAlloc=Ie,s.ExitStatus=ut,s.PThread=dt,rt=function t(){_e||Ve(),_e||(rt=t)},s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Ve(),t.ready});t.exports=r},932:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\"/index.js\",function(t){var e,r,i;t=t||{},e||(e=void 0!==t?t:{}),e.ready=new Promise((function(t,e){r=t,i=e}));var o,a,s,u,c,l,p=Object.assign({},e),f=\"./this.program\",d=(t,e)=>{throw e},h=\"object\"==typeof window,g=\"function\"==typeof importScripts,b=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,m=\"\";b?(m=g?n(908).dirname(m)+\"/\":\"//\",l=()=>{c||(u=n(1384),c=n(908))},o=function(t,e){return l(),t=c.normalize(t),u.readFileSync(t,e?void 0:\"utf8\")},s=t=>((t=o(t,!0)).buffer||(t=new Uint8Array(t)),t),a=(t,e,n)=>{l(),t=c.normalize(t),u.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(f=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(t){if(!(t instanceof K))throw t})),process.on(\"unhandledRejection\",(function(t){throw t})),d=(t,e)=>{if(w||0<U)throw process.exitCode=t,e;e instanceof K||v(\"exiting due to exception: \"+e),process.exit(t)},e.inspect=function(){return\"[Emscripten Module object]\"}):(h||g)&&(g?m=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(m=document.currentScript.src),_scriptDir&&(m=_scriptDir),m=0!==m.indexOf(\"blob:\")?m.substr(0,m.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",o=t=>{var e=new XMLHttpRequest;return e.open(\"GET\",t,!1),e.send(null),e.responseText},g&&(s=t=>{var e=new XMLHttpRequest;return e.open(\"GET\",t,!1),e.responseType=\"arraybuffer\",e.send(null),new Uint8Array(e.response)}),a=(t,e,n)=>{var r=new XMLHttpRequest;r.open(\"GET\",t,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)});var y,_=e.print||console.log.bind(console),v=e.printErr||console.warn.bind(console);Object.assign(e,p),p=null,e.thisProgram&&(f=e.thisProgram),e.quit&&(d=e.quit),e.wasmBinary&&(y=e.wasmBinary);var w=e.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&W(\"no native wasm support detected\");var x,T,S,O,A,E,I=!1,P=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function D(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&P)return P.decode(t.subarray(e,n));for(r=\"\";e<n;){var i=t[e++];if(128&i){var o=63&t[e++];if(192==(224&i))r+=String.fromCharCode((31&i)<<6|o);else{var a=63&t[e++];65536>(i=224==(240&i)?(15&i)<<12|o<<6|a:(7&i)<<18|o<<12|a<<6|63&t[e++])?r+=String.fromCharCode(i):(i-=65536,r+=String.fromCharCode(55296|i>>10,56320|1023&i))}}else r+=String.fromCharCode(i)}return r}function $(t,e){return(t>>>=0)?D(O,t,e):\"\"}function k(t,e,n,r){if(!(0<r))return 0;var i=n>>>=0;r=n+r-1;for(var o=0;o<t.length;++o){var a=t.charCodeAt(o);if(55296<=a&&57343>=a&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++o)),127>=a){if(n>=r)break;e[n++>>>0]=a}else{if(2047>=a){if(n+1>=r)break;e[n++>>>0]=192|a>>6}else{if(65535>=a){if(n+2>=r)break;e[n++>>>0]=224|a>>12}else{if(n+3>=r)break;e[n++>>>0]=240|a>>18,e[n++>>>0]=128|a>>12&63}e[n++>>>0]=128|a>>6&63}e[n++>>>0]=128|63&a}}return e[n>>>0]=0,n-i}function C(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function F(){var t=x.buffer;T=t,e.HEAP8=S=new Int8Array(t),e.HEAP16=new Int16Array(t),e.HEAP32=A=new Int32Array(t),e.HEAPU8=O=new Uint8Array(t),e.HEAPU16=new Uint16Array(t),e.HEAPU32=E=new Uint32Array(t),e.HEAPF32=new Float32Array(t),e.HEAPF64=new Float64Array(t)}var N,L=[],R=[],j=[],M=[],U=0;function V(){var t=e.preRun.shift();L.unshift(t)}var B,z=0,G=null,H=null;function W(t){throw e.onAbort&&e.onAbort(t),v(t=\"Aborted(\"+t+\")\"),I=!0,t=new WebAssembly.RuntimeError(t+\". Build with -sASSERTIONS for more info.\"),i(t),t}function q(){return B.startsWith(\"data:application/octet-stream;base64,\")}if(B=\"ort-wasm.wasm\",!q()){var X=B;B=e.locateFile?e.locateFile(X,m):m+X}function Y(){var t=B;try{if(t==B&&y)return new Uint8Array(y);if(s)return s(t);throw\"both async and sync fetching of the wasm failed\"}catch(t){W(t)}}function K(t){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+t+\")\",this.status=t}function Z(t){for(;0<t.length;)t.shift()(e)}var J=[],Q=0,tt=0;function et(t){this.Db=t,this.zb=t-24,this.Ub=function(t){E[this.zb+4>>2>>>0]=t},this.Eb=function(){return E[this.zb+4>>2>>>0]},this.Sb=function(t){E[this.zb+8>>2>>>0]=t},this.Wb=function(){return E[this.zb+8>>2>>>0]},this.Tb=function(){A[this.zb>>2>>>0]=0},this.Ib=function(t){S[this.zb+12>>0>>>0]=t?1:0},this.Pb=function(){return 0!=S[this.zb+12>>0>>>0]},this.Jb=function(t){S[this.zb+13>>0>>>0]=t?1:0},this.Lb=function(){return 0!=S[this.zb+13>>0>>>0]},this.Rb=function(t,e){this.Fb(0),this.Ub(t),this.Sb(e),this.Tb(),this.Ib(!1),this.Jb(!1)},this.Nb=function(){A[this.zb>>2>>>0]+=1},this.Xb=function(){var t=A[this.zb>>2>>>0];return A[this.zb>>2>>>0]=t-1,1===t},this.Fb=function(t){E[this.zb+16>>2>>>0]=t},this.Ob=function(){return E[this.zb+16>>2>>>0]},this.Qb=function(){if(Et(this.Eb()))return E[this.Db>>2>>>0];var t=this.Ob();return 0!==t?t:this.Db}}function nt(t){return _t(new et(t).zb)}var rt=[];function it(t){var e=rt[t];return e||(t>=rt.length&&(rt.length=t+1),rt[t]=e=N.get(t)),e}function ot(t){var e=C(t)+1,n=yt(e);return n&&k(t,S,n,e),n}var at={};function st(){if(!ut){var t,e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:f||\"./this.program\"};for(t in at)void 0===at[t]?delete e[t]:e[t]=at[t];var n=[];for(t in e)n.push(t+\"=\"+e[t]);ut=n}return ut}var ut,ct=[null,[],[]];function lt(t,e){var n=ct[t];0===e||10===e?((1===t?_:v)(D(n,0)),n.length=0):n.push(e)}var pt=0;function ft(t){return 0==t%4&&(0!=t%100||0==t%400)}var dt=[31,29,31,30,31,30,31,31,30,31,30,31],ht=[31,28,31,30,31,30,31,31,30,31,30,31];function gt(t,e,n,r){function i(t,e,n){for(t=\"number\"==typeof t?t.toString():t||\"\";t.length<e;)t=n[0]+t;return t}function o(t,e){return i(t,e,\"0\")}function a(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function s(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function u(t){var e=t.Bb;for(t=new Date(new Date(t.Cb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(ft(t.getFullYear())?dt:ht)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=s(new Date(t.getFullYear(),0,4)),n=s(n),0>=a(e,t)?0>=a(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var c=A[r+40>>2>>>0];for(var l in r={$b:A[r>>2>>>0],Zb:A[r+4>>2>>>0],Gb:A[r+8>>2>>>0],Kb:A[r+12>>2>>>0],Hb:A[r+16>>2>>>0],Cb:A[r+20>>2>>>0],Ab:A[r+24>>2>>>0],Bb:A[r+28>>2>>>0],bc:A[r+32>>2>>>0],Yb:A[r+36>>2>>>0],ac:c?$(c):\"\"},n=$(n),c={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})n=n.replace(new RegExp(l,\"g\"),c[l]);var p=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),f=\"January February March April May June July August September October November December\".split(\" \");for(l in c={\"%a\":function(t){return p[t.Ab].substring(0,3)},\"%A\":function(t){return p[t.Ab]},\"%b\":function(t){return f[t.Hb].substring(0,3)},\"%B\":function(t){return f[t.Hb]},\"%C\":function(t){return o((t.Cb+1900)/100|0,2)},\"%d\":function(t){return o(t.Kb,2)},\"%e\":function(t){return i(t.Kb,2,\" \")},\"%g\":function(t){return u(t).toString().substring(2)},\"%G\":function(t){return u(t)},\"%H\":function(t){return o(t.Gb,2)},\"%I\":function(t){return 0==(t=t.Gb)?t=12:12<t&&(t-=12),o(t,2)},\"%j\":function(t){for(var e=0,n=0;n<=t.Hb-1;e+=(ft(t.Cb+1900)?dt:ht)[n++]);return o(t.Kb+e,3)},\"%m\":function(t){return o(t.Hb+1,2)},\"%M\":function(t){return o(t.Zb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(t){return 0<=t.Gb&&12>t.Gb?\"AM\":\"PM\"},\"%S\":function(t){return o(t.$b,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(t){return t.Ab||7},\"%U\":function(t){return o(Math.floor((t.Bb+7-t.Ab)/7),2)},\"%V\":function(t){var e=Math.floor((t.Bb+7-(t.Ab+6)%7)/7);if(2>=(t.Ab+371-t.Bb-2)%7&&e++,e)53==e&&(4==(n=(t.Ab+371-t.Bb)%7)||3==n&&ft(t.Cb)||(e=1));else{e=52;var n=(t.Ab+7-t.Bb-1)%7;(4==n||5==n&&ft(t.Cb%400-1))&&e++}return o(e,2)},\"%w\":function(t){return t.Ab},\"%W\":function(t){return o(Math.floor((t.Bb+7-(t.Ab+6)%7)/7),2)},\"%y\":function(t){return(t.Cb+1900).toString().substring(2)},\"%Y\":function(t){return t.Cb+1900},\"%z\":function(t){var e=0<=(t=t.Yb);return t=Math.abs(t)/60,(e?\"+\":\"-\")+String(\"0000\"+(t/60*100+t%60)).slice(-4)},\"%Z\":function(t){return t.ac},\"%%\":function(){return\"%\"}},n=n.replace(/%%/g,\"\\0\\0\"),c)n.includes(l)&&(n=n.replace(new RegExp(l,\"g\"),c[l](r)));return l=function(t){var e=Array(C(t)+1);return k(t,e,0,e.length),e}(n=n.replace(/\\0\\0/g,\"%\")),l.length>e?0:(S.set(l,t>>>0),l.length-1)}var bt={a:function(t){return yt(t+24)+24},m:function(t){return(t=new et(t)).Pb()||(t.Ib(!0),Q--),t.Jb(!1),J.push(t),t.Nb(),t.Qb()},ia:function(t){throw v(\"Unexpected exception thrown, this is not properly supported - aborting\"),I=!0,t},w:function(){xt(0);var t=J.pop();if(t.Xb()&&!t.Lb()){var e=t.Wb();e&&it(e)(t.Db),nt(t.Db)}tt=0},d:function(){var t=tt;if(!t)return pt=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return pt=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var o=r[i];if(0===o||o===n)break;if(At(o,n,e.zb+16))return pt=o,t}return pt=n,t},k:function(){var t=tt;if(!t)return pt=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return pt=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var o=r[i];if(0===o||o===n)break;if(At(o,n,e.zb+16))return pt=o,t}return pt=n,t},g:function(){var t=tt;if(!t)return pt=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return pt=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var o=r[i];if(0===o||o===n)break;if(At(o,n,e.zb+16))return pt=o,t}return pt=n,t},s:nt,L:function(){var t=J.pop();t||W(\"no exception to throw\");var e=t.Db;throw t.Lb()||(J.push(t),t.Jb(!0),t.Ib(!1),Q++),tt=e,e},b:function(t,e,n){throw new et(t).Rb(e,n),tt=t,Q++,t},la:function(){return Q},i:function(t){throw tt||(tt=t),t},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},Ha:function(){},Ja:function(){W(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Ia:function(){W(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(t,e){t=new Date(1e3*(E[t>>>2]+4294967296*A[t+4>>>2])),A[e>>2>>>0]=t.getUTCSeconds(),A[e+4>>2>>>0]=t.getUTCMinutes(),A[e+8>>2>>>0]=t.getUTCHours(),A[e+12>>2>>>0]=t.getUTCDate(),A[e+16>>2>>>0]=t.getUTCMonth(),A[e+20>>2>>>0]=t.getUTCFullYear()-1900,A[e+24>>2>>>0]=t.getUTCDay(),A[e+28>>2>>>0]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},Ea:function(t,e){t=new Date(1e3*(E[t>>>2]+4294967296*A[t+4>>>2])),A[e>>2>>>0]=t.getSeconds(),A[e+4>>2>>>0]=t.getMinutes(),A[e+8>>2>>>0]=t.getHours(),A[e+12>>2>>>0]=t.getDate(),A[e+16>>2>>>0]=t.getMonth(),A[e+20>>2>>>0]=t.getFullYear()-1900,A[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1);A[e+28>>2>>>0]=(t.getTime()-n.getTime())/864e5|0,A[e+36>>2>>>0]=-60*t.getTimezoneOffset();var r=new Date(t.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),A[e+32>>2>>>0]=0|(r!=n&&t.getTimezoneOffset()==Math.min(n,r))},Fa:function(t){var e=new Date(A[t+20>>2>>>0]+1900,A[t+16>>2>>>0],A[t+12>>2>>>0],A[t+8>>2>>>0],A[t+4>>2>>>0],A[t>>2>>>0],0),n=A[t+32>>2>>>0],r=e.getTimezoneOffset(),i=new Date(e.getFullYear(),0,1),o=new Date(e.getFullYear(),6,1).getTimezoneOffset(),a=i.getTimezoneOffset(),s=Math.min(a,o);return 0>n?A[t+32>>2>>>0]=Number(o!=a&&s==r):0<n!=(s==r)&&(o=Math.max(a,o),e.setTime(e.getTime()+6e4*((0<n?s:o)-r))),A[t+24>>2>>>0]=e.getDay(),A[t+28>>2>>>0]=(e.getTime()-i.getTime())/864e5|0,A[t>>2>>>0]=e.getSeconds(),A[t+4>>2>>>0]=e.getMinutes(),A[t+8>>2>>>0]=e.getHours(),A[t+12>>2>>>0]=e.getDate(),A[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},sa:function(){return-52},ta:function(){},Ga:function t(e,n,r){t.Vb||(t.Vb=!0,function(t,e,n){function r(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:\"GMT\"}var i=(new Date).getFullYear(),o=new Date(i,0,1),a=new Date(i,6,1);i=o.getTimezoneOffset();var s=a.getTimezoneOffset();A[t>>2>>>0]=60*Math.max(i,s),A[e>>2>>>0]=Number(i!=s),t=r(o),e=r(a),t=ot(t),e=ot(e),s<i?(E[n>>2>>>0]=t,E[n+4>>2>>>0]=e):(E[n>>2>>>0]=e,E[n+4>>2>>>0]=t)}(e,n,r))},B:function(){W(\"\")},ma:function(){return 4294901760},I:b?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:()=>performance.now(),xa:function(t,e,n){O.copyWithin(t>>>0,e>>>0,e+n>>>0)},G:function(t){var e=O.length;if(4294901760<(t>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=e*(1+.2/n);r=Math.min(r,t+100663296);var i=Math;r=Math.max(t,r),i=i.min.call(i,4294901760,r+(65536-r%65536)%65536);t:{try{x.grow(i-T.byteLength+65535>>>16),F();var o=1;break t}catch(t){}o=void 0}if(o)return!0}return!1},va:function(t,e){var n=0;return st().forEach((function(r,i){var o=e+n;for(i=E[t+4*i>>2>>>0]=o,o=0;o<r.length;++o)S[i++>>0>>>0]=r.charCodeAt(o);S[i>>0>>>0]=0,n+=r.length+1})),0},wa:function(t,e){var n=st();E[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),E[e>>2>>>0]=r,0},ba:function(t){w||0<U||(wt(),Z(j),vt(0),ct[1].length&&lt(1,10),ct[2].length&&lt(2,10)),w||0<U||(e.onExit&&e.onExit(t),I=!0),d(t,new K(t))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(t,e,n,r){for(var i=0,o=0;o<n;o++){var a=E[e>>2>>>0],s=E[e+4>>2>>>0];e+=8;for(var u=0;u<s;u++)lt(t,O[a+u>>>0]);i+=s}return E[r>>2>>>0]=i,0},c:function(){return pt},ja:function t(e,r){t.Mb||(t.Mb=function(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(b)try{var e=n(Object(function(){var t=new Error(\"Cannot find module 'crypto'\");throw t.code=\"MODULE_NOT_FOUND\",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>W(\"randomDevice\")}());for(var i=0;i<r;i++)S[e+i>>0>>>0]=t.Mb();return 0},ea:function(t,e,n){var r=Tt();try{return it(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;xt(1,0)}},fa:function(t,e,n){var r=Tt();try{return it(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;xt(1,0)}},J:function(t){var e=Tt();try{return it(t)()}catch(t){if(St(e),t!==t+0)throw t;xt(1,0)}},e:function(t,e){var n=Tt();try{return it(t)(e)}catch(t){if(St(n),t!==t+0)throw t;xt(1,0)}},N:function(t,e,n){var r=Tt();try{return it(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;xt(1,0)}},O:function(t,e,n){var r=Tt();try{return it(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;xt(1,0)}},j:function(t,e,n){var r=Tt();try{return it(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;xt(1,0)}},o:function(t,e,n,r){var i=Tt();try{return it(t)(e,n,r)}catch(t){if(St(i),t!==t+0)throw t;xt(1,0)}},p:function(t,e,n,r,i){var o=Tt();try{return it(t)(e,n,r,i)}catch(t){if(St(o),t!==t+0)throw t;xt(1,0)}},M:function(t,e,n,r,i,o){var a=Tt();try{return it(t)(e,n,r,i,o)}catch(t){if(St(a),t!==t+0)throw t;xt(1,0)}},r:function(t,e,n,r,i,o){var a=Tt();try{return it(t)(e,n,r,i,o)}catch(t){if(St(a),t!==t+0)throw t;xt(1,0)}},v:function(t,e,n,r,i,o,a){var s=Tt();try{return it(t)(e,n,r,i,o,a)}catch(t){if(St(s),t!==t+0)throw t;xt(1,0)}},K:function(t,e,n,r,i,o,a,s){var u=Tt();try{return it(t)(e,n,r,i,o,a,s)}catch(t){if(St(u),t!==t+0)throw t;xt(1,0)}},D:function(t,e,n,r,i,o,a,s,u,c,l,p){var f=Tt();try{return it(t)(e,n,r,i,o,a,s,u,c,l,p)}catch(t){if(St(f),t!==t+0)throw t;xt(1,0)}},X:function(t,e,n,r,i,o,a,s){var u=Tt();try{return Lt(t,e,n,r,i,o,a,s)}catch(t){if(St(u),t!==t+0)throw t;xt(1,0)}},V:function(t,e,n,r,i,o,a){var s=Tt();try{return Pt(t,e,n,r,i,o,a)}catch(t){if(St(s),t!==t+0)throw t;xt(1,0)}},U:function(t,e,n,r,i){var o=Tt();try{return Rt(t,e,n,r,i)}catch(t){if(St(o),t!==t+0)throw t;xt(1,0)}},Z:function(t,e,n,r){var i=Tt();try{return Ft(t,e,n,r)}catch(t){if(St(i),t!==t+0)throw t;xt(1,0)}},W:function(t){var e=Tt();try{return It(t)}catch(t){if(St(e),t!==t+0)throw t;xt(1,0)}},Y:function(t,e){var n=Tt();try{return Nt(t,e)}catch(t){if(St(n),t!==t+0)throw t;xt(1,0)}},T:function(t,e,n){var r=Tt();try{return Dt(t,e,n)}catch(t){if(St(r),t!==t+0)throw t;xt(1,0)}},f:function(t){var e=Tt();try{it(t)()}catch(t){if(St(e),t!==t+0)throw t;xt(1,0)}},q:function(t,e){var n=Tt();try{it(t)(e)}catch(t){if(St(n),t!==t+0)throw t;xt(1,0)}},h:function(t,e,n){var r=Tt();try{it(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;xt(1,0)}},da:function(t,e,n,r){var i=Tt();try{it(t)(e,n,r)}catch(t){if(St(i),t!==t+0)throw t;xt(1,0)}},l:function(t,e,n,r){var i=Tt();try{it(t)(e,n,r)}catch(t){if(St(i),t!==t+0)throw t;xt(1,0)}},t:function(t,e,n,r,i){var o=Tt();try{it(t)(e,n,r,i)}catch(t){if(St(o),t!==t+0)throw t;xt(1,0)}},u:function(t,e,n,r,i,o){var a=Tt();try{it(t)(e,n,r,i,o)}catch(t){if(St(a),t!==t+0)throw t;xt(1,0)}},x:function(t,e,n,r,i,o,a){var s=Tt();try{it(t)(e,n,r,i,o,a)}catch(t){if(St(s),t!==t+0)throw t;xt(1,0)}},z:function(t,e,n,r,i,o,a,s){var u=Tt();try{it(t)(e,n,r,i,o,a,s)}catch(t){if(St(u),t!==t+0)throw t;xt(1,0)}},ga:function(t,e,n,r,i,o,a,s,u){var c=Tt();try{it(t)(e,n,r,i,o,a,s,u)}catch(t){if(St(c),t!==t+0)throw t;xt(1,0)}},A:function(t,e,n,r,i,o,a,s,u,c,l){var p=Tt();try{it(t)(e,n,r,i,o,a,s,u,c,l)}catch(t){if(St(p),t!==t+0)throw t;xt(1,0)}},C:function(t,e,n,r,i,o,a,s,u,c,l,p,f,d,h,g){var b=Tt();try{it(t)(e,n,r,i,o,a,s,u,c,l,p,f,d,h,g)}catch(t){if(St(b),t!==t+0)throw t;xt(1,0)}},aa:function(t,e,n,r,i,o,a,s){var u=Tt();try{$t(t,e,n,r,i,o,a,s)}catch(t){if(St(u),t!==t+0)throw t;xt(1,0)}},_:function(t,e,n,r,i,o,a,s,u,c,l,p){var f=Tt();try{Ct(t,e,n,r,i,o,a,s,u,c,l,p)}catch(t){if(St(f),t!==t+0)throw t;xt(1,0)}},$:function(t,e,n,r,i,o){var a=Tt();try{kt(t,e,n,r,i,o)}catch(t){if(St(a),t!==t+0)throw t;xt(1,0)}},n:function(t){return t},F:function(t){pt=t},ha:gt,y:function(t,e,n,r){return gt(t,e,n,r)}};!function(){function t(t){e.asm=t.exports,x=e.asm.Ka,F(),N=e.asm.ib,R.unshift(e.asm.La),z--,e.monitorRunDependencies&&e.monitorRunDependencies(z),0==z&&(null!==G&&(clearInterval(G),G=null),H&&(t=H,H=null,t()))}function n(e){t(e.instance)}function r(t){return function(){if(!y&&(h||g)){if(\"function\"==typeof fetch&&!B.startsWith(\"file://\"))return fetch(B,{credentials:\"same-origin\"}).then((function(t){if(!t.ok)throw\"failed to load wasm binary file at '\"+B+\"'\";return t.arrayBuffer()})).catch((function(){return Y()}));if(a)return new Promise((function(t,e){a(B,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return Y()}))}().then((function(t){return WebAssembly.instantiate(t,o)})).then((function(t){return t})).then(t,(function(t){v(\"failed to asynchronously prepare wasm: \"+t),W(t)}))}var o={a:bt};if(z++,e.monitorRunDependencies&&e.monitorRunDependencies(z),e.instantiateWasm)try{return e.instantiateWasm(o,t)}catch(t){return v(\"Module.instantiateWasm callback failed with error: \"+t),!1}(y||\"function\"!=typeof WebAssembly.instantiateStreaming||q()||B.startsWith(\"file://\")||b||\"function\"!=typeof fetch?r(n):fetch(B,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,o).then(n,(function(t){return v(\"wasm streaming compile failed: \"+t),v(\"falling back to ArrayBuffer instantiation\"),r(n)}))}))).catch(i)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.La).apply(null,arguments)},e._OrtInit=function(){return(e._OrtInit=e.asm.Ma).apply(null,arguments)},e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.Na).apply(null,arguments)},e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.Oa).apply(null,arguments)},e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.Pa).apply(null,arguments)},e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.Qa).apply(null,arguments)},e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.Ra).apply(null,arguments)},e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.Sa).apply(null,arguments)},e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.Ta).apply(null,arguments)},e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.Ua).apply(null,arguments)},e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.Va).apply(null,arguments)},e._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.Wa).apply(null,arguments)},e._OrtFree=function(){return(e._OrtFree=e.asm.Xa).apply(null,arguments)},e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.Ya).apply(null,arguments)},e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.Za).apply(null,arguments)},e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm._a).apply(null,arguments)},e._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.$a).apply(null,arguments)},e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.ab).apply(null,arguments)},e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.bb).apply(null,arguments)},e._OrtRun=function(){return(e._OrtRun=e.asm.cb).apply(null,arguments)},e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.db).apply(null,arguments)};var mt,yt=e._malloc=function(){return(yt=e._malloc=e.asm.eb).apply(null,arguments)},_t=e._free=function(){return(_t=e._free=e.asm.fb).apply(null,arguments)},vt=e._fflush=function(){return(vt=e._fflush=e.asm.gb).apply(null,arguments)},wt=e.___funcs_on_exit=function(){return(wt=e.___funcs_on_exit=e.asm.hb).apply(null,arguments)},xt=e._setThrew=function(){return(xt=e._setThrew=e.asm.jb).apply(null,arguments)},Tt=e.stackSave=function(){return(Tt=e.stackSave=e.asm.kb).apply(null,arguments)},St=e.stackRestore=function(){return(St=e.stackRestore=e.asm.lb).apply(null,arguments)},Ot=e.stackAlloc=function(){return(Ot=e.stackAlloc=e.asm.mb).apply(null,arguments)},At=e.___cxa_can_catch=function(){return(At=e.___cxa_can_catch=e.asm.nb).apply(null,arguments)},Et=e.___cxa_is_pointer_type=function(){return(Et=e.___cxa_is_pointer_type=e.asm.ob).apply(null,arguments)},It=e.dynCall_j=function(){return(It=e.dynCall_j=e.asm.pb).apply(null,arguments)},Pt=e.dynCall_iiiiij=function(){return(Pt=e.dynCall_iiiiij=e.asm.qb).apply(null,arguments)},Dt=e.dynCall_jii=function(){return(Dt=e.dynCall_jii=e.asm.rb).apply(null,arguments)},$t=e.dynCall_viiiiij=function(){return($t=e.dynCall_viiiiij=e.asm.sb).apply(null,arguments)},kt=e.dynCall_vjji=function(){return(kt=e.dynCall_vjji=e.asm.tb).apply(null,arguments)},Ct=e.dynCall_viiijjjii=function(){return(Ct=e.dynCall_viiijjjii=e.asm.ub).apply(null,arguments)},Ft=e.dynCall_iij=function(){return(Ft=e.dynCall_iij=e.asm.vb).apply(null,arguments)},Nt=e.dynCall_ji=function(){return(Nt=e.dynCall_ji=e.asm.wb).apply(null,arguments)},Lt=e.dynCall_iiiiiij=function(){return(Lt=e.dynCall_iiiiiij=e.asm.xb).apply(null,arguments)},Rt=e.dynCall_iiij=function(){return(Rt=e.dynCall_iiij=e.asm.yb).apply(null,arguments)};function jt(){function t(){if(!mt&&(mt=!0,e.calledRun=!0,!I)){if(Z(R),r(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var t=e.postRun.shift();M.unshift(t)}Z(M)}}if(!(0<z)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)V();Z(L),0<z||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){e.setStatus(\"\")}),1),t()}),1)):t())}}if(e.UTF8ToString=$,e.stringToUTF8=function(t,e,n){return k(t,O,e,n)},e.lengthBytesUTF8=C,e.stackSave=Tt,e.stackRestore=St,e.stackAlloc=Ot,H=function t(){mt||jt(),mt||(H=t)},e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();return jt(),t.ready});t.exports=r},4537:t=>{\"use strict\";t.exports=function(t,e){for(var n=new Array(arguments.length-1),r=0,i=2,o=!0;i<arguments.length;)n[r++]=arguments[i++];return new Promise((function(i,a){n[r]=function(t){if(o)if(o=!1,t)a(t);else{for(var e=new Array(arguments.length-1),n=0;n<e.length;)e[n++]=arguments[n];i.apply(null,e)}};try{t.apply(e||null,n)}catch(t){o&&(o=!1,a(t))}}))}},7419:(t,e)=>{\"use strict\";var n=e;n.length=function(t){var e=t.length;if(!e)return 0;for(var n=0;--e%4>1&&\"=\"===t.charAt(e);)++n;return Math.ceil(3*t.length)/4-n};for(var r=new Array(64),i=new Array(123),o=0;o<64;)i[r[o]=o<26?o+65:o<52?o+71:o<62?o-4:o-59|43]=o++;n.encode=function(t,e,n){for(var i,o=null,a=[],s=0,u=0;e<n;){var c=t[e++];switch(u){case 0:a[s++]=r[c>>2],i=(3&c)<<4,u=1;break;case 1:a[s++]=r[i|c>>4],i=(15&c)<<2,u=2;break;case 2:a[s++]=r[i|c>>6],a[s++]=r[63&c],u=0}s>8191&&((o||(o=[])).push(String.fromCharCode.apply(String,a)),s=0)}return u&&(a[s++]=r[i],a[s++]=61,1===u&&(a[s++]=61)),o?(s&&o.push(String.fromCharCode.apply(String,a.slice(0,s))),o.join(\"\")):String.fromCharCode.apply(String,a.slice(0,s))};var a=\"invalid encoding\";n.decode=function(t,e,n){for(var r,o=n,s=0,u=0;u<t.length;){var c=t.charCodeAt(u++);if(61===c&&s>1)break;if(void 0===(c=i[c]))throw Error(a);switch(s){case 0:r=c,s=1;break;case 1:e[n++]=r<<2|(48&c)>>4,r=c,s=2;break;case 2:e[n++]=(15&r)<<4|(60&c)>>2,r=c,s=3;break;case 3:e[n++]=(3&r)<<6|c,s=0}}if(1===s)throw Error(a);return n-o},n.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)}},9211:t=>{\"use strict\";function e(){this._listeners={}}t.exports=e,e.prototype.on=function(t,e,n){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:e,ctx:n||this}),this},e.prototype.off=function(t,e){if(void 0===t)this._listeners={};else if(void 0===e)this._listeners[t]=[];else for(var n=this._listeners[t],r=0;r<n.length;)n[r].fn===e?n.splice(r,1):++r;return this},e.prototype.emit=function(t){var e=this._listeners[t];if(e){for(var n=[],r=1;r<arguments.length;)n.push(arguments[r++]);for(r=0;r<e.length;)e[r].fn.apply(e[r++].ctx,n)}return this}},945:t=>{\"use strict\";function e(t){return\"undefined\"!=typeof Float32Array?function(){var e=new Float32Array([-0]),n=new Uint8Array(e.buffer),r=128===n[3];function i(t,r,i){e[0]=t,r[i]=n[0],r[i+1]=n[1],r[i+2]=n[2],r[i+3]=n[3]}function o(t,r,i){e[0]=t,r[i]=n[3],r[i+1]=n[2],r[i+2]=n[1],r[i+3]=n[0]}function a(t,r){return n[0]=t[r],n[1]=t[r+1],n[2]=t[r+2],n[3]=t[r+3],e[0]}function s(t,r){return n[3]=t[r],n[2]=t[r+1],n[1]=t[r+2],n[0]=t[r+3],e[0]}t.writeFloatLE=r?i:o,t.writeFloatBE=r?o:i,t.readFloatLE=r?a:s,t.readFloatBE=r?s:a}():function(){function e(t,e,n,r){var i=e<0?1:0;if(i&&(e=-e),0===e)t(1/e>0?0:2147483648,n,r);else if(isNaN(e))t(2143289344,n,r);else if(e>34028234663852886e22)t((i<<31|2139095040)>>>0,n,r);else if(e<11754943508222875e-54)t((i<<31|Math.round(e/1401298464324817e-60))>>>0,n,r);else{var o=Math.floor(Math.log(e)/Math.LN2);t((i<<31|o+127<<23|8388607&Math.round(e*Math.pow(2,-o)*8388608))>>>0,n,r)}}function a(t,e,n){var r=t(e,n),i=2*(r>>31)+1,o=r>>>23&255,a=8388607&r;return 255===o?a?NaN:i*(1/0):0===o?1401298464324817e-60*i*a:i*Math.pow(2,o-150)*(a+8388608)}t.writeFloatLE=e.bind(null,n),t.writeFloatBE=e.bind(null,r),t.readFloatLE=a.bind(null,i),t.readFloatBE=a.bind(null,o)}(),\"undefined\"!=typeof Float64Array?function(){var e=new Float64Array([-0]),n=new Uint8Array(e.buffer),r=128===n[7];function i(t,r,i){e[0]=t,r[i]=n[0],r[i+1]=n[1],r[i+2]=n[2],r[i+3]=n[3],r[i+4]=n[4],r[i+5]=n[5],r[i+6]=n[6],r[i+7]=n[7]}function o(t,r,i){e[0]=t,r[i]=n[7],r[i+1]=n[6],r[i+2]=n[5],r[i+3]=n[4],r[i+4]=n[3],r[i+5]=n[2],r[i+6]=n[1],r[i+7]=n[0]}function a(t,r){return n[0]=t[r],n[1]=t[r+1],n[2]=t[r+2],n[3]=t[r+3],n[4]=t[r+4],n[5]=t[r+5],n[6]=t[r+6],n[7]=t[r+7],e[0]}function s(t,r){return n[7]=t[r],n[6]=t[r+1],n[5]=t[r+2],n[4]=t[r+3],n[3]=t[r+4],n[2]=t[r+5],n[1]=t[r+6],n[0]=t[r+7],e[0]}t.writeDoubleLE=r?i:o,t.writeDoubleBE=r?o:i,t.readDoubleLE=r?a:s,t.readDoubleBE=r?s:a}():function(){function e(t,e,n,r,i,o){var a=r<0?1:0;if(a&&(r=-r),0===r)t(0,i,o+e),t(1/r>0?0:2147483648,i,o+n);else if(isNaN(r))t(0,i,o+e),t(2146959360,i,o+n);else if(r>17976931348623157e292)t(0,i,o+e),t((a<<31|2146435072)>>>0,i,o+n);else{var s;if(r<22250738585072014e-324)t((s=r/5e-324)>>>0,i,o+e),t((a<<31|s/4294967296)>>>0,i,o+n);else{var u=Math.floor(Math.log(r)/Math.LN2);1024===u&&(u=1023),t(4503599627370496*(s=r*Math.pow(2,-u))>>>0,i,o+e),t((a<<31|u+1023<<20|1048576*s&1048575)>>>0,i,o+n)}}}function a(t,e,n,r,i){var o=t(r,i+e),a=t(r,i+n),s=2*(a>>31)+1,u=a>>>20&2047,c=4294967296*(1048575&a)+o;return 2047===u?c?NaN:s*(1/0):0===u?5e-324*s*c:s*Math.pow(2,u-1075)*(c+4503599627370496)}t.writeDoubleLE=e.bind(null,n,0,4),t.writeDoubleBE=e.bind(null,r,4,0),t.readDoubleLE=a.bind(null,i,0,4),t.readDoubleBE=a.bind(null,o,4,0)}(),t}function n(t,e,n){e[n]=255&t,e[n+1]=t>>>8&255,e[n+2]=t>>>16&255,e[n+3]=t>>>24}function r(t,e,n){e[n]=t>>>24,e[n+1]=t>>>16&255,e[n+2]=t>>>8&255,e[n+3]=255&t}function i(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0}function o(t,e){return(t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3])>>>0}t.exports=e(e)},7199:module=>{\"use strict\";function inquire(moduleName){try{var mod=eval(\"quire\".replace(/^/,\"re\"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(t){}return null}module.exports=inquire},6662:t=>{\"use strict\";t.exports=function(t,e,n){var r=n||8192,i=r>>>1,o=null,a=r;return function(n){if(n<1||n>i)return t(n);a+n>r&&(o=t(r),a=0);var s=e.call(o,a,a+=n);return 7&a&&(a=1+(7|a)),s}}},4997:(t,e)=>{\"use strict\";var n=e;n.length=function(t){for(var e=0,n=0,r=0;r<t.length;++r)(n=t.charCodeAt(r))<128?e+=1:n<2048?e+=2:55296==(64512&n)&&56320==(64512&t.charCodeAt(r+1))?(++r,e+=4):e+=3;return e},n.read=function(t,e,n){if(n-e<1)return\"\";for(var r,i=null,o=[],a=0;e<n;)(r=t[e++])<128?o[a++]=r:r>191&&r<224?o[a++]=(31&r)<<6|63&t[e++]:r>239&&r<365?(r=((7&r)<<18|(63&t[e++])<<12|(63&t[e++])<<6|63&t[e++])-65536,o[a++]=55296+(r>>10),o[a++]=56320+(1023&r)):o[a++]=(15&r)<<12|(63&t[e++])<<6|63&t[e++],a>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,o)),a=0);return i?(a&&i.push(String.fromCharCode.apply(String,o.slice(0,a))),i.join(\"\")):String.fromCharCode.apply(String,o.slice(0,a))},n.write=function(t,e,n){for(var r,i,o=n,a=0;a<t.length;++a)(r=t.charCodeAt(a))<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):55296==(64512&r)&&56320==(64512&(i=t.charCodeAt(a+1)))?(r=65536+((1023&r)<<10)+(1023&i),++a,e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128);return n-o}},3442:(t,e)=>{\"use strict\";e.__esModule=!0;var n=function(){function t(e){if(!e)throw new TypeError(\"Invalid argument; `value` has no value.\");this.value=t.EMPTY,e&&t.isGuid(e)&&(this.value=e)}return t.isGuid=function(e){var n=e.toString();return e&&(e instanceof t||t.validator.test(n))},t.create=function(){return new t([t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join(\"-\"))},t.createEmpty=function(){return new t(\"emptyguid\")},t.parse=function(e){return new t(e)},t.raw=function(){return[t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join(\"-\")},t.gen=function(t){for(var e=\"\",n=0;n<t;n++)e+=(65536*(1+Math.random())|0).toString(16).substring(1);return e},t.prototype.equals=function(e){return t.isGuid(e)&&this.value===e.toString()},t.prototype.isEmpty=function(){return this.value===t.EMPTY},t.prototype.toString=function(){return this.value},t.prototype.toJSON=function(){return{value:this.value}},t.validator=new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\",\"i\"),t.EMPTY=\"00000000-0000-0000-0000-000000000000\",t}();e.Guid=n},3720:t=>{t.exports=n;var e=null;try{e=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}function n(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function r(t){return!0===(t&&t.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,\"__isLong__\",{value:!0}),n.isLong=r;var i={},o={};function a(t,e){var n,r,a;return e?(a=0<=(t>>>=0)&&t<256)&&(r=o[t])?r:(n=u(t,(0|t)<0?-1:0,!0),a&&(o[t]=n),n):(a=-128<=(t|=0)&&t<128)&&(r=i[t])?r:(n=u(t,t<0?-1:0,!1),a&&(i[t]=n),n)}function s(t,e){if(isNaN(t))return e?m:b;if(e){if(t<0)return m;if(t>=d)return x}else{if(t<=-h)return T;if(t+1>=h)return w}return t<0?s(-t,e).neg():u(t%f|0,t/f|0,e)}function u(t,e,r){return new n(t,e,r)}n.fromInt=a,n.fromNumber=s,n.fromBits=u;var c=Math.pow;function l(t,e,n){if(0===t.length)throw Error(\"empty string\");if(\"NaN\"===t||\"Infinity\"===t||\"+Infinity\"===t||\"-Infinity\"===t)return b;if(\"number\"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError(\"radix\");var r;if((r=t.indexOf(\"-\"))>0)throw Error(\"interior hyphen\");if(0===r)return l(t.substring(1),e,n).neg();for(var i=s(c(n,8)),o=b,a=0;a<t.length;a+=8){var u=Math.min(8,t.length-a),p=parseInt(t.substring(a,a+u),n);if(u<8){var f=s(c(n,u));o=o.mul(f).add(s(p))}else o=(o=o.mul(i)).add(s(p))}return o.unsigned=e,o}function p(t,e){return\"number\"==typeof t?s(t,e):\"string\"==typeof t?l(t,e):u(t.low,t.high,\"boolean\"==typeof e?e:t.unsigned)}n.fromString=l,n.fromValue=p;var f=4294967296,d=f*f,h=d/2,g=a(1<<24),b=a(0);n.ZERO=b;var m=a(0,!0);n.UZERO=m;var y=a(1);n.ONE=y;var _=a(1,!0);n.UONE=_;var v=a(-1);n.NEG_ONE=v;var w=u(-1,2147483647,!1);n.MAX_VALUE=w;var x=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=x;var T=u(0,-2147483648,!1);n.MIN_VALUE=T;var S=n.prototype;S.toInt=function(){return this.unsigned?this.low>>>0:this.low},S.toNumber=function(){return this.unsigned?(this.high>>>0)*f+(this.low>>>0):this.high*f+(this.low>>>0)},S.toString=function(t){if((t=t||10)<2||36<t)throw RangeError(\"radix\");if(this.isZero())return\"0\";if(this.isNegative()){if(this.eq(T)){var e=s(t),n=this.div(e),r=n.mul(e).sub(this);return n.toString(t)+r.toInt().toString(t)}return\"-\"+this.neg().toString(t)}for(var i=s(c(t,6),this.unsigned),o=this,a=\"\";;){var u=o.div(i),l=(o.sub(u.mul(i)).toInt()>>>0).toString(t);if((o=u).isZero())return l+a;for(;l.length<6;)l=\"0\"+l;a=\"\"+l+a}},S.getHighBits=function(){return this.high},S.getHighBitsUnsigned=function(){return this.high>>>0},S.getLowBits=function(){return this.low},S.getLowBitsUnsigned=function(){return this.low>>>0},S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(T)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},S.isZero=function(){return 0===this.high&&0===this.low},S.eqz=S.isZero,S.isNegative=function(){return!this.unsigned&&this.high<0},S.isPositive=function(){return this.unsigned||this.high>=0},S.isOdd=function(){return 1==(1&this.low)},S.isEven=function(){return 0==(1&this.low)},S.equals=function(t){return r(t)||(t=p(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},S.eq=S.equals,S.notEquals=function(t){return!this.eq(t)},S.neq=S.notEquals,S.ne=S.notEquals,S.lessThan=function(t){return this.comp(t)<0},S.lt=S.lessThan,S.lessThanOrEqual=function(t){return this.comp(t)<=0},S.lte=S.lessThanOrEqual,S.le=S.lessThanOrEqual,S.greaterThan=function(t){return this.comp(t)>0},S.gt=S.greaterThan,S.greaterThanOrEqual=function(t){return this.comp(t)>=0},S.gte=S.greaterThanOrEqual,S.ge=S.greaterThanOrEqual,S.compare=function(t){if(r(t)||(t=p(t)),this.eq(t))return 0;var e=this.isNegative(),n=t.isNegative();return e&&!n?-1:!e&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},S.comp=S.compare,S.negate=function(){return!this.unsigned&&this.eq(T)?T:this.not().add(y)},S.neg=S.negate,S.add=function(t){r(t)||(t=p(t));var e=this.high>>>16,n=65535&this.high,i=this.low>>>16,o=65535&this.low,a=t.high>>>16,s=65535&t.high,c=t.low>>>16,l=0,f=0,d=0,h=0;return d+=(h+=o+(65535&t.low))>>>16,f+=(d+=i+c)>>>16,l+=(f+=n+s)>>>16,l+=e+a,u((d&=65535)<<16|(h&=65535),(l&=65535)<<16|(f&=65535),this.unsigned)},S.subtract=function(t){return r(t)||(t=p(t)),this.add(t.neg())},S.sub=S.subtract,S.multiply=function(t){if(this.isZero())return b;if(r(t)||(t=p(t)),e)return u(e.mul(this.low,this.high,t.low,t.high),e.get_high(),this.unsigned);if(t.isZero())return b;if(this.eq(T))return t.isOdd()?T:b;if(t.eq(T))return this.isOdd()?T:b;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(g)&&t.lt(g))return s(this.toNumber()*t.toNumber(),this.unsigned);var n=this.high>>>16,i=65535&this.high,o=this.low>>>16,a=65535&this.low,c=t.high>>>16,l=65535&t.high,f=t.low>>>16,d=65535&t.low,h=0,m=0,y=0,_=0;return y+=(_+=a*d)>>>16,m+=(y+=o*d)>>>16,y&=65535,m+=(y+=a*f)>>>16,h+=(m+=i*d)>>>16,m&=65535,h+=(m+=o*f)>>>16,m&=65535,h+=(m+=a*l)>>>16,h+=n*d+i*f+o*l+a*c,u((y&=65535)<<16|(_&=65535),(h&=65535)<<16|(m&=65535),this.unsigned)},S.mul=S.multiply,S.divide=function(t){if(r(t)||(t=p(t)),t.isZero())throw Error(\"division by zero\");var n,i,o;if(e)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?u((this.unsigned?e.div_u:e.div_s)(this.low,this.high,t.low,t.high),e.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?m:b;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return m;if(t.gt(this.shru(1)))return _;o=m}else{if(this.eq(T))return t.eq(y)||t.eq(v)?T:t.eq(T)?y:(n=this.shr(1).div(t).shl(1)).eq(b)?t.isNegative()?y:v:(i=this.sub(t.mul(n)),o=n.add(i.div(t)));if(t.eq(T))return this.unsigned?m:b;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();o=b}for(i=this;i.gte(t);){n=Math.max(1,Math.floor(i.toNumber()/t.toNumber()));for(var a=Math.ceil(Math.log(n)/Math.LN2),l=a<=48?1:c(2,a-48),f=s(n),d=f.mul(t);d.isNegative()||d.gt(i);)d=(f=s(n-=l,this.unsigned)).mul(t);f.isZero()&&(f=y),o=o.add(f),i=i.sub(d)}return o},S.div=S.divide,S.modulo=function(t){return r(t)||(t=p(t)),e?u((this.unsigned?e.rem_u:e.rem_s)(this.low,this.high,t.low,t.high),e.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},S.mod=S.modulo,S.rem=S.modulo,S.not=function(){return u(~this.low,~this.high,this.unsigned)},S.and=function(t){return r(t)||(t=p(t)),u(this.low&t.low,this.high&t.high,this.unsigned)},S.or=function(t){return r(t)||(t=p(t)),u(this.low|t.low,this.high|t.high,this.unsigned)},S.xor=function(t){return r(t)||(t=p(t)),u(this.low^t.low,this.high^t.high,this.unsigned)},S.shiftLeft=function(t){return r(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?u(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):u(0,this.low<<t-32,this.unsigned)},S.shl=S.shiftLeft,S.shiftRight=function(t){return r(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?u(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):u(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},S.shr=S.shiftRight,S.shiftRightUnsigned=function(t){if(r(t)&&(t=t.toInt()),0==(t&=63))return this;var e=this.high;return t<32?u(this.low>>>t|e<<32-t,e>>>t,this.unsigned):u(32===t?e:e>>>t-32,0,this.unsigned)},S.shru=S.shiftRightUnsigned,S.shr_u=S.shiftRightUnsigned,S.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},S.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},S.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},S.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},S.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,e>>>24,e>>>16&255,e>>>8&255,255&e]},n.fromBytes=function(t,e,r){return r?n.fromBytesLE(t,e):n.fromBytesBE(t,e)},n.fromBytesLE=function(t,e){return new n(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)},n.fromBytesBE=function(t,e){return new n(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}},1446:(t,e,n)=>{\"use strict\";var r,i,o,a=n(2100),s=a.Reader,u=a.Writer,c=a.util,l=a.roots.default||(a.roots.default={});l.onnx=((o={}).Version=(r={},(i=Object.create(r))[r[0]=\"_START_VERSION\"]=0,i[r[1]=\"IR_VERSION_2017_10_10\"]=1,i[r[2]=\"IR_VERSION_2017_10_30\"]=2,i[r[3]=\"IR_VERSION_2017_11_3\"]=3,i[r[4]=\"IR_VERSION_2019_1_22\"]=4,i[r[5]=\"IR_VERSION\"]=5,i),o.AttributeProto=function(){function t(t){if(this.floats=[],this.ints=[],this.strings=[],this.tensors=[],this.graphs=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name=\"\",t.prototype.refAttrName=\"\",t.prototype.docString=\"\",t.prototype.type=0,t.prototype.f=0,t.prototype.i=c.Long?c.Long.fromBits(0,0,!1):0,t.prototype.s=c.newBuffer([]),t.prototype.t=null,t.prototype.g=null,t.prototype.floats=c.emptyArray,t.prototype.ints=c.emptyArray,t.prototype.strings=c.emptyArray,t.prototype.tensors=c.emptyArray,t.prototype.graphs=c.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=u.create()),null!=t.name&&t.hasOwnProperty(\"name\")&&e.uint32(10).string(t.name),null!=t.f&&t.hasOwnProperty(\"f\")&&e.uint32(21).float(t.f),null!=t.i&&t.hasOwnProperty(\"i\")&&e.uint32(24).int64(t.i),null!=t.s&&t.hasOwnProperty(\"s\")&&e.uint32(34).bytes(t.s),null!=t.t&&t.hasOwnProperty(\"t\")&&l.onnx.TensorProto.encode(t.t,e.uint32(42).fork()).ldelim(),null!=t.g&&t.hasOwnProperty(\"g\")&&l.onnx.GraphProto.encode(t.g,e.uint32(50).fork()).ldelim(),null!=t.floats&&t.floats.length){e.uint32(58).fork();for(var n=0;n<t.floats.length;++n)e.float(t.floats[n]);e.ldelim()}if(null!=t.ints&&t.ints.length){for(e.uint32(66).fork(),n=0;n<t.ints.length;++n)e.int64(t.ints[n]);e.ldelim()}if(null!=t.strings&&t.strings.length)for(n=0;n<t.strings.length;++n)e.uint32(74).bytes(t.strings[n]);if(null!=t.tensors&&t.tensors.length)for(n=0;n<t.tensors.length;++n)l.onnx.TensorProto.encode(t.tensors[n],e.uint32(82).fork()).ldelim();if(null!=t.graphs&&t.graphs.length)for(n=0;n<t.graphs.length;++n)l.onnx.GraphProto.encode(t.graphs[n],e.uint32(90).fork()).ldelim();return null!=t.docString&&t.hasOwnProperty(\"docString\")&&e.uint32(106).string(t.docString),null!=t.type&&t.hasOwnProperty(\"type\")&&e.uint32(160).int32(t.type),null!=t.refAttrName&&t.hasOwnProperty(\"refAttrName\")&&e.uint32(170).string(t.refAttrName),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.AttributeProto;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.name=t.string();break;case 21:r.refAttrName=t.string();break;case 13:r.docString=t.string();break;case 20:r.type=t.int32();break;case 2:r.f=t.float();break;case 3:r.i=t.int64();break;case 4:r.s=t.bytes();break;case 5:r.t=l.onnx.TensorProto.decode(t,t.uint32());break;case 6:r.g=l.onnx.GraphProto.decode(t,t.uint32());break;case 7:if(r.floats&&r.floats.length||(r.floats=[]),2==(7&i))for(var o=t.uint32()+t.pos;t.pos<o;)r.floats.push(t.float());else r.floats.push(t.float());break;case 8:if(r.ints&&r.ints.length||(r.ints=[]),2==(7&i))for(o=t.uint32()+t.pos;t.pos<o;)r.ints.push(t.int64());else r.ints.push(t.int64());break;case 9:r.strings&&r.strings.length||(r.strings=[]),r.strings.push(t.bytes());break;case 10:r.tensors&&r.tensors.length||(r.tensors=[]),r.tensors.push(l.onnx.TensorProto.decode(t,t.uint32()));break;case 11:r.graphs&&r.graphs.length||(r.graphs=[]),r.graphs.push(l.onnx.GraphProto.decode(t,t.uint32()));break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";if(null!=t.name&&t.hasOwnProperty(\"name\")&&!c.isString(t.name))return\"name: string expected\";if(null!=t.refAttrName&&t.hasOwnProperty(\"refAttrName\")&&!c.isString(t.refAttrName))return\"refAttrName: string expected\";if(null!=t.docString&&t.hasOwnProperty(\"docString\")&&!c.isString(t.docString))return\"docString: string expected\";if(null!=t.type&&t.hasOwnProperty(\"type\"))switch(t.type){default:return\"type: enum value expected\";case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:}if(null!=t.f&&t.hasOwnProperty(\"f\")&&\"number\"!=typeof t.f)return\"f: number expected\";if(null!=t.i&&t.hasOwnProperty(\"i\")&&!(c.isInteger(t.i)||t.i&&c.isInteger(t.i.low)&&c.isInteger(t.i.high)))return\"i: integer|Long expected\";if(null!=t.s&&t.hasOwnProperty(\"s\")&&!(t.s&&\"number\"==typeof t.s.length||c.isString(t.s)))return\"s: buffer expected\";if(null!=t.t&&t.hasOwnProperty(\"t\")&&(n=l.onnx.TensorProto.verify(t.t)))return\"t.\"+n;if(null!=t.g&&t.hasOwnProperty(\"g\")&&(n=l.onnx.GraphProto.verify(t.g)))return\"g.\"+n;if(null!=t.floats&&t.hasOwnProperty(\"floats\")){if(!Array.isArray(t.floats))return\"floats: array expected\";for(var e=0;e<t.floats.length;++e)if(\"number\"!=typeof t.floats[e])return\"floats: number[] expected\"}if(null!=t.ints&&t.hasOwnProperty(\"ints\")){if(!Array.isArray(t.ints))return\"ints: array expected\";for(e=0;e<t.ints.length;++e)if(!(c.isInteger(t.ints[e])||t.ints[e]&&c.isInteger(t.ints[e].low)&&c.isInteger(t.ints[e].high)))return\"ints: integer|Long[] expected\"}if(null!=t.strings&&t.hasOwnProperty(\"strings\")){if(!Array.isArray(t.strings))return\"strings: array expected\";for(e=0;e<t.strings.length;++e)if(!(t.strings[e]&&\"number\"==typeof t.strings[e].length||c.isString(t.strings[e])))return\"strings: buffer[] expected\"}if(null!=t.tensors&&t.hasOwnProperty(\"tensors\")){if(!Array.isArray(t.tensors))return\"tensors: array expected\";for(e=0;e<t.tensors.length;++e)if(n=l.onnx.TensorProto.verify(t.tensors[e]))return\"tensors.\"+n}if(null!=t.graphs&&t.hasOwnProperty(\"graphs\")){if(!Array.isArray(t.graphs))return\"graphs: array expected\";for(e=0;e<t.graphs.length;++e){var n;if(n=l.onnx.GraphProto.verify(t.graphs[e]))return\"graphs.\"+n}}return null},t.fromObject=function(t){if(t instanceof l.onnx.AttributeProto)return t;var e=new l.onnx.AttributeProto;switch(null!=t.name&&(e.name=String(t.name)),null!=t.refAttrName&&(e.refAttrName=String(t.refAttrName)),null!=t.docString&&(e.docString=String(t.docString)),t.type){case\"UNDEFINED\":case 0:e.type=0;break;case\"FLOAT\":case 1:e.type=1;break;case\"INT\":case 2:e.type=2;break;case\"STRING\":case 3:e.type=3;break;case\"TENSOR\":case 4:e.type=4;break;case\"GRAPH\":case 5:e.type=5;break;case\"FLOATS\":case 6:e.type=6;break;case\"INTS\":case 7:e.type=7;break;case\"STRINGS\":case 8:e.type=8;break;case\"TENSORS\":case 9:e.type=9;break;case\"GRAPHS\":case 10:e.type=10}if(null!=t.f&&(e.f=Number(t.f)),null!=t.i&&(c.Long?(e.i=c.Long.fromValue(t.i)).unsigned=!1:\"string\"==typeof t.i?e.i=parseInt(t.i,10):\"number\"==typeof t.i?e.i=t.i:\"object\"==typeof t.i&&(e.i=new c.LongBits(t.i.low>>>0,t.i.high>>>0).toNumber())),null!=t.s&&(\"string\"==typeof t.s?c.base64.decode(t.s,e.s=c.newBuffer(c.base64.length(t.s)),0):t.s.length&&(e.s=t.s)),null!=t.t){if(\"object\"!=typeof t.t)throw TypeError(\".onnx.AttributeProto.t: object expected\");e.t=l.onnx.TensorProto.fromObject(t.t)}if(null!=t.g){if(\"object\"!=typeof t.g)throw TypeError(\".onnx.AttributeProto.g: object expected\");e.g=l.onnx.GraphProto.fromObject(t.g)}if(t.floats){if(!Array.isArray(t.floats))throw TypeError(\".onnx.AttributeProto.floats: array expected\");e.floats=[];for(var n=0;n<t.floats.length;++n)e.floats[n]=Number(t.floats[n])}if(t.ints){if(!Array.isArray(t.ints))throw TypeError(\".onnx.AttributeProto.ints: array expected\");for(e.ints=[],n=0;n<t.ints.length;++n)c.Long?(e.ints[n]=c.Long.fromValue(t.ints[n])).unsigned=!1:\"string\"==typeof t.ints[n]?e.ints[n]=parseInt(t.ints[n],10):\"number\"==typeof t.ints[n]?e.ints[n]=t.ints[n]:\"object\"==typeof t.ints[n]&&(e.ints[n]=new c.LongBits(t.ints[n].low>>>0,t.ints[n].high>>>0).toNumber())}if(t.strings){if(!Array.isArray(t.strings))throw TypeError(\".onnx.AttributeProto.strings: array expected\");for(e.strings=[],n=0;n<t.strings.length;++n)\"string\"==typeof t.strings[n]?c.base64.decode(t.strings[n],e.strings[n]=c.newBuffer(c.base64.length(t.strings[n])),0):t.strings[n].length&&(e.strings[n]=t.strings[n])}if(t.tensors){if(!Array.isArray(t.tensors))throw TypeError(\".onnx.AttributeProto.tensors: array expected\");for(e.tensors=[],n=0;n<t.tensors.length;++n){if(\"object\"!=typeof t.tensors[n])throw TypeError(\".onnx.AttributeProto.tensors: object expected\");e.tensors[n]=l.onnx.TensorProto.fromObject(t.tensors[n])}}if(t.graphs){if(!Array.isArray(t.graphs))throw TypeError(\".onnx.AttributeProto.graphs: array expected\");for(e.graphs=[],n=0;n<t.graphs.length;++n){if(\"object\"!=typeof t.graphs[n])throw TypeError(\".onnx.AttributeProto.graphs: object expected\");e.graphs[n]=l.onnx.GraphProto.fromObject(t.graphs[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.floats=[],n.ints=[],n.strings=[],n.tensors=[],n.graphs=[]),e.defaults){if(n.name=\"\",n.f=0,c.Long){var r=new c.Long(0,0,!1);n.i=e.longs===String?r.toString():e.longs===Number?r.toNumber():r}else n.i=e.longs===String?\"0\":0;e.bytes===String?n.s=\"\":(n.s=[],e.bytes!==Array&&(n.s=c.newBuffer(n.s))),n.t=null,n.g=null,n.docString=\"\",n.type=e.enums===String?\"UNDEFINED\":0,n.refAttrName=\"\"}if(null!=t.name&&t.hasOwnProperty(\"name\")&&(n.name=t.name),null!=t.f&&t.hasOwnProperty(\"f\")&&(n.f=e.json&&!isFinite(t.f)?String(t.f):t.f),null!=t.i&&t.hasOwnProperty(\"i\")&&(\"number\"==typeof t.i?n.i=e.longs===String?String(t.i):t.i:n.i=e.longs===String?c.Long.prototype.toString.call(t.i):e.longs===Number?new c.LongBits(t.i.low>>>0,t.i.high>>>0).toNumber():t.i),null!=t.s&&t.hasOwnProperty(\"s\")&&(n.s=e.bytes===String?c.base64.encode(t.s,0,t.s.length):e.bytes===Array?Array.prototype.slice.call(t.s):t.s),null!=t.t&&t.hasOwnProperty(\"t\")&&(n.t=l.onnx.TensorProto.toObject(t.t,e)),null!=t.g&&t.hasOwnProperty(\"g\")&&(n.g=l.onnx.GraphProto.toObject(t.g,e)),t.floats&&t.floats.length){n.floats=[];for(var i=0;i<t.floats.length;++i)n.floats[i]=e.json&&!isFinite(t.floats[i])?String(t.floats[i]):t.floats[i]}if(t.ints&&t.ints.length)for(n.ints=[],i=0;i<t.ints.length;++i)\"number\"==typeof t.ints[i]?n.ints[i]=e.longs===String?String(t.ints[i]):t.ints[i]:n.ints[i]=e.longs===String?c.Long.prototype.toString.call(t.ints[i]):e.longs===Number?new c.LongBits(t.ints[i].low>>>0,t.ints[i].high>>>0).toNumber():t.ints[i];if(t.strings&&t.strings.length)for(n.strings=[],i=0;i<t.strings.length;++i)n.strings[i]=e.bytes===String?c.base64.encode(t.strings[i],0,t.strings[i].length):e.bytes===Array?Array.prototype.slice.call(t.strings[i]):t.strings[i];if(t.tensors&&t.tensors.length)for(n.tensors=[],i=0;i<t.tensors.length;++i)n.tensors[i]=l.onnx.TensorProto.toObject(t.tensors[i],e);if(t.graphs&&t.graphs.length)for(n.graphs=[],i=0;i<t.graphs.length;++i)n.graphs[i]=l.onnx.GraphProto.toObject(t.graphs[i],e);return null!=t.docString&&t.hasOwnProperty(\"docString\")&&(n.docString=t.docString),null!=t.type&&t.hasOwnProperty(\"type\")&&(n.type=e.enums===String?l.onnx.AttributeProto.AttributeType[t.type]:t.type),null!=t.refAttrName&&t.hasOwnProperty(\"refAttrName\")&&(n.refAttrName=t.refAttrName),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t.AttributeType=function(){var t={},e=Object.create(t);return e[t[0]=\"UNDEFINED\"]=0,e[t[1]=\"FLOAT\"]=1,e[t[2]=\"INT\"]=2,e[t[3]=\"STRING\"]=3,e[t[4]=\"TENSOR\"]=4,e[t[5]=\"GRAPH\"]=5,e[t[6]=\"FLOATS\"]=6,e[t[7]=\"INTS\"]=7,e[t[8]=\"STRINGS\"]=8,e[t[9]=\"TENSORS\"]=9,e[t[10]=\"GRAPHS\"]=10,e}(),t}(),o.ValueInfoProto=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name=\"\",t.prototype.type=null,t.prototype.docString=\"\",t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=u.create()),null!=t.name&&t.hasOwnProperty(\"name\")&&e.uint32(10).string(t.name),null!=t.type&&t.hasOwnProperty(\"type\")&&l.onnx.TypeProto.encode(t.type,e.uint32(18).fork()).ldelim(),null!=t.docString&&t.hasOwnProperty(\"docString\")&&e.uint32(26).string(t.docString),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.ValueInfoProto;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.name=t.string();break;case 2:r.type=l.onnx.TypeProto.decode(t,t.uint32());break;case 3:r.docString=t.string();break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";if(null!=t.name&&t.hasOwnProperty(\"name\")&&!c.isString(t.name))return\"name: string expected\";if(null!=t.type&&t.hasOwnProperty(\"type\")){var e=l.onnx.TypeProto.verify(t.type);if(e)return\"type.\"+e}return null!=t.docString&&t.hasOwnProperty(\"docString\")&&!c.isString(t.docString)?\"docString: string expected\":null},t.fromObject=function(t){if(t instanceof l.onnx.ValueInfoProto)return t;var e=new l.onnx.ValueInfoProto;if(null!=t.name&&(e.name=String(t.name)),null!=t.type){if(\"object\"!=typeof t.type)throw TypeError(\".onnx.ValueInfoProto.type: object expected\");e.type=l.onnx.TypeProto.fromObject(t.type)}return null!=t.docString&&(e.docString=String(t.docString)),e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.name=\"\",n.type=null,n.docString=\"\"),null!=t.name&&t.hasOwnProperty(\"name\")&&(n.name=t.name),null!=t.type&&t.hasOwnProperty(\"type\")&&(n.type=l.onnx.TypeProto.toObject(t.type,e)),null!=t.docString&&t.hasOwnProperty(\"docString\")&&(n.docString=t.docString),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t}(),o.NodeProto=function(){function t(t){if(this.input=[],this.output=[],this.attribute=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.input=c.emptyArray,t.prototype.output=c.emptyArray,t.prototype.name=\"\",t.prototype.opType=\"\",t.prototype.domain=\"\",t.prototype.attribute=c.emptyArray,t.prototype.docString=\"\",t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=u.create()),null!=t.input&&t.input.length)for(var n=0;n<t.input.length;++n)e.uint32(10).string(t.input[n]);if(null!=t.output&&t.output.length)for(n=0;n<t.output.length;++n)e.uint32(18).string(t.output[n]);if(null!=t.name&&t.hasOwnProperty(\"name\")&&e.uint32(26).string(t.name),null!=t.opType&&t.hasOwnProperty(\"opType\")&&e.uint32(34).string(t.opType),null!=t.attribute&&t.attribute.length)for(n=0;n<t.attribute.length;++n)l.onnx.AttributeProto.encode(t.attribute[n],e.uint32(42).fork()).ldelim();return null!=t.docString&&t.hasOwnProperty(\"docString\")&&e.uint32(50).string(t.docString),null!=t.domain&&t.hasOwnProperty(\"domain\")&&e.uint32(58).string(t.domain),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.NodeProto;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.input&&r.input.length||(r.input=[]),r.input.push(t.string());break;case 2:r.output&&r.output.length||(r.output=[]),r.output.push(t.string());break;case 3:r.name=t.string();break;case 4:r.opType=t.string();break;case 7:r.domain=t.string();break;case 5:r.attribute&&r.attribute.length||(r.attribute=[]),r.attribute.push(l.onnx.AttributeProto.decode(t,t.uint32()));break;case 6:r.docString=t.string();break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";if(null!=t.input&&t.hasOwnProperty(\"input\")){if(!Array.isArray(t.input))return\"input: array expected\";for(var e=0;e<t.input.length;++e)if(!c.isString(t.input[e]))return\"input: string[] expected\"}if(null!=t.output&&t.hasOwnProperty(\"output\")){if(!Array.isArray(t.output))return\"output: array expected\";for(e=0;e<t.output.length;++e)if(!c.isString(t.output[e]))return\"output: string[] expected\"}if(null!=t.name&&t.hasOwnProperty(\"name\")&&!c.isString(t.name))return\"name: string expected\";if(null!=t.opType&&t.hasOwnProperty(\"opType\")&&!c.isString(t.opType))return\"opType: string expected\";if(null!=t.domain&&t.hasOwnProperty(\"domain\")&&!c.isString(t.domain))return\"domain: string expected\";if(null!=t.attribute&&t.hasOwnProperty(\"attribute\")){if(!Array.isArray(t.attribute))return\"attribute: array expected\";for(e=0;e<t.attribute.length;++e){var n=l.onnx.AttributeProto.verify(t.attribute[e]);if(n)return\"attribute.\"+n}}return null!=t.docString&&t.hasOwnProperty(\"docString\")&&!c.isString(t.docString)?\"docString: string expected\":null},t.fromObject=function(t){if(t instanceof l.onnx.NodeProto)return t;var e=new l.onnx.NodeProto;if(t.input){if(!Array.isArray(t.input))throw TypeError(\".onnx.NodeProto.input: array expected\");e.input=[];for(var n=0;n<t.input.length;++n)e.input[n]=String(t.input[n])}if(t.output){if(!Array.isArray(t.output))throw TypeError(\".onnx.NodeProto.output: array expected\");for(e.output=[],n=0;n<t.output.length;++n)e.output[n]=String(t.output[n])}if(null!=t.name&&(e.name=String(t.name)),null!=t.opType&&(e.opType=String(t.opType)),null!=t.domain&&(e.domain=String(t.domain)),t.attribute){if(!Array.isArray(t.attribute))throw TypeError(\".onnx.NodeProto.attribute: array expected\");for(e.attribute=[],n=0;n<t.attribute.length;++n){if(\"object\"!=typeof t.attribute[n])throw TypeError(\".onnx.NodeProto.attribute: object expected\");e.attribute[n]=l.onnx.AttributeProto.fromObject(t.attribute[n])}}return null!=t.docString&&(e.docString=String(t.docString)),e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.input=[],n.output=[],n.attribute=[]),e.defaults&&(n.name=\"\",n.opType=\"\",n.docString=\"\",n.domain=\"\"),t.input&&t.input.length){n.input=[];for(var r=0;r<t.input.length;++r)n.input[r]=t.input[r]}if(t.output&&t.output.length)for(n.output=[],r=0;r<t.output.length;++r)n.output[r]=t.output[r];if(null!=t.name&&t.hasOwnProperty(\"name\")&&(n.name=t.name),null!=t.opType&&t.hasOwnProperty(\"opType\")&&(n.opType=t.opType),t.attribute&&t.attribute.length)for(n.attribute=[],r=0;r<t.attribute.length;++r)n.attribute[r]=l.onnx.AttributeProto.toObject(t.attribute[r],e);return null!=t.docString&&t.hasOwnProperty(\"docString\")&&(n.docString=t.docString),null!=t.domain&&t.hasOwnProperty(\"domain\")&&(n.domain=t.domain),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t}(),o.ModelProto=function(){function t(t){if(this.opsetImport=[],this.metadataProps=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.irVersion=c.Long?c.Long.fromBits(0,0,!1):0,t.prototype.opsetImport=c.emptyArray,t.prototype.producerName=\"\",t.prototype.producerVersion=\"\",t.prototype.domain=\"\",t.prototype.modelVersion=c.Long?c.Long.fromBits(0,0,!1):0,t.prototype.docString=\"\",t.prototype.graph=null,t.prototype.metadataProps=c.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=u.create()),null!=t.irVersion&&t.hasOwnProperty(\"irVersion\")&&e.uint32(8).int64(t.irVersion),null!=t.producerName&&t.hasOwnProperty(\"producerName\")&&e.uint32(18).string(t.producerName),null!=t.producerVersion&&t.hasOwnProperty(\"producerVersion\")&&e.uint32(26).string(t.producerVersion),null!=t.domain&&t.hasOwnProperty(\"domain\")&&e.uint32(34).string(t.domain),null!=t.modelVersion&&t.hasOwnProperty(\"modelVersion\")&&e.uint32(40).int64(t.modelVersion),null!=t.docString&&t.hasOwnProperty(\"docString\")&&e.uint32(50).string(t.docString),null!=t.graph&&t.hasOwnProperty(\"graph\")&&l.onnx.GraphProto.encode(t.graph,e.uint32(58).fork()).ldelim(),null!=t.opsetImport&&t.opsetImport.length)for(var n=0;n<t.opsetImport.length;++n)l.onnx.OperatorSetIdProto.encode(t.opsetImport[n],e.uint32(66).fork()).ldelim();if(null!=t.metadataProps&&t.metadataProps.length)for(n=0;n<t.metadataProps.length;++n)l.onnx.StringStringEntryProto.encode(t.metadataProps[n],e.uint32(114).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.ModelProto;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.irVersion=t.int64();break;case 8:r.opsetImport&&r.opsetImport.length||(r.opsetImport=[]),r.opsetImport.push(l.onnx.OperatorSetIdProto.decode(t,t.uint32()));break;case 2:r.producerName=t.string();break;case 3:r.producerVersion=t.string();break;case 4:r.domain=t.string();break;case 5:r.modelVersion=t.int64();break;case 6:r.docString=t.string();break;case 7:r.graph=l.onnx.GraphProto.decode(t,t.uint32());break;case 14:r.metadataProps&&r.metadataProps.length||(r.metadataProps=[]),r.metadataProps.push(l.onnx.StringStringEntryProto.decode(t,t.uint32()));break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";if(null!=t.irVersion&&t.hasOwnProperty(\"irVersion\")&&!(c.isInteger(t.irVersion)||t.irVersion&&c.isInteger(t.irVersion.low)&&c.isInteger(t.irVersion.high)))return\"irVersion: integer|Long expected\";if(null!=t.opsetImport&&t.hasOwnProperty(\"opsetImport\")){if(!Array.isArray(t.opsetImport))return\"opsetImport: array expected\";for(var e=0;e<t.opsetImport.length;++e)if(n=l.onnx.OperatorSetIdProto.verify(t.opsetImport[e]))return\"opsetImport.\"+n}if(null!=t.producerName&&t.hasOwnProperty(\"producerName\")&&!c.isString(t.producerName))return\"producerName: string expected\";if(null!=t.producerVersion&&t.hasOwnProperty(\"producerVersion\")&&!c.isString(t.producerVersion))return\"producerVersion: string expected\";if(null!=t.domain&&t.hasOwnProperty(\"domain\")&&!c.isString(t.domain))return\"domain: string expected\";if(null!=t.modelVersion&&t.hasOwnProperty(\"modelVersion\")&&!(c.isInteger(t.modelVersion)||t.modelVersion&&c.isInteger(t.modelVersion.low)&&c.isInteger(t.modelVersion.high)))return\"modelVersion: integer|Long expected\";if(null!=t.docString&&t.hasOwnProperty(\"docString\")&&!c.isString(t.docString))return\"docString: string expected\";if(null!=t.graph&&t.hasOwnProperty(\"graph\")&&(n=l.onnx.GraphProto.verify(t.graph)))return\"graph.\"+n;if(null!=t.metadataProps&&t.hasOwnProperty(\"metadataProps\")){if(!Array.isArray(t.metadataProps))return\"metadataProps: array expected\";for(e=0;e<t.metadataProps.length;++e){var n;if(n=l.onnx.StringStringEntryProto.verify(t.metadataProps[e]))return\"metadataProps.\"+n}}return null},t.fromObject=function(t){if(t instanceof l.onnx.ModelProto)return t;var e=new l.onnx.ModelProto;if(null!=t.irVersion&&(c.Long?(e.irVersion=c.Long.fromValue(t.irVersion)).unsigned=!1:\"string\"==typeof t.irVersion?e.irVersion=parseInt(t.irVersion,10):\"number\"==typeof t.irVersion?e.irVersion=t.irVersion:\"object\"==typeof t.irVersion&&(e.irVersion=new c.LongBits(t.irVersion.low>>>0,t.irVersion.high>>>0).toNumber())),t.opsetImport){if(!Array.isArray(t.opsetImport))throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");e.opsetImport=[];for(var n=0;n<t.opsetImport.length;++n){if(\"object\"!=typeof t.opsetImport[n])throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");e.opsetImport[n]=l.onnx.OperatorSetIdProto.fromObject(t.opsetImport[n])}}if(null!=t.producerName&&(e.producerName=String(t.producerName)),null!=t.producerVersion&&(e.producerVersion=String(t.producerVersion)),null!=t.domain&&(e.domain=String(t.domain)),null!=t.modelVersion&&(c.Long?(e.modelVersion=c.Long.fromValue(t.modelVersion)).unsigned=!1:\"string\"==typeof t.modelVersion?e.modelVersion=parseInt(t.modelVersion,10):\"number\"==typeof t.modelVersion?e.modelVersion=t.modelVersion:\"object\"==typeof t.modelVersion&&(e.modelVersion=new c.LongBits(t.modelVersion.low>>>0,t.modelVersion.high>>>0).toNumber())),null!=t.docString&&(e.docString=String(t.docString)),null!=t.graph){if(\"object\"!=typeof t.graph)throw TypeError(\".onnx.ModelProto.graph: object expected\");e.graph=l.onnx.GraphProto.fromObject(t.graph)}if(t.metadataProps){if(!Array.isArray(t.metadataProps))throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");for(e.metadataProps=[],n=0;n<t.metadataProps.length;++n){if(\"object\"!=typeof t.metadataProps[n])throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");e.metadataProps[n]=l.onnx.StringStringEntryProto.fromObject(t.metadataProps[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.opsetImport=[],n.metadataProps=[]),e.defaults){if(c.Long){var r=new c.Long(0,0,!1);n.irVersion=e.longs===String?r.toString():e.longs===Number?r.toNumber():r}else n.irVersion=e.longs===String?\"0\":0;n.producerName=\"\",n.producerVersion=\"\",n.domain=\"\",c.Long?(r=new c.Long(0,0,!1),n.modelVersion=e.longs===String?r.toString():e.longs===Number?r.toNumber():r):n.modelVersion=e.longs===String?\"0\":0,n.docString=\"\",n.graph=null}if(null!=t.irVersion&&t.hasOwnProperty(\"irVersion\")&&(\"number\"==typeof t.irVersion?n.irVersion=e.longs===String?String(t.irVersion):t.irVersion:n.irVersion=e.longs===String?c.Long.prototype.toString.call(t.irVersion):e.longs===Number?new c.LongBits(t.irVersion.low>>>0,t.irVersion.high>>>0).toNumber():t.irVersion),null!=t.producerName&&t.hasOwnProperty(\"producerName\")&&(n.producerName=t.producerName),null!=t.producerVersion&&t.hasOwnProperty(\"producerVersion\")&&(n.producerVersion=t.producerVersion),null!=t.domain&&t.hasOwnProperty(\"domain\")&&(n.domain=t.domain),null!=t.modelVersion&&t.hasOwnProperty(\"modelVersion\")&&(\"number\"==typeof t.modelVersion?n.modelVersion=e.longs===String?String(t.modelVersion):t.modelVersion:n.modelVersion=e.longs===String?c.Long.prototype.toString.call(t.modelVersion):e.longs===Number?new c.LongBits(t.modelVersion.low>>>0,t.modelVersion.high>>>0).toNumber():t.modelVersion),null!=t.docString&&t.hasOwnProperty(\"docString\")&&(n.docString=t.docString),null!=t.graph&&t.hasOwnProperty(\"graph\")&&(n.graph=l.onnx.GraphProto.toObject(t.graph,e)),t.opsetImport&&t.opsetImport.length){n.opsetImport=[];for(var i=0;i<t.opsetImport.length;++i)n.opsetImport[i]=l.onnx.OperatorSetIdProto.toObject(t.opsetImport[i],e)}if(t.metadataProps&&t.metadataProps.length)for(n.metadataProps=[],i=0;i<t.metadataProps.length;++i)n.metadataProps[i]=l.onnx.StringStringEntryProto.toObject(t.metadataProps[i],e);return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t}(),o.StringStringEntryProto=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.key=\"\",t.prototype.value=\"\",t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=u.create()),null!=t.key&&t.hasOwnProperty(\"key\")&&e.uint32(10).string(t.key),null!=t.value&&t.hasOwnProperty(\"value\")&&e.uint32(18).string(t.value),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.StringStringEntryProto;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.key=t.string();break;case 2:r.value=t.string();break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){return\"object\"!=typeof t||null===t?\"object expected\":null!=t.key&&t.hasOwnProperty(\"key\")&&!c.isString(t.key)?\"key: string expected\":null!=t.value&&t.hasOwnProperty(\"value\")&&!c.isString(t.value)?\"value: string expected\":null},t.fromObject=function(t){if(t instanceof l.onnx.StringStringEntryProto)return t;var e=new l.onnx.StringStringEntryProto;return null!=t.key&&(e.key=String(t.key)),null!=t.value&&(e.value=String(t.value)),e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.key=\"\",n.value=\"\"),null!=t.key&&t.hasOwnProperty(\"key\")&&(n.key=t.key),null!=t.value&&t.hasOwnProperty(\"value\")&&(n.value=t.value),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t}(),o.TensorAnnotation=function(){function t(t){if(this.quantParameterTensorNames=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.tensorName=\"\",t.prototype.quantParameterTensorNames=c.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=u.create()),null!=t.tensorName&&t.hasOwnProperty(\"tensorName\")&&e.uint32(10).string(t.tensorName),null!=t.quantParameterTensorNames&&t.quantParameterTensorNames.length)for(var n=0;n<t.quantParameterTensorNames.length;++n)l.onnx.StringStringEntryProto.encode(t.quantParameterTensorNames[n],e.uint32(18).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.TensorAnnotation;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.tensorName=t.string();break;case 2:r.quantParameterTensorNames&&r.quantParameterTensorNames.length||(r.quantParameterTensorNames=[]),r.quantParameterTensorNames.push(l.onnx.StringStringEntryProto.decode(t,t.uint32()));break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";if(null!=t.tensorName&&t.hasOwnProperty(\"tensorName\")&&!c.isString(t.tensorName))return\"tensorName: string expected\";if(null!=t.quantParameterTensorNames&&t.hasOwnProperty(\"quantParameterTensorNames\")){if(!Array.isArray(t.quantParameterTensorNames))return\"quantParameterTensorNames: array expected\";for(var e=0;e<t.quantParameterTensorNames.length;++e){var n=l.onnx.StringStringEntryProto.verify(t.quantParameterTensorNames[e]);if(n)return\"quantParameterTensorNames.\"+n}}return null},t.fromObject=function(t){if(t instanceof l.onnx.TensorAnnotation)return t;var e=new l.onnx.TensorAnnotation;if(null!=t.tensorName&&(e.tensorName=String(t.tensorName)),t.quantParameterTensorNames){if(!Array.isArray(t.quantParameterTensorNames))throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");e.quantParameterTensorNames=[];for(var n=0;n<t.quantParameterTensorNames.length;++n){if(\"object\"!=typeof t.quantParameterTensorNames[n])throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");e.quantParameterTensorNames[n]=l.onnx.StringStringEntryProto.fromObject(t.quantParameterTensorNames[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.quantParameterTensorNames=[]),e.defaults&&(n.tensorName=\"\"),null!=t.tensorName&&t.hasOwnProperty(\"tensorName\")&&(n.tensorName=t.tensorName),t.quantParameterTensorNames&&t.quantParameterTensorNames.length){n.quantParameterTensorNames=[];for(var r=0;r<t.quantParameterTensorNames.length;++r)n.quantParameterTensorNames[r]=l.onnx.StringStringEntryProto.toObject(t.quantParameterTensorNames[r],e)}return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t}(),o.GraphProto=function(){function t(t){if(this.node=[],this.initializer=[],this.input=[],this.output=[],this.valueInfo=[],this.quantizationAnnotation=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.node=c.emptyArray,t.prototype.name=\"\",t.prototype.initializer=c.emptyArray,t.prototype.docString=\"\",t.prototype.input=c.emptyArray,t.prototype.output=c.emptyArray,t.prototype.valueInfo=c.emptyArray,t.prototype.quantizationAnnotation=c.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=u.create()),null!=t.node&&t.node.length)for(var n=0;n<t.node.length;++n)l.onnx.NodeProto.encode(t.node[n],e.uint32(10).fork()).ldelim();if(null!=t.name&&t.hasOwnProperty(\"name\")&&e.uint32(18).string(t.name),null!=t.initializer&&t.initializer.length)for(n=0;n<t.initializer.length;++n)l.onnx.TensorProto.encode(t.initializer[n],e.uint32(42).fork()).ldelim();if(null!=t.docString&&t.hasOwnProperty(\"docString\")&&e.uint32(82).string(t.docString),null!=t.input&&t.input.length)for(n=0;n<t.input.length;++n)l.onnx.ValueInfoProto.encode(t.input[n],e.uint32(90).fork()).ldelim();if(null!=t.output&&t.output.length)for(n=0;n<t.output.length;++n)l.onnx.ValueInfoProto.encode(t.output[n],e.uint32(98).fork()).ldelim();if(null!=t.valueInfo&&t.valueInfo.length)for(n=0;n<t.valueInfo.length;++n)l.onnx.ValueInfoProto.encode(t.valueInfo[n],e.uint32(106).fork()).ldelim();if(null!=t.quantizationAnnotation&&t.quantizationAnnotation.length)for(n=0;n<t.quantizationAnnotation.length;++n)l.onnx.TensorAnnotation.encode(t.quantizationAnnotation[n],e.uint32(114).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.GraphProto;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.node&&r.node.length||(r.node=[]),r.node.push(l.onnx.NodeProto.decode(t,t.uint32()));break;case 2:r.name=t.string();break;case 5:r.initializer&&r.initializer.length||(r.initializer=[]),r.initializer.push(l.onnx.TensorProto.decode(t,t.uint32()));break;case 10:r.docString=t.string();break;case 11:r.input&&r.input.length||(r.input=[]),r.input.push(l.onnx.ValueInfoProto.decode(t,t.uint32()));break;case 12:r.output&&r.output.length||(r.output=[]),r.output.push(l.onnx.ValueInfoProto.decode(t,t.uint32()));break;case 13:r.valueInfo&&r.valueInfo.length||(r.valueInfo=[]),r.valueInfo.push(l.onnx.ValueInfoProto.decode(t,t.uint32()));break;case 14:r.quantizationAnnotation&&r.quantizationAnnotation.length||(r.quantizationAnnotation=[]),r.quantizationAnnotation.push(l.onnx.TensorAnnotation.decode(t,t.uint32()));break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";if(null!=t.node&&t.hasOwnProperty(\"node\")){if(!Array.isArray(t.node))return\"node: array expected\";for(var e=0;e<t.node.length;++e)if(n=l.onnx.NodeProto.verify(t.node[e]))return\"node.\"+n}if(null!=t.name&&t.hasOwnProperty(\"name\")&&!c.isString(t.name))return\"name: string expected\";if(null!=t.initializer&&t.hasOwnProperty(\"initializer\")){if(!Array.isArray(t.initializer))return\"initializer: array expected\";for(e=0;e<t.initializer.length;++e)if(n=l.onnx.TensorProto.verify(t.initializer[e]))return\"initializer.\"+n}if(null!=t.docString&&t.hasOwnProperty(\"docString\")&&!c.isString(t.docString))return\"docString: string expected\";if(null!=t.input&&t.hasOwnProperty(\"input\")){if(!Array.isArray(t.input))return\"input: array expected\";for(e=0;e<t.input.length;++e)if(n=l.onnx.ValueInfoProto.verify(t.input[e]))return\"input.\"+n}if(null!=t.output&&t.hasOwnProperty(\"output\")){if(!Array.isArray(t.output))return\"output: array expected\";for(e=0;e<t.output.length;++e)if(n=l.onnx.ValueInfoProto.verify(t.output[e]))return\"output.\"+n}if(null!=t.valueInfo&&t.hasOwnProperty(\"valueInfo\")){if(!Array.isArray(t.valueInfo))return\"valueInfo: array expected\";for(e=0;e<t.valueInfo.length;++e)if(n=l.onnx.ValueInfoProto.verify(t.valueInfo[e]))return\"valueInfo.\"+n}if(null!=t.quantizationAnnotation&&t.hasOwnProperty(\"quantizationAnnotation\")){if(!Array.isArray(t.quantizationAnnotation))return\"quantizationAnnotation: array expected\";for(e=0;e<t.quantizationAnnotation.length;++e){var n;if(n=l.onnx.TensorAnnotation.verify(t.quantizationAnnotation[e]))return\"quantizationAnnotation.\"+n}}return null},t.fromObject=function(t){if(t instanceof l.onnx.GraphProto)return t;var e=new l.onnx.GraphProto;if(t.node){if(!Array.isArray(t.node))throw TypeError(\".onnx.GraphProto.node: array expected\");e.node=[];for(var n=0;n<t.node.length;++n){if(\"object\"!=typeof t.node[n])throw TypeError(\".onnx.GraphProto.node: object expected\");e.node[n]=l.onnx.NodeProto.fromObject(t.node[n])}}if(null!=t.name&&(e.name=String(t.name)),t.initializer){if(!Array.isArray(t.initializer))throw TypeError(\".onnx.GraphProto.initializer: array expected\");for(e.initializer=[],n=0;n<t.initializer.length;++n){if(\"object\"!=typeof t.initializer[n])throw TypeError(\".onnx.GraphProto.initializer: object expected\");e.initializer[n]=l.onnx.TensorProto.fromObject(t.initializer[n])}}if(null!=t.docString&&(e.docString=String(t.docString)),t.input){if(!Array.isArray(t.input))throw TypeError(\".onnx.GraphProto.input: array expected\");for(e.input=[],n=0;n<t.input.length;++n){if(\"object\"!=typeof t.input[n])throw TypeError(\".onnx.GraphProto.input: object expected\");e.input[n]=l.onnx.ValueInfoProto.fromObject(t.input[n])}}if(t.output){if(!Array.isArray(t.output))throw TypeError(\".onnx.GraphProto.output: array expected\");for(e.output=[],n=0;n<t.output.length;++n){if(\"object\"!=typeof t.output[n])throw TypeError(\".onnx.GraphProto.output: object expected\");e.output[n]=l.onnx.ValueInfoProto.fromObject(t.output[n])}}if(t.valueInfo){if(!Array.isArray(t.valueInfo))throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");for(e.valueInfo=[],n=0;n<t.valueInfo.length;++n){if(\"object\"!=typeof t.valueInfo[n])throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");e.valueInfo[n]=l.onnx.ValueInfoProto.fromObject(t.valueInfo[n])}}if(t.quantizationAnnotation){if(!Array.isArray(t.quantizationAnnotation))throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");for(e.quantizationAnnotation=[],n=0;n<t.quantizationAnnotation.length;++n){if(\"object\"!=typeof t.quantizationAnnotation[n])throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");e.quantizationAnnotation[n]=l.onnx.TensorAnnotation.fromObject(t.quantizationAnnotation[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.node=[],n.initializer=[],n.input=[],n.output=[],n.valueInfo=[],n.quantizationAnnotation=[]),e.defaults&&(n.name=\"\",n.docString=\"\"),t.node&&t.node.length){n.node=[];for(var r=0;r<t.node.length;++r)n.node[r]=l.onnx.NodeProto.toObject(t.node[r],e)}if(null!=t.name&&t.hasOwnProperty(\"name\")&&(n.name=t.name),t.initializer&&t.initializer.length)for(n.initializer=[],r=0;r<t.initializer.length;++r)n.initializer[r]=l.onnx.TensorProto.toObject(t.initializer[r],e);if(null!=t.docString&&t.hasOwnProperty(\"docString\")&&(n.docString=t.docString),t.input&&t.input.length)for(n.input=[],r=0;r<t.input.length;++r)n.input[r]=l.onnx.ValueInfoProto.toObject(t.input[r],e);if(t.output&&t.output.length)for(n.output=[],r=0;r<t.output.length;++r)n.output[r]=l.onnx.ValueInfoProto.toObject(t.output[r],e);if(t.valueInfo&&t.valueInfo.length)for(n.valueInfo=[],r=0;r<t.valueInfo.length;++r)n.valueInfo[r]=l.onnx.ValueInfoProto.toObject(t.valueInfo[r],e);if(t.quantizationAnnotation&&t.quantizationAnnotation.length)for(n.quantizationAnnotation=[],r=0;r<t.quantizationAnnotation.length;++r)n.quantizationAnnotation[r]=l.onnx.TensorAnnotation.toObject(t.quantizationAnnotation[r],e);return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t}(),o.TensorProto=function(){function t(t){if(this.dims=[],this.floatData=[],this.int32Data=[],this.stringData=[],this.int64Data=[],this.externalData=[],this.doubleData=[],this.uint64Data=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.dims=c.emptyArray,t.prototype.dataType=0,t.prototype.segment=null,t.prototype.floatData=c.emptyArray,t.prototype.int32Data=c.emptyArray,t.prototype.stringData=c.emptyArray,t.prototype.int64Data=c.emptyArray,t.prototype.name=\"\",t.prototype.docString=\"\",t.prototype.rawData=c.newBuffer([]),t.prototype.externalData=c.emptyArray,t.prototype.dataLocation=0,t.prototype.doubleData=c.emptyArray,t.prototype.uint64Data=c.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=u.create()),null!=t.dims&&t.dims.length){e.uint32(10).fork();for(var n=0;n<t.dims.length;++n)e.int64(t.dims[n]);e.ldelim()}if(null!=t.dataType&&t.hasOwnProperty(\"dataType\")&&e.uint32(16).int32(t.dataType),null!=t.segment&&t.hasOwnProperty(\"segment\")&&l.onnx.TensorProto.Segment.encode(t.segment,e.uint32(26).fork()).ldelim(),null!=t.floatData&&t.floatData.length){for(e.uint32(34).fork(),n=0;n<t.floatData.length;++n)e.float(t.floatData[n]);e.ldelim()}if(null!=t.int32Data&&t.int32Data.length){for(e.uint32(42).fork(),n=0;n<t.int32Data.length;++n)e.int32(t.int32Data[n]);e.ldelim()}if(null!=t.stringData&&t.stringData.length)for(n=0;n<t.stringData.length;++n)e.uint32(50).bytes(t.stringData[n]);if(null!=t.int64Data&&t.int64Data.length){for(e.uint32(58).fork(),n=0;n<t.int64Data.length;++n)e.int64(t.int64Data[n]);e.ldelim()}if(null!=t.name&&t.hasOwnProperty(\"name\")&&e.uint32(66).string(t.name),null!=t.rawData&&t.hasOwnProperty(\"rawData\")&&e.uint32(74).bytes(t.rawData),null!=t.doubleData&&t.doubleData.length){for(e.uint32(82).fork(),n=0;n<t.doubleData.length;++n)e.double(t.doubleData[n]);e.ldelim()}if(null!=t.uint64Data&&t.uint64Data.length){for(e.uint32(90).fork(),n=0;n<t.uint64Data.length;++n)e.uint64(t.uint64Data[n]);e.ldelim()}if(null!=t.docString&&t.hasOwnProperty(\"docString\")&&e.uint32(98).string(t.docString),null!=t.externalData&&t.externalData.length)for(n=0;n<t.externalData.length;++n)l.onnx.StringStringEntryProto.encode(t.externalData[n],e.uint32(106).fork()).ldelim();return null!=t.dataLocation&&t.hasOwnProperty(\"dataLocation\")&&e.uint32(112).int32(t.dataLocation),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.TensorProto;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:if(r.dims&&r.dims.length||(r.dims=[]),2==(7&i))for(var o=t.uint32()+t.pos;t.pos<o;)r.dims.push(t.int64());else r.dims.push(t.int64());break;case 2:r.dataType=t.int32();break;case 3:r.segment=l.onnx.TensorProto.Segment.decode(t,t.uint32());break;case 4:if(r.floatData&&r.floatData.length||(r.floatData=[]),2==(7&i))for(o=t.uint32()+t.pos;t.pos<o;)r.floatData.push(t.float());else r.floatData.push(t.float());break;case 5:if(r.int32Data&&r.int32Data.length||(r.int32Data=[]),2==(7&i))for(o=t.uint32()+t.pos;t.pos<o;)r.int32Data.push(t.int32());else r.int32Data.push(t.int32());break;case 6:r.stringData&&r.stringData.length||(r.stringData=[]),r.stringData.push(t.bytes());break;case 7:if(r.int64Data&&r.int64Data.length||(r.int64Data=[]),2==(7&i))for(o=t.uint32()+t.pos;t.pos<o;)r.int64Data.push(t.int64());else r.int64Data.push(t.int64());break;case 8:r.name=t.string();break;case 12:r.docString=t.string();break;case 9:r.rawData=t.bytes();break;case 13:r.externalData&&r.externalData.length||(r.externalData=[]),r.externalData.push(l.onnx.StringStringEntryProto.decode(t,t.uint32()));break;case 14:r.dataLocation=t.int32();break;case 10:if(r.doubleData&&r.doubleData.length||(r.doubleData=[]),2==(7&i))for(o=t.uint32()+t.pos;t.pos<o;)r.doubleData.push(t.double());else r.doubleData.push(t.double());break;case 11:if(r.uint64Data&&r.uint64Data.length||(r.uint64Data=[]),2==(7&i))for(o=t.uint32()+t.pos;t.pos<o;)r.uint64Data.push(t.uint64());else r.uint64Data.push(t.uint64());break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";if(null!=t.dims&&t.hasOwnProperty(\"dims\")){if(!Array.isArray(t.dims))return\"dims: array expected\";for(var e=0;e<t.dims.length;++e)if(!(c.isInteger(t.dims[e])||t.dims[e]&&c.isInteger(t.dims[e].low)&&c.isInteger(t.dims[e].high)))return\"dims: integer|Long[] expected\"}if(null!=t.dataType&&t.hasOwnProperty(\"dataType\")&&!c.isInteger(t.dataType))return\"dataType: integer expected\";if(null!=t.segment&&t.hasOwnProperty(\"segment\")&&(n=l.onnx.TensorProto.Segment.verify(t.segment)))return\"segment.\"+n;if(null!=t.floatData&&t.hasOwnProperty(\"floatData\")){if(!Array.isArray(t.floatData))return\"floatData: array expected\";for(e=0;e<t.floatData.length;++e)if(\"number\"!=typeof t.floatData[e])return\"floatData: number[] expected\"}if(null!=t.int32Data&&t.hasOwnProperty(\"int32Data\")){if(!Array.isArray(t.int32Data))return\"int32Data: array expected\";for(e=0;e<t.int32Data.length;++e)if(!c.isInteger(t.int32Data[e]))return\"int32Data: integer[] expected\"}if(null!=t.stringData&&t.hasOwnProperty(\"stringData\")){if(!Array.isArray(t.stringData))return\"stringData: array expected\";for(e=0;e<t.stringData.length;++e)if(!(t.stringData[e]&&\"number\"==typeof t.stringData[e].length||c.isString(t.stringData[e])))return\"stringData: buffer[] expected\"}if(null!=t.int64Data&&t.hasOwnProperty(\"int64Data\")){if(!Array.isArray(t.int64Data))return\"int64Data: array expected\";for(e=0;e<t.int64Data.length;++e)if(!(c.isInteger(t.int64Data[e])||t.int64Data[e]&&c.isInteger(t.int64Data[e].low)&&c.isInteger(t.int64Data[e].high)))return\"int64Data: integer|Long[] expected\"}if(null!=t.name&&t.hasOwnProperty(\"name\")&&!c.isString(t.name))return\"name: string expected\";if(null!=t.docString&&t.hasOwnProperty(\"docString\")&&!c.isString(t.docString))return\"docString: string expected\";if(null!=t.rawData&&t.hasOwnProperty(\"rawData\")&&!(t.rawData&&\"number\"==typeof t.rawData.length||c.isString(t.rawData)))return\"rawData: buffer expected\";if(null!=t.externalData&&t.hasOwnProperty(\"externalData\")){if(!Array.isArray(t.externalData))return\"externalData: array expected\";for(e=0;e<t.externalData.length;++e){var n;if(n=l.onnx.StringStringEntryProto.verify(t.externalData[e]))return\"externalData.\"+n}}if(null!=t.dataLocation&&t.hasOwnProperty(\"dataLocation\"))switch(t.dataLocation){default:return\"dataLocation: enum value expected\";case 0:case 1:}if(null!=t.doubleData&&t.hasOwnProperty(\"doubleData\")){if(!Array.isArray(t.doubleData))return\"doubleData: array expected\";for(e=0;e<t.doubleData.length;++e)if(\"number\"!=typeof t.doubleData[e])return\"doubleData: number[] expected\"}if(null!=t.uint64Data&&t.hasOwnProperty(\"uint64Data\")){if(!Array.isArray(t.uint64Data))return\"uint64Data: array expected\";for(e=0;e<t.uint64Data.length;++e)if(!(c.isInteger(t.uint64Data[e])||t.uint64Data[e]&&c.isInteger(t.uint64Data[e].low)&&c.isInteger(t.uint64Data[e].high)))return\"uint64Data: integer|Long[] expected\"}return null},t.fromObject=function(t){if(t instanceof l.onnx.TensorProto)return t;var e=new l.onnx.TensorProto;if(t.dims){if(!Array.isArray(t.dims))throw TypeError(\".onnx.TensorProto.dims: array expected\");e.dims=[];for(var n=0;n<t.dims.length;++n)c.Long?(e.dims[n]=c.Long.fromValue(t.dims[n])).unsigned=!1:\"string\"==typeof t.dims[n]?e.dims[n]=parseInt(t.dims[n],10):\"number\"==typeof t.dims[n]?e.dims[n]=t.dims[n]:\"object\"==typeof t.dims[n]&&(e.dims[n]=new c.LongBits(t.dims[n].low>>>0,t.dims[n].high>>>0).toNumber())}if(null!=t.dataType&&(e.dataType=0|t.dataType),null!=t.segment){if(\"object\"!=typeof t.segment)throw TypeError(\".onnx.TensorProto.segment: object expected\");e.segment=l.onnx.TensorProto.Segment.fromObject(t.segment)}if(t.floatData){if(!Array.isArray(t.floatData))throw TypeError(\".onnx.TensorProto.floatData: array expected\");for(e.floatData=[],n=0;n<t.floatData.length;++n)e.floatData[n]=Number(t.floatData[n])}if(t.int32Data){if(!Array.isArray(t.int32Data))throw TypeError(\".onnx.TensorProto.int32Data: array expected\");for(e.int32Data=[],n=0;n<t.int32Data.length;++n)e.int32Data[n]=0|t.int32Data[n]}if(t.stringData){if(!Array.isArray(t.stringData))throw TypeError(\".onnx.TensorProto.stringData: array expected\");for(e.stringData=[],n=0;n<t.stringData.length;++n)\"string\"==typeof t.stringData[n]?c.base64.decode(t.stringData[n],e.stringData[n]=c.newBuffer(c.base64.length(t.stringData[n])),0):t.stringData[n].length&&(e.stringData[n]=t.stringData[n])}if(t.int64Data){if(!Array.isArray(t.int64Data))throw TypeError(\".onnx.TensorProto.int64Data: array expected\");for(e.int64Data=[],n=0;n<t.int64Data.length;++n)c.Long?(e.int64Data[n]=c.Long.fromValue(t.int64Data[n])).unsigned=!1:\"string\"==typeof t.int64Data[n]?e.int64Data[n]=parseInt(t.int64Data[n],10):\"number\"==typeof t.int64Data[n]?e.int64Data[n]=t.int64Data[n]:\"object\"==typeof t.int64Data[n]&&(e.int64Data[n]=new c.LongBits(t.int64Data[n].low>>>0,t.int64Data[n].high>>>0).toNumber())}if(null!=t.name&&(e.name=String(t.name)),null!=t.docString&&(e.docString=String(t.docString)),null!=t.rawData&&(\"string\"==typeof t.rawData?c.base64.decode(t.rawData,e.rawData=c.newBuffer(c.base64.length(t.rawData)),0):t.rawData.length&&(e.rawData=t.rawData)),t.externalData){if(!Array.isArray(t.externalData))throw TypeError(\".onnx.TensorProto.externalData: array expected\");for(e.externalData=[],n=0;n<t.externalData.length;++n){if(\"object\"!=typeof t.externalData[n])throw TypeError(\".onnx.TensorProto.externalData: object expected\");e.externalData[n]=l.onnx.StringStringEntryProto.fromObject(t.externalData[n])}}switch(t.dataLocation){case\"DEFAULT\":case 0:e.dataLocation=0;break;case\"EXTERNAL\":case 1:e.dataLocation=1}if(t.doubleData){if(!Array.isArray(t.doubleData))throw TypeError(\".onnx.TensorProto.doubleData: array expected\");for(e.doubleData=[],n=0;n<t.doubleData.length;++n)e.doubleData[n]=Number(t.doubleData[n])}if(t.uint64Data){if(!Array.isArray(t.uint64Data))throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");for(e.uint64Data=[],n=0;n<t.uint64Data.length;++n)c.Long?(e.uint64Data[n]=c.Long.fromValue(t.uint64Data[n])).unsigned=!0:\"string\"==typeof t.uint64Data[n]?e.uint64Data[n]=parseInt(t.uint64Data[n],10):\"number\"==typeof t.uint64Data[n]?e.uint64Data[n]=t.uint64Data[n]:\"object\"==typeof t.uint64Data[n]&&(e.uint64Data[n]=new c.LongBits(t.uint64Data[n].low>>>0,t.uint64Data[n].high>>>0).toNumber(!0))}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.dims=[],n.floatData=[],n.int32Data=[],n.stringData=[],n.int64Data=[],n.doubleData=[],n.uint64Data=[],n.externalData=[]),e.defaults&&(n.dataType=0,n.segment=null,n.name=\"\",e.bytes===String?n.rawData=\"\":(n.rawData=[],e.bytes!==Array&&(n.rawData=c.newBuffer(n.rawData))),n.docString=\"\",n.dataLocation=e.enums===String?\"DEFAULT\":0),t.dims&&t.dims.length){n.dims=[];for(var r=0;r<t.dims.length;++r)\"number\"==typeof t.dims[r]?n.dims[r]=e.longs===String?String(t.dims[r]):t.dims[r]:n.dims[r]=e.longs===String?c.Long.prototype.toString.call(t.dims[r]):e.longs===Number?new c.LongBits(t.dims[r].low>>>0,t.dims[r].high>>>0).toNumber():t.dims[r]}if(null!=t.dataType&&t.hasOwnProperty(\"dataType\")&&(n.dataType=t.dataType),null!=t.segment&&t.hasOwnProperty(\"segment\")&&(n.segment=l.onnx.TensorProto.Segment.toObject(t.segment,e)),t.floatData&&t.floatData.length)for(n.floatData=[],r=0;r<t.floatData.length;++r)n.floatData[r]=e.json&&!isFinite(t.floatData[r])?String(t.floatData[r]):t.floatData[r];if(t.int32Data&&t.int32Data.length)for(n.int32Data=[],r=0;r<t.int32Data.length;++r)n.int32Data[r]=t.int32Data[r];if(t.stringData&&t.stringData.length)for(n.stringData=[],r=0;r<t.stringData.length;++r)n.stringData[r]=e.bytes===String?c.base64.encode(t.stringData[r],0,t.stringData[r].length):e.bytes===Array?Array.prototype.slice.call(t.stringData[r]):t.stringData[r];if(t.int64Data&&t.int64Data.length)for(n.int64Data=[],r=0;r<t.int64Data.length;++r)\"number\"==typeof t.int64Data[r]?n.int64Data[r]=e.longs===String?String(t.int64Data[r]):t.int64Data[r]:n.int64Data[r]=e.longs===String?c.Long.prototype.toString.call(t.int64Data[r]):e.longs===Number?new c.LongBits(t.int64Data[r].low>>>0,t.int64Data[r].high>>>0).toNumber():t.int64Data[r];if(null!=t.name&&t.hasOwnProperty(\"name\")&&(n.name=t.name),null!=t.rawData&&t.hasOwnProperty(\"rawData\")&&(n.rawData=e.bytes===String?c.base64.encode(t.rawData,0,t.rawData.length):e.bytes===Array?Array.prototype.slice.call(t.rawData):t.rawData),t.doubleData&&t.doubleData.length)for(n.doubleData=[],r=0;r<t.doubleData.length;++r)n.doubleData[r]=e.json&&!isFinite(t.doubleData[r])?String(t.doubleData[r]):t.doubleData[r];if(t.uint64Data&&t.uint64Data.length)for(n.uint64Data=[],r=0;r<t.uint64Data.length;++r)\"number\"==typeof t.uint64Data[r]?n.uint64Data[r]=e.longs===String?String(t.uint64Data[r]):t.uint64Data[r]:n.uint64Data[r]=e.longs===String?c.Long.prototype.toString.call(t.uint64Data[r]):e.longs===Number?new c.LongBits(t.uint64Data[r].low>>>0,t.uint64Data[r].high>>>0).toNumber(!0):t.uint64Data[r];if(null!=t.docString&&t.hasOwnProperty(\"docString\")&&(n.docString=t.docString),t.externalData&&t.externalData.length)for(n.externalData=[],r=0;r<t.externalData.length;++r)n.externalData[r]=l.onnx.StringStringEntryProto.toObject(t.externalData[r],e);return null!=t.dataLocation&&t.hasOwnProperty(\"dataLocation\")&&(n.dataLocation=e.enums===String?l.onnx.TensorProto.DataLocation[t.dataLocation]:t.dataLocation),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t.DataType=function(){var t={},e=Object.create(t);return e[t[0]=\"UNDEFINED\"]=0,e[t[1]=\"FLOAT\"]=1,e[t[2]=\"UINT8\"]=2,e[t[3]=\"INT8\"]=3,e[t[4]=\"UINT16\"]=4,e[t[5]=\"INT16\"]=5,e[t[6]=\"INT32\"]=6,e[t[7]=\"INT64\"]=7,e[t[8]=\"STRING\"]=8,e[t[9]=\"BOOL\"]=9,e[t[10]=\"FLOAT16\"]=10,e[t[11]=\"DOUBLE\"]=11,e[t[12]=\"UINT32\"]=12,e[t[13]=\"UINT64\"]=13,e[t[14]=\"COMPLEX64\"]=14,e[t[15]=\"COMPLEX128\"]=15,e[t[16]=\"BFLOAT16\"]=16,e}(),t.Segment=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.begin=c.Long?c.Long.fromBits(0,0,!1):0,t.prototype.end=c.Long?c.Long.fromBits(0,0,!1):0,t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=u.create()),null!=t.begin&&t.hasOwnProperty(\"begin\")&&e.uint32(8).int64(t.begin),null!=t.end&&t.hasOwnProperty(\"end\")&&e.uint32(16).int64(t.end),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.TensorProto.Segment;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.begin=t.int64();break;case 2:r.end=t.int64();break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){return\"object\"!=typeof t||null===t?\"object expected\":null!=t.begin&&t.hasOwnProperty(\"begin\")&&!(c.isInteger(t.begin)||t.begin&&c.isInteger(t.begin.low)&&c.isInteger(t.begin.high))?\"begin: integer|Long expected\":null!=t.end&&t.hasOwnProperty(\"end\")&&!(c.isInteger(t.end)||t.end&&c.isInteger(t.end.low)&&c.isInteger(t.end.high))?\"end: integer|Long expected\":null},t.fromObject=function(t){if(t instanceof l.onnx.TensorProto.Segment)return t;var e=new l.onnx.TensorProto.Segment;return null!=t.begin&&(c.Long?(e.begin=c.Long.fromValue(t.begin)).unsigned=!1:\"string\"==typeof t.begin?e.begin=parseInt(t.begin,10):\"number\"==typeof t.begin?e.begin=t.begin:\"object\"==typeof t.begin&&(e.begin=new c.LongBits(t.begin.low>>>0,t.begin.high>>>0).toNumber())),null!=t.end&&(c.Long?(e.end=c.Long.fromValue(t.end)).unsigned=!1:\"string\"==typeof t.end?e.end=parseInt(t.end,10):\"number\"==typeof t.end?e.end=t.end:\"object\"==typeof t.end&&(e.end=new c.LongBits(t.end.low>>>0,t.end.high>>>0).toNumber())),e},t.toObject=function(t,e){e||(e={});var n={};if(e.defaults){if(c.Long){var r=new c.Long(0,0,!1);n.begin=e.longs===String?r.toString():e.longs===Number?r.toNumber():r}else n.begin=e.longs===String?\"0\":0;c.Long?(r=new c.Long(0,0,!1),n.end=e.longs===String?r.toString():e.longs===Number?r.toNumber():r):n.end=e.longs===String?\"0\":0}return null!=t.begin&&t.hasOwnProperty(\"begin\")&&(\"number\"==typeof t.begin?n.begin=e.longs===String?String(t.begin):t.begin:n.begin=e.longs===String?c.Long.prototype.toString.call(t.begin):e.longs===Number?new c.LongBits(t.begin.low>>>0,t.begin.high>>>0).toNumber():t.begin),null!=t.end&&t.hasOwnProperty(\"end\")&&(\"number\"==typeof t.end?n.end=e.longs===String?String(t.end):t.end:n.end=e.longs===String?c.Long.prototype.toString.call(t.end):e.longs===Number?new c.LongBits(t.end.low>>>0,t.end.high>>>0).toNumber():t.end),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t}(),t.DataLocation=function(){var t={},e=Object.create(t);return e[t[0]=\"DEFAULT\"]=0,e[t[1]=\"EXTERNAL\"]=1,e}(),t}(),o.TensorShapeProto=function(){function t(t){if(this.dim=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.dim=c.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=u.create()),null!=t.dim&&t.dim.length)for(var n=0;n<t.dim.length;++n)l.onnx.TensorShapeProto.Dimension.encode(t.dim[n],e.uint32(10).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.TensorShapeProto;t.pos<n;){var i=t.uint32();i>>>3==1?(r.dim&&r.dim.length||(r.dim=[]),r.dim.push(l.onnx.TensorShapeProto.Dimension.decode(t,t.uint32()))):t.skipType(7&i)}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";if(null!=t.dim&&t.hasOwnProperty(\"dim\")){if(!Array.isArray(t.dim))return\"dim: array expected\";for(var e=0;e<t.dim.length;++e){var n=l.onnx.TensorShapeProto.Dimension.verify(t.dim[e]);if(n)return\"dim.\"+n}}return null},t.fromObject=function(t){if(t instanceof l.onnx.TensorShapeProto)return t;var e=new l.onnx.TensorShapeProto;if(t.dim){if(!Array.isArray(t.dim))throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");e.dim=[];for(var n=0;n<t.dim.length;++n){if(\"object\"!=typeof t.dim[n])throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");e.dim[n]=l.onnx.TensorShapeProto.Dimension.fromObject(t.dim[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.dim=[]),t.dim&&t.dim.length){n.dim=[];for(var r=0;r<t.dim.length;++r)n.dim[r]=l.onnx.TensorShapeProto.Dimension.toObject(t.dim[r],e)}return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t.Dimension=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e;return t.prototype.dimValue=c.Long?c.Long.fromBits(0,0,!1):0,t.prototype.dimParam=\"\",t.prototype.denotation=\"\",Object.defineProperty(t.prototype,\"value\",{get:c.oneOfGetter(e=[\"dimValue\",\"dimParam\"]),set:c.oneOfSetter(e)}),t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=u.create()),null!=t.dimValue&&t.hasOwnProperty(\"dimValue\")&&e.uint32(8).int64(t.dimValue),null!=t.dimParam&&t.hasOwnProperty(\"dimParam\")&&e.uint32(18).string(t.dimParam),null!=t.denotation&&t.hasOwnProperty(\"denotation\")&&e.uint32(26).string(t.denotation),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.TensorShapeProto.Dimension;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.dimValue=t.int64();break;case 2:r.dimParam=t.string();break;case 3:r.denotation=t.string();break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";var e={};if(null!=t.dimValue&&t.hasOwnProperty(\"dimValue\")&&(e.value=1,!(c.isInteger(t.dimValue)||t.dimValue&&c.isInteger(t.dimValue.low)&&c.isInteger(t.dimValue.high))))return\"dimValue: integer|Long expected\";if(null!=t.dimParam&&t.hasOwnProperty(\"dimParam\")){if(1===e.value)return\"value: multiple values\";if(e.value=1,!c.isString(t.dimParam))return\"dimParam: string expected\"}return null!=t.denotation&&t.hasOwnProperty(\"denotation\")&&!c.isString(t.denotation)?\"denotation: string expected\":null},t.fromObject=function(t){if(t instanceof l.onnx.TensorShapeProto.Dimension)return t;var e=new l.onnx.TensorShapeProto.Dimension;return null!=t.dimValue&&(c.Long?(e.dimValue=c.Long.fromValue(t.dimValue)).unsigned=!1:\"string\"==typeof t.dimValue?e.dimValue=parseInt(t.dimValue,10):\"number\"==typeof t.dimValue?e.dimValue=t.dimValue:\"object\"==typeof t.dimValue&&(e.dimValue=new c.LongBits(t.dimValue.low>>>0,t.dimValue.high>>>0).toNumber())),null!=t.dimParam&&(e.dimParam=String(t.dimParam)),null!=t.denotation&&(e.denotation=String(t.denotation)),e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.denotation=\"\"),null!=t.dimValue&&t.hasOwnProperty(\"dimValue\")&&(\"number\"==typeof t.dimValue?n.dimValue=e.longs===String?String(t.dimValue):t.dimValue:n.dimValue=e.longs===String?c.Long.prototype.toString.call(t.dimValue):e.longs===Number?new c.LongBits(t.dimValue.low>>>0,t.dimValue.high>>>0).toNumber():t.dimValue,e.oneofs&&(n.value=\"dimValue\")),null!=t.dimParam&&t.hasOwnProperty(\"dimParam\")&&(n.dimParam=t.dimParam,e.oneofs&&(n.value=\"dimParam\")),null!=t.denotation&&t.hasOwnProperty(\"denotation\")&&(n.denotation=t.denotation),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t}(),t}(),o.TypeProto=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e;return t.prototype.tensorType=null,t.prototype.denotation=\"\",Object.defineProperty(t.prototype,\"value\",{get:c.oneOfGetter(e=[\"tensorType\"]),set:c.oneOfSetter(e)}),t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=u.create()),null!=t.tensorType&&t.hasOwnProperty(\"tensorType\")&&l.onnx.TypeProto.Tensor.encode(t.tensorType,e.uint32(10).fork()).ldelim(),null!=t.denotation&&t.hasOwnProperty(\"denotation\")&&e.uint32(50).string(t.denotation),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.TypeProto;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.tensorType=l.onnx.TypeProto.Tensor.decode(t,t.uint32());break;case 6:r.denotation=t.string();break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";if(null!=t.tensorType&&t.hasOwnProperty(\"tensorType\")){var e=l.onnx.TypeProto.Tensor.verify(t.tensorType);if(e)return\"tensorType.\"+e}return null!=t.denotation&&t.hasOwnProperty(\"denotation\")&&!c.isString(t.denotation)?\"denotation: string expected\":null},t.fromObject=function(t){if(t instanceof l.onnx.TypeProto)return t;var e=new l.onnx.TypeProto;if(null!=t.tensorType){if(\"object\"!=typeof t.tensorType)throw TypeError(\".onnx.TypeProto.tensorType: object expected\");e.tensorType=l.onnx.TypeProto.Tensor.fromObject(t.tensorType)}return null!=t.denotation&&(e.denotation=String(t.denotation)),e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.denotation=\"\"),null!=t.tensorType&&t.hasOwnProperty(\"tensorType\")&&(n.tensorType=l.onnx.TypeProto.Tensor.toObject(t.tensorType,e),e.oneofs&&(n.value=\"tensorType\")),null!=t.denotation&&t.hasOwnProperty(\"denotation\")&&(n.denotation=t.denotation),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t.Tensor=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.elemType=0,t.prototype.shape=null,t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=u.create()),null!=t.elemType&&t.hasOwnProperty(\"elemType\")&&e.uint32(8).int32(t.elemType),null!=t.shape&&t.hasOwnProperty(\"shape\")&&l.onnx.TensorShapeProto.encode(t.shape,e.uint32(18).fork()).ldelim(),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.TypeProto.Tensor;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.elemType=t.int32();break;case 2:r.shape=l.onnx.TensorShapeProto.decode(t,t.uint32());break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){if(\"object\"!=typeof t||null===t)return\"object expected\";if(null!=t.elemType&&t.hasOwnProperty(\"elemType\")&&!c.isInteger(t.elemType))return\"elemType: integer expected\";if(null!=t.shape&&t.hasOwnProperty(\"shape\")){var e=l.onnx.TensorShapeProto.verify(t.shape);if(e)return\"shape.\"+e}return null},t.fromObject=function(t){if(t instanceof l.onnx.TypeProto.Tensor)return t;var e=new l.onnx.TypeProto.Tensor;if(null!=t.elemType&&(e.elemType=0|t.elemType),null!=t.shape){if(\"object\"!=typeof t.shape)throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");e.shape=l.onnx.TensorShapeProto.fromObject(t.shape)}return e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.elemType=0,n.shape=null),null!=t.elemType&&t.hasOwnProperty(\"elemType\")&&(n.elemType=t.elemType),null!=t.shape&&t.hasOwnProperty(\"shape\")&&(n.shape=l.onnx.TensorShapeProto.toObject(t.shape,e)),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t}(),t}(),o.OperatorSetIdProto=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.domain=\"\",t.prototype.version=c.Long?c.Long.fromBits(0,0,!1):0,t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=u.create()),null!=t.domain&&t.hasOwnProperty(\"domain\")&&e.uint32(10).string(t.domain),null!=t.version&&t.hasOwnProperty(\"version\")&&e.uint32(16).int64(t.version),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.onnx.OperatorSetIdProto;t.pos<n;){var i=t.uint32();switch(i>>>3){case 1:r.domain=t.string();break;case 2:r.version=t.int64();break;default:t.skipType(7&i)}}return r},t.decodeDelimited=function(t){return t instanceof s||(t=new s(t)),this.decode(t,t.uint32())},t.verify=function(t){return\"object\"!=typeof t||null===t?\"object expected\":null!=t.domain&&t.hasOwnProperty(\"domain\")&&!c.isString(t.domain)?\"domain: string expected\":null!=t.version&&t.hasOwnProperty(\"version\")&&!(c.isInteger(t.version)||t.version&&c.isInteger(t.version.low)&&c.isInteger(t.version.high))?\"version: integer|Long expected\":null},t.fromObject=function(t){if(t instanceof l.onnx.OperatorSetIdProto)return t;var e=new l.onnx.OperatorSetIdProto;return null!=t.domain&&(e.domain=String(t.domain)),null!=t.version&&(c.Long?(e.version=c.Long.fromValue(t.version)).unsigned=!1:\"string\"==typeof t.version?e.version=parseInt(t.version,10):\"number\"==typeof t.version?e.version=t.version:\"object\"==typeof t.version&&(e.version=new c.LongBits(t.version.low>>>0,t.version.high>>>0).toNumber())),e},t.toObject=function(t,e){e||(e={});var n={};if(e.defaults)if(n.domain=\"\",c.Long){var r=new c.Long(0,0,!1);n.version=e.longs===String?r.toString():e.longs===Number?r.toNumber():r}else n.version=e.longs===String?\"0\":0;return null!=t.domain&&t.hasOwnProperty(\"domain\")&&(n.domain=t.domain),null!=t.version&&t.hasOwnProperty(\"version\")&&(\"number\"==typeof t.version?n.version=e.longs===String?String(t.version):t.version:n.version=e.longs===String?c.Long.prototype.toString.call(t.version):e.longs===Number?new c.LongBits(t.version.low>>>0,t.version.high>>>0).toNumber():t.version),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions)},t}(),o),t.exports=l},2100:(t,e,n)=>{\"use strict\";t.exports=n(9482)},9482:(t,e,n)=>{\"use strict\";var r=e;function i(){r.util._configure(),r.Writer._configure(r.BufferWriter),r.Reader._configure(r.BufferReader)}r.build=\"minimal\",r.Writer=n(1173),r.BufferWriter=n(3155),r.Reader=n(1408),r.BufferReader=n(593),r.util=n(9693),r.rpc=n(5994),r.roots=n(5054),r.configure=i,i()},1408:(t,e,n)=>{\"use strict\";t.exports=u;var r,i=n(9693),o=i.LongBits,a=i.utf8;function s(t,e){return RangeError(\"index out of range: \"+t.pos+\" + \"+(e||1)+\" > \"+t.len)}function u(t){this.buf=t,this.pos=0,this.len=t.length}var c,l=\"undefined\"!=typeof Uint8Array?function(t){if(t instanceof Uint8Array||Array.isArray(t))return new u(t);throw Error(\"illegal buffer\")}:function(t){if(Array.isArray(t))return new u(t);throw Error(\"illegal buffer\")},p=function(){return i.Buffer?function(t){return(u.create=function(t){return i.Buffer.isBuffer(t)?new r(t):l(t)})(t)}:l};function f(){var t=new o(0,0),e=0;if(!(this.len-this.pos>4)){for(;e<3;++e){if(this.pos>=this.len)throw s(this);if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t}return t.lo=(t.lo|(127&this.buf[this.pos++])<<7*e)>>>0,t}for(;e<4;++e)if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t;if(t.lo=(t.lo|(127&this.buf[this.pos])<<28)>>>0,t.hi=(t.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return t;if(e=0,this.len-this.pos>4){for(;e<5;++e)if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}else for(;e<5;++e){if(this.pos>=this.len)throw s(this);if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}throw Error(\"invalid varint encoding\")}function d(t,e){return(t[e-4]|t[e-3]<<8|t[e-2]<<16|t[e-1]<<24)>>>0}function h(){if(this.pos+8>this.len)throw s(this,8);return new o(d(this.buf,this.pos+=4),d(this.buf,this.pos+=4))}u.create=p(),u.prototype._slice=i.Array.prototype.subarray||i.Array.prototype.slice,u.prototype.uint32=(c=4294967295,function(){if(c=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return c;if(c=(c|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return c;if(c=(c|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return c;if(c=(c|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return c;if(c=(c|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return c;if((this.pos+=5)>this.len)throw this.pos=this.len,s(this,10);return c}),u.prototype.int32=function(){return 0|this.uint32()},u.prototype.sint32=function(){var t=this.uint32();return t>>>1^-(1&t)|0},u.prototype.bool=function(){return 0!==this.uint32()},u.prototype.fixed32=function(){if(this.pos+4>this.len)throw s(this,4);return d(this.buf,this.pos+=4)},u.prototype.sfixed32=function(){if(this.pos+4>this.len)throw s(this,4);return 0|d(this.buf,this.pos+=4)},u.prototype.float=function(){if(this.pos+4>this.len)throw s(this,4);var t=i.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t},u.prototype.double=function(){if(this.pos+8>this.len)throw s(this,4);var t=i.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t},u.prototype.bytes=function(){var t=this.uint32(),e=this.pos,n=this.pos+t;if(n>this.len)throw s(this,t);return this.pos+=t,Array.isArray(this.buf)?this.buf.slice(e,n):e===n?new this.buf.constructor(0):this._slice.call(this.buf,e,n)},u.prototype.string=function(){var t=this.bytes();return a.read(t,0,t.length)},u.prototype.skip=function(t){if(\"number\"==typeof t){if(this.pos+t>this.len)throw s(this,t);this.pos+=t}else do{if(this.pos>=this.len)throw s(this)}while(128&this.buf[this.pos++]);return this},u.prototype.skipType=function(t){switch(t){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(t=7&this.uint32());)this.skipType(t);break;case 5:this.skip(4);break;default:throw Error(\"invalid wire type \"+t+\" at offset \"+this.pos)}return this},u._configure=function(t){r=t,u.create=p(),r._configure();var e=i.Long?\"toLong\":\"toNumber\";i.merge(u.prototype,{int64:function(){return f.call(this)[e](!1)},uint64:function(){return f.call(this)[e](!0)},sint64:function(){return f.call(this).zzDecode()[e](!1)},fixed64:function(){return h.call(this)[e](!0)},sfixed64:function(){return h.call(this)[e](!1)}})}},593:(t,e,n)=>{\"use strict\";t.exports=o;var r=n(1408);(o.prototype=Object.create(r.prototype)).constructor=o;var i=n(9693);function o(t){r.call(this,t)}o._configure=function(){i.Buffer&&(o.prototype._slice=i.Buffer.prototype.slice)},o.prototype.string=function(){var t=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len)):this.buf.toString(\"utf-8\",this.pos,this.pos=Math.min(this.pos+t,this.len))},o._configure()},5054:t=>{\"use strict\";t.exports={}},5994:(t,e,n)=>{\"use strict\";e.Service=n(7948)},7948:(t,e,n)=>{\"use strict\";t.exports=i;var r=n(9693);function i(t,e,n){if(\"function\"!=typeof t)throw TypeError(\"rpcImpl must be a function\");r.EventEmitter.call(this),this.rpcImpl=t,this.requestDelimited=Boolean(e),this.responseDelimited=Boolean(n)}(i.prototype=Object.create(r.EventEmitter.prototype)).constructor=i,i.prototype.rpcCall=function t(e,n,i,o,a){if(!o)throw TypeError(\"request must be specified\");var s=this;if(!a)return r.asPromise(t,s,e,n,i,o);if(s.rpcImpl)try{return s.rpcImpl(e,n[s.requestDelimited?\"encodeDelimited\":\"encode\"](o).finish(),(function(t,n){if(t)return s.emit(\"error\",t,e),a(t);if(null!==n){if(!(n instanceof i))try{n=i[s.responseDelimited?\"decodeDelimited\":\"decode\"](n)}catch(t){return s.emit(\"error\",t,e),a(t)}return s.emit(\"data\",n,e),a(null,n)}s.end(!0)}))}catch(t){return s.emit(\"error\",t,e),void setTimeout((function(){a(t)}),0)}else setTimeout((function(){a(Error(\"already ended\"))}),0)},i.prototype.end=function(t){return this.rpcImpl&&(t||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit(\"end\").off()),this}},1945:(t,e,n)=>{\"use strict\";t.exports=i;var r=n(9693);function i(t,e){this.lo=t>>>0,this.hi=e>>>0}var o=i.zero=new i(0,0);o.toNumber=function(){return 0},o.zzEncode=o.zzDecode=function(){return this},o.length=function(){return 1};var a=i.zeroHash=\"\\0\\0\\0\\0\\0\\0\\0\\0\";i.fromNumber=function(t){if(0===t)return o;var e=t<0;e&&(t=-t);var n=t>>>0,r=(t-n)/4294967296>>>0;return e&&(r=~r>>>0,n=~n>>>0,++n>4294967295&&(n=0,++r>4294967295&&(r=0))),new i(n,r)},i.from=function(t){if(\"number\"==typeof t)return i.fromNumber(t);if(r.isString(t)){if(!r.Long)return i.fromNumber(parseInt(t,10));t=r.Long.fromString(t)}return t.low||t.high?new i(t.low>>>0,t.high>>>0):o},i.prototype.toNumber=function(t){if(!t&&this.hi>>>31){var e=1+~this.lo>>>0,n=~this.hi>>>0;return e||(n=n+1>>>0),-(e+4294967296*n)}return this.lo+4294967296*this.hi},i.prototype.toLong=function(t){return r.Long?new r.Long(0|this.lo,0|this.hi,Boolean(t)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(t)}};var s=String.prototype.charCodeAt;i.fromHash=function(t){return t===a?o:new i((s.call(t,0)|s.call(t,1)<<8|s.call(t,2)<<16|s.call(t,3)<<24)>>>0,(s.call(t,4)|s.call(t,5)<<8|s.call(t,6)<<16|s.call(t,7)<<24)>>>0)},i.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},i.prototype.zzEncode=function(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this},i.prototype.zzDecode=function(){var t=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this},i.prototype.length=function(){var t=this.lo,e=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return 0===n?0===e?t<16384?t<128?1:2:t<2097152?3:4:e<16384?e<128?5:6:e<2097152?7:8:n<128?9:10}},9693:function(t,e,n){\"use strict\";var r=e;function i(t,e,n){for(var r=Object.keys(e),i=0;i<r.length;++i)void 0!==t[r[i]]&&n||(t[r[i]]=e[r[i]]);return t}function o(t){function e(t,n){if(!(this instanceof e))return new e(t,n);Object.defineProperty(this,\"message\",{get:function(){return t}}),Error.captureStackTrace?Error.captureStackTrace(this,e):Object.defineProperty(this,\"stack\",{value:(new Error).stack||\"\"}),n&&i(this,n)}return(e.prototype=Object.create(Error.prototype)).constructor=e,Object.defineProperty(e.prototype,\"name\",{get:function(){return t}}),e.prototype.toString=function(){return this.name+\": \"+this.message},e}r.asPromise=n(4537),r.base64=n(7419),r.EventEmitter=n(9211),r.float=n(945),r.inquire=n(7199),r.utf8=n(4997),r.pool=n(6662),r.LongBits=n(1945),r.isNode=Boolean(void 0!==n.g&&n.g&&n.g.process&&n.g.process.versions&&n.g.process.versions.node),r.global=r.isNode&&n.g||\"undefined\"!=typeof window&&window||\"undefined\"!=typeof self&&self||this,r.emptyArray=Object.freeze?Object.freeze([]):[],r.emptyObject=Object.freeze?Object.freeze({}):{},r.isInteger=Number.isInteger||function(t){return\"number\"==typeof t&&isFinite(t)&&Math.floor(t)===t},r.isString=function(t){return\"string\"==typeof t||t instanceof String},r.isObject=function(t){return t&&\"object\"==typeof t},r.isset=r.isSet=function(t,e){var n=t[e];return!(null==n||!t.hasOwnProperty(e))&&(\"object\"!=typeof n||(Array.isArray(n)?n.length:Object.keys(n).length)>0)},r.Buffer=function(){try{var t=r.inquire(\"buffer\").Buffer;return t.prototype.utf8Write?t:null}catch(t){return null}}(),r._Buffer_from=null,r._Buffer_allocUnsafe=null,r.newBuffer=function(t){return\"number\"==typeof t?r.Buffer?r._Buffer_allocUnsafe(t):new r.Array(t):r.Buffer?r._Buffer_from(t):\"undefined\"==typeof Uint8Array?t:new Uint8Array(t)},r.Array=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,r.Long=r.global.dcodeIO&&r.global.dcodeIO.Long||r.global.Long||r.inquire(\"long\"),r.key2Re=/^true|false|0|1$/,r.key32Re=/^-?(?:0|[1-9][0-9]*)$/,r.key64Re=/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,r.longToHash=function(t){return t?r.LongBits.from(t).toHash():r.LongBits.zeroHash},r.longFromHash=function(t,e){var n=r.LongBits.fromHash(t);return r.Long?r.Long.fromBits(n.lo,n.hi,e):n.toNumber(Boolean(e))},r.merge=i,r.lcFirst=function(t){return t.charAt(0).toLowerCase()+t.substring(1)},r.newError=o,r.ProtocolError=o(\"ProtocolError\"),r.oneOfGetter=function(t){for(var e={},n=0;n<t.length;++n)e[t[n]]=1;return function(){for(var t=Object.keys(this),n=t.length-1;n>-1;--n)if(1===e[t[n]]&&void 0!==this[t[n]]&&null!==this[t[n]])return t[n]}},r.oneOfSetter=function(t){return function(e){for(var n=0;n<t.length;++n)t[n]!==e&&delete this[t[n]]}},r.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},r._configure=function(){var t=r.Buffer;t?(r._Buffer_from=t.from!==Uint8Array.from&&t.from||function(e,n){return new t(e,n)},r._Buffer_allocUnsafe=t.allocUnsafe||function(e){return new t(e)}):r._Buffer_from=r._Buffer_allocUnsafe=null}},1173:(t,e,n)=>{\"use strict\";t.exports=p;var r,i=n(9693),o=i.LongBits,a=i.base64,s=i.utf8;function u(t,e,n){this.fn=t,this.len=e,this.next=void 0,this.val=n}function c(){}function l(t){this.head=t.head,this.tail=t.tail,this.len=t.len,this.next=t.states}function p(){this.len=0,this.head=new u(c,0,0),this.tail=this.head,this.states=null}var f=function(){return i.Buffer?function(){return(p.create=function(){return new r})()}:function(){return new p}};function d(t,e,n){e[n]=255&t}function h(t,e){this.len=t,this.next=void 0,this.val=e}function g(t,e,n){for(;t.hi;)e[n++]=127&t.lo|128,t.lo=(t.lo>>>7|t.hi<<25)>>>0,t.hi>>>=7;for(;t.lo>127;)e[n++]=127&t.lo|128,t.lo=t.lo>>>7;e[n++]=t.lo}function b(t,e,n){e[n]=255&t,e[n+1]=t>>>8&255,e[n+2]=t>>>16&255,e[n+3]=t>>>24}p.create=f(),p.alloc=function(t){return new i.Array(t)},i.Array!==Array&&(p.alloc=i.pool(p.alloc,i.Array.prototype.subarray)),p.prototype._push=function(t,e,n){return this.tail=this.tail.next=new u(t,e,n),this.len+=e,this},h.prototype=Object.create(u.prototype),h.prototype.fn=function(t,e,n){for(;t>127;)e[n++]=127&t|128,t>>>=7;e[n]=t},p.prototype.uint32=function(t){return this.len+=(this.tail=this.tail.next=new h((t>>>=0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this},p.prototype.int32=function(t){return t<0?this._push(g,10,o.fromNumber(t)):this.uint32(t)},p.prototype.sint32=function(t){return this.uint32((t<<1^t>>31)>>>0)},p.prototype.uint64=function(t){var e=o.from(t);return this._push(g,e.length(),e)},p.prototype.int64=p.prototype.uint64,p.prototype.sint64=function(t){var e=o.from(t).zzEncode();return this._push(g,e.length(),e)},p.prototype.bool=function(t){return this._push(d,1,t?1:0)},p.prototype.fixed32=function(t){return this._push(b,4,t>>>0)},p.prototype.sfixed32=p.prototype.fixed32,p.prototype.fixed64=function(t){var e=o.from(t);return this._push(b,4,e.lo)._push(b,4,e.hi)},p.prototype.sfixed64=p.prototype.fixed64,p.prototype.float=function(t){return this._push(i.float.writeFloatLE,4,t)},p.prototype.double=function(t){return this._push(i.float.writeDoubleLE,8,t)};var m=i.Array.prototype.set?function(t,e,n){e.set(t,n)}:function(t,e,n){for(var r=0;r<t.length;++r)e[n+r]=t[r]};p.prototype.bytes=function(t){var e=t.length>>>0;if(!e)return this._push(d,1,0);if(i.isString(t)){var n=p.alloc(e=a.length(t));a.decode(t,n,0),t=n}return this.uint32(e)._push(m,e,t)},p.prototype.string=function(t){var e=s.length(t);return e?this.uint32(e)._push(s.write,e,t):this._push(d,1,0)},p.prototype.fork=function(){return this.states=new l(this),this.head=this.tail=new u(c,0,0),this.len=0,this},p.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new u(c,0,0),this.len=0),this},p.prototype.ldelim=function(){var t=this.head,e=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=t.next,this.tail=e,this.len+=n),this},p.prototype.finish=function(){for(var t=this.head.next,e=this.constructor.alloc(this.len),n=0;t;)t.fn(t.val,e,n),n+=t.len,t=t.next;return e},p._configure=function(t){r=t,p.create=f(),r._configure()}},3155:(t,e,n)=>{\"use strict\";t.exports=o;var r=n(1173);(o.prototype=Object.create(r.prototype)).constructor=o;var i=n(9693);function o(){r.call(this)}function a(t,e,n){t.length<40?i.utf8.write(t,e,n):e.utf8Write?e.utf8Write(t,n):e.write(t,n)}o._configure=function(){o.alloc=i._Buffer_allocUnsafe,o.writeBytesBuffer=i.Buffer&&i.Buffer.prototype instanceof Uint8Array&&\"set\"===i.Buffer.prototype.set.name?function(t,e,n){e.set(t,n)}:function(t,e,n){if(t.copy)t.copy(e,n,0,t.length);else for(var r=0;r<t.length;)e[n++]=t[r++]}},o.prototype.bytes=function(t){i.isString(t)&&(t=i._Buffer_from(t,\"base64\"));var e=t.length>>>0;return this.uint32(e),e&&this._push(o.writeBytesBuffer,e,t),this},o.prototype.string=function(t){var e=i.Buffer.byteLength(t);return this.uint32(e),e&&this._push(a,e,t),this},o._configure()},7714:(t,e,n)=>{\"use strict\";e.R=void 0;const r=n(6919),i=n(7448);e.R=new class{async init(){}async createSessionHandler(t,e){const n=new r.Session(e);return await n.loadModel(t),new i.OnnxjsSessionHandler(n)}}},4200:(t,e,n)=>{\"use strict\";e.c8=e.rX=void 0;const r=n(1670),i=n(5381),o=n(2157),a=n(2306);e.rX=()=>{if((\"number\"!=typeof r.env.wasm.initTimeout||r.env.wasm.initTimeout<0)&&(r.env.wasm.initTimeout=0),\"boolean\"!=typeof r.env.wasm.simd&&(r.env.wasm.simd=!0),\"boolean\"!=typeof r.env.wasm.proxy&&(r.env.wasm.proxy=!1),\"number\"!=typeof r.env.wasm.numThreads||!Number.isInteger(r.env.wasm.numThreads)||r.env.wasm.numThreads<=0){const t=\"undefined\"==typeof navigator?(0,i.cpus)().length:navigator.hardwareConcurrency;r.env.wasm.numThreads=Math.min(4,Math.ceil((t||1)/2))}},e.c8=new class{async init(){(0,e.rX)(),await(0,o.initWasm)()}async createSessionHandler(t,e){const n=new a.OnnxruntimeWebAssemblySessionHandler;return await n.loadModel(t,e),Promise.resolve(n)}}},6018:function(t,e,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!(\"get\"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,i)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__exportStar||function(t,e){for(var n in t)\"default\"===n||Object.prototype.hasOwnProperty.call(e,n)||r(e,t,n)};Object.defineProperty(e,\"__esModule\",{value:!0}),i(n(1670),e);const o=n(1670);{const t=n(7714).R;(0,o.registerBackend)(\"webgl\",t,-10)}{const t=n(4200).c8;(0,o.registerBackend)(\"cpu\",t,10),(0,o.registerBackend)(\"wasm\",t,10),(0,o.registerBackend)(\"xnnpack\",t,9)}},246:(t,e)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.createAttributeWithCacheKey=void 0;class n{constructor(t){Object.assign(this,t)}get cacheKey(){return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map((t=>`${this[t]}`)).join(\";\")),this._cacheKey}}e.createAttributeWithCacheKey=t=>new n(t)},7778:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.Attribute=void 0;const r=n(1446),i=n(9395),o=n(9162),a=n(2517);var s=i.onnxruntime.experimental.fbs;class u{constructor(t){if(this._attributes=new Map,null!=t){for(const e of t)e instanceof r.onnx.AttributeProto?this._attributes.set(e.name,[u.getValue(e),u.getType(e)]):e instanceof s.Attribute&&this._attributes.set(e.name(),[u.getValue(e),u.getType(e)]);if(this._attributes.size<t.length)throw new Error(\"duplicated attribute names\")}}set(t,e,n){this._attributes.set(t,[n,e])}delete(t){this._attributes.delete(t)}getFloat(t,e){return this.get(t,\"float\",e)}getInt(t,e){return this.get(t,\"int\",e)}getString(t,e){return this.get(t,\"string\",e)}getTensor(t,e){return this.get(t,\"tensor\",e)}getFloats(t,e){return this.get(t,\"floats\",e)}getInts(t,e){return this.get(t,\"ints\",e)}getStrings(t,e){return this.get(t,\"strings\",e)}getTensors(t,e){return this.get(t,\"tensors\",e)}get(t,e,n){const r=this._attributes.get(t);if(void 0===r){if(void 0!==n)return n;throw new Error(`required attribute not found: ${t}`)}if(r[1]!==e)throw new Error(`type mismatch: expected ${e} but got ${r[1]}`);return r[0]}static getType(t){const e=t instanceof r.onnx.AttributeProto?t.type:t.type();switch(e){case r.onnx.AttributeProto.AttributeType.FLOAT:return\"float\";case r.onnx.AttributeProto.AttributeType.INT:return\"int\";case r.onnx.AttributeProto.AttributeType.STRING:return\"string\";case r.onnx.AttributeProto.AttributeType.TENSOR:return\"tensor\";case r.onnx.AttributeProto.AttributeType.FLOATS:return\"floats\";case r.onnx.AttributeProto.AttributeType.INTS:return\"ints\";case r.onnx.AttributeProto.AttributeType.STRINGS:return\"strings\";case r.onnx.AttributeProto.AttributeType.TENSORS:return\"tensors\";default:throw new Error(`attribute type is not supported yet: ${r.onnx.AttributeProto.AttributeType[e]}`)}}static getValue(t){const e=t instanceof r.onnx.AttributeProto?t.type:t.type();if(e===r.onnx.AttributeProto.AttributeType.GRAPH||e===r.onnx.AttributeProto.AttributeType.GRAPHS)throw new Error(\"graph attribute is not supported yet\");const n=this.getValueNoCheck(t);if(e===r.onnx.AttributeProto.AttributeType.INT&&a.LongUtil.isLong(n))return a.LongUtil.longToNumber(n);if(e===r.onnx.AttributeProto.AttributeType.INTS){const t=n,e=new Array(t.length);for(let n=0;n<t.length;n++){const r=t[n];e[n]=a.LongUtil.longToNumber(r)}return e}if(e===r.onnx.AttributeProto.AttributeType.TENSOR)return t instanceof r.onnx.AttributeProto?o.Tensor.fromProto(n):o.Tensor.fromOrtTensor(n);if(e===r.onnx.AttributeProto.AttributeType.TENSORS){if(t instanceof r.onnx.AttributeProto)return n.map((t=>o.Tensor.fromProto(t)));if(t instanceof s.Attribute)return n.map((t=>o.Tensor.fromOrtTensor(t)))}if(e===r.onnx.AttributeProto.AttributeType.STRING&&t instanceof r.onnx.AttributeProto){const t=n;return(0,a.decodeUtf8String)(t)}return e===r.onnx.AttributeProto.AttributeType.STRINGS&&t instanceof r.onnx.AttributeProto?n.map(a.decodeUtf8String):n}static getValueNoCheck(t){return t instanceof r.onnx.AttributeProto?this.getValueNoCheckFromOnnxFormat(t):this.getValueNoCheckFromOrtFormat(t)}static getValueNoCheckFromOnnxFormat(t){switch(t.type){case r.onnx.AttributeProto.AttributeType.FLOAT:return t.f;case r.onnx.AttributeProto.AttributeType.INT:return t.i;case r.onnx.AttributeProto.AttributeType.STRING:return t.s;case r.onnx.AttributeProto.AttributeType.TENSOR:return t.t;case r.onnx.AttributeProto.AttributeType.GRAPH:return t.g;case r.onnx.AttributeProto.AttributeType.FLOATS:return t.floats;case r.onnx.AttributeProto.AttributeType.INTS:return t.ints;case r.onnx.AttributeProto.AttributeType.STRINGS:return t.strings;case r.onnx.AttributeProto.AttributeType.TENSORS:return t.tensors;case r.onnx.AttributeProto.AttributeType.GRAPHS:return t.graphs;default:throw new Error(`unsupported attribute type: ${r.onnx.AttributeProto.AttributeType[t.type]}`)}}static getValueNoCheckFromOrtFormat(t){switch(t.type()){case s.AttributeType.FLOAT:return t.f();case s.AttributeType.INT:return t.i();case s.AttributeType.STRING:return t.s();case s.AttributeType.TENSOR:return t.t();case s.AttributeType.GRAPH:return t.g();case s.AttributeType.FLOATS:return t.floatsArray();case s.AttributeType.INTS:{const e=[];for(let n=0;n<t.intsLength();n++)e.push(t.ints(n));return e}case s.AttributeType.STRINGS:{const e=[];for(let n=0;n<t.stringsLength();n++)e.push(t.strings(n));return e}case s.AttributeType.TENSORS:{const e=[];for(let n=0;n<t.tensorsLength();n++)e.push(t.tensors(n));return e}default:throw new Error(`unsupported attribute type: ${s.AttributeType[t.type()]}`)}}}e.Attribute=u},7091:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.resolveBackend=e.backend=void 0;const r=n(5038),i=new Map;async function o(t){const n=e.backend;if(void 0!==n[t]&&function(t){const e=t;return\"initialize\"in e&&\"function\"==typeof e.initialize&&\"createSessionHandler\"in e&&\"function\"==typeof e.createSessionHandler&&\"dispose\"in e&&\"function\"==typeof e.dispose}(n[t])){const e=n[t];let r=e.initialize();if(\"object\"==typeof r&&\"then\"in r&&(r=await r),r)return i.set(t,e),e}}e.backend={webgl:new r.WebGLBackend},e.resolveBackend=async function t(e){if(!e)return t([\"webgl\"]);{const t=\"string\"==typeof e?[e]:e;for(const e of t){const t=i.get(e);if(t)return t;const n=await o(e);if(n)return n}}throw new Error(\"no available backend to use\")}},5038:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.WebGLBackend=void 0;const r=n(1670),i=n(6231),o=n(6416),a=n(7305);e.WebGLBackend=class{get contextId(){return r.env.webgl.contextId}set contextId(t){r.env.webgl.contextId=t}get matmulMaxBatchSize(){return r.env.webgl.matmulMaxBatchSize}set matmulMaxBatchSize(t){r.env.webgl.matmulMaxBatchSize=t}get textureCacheMode(){return r.env.webgl.textureCacheMode}set textureCacheMode(t){r.env.webgl.textureCacheMode=t}get pack(){return r.env.webgl.pack}set pack(t){r.env.webgl.pack=t}get async(){return r.env.webgl.async}set async(t){r.env.webgl.async=t}initialize(){try{return this.glContext=(0,a.createWebGLContext)(this.contextId),\"number\"!=typeof this.matmulMaxBatchSize&&(this.matmulMaxBatchSize=16),\"string\"!=typeof this.textureCacheMode&&(this.textureCacheMode=\"full\"),\"boolean\"!=typeof this.pack&&(this.pack=!1),\"boolean\"!=typeof this.async&&(this.async=!1),i.Logger.setWithEnv(r.env),i.Logger.verbose(\"WebGLBackend\",`Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`),!0}catch(t){return i.Logger.warning(\"WebGLBackend\",`Unable to initialize WebGLBackend. ${t}`),!1}}createSessionHandler(t){return new o.WebGLSessionHandler(this,t)}dispose(){this.glContext.dispose()}}},5107:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.CoordsGlslLib=void 0;const r=n(2517),i=n(8520),o=n(5060),a=n(7859),s=n(9390);class u extends i.GlslLib{constructor(t){super(t)}getFunctions(){return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},this.offsetToCoords()),this.coordsToOffset()),this.toVec()),this.valueFrom()),this.getCommonUtilFuncs()),this.getInputsSamplingSnippets()),this.getOutputSamplingSnippet())}getCustomTypes(){return{}}offsetToCoords(){return{offsetToCoords:new i.GlslLibRoutine(\"\\n      vec2 offsetToCoords(int offset, int width, int height) {\\n        int t = offset / width;\\n        int s = offset - t*width;\\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\\n        return coords;\\n      }\\n      \")}}coordsToOffset(){return{coordsToOffset:new i.GlslLibRoutine(\"\\n      int coordsToOffset(vec2 coords, int width, int height) {\\n        float s = coords.s * float(width);\\n        float t = coords.t * float(height);\\n        int offset = int(t) * width + int(s);\\n        return offset;\\n      }\\n      \")}}getOutputSamplingSnippet(){const t=this.context.outputTextureLayout;return t.isPacked?this.getPackedOutputSamplingSnippet(t):this.getUnpackedOutputSamplingSnippet(t)}getPackedOutputSamplingSnippet(t){const e=t.unpackedShape,n=[t.width,t.height],r={},a=\"getOutputCoords\";switch(e.length){case 0:r[a]=this.getOutputScalarCoords();break;case 1:r[a]=this.getOutputPacked1DCoords(e,n);break;case 2:r[a]=this.getOutputPacked2DCoords(e,n);break;case 3:r[a]=this.getOutputPacked3DCoords(e,n);break;default:r[a]=this.getOutputPackedNDCoords(e,n)}const s=`\\n      void setOutput(vec4 val) {\\n        ${(0,o.getGlsl)(this.context.glContext.version).output} = val;\\n      }\\n    `;return r.floatTextureSetRGBA=new i.GlslLibRoutine(s),r}getUnpackedOutputSamplingSnippet(t){const e=t.unpackedShape,n=[t.width,t.height],r={},a=\"getOutputCoords\";switch(e.length){case 0:r[a]=this.getOutputScalarCoords();break;case 1:r[a]=this.getOutputUnpacked1DCoords(e,n);break;case 2:r[a]=this.getOutputUnpacked2DCoords(e,n);break;case 3:r[a]=this.getOutputUnpacked3DCoords(e,n);break;case 4:r[a]=this.getOutputUnpacked4DCoords(e,n);break;case 5:r[a]=this.getOutputUnpacked5DCoords(e,n);break;case 6:r[a]=this.getOutputUnpacked6DCoords(e,n);break;default:throw new Error(`Unsupported output dimensionality: ${e.length}`)}const s=`\\n        void setOutput(float val) {\\n          ${(0,o.getGlsl)(this.context.glContext.version).output} = vec4(val, 0, 0, 0);\\n        }\\n    `;return r.floatTextureSetR=new i.GlslLibRoutine(s),r}getOutputScalarCoords(){return new i.GlslLibRoutine(\"\\n      int getOutputCoords() {\\n        return 0;\\n      }\\n    \")}getOutputPacked1DCoords(t,e){const n=e;let r=\"\";return 1===n[0]?(r=`\\n          int getOutputCoords() {\\n            return 2 * int(TexCoords.y * ${n[1]}.0);\\n          }\\n        `,new i.GlslLibRoutine(r)):1===n[1]?(r=`\\n          int getOutputCoords() {\\n            return 2 * int(TexCoords.x * ${n[0]}.0);\\n          }\\n        `,new i.GlslLibRoutine(r)):(r=`\\n        int getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                 vec2(${n[0]}, ${n[1]}));\\n          return 2 * (resTexRC.y * ${n[0]} + resTexRC.x);\\n        }\\n      `,new i.GlslLibRoutine(r))}getOutputPacked2DCoords(t,e){let n=\"\";if(r.ArrayUtil.arraysEqual(t,e))return n=`\\n        ivec2 getOutputCoords() {\\n          return 2 * ivec2(TexCoords.xy * vec2(${e[0]}, ${e[1]}));\\n        }\\n      `,new i.GlslLibRoutine(n);const o=e,a=Math.ceil(t[1]/2);return n=`\\n        ivec2 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${o[0]}, ${o[1]}));\\n\\n          int index = resTexRC.y * ${o[0]} + resTexRC.x;\\n\\n          // reverse r and c order for packed texture\\n          int r = imod(index, ${a}) * 2;\\n          int c = 2 * (index / ${a});\\n\\n          return ivec2(r, c);\\n        }\\n      `,new i.GlslLibRoutine(n)}getOutputPacked3DCoords(t,e){const n=[e[0],e[1]],r=Math.ceil(t[2]/2),o=r*Math.ceil(t[1]/2),a=`\\n        ivec3 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${n[0]}, ${n[1]}));\\n          int index = resTexRC.y * ${n[0]} + resTexRC.x;\\n\\n          int b = index / ${o};\\n          index -= b * ${o};\\n\\n          // reverse r and c order for packed texture\\n          int r = imod(index, ${r}) * 2;\\n          int c = 2 * (index / ${r});\\n\\n          return ivec3(b, r, c);\\n        }\\n      `;return new i.GlslLibRoutine(a)}getOutputPackedNDCoords(t,e){const n=[e[0],e[1]],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2);let a=o,s=\"\",u=\"b, r, c\";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],s=`\\n      int b${e} = index / ${a};\\n      index -= b${e} * ${a};\\n    `+s,u=`b${e}, `+u;const c=`\\n      ivec${t.length} getOutputCoords() {\\n        ivec2 resTexRC = ivec2(TexCoords.xy *\\n                              vec2(${n[0]}, ${n[1]}));\\n        int index = resTexRC.y * ${n[0]} + resTexRC.x;\\n\\n        ${s}\\n\\n        int b = index / ${o};\\n        index -= b * ${o};\\n\\n        // reverse r and c order for packed texture\\n        int r = imod(index, ${r}) * 2;\\n        int c = 2 * (index / ${r});\\n\\n        return ivec${t.length}(${u});\\n      }\\n    `;return new i.GlslLibRoutine(c)}getOutputUnpacked1DCoords(t,e){const n=`\\n        int getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${e[0]}, ${e[1]}));\\n          return resTexRC.y * ${e[0]} + resTexRC.x;\\n        }\\n      `;return new i.GlslLibRoutine(n)}getOutputUnpacked2DCoords(t,e){const n=`\\n        ivec2 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${e[0]}, ${e[1]}));\\n          int index = resTexRC.y * ${e[0]} + resTexRC.x;\\n          int r = index / ${t[1]};\\n          int c = index - r * ${t[1]};\\n          return ivec2(r, c);\\n        }\\n      `;return new i.GlslLibRoutine(n)}getOutputUnpacked3DCoords(t,e){let n=\"\";const r=t.length;let o=null;r<2&&(o=[]),o=new Array(r-1),o[r-2]=t[r-1];for(let e=r-3;e>=0;--e)o[e]=o[e+1]*t[e+1];const a=[\"r\",\"c\",\"d\"],s=o.map(((t,e)=>`int ${a[e]} = index / ${t}; ${e===o.length-1?`int ${a[e+1]} = index - ${a[e]} * ${t}`:`index -= ${a[e]} * ${t}`};`)).join(\"\");return n=`\\n        ivec3 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${e[0]}, ${e[1]}));\\n          int index = resTexRC.y * ${e[0]} + resTexRC.x;\\n          ${s}\\n          return ivec3(r, c, d);\\n        }\\n      `,new i.GlslLibRoutine(n)}getOutputUnpacked4DCoords(t,e){let n=\"\";const r=t.length;let o=null;r<2&&(o=[]),o=new Array(r-1),o[r-2]=t[r-1];for(let e=r-3;e>=0;--e)o[e]=o[e+1]*t[e+1];const a=[\"r\",\"c\",\"d\",\"d2\"],s=o.map(((t,e)=>`int ${a[e]} = index / ${t}; ${e===o.length-1?`int ${a[e+1]} = index - ${a[e]} * ${t}`:`index -= ${a[e]} * ${t}`};`)).join(\"\");return n=`\\n      ivec4 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${e[0]}, ${e[1]}));\\n          int index = resTexRC.y * ${e[0]} + resTexRC.x;\\n          ${s}\\n          return ivec4(r, c, d, d2);\\n        }\\n      `,new i.GlslLibRoutine(n)}getOutputUnpacked5DCoords(t,e){let n=\"\";const r=t.length;let o=null;r<2&&(o=[]),o=new Array(r-1),o[r-2]=t[r-1];for(let e=r-3;e>=0;--e)o[e]=o[e+1]*t[e+1];const a=[\"r\",\"c\",\"d\",\"d2\",\"d3\"],s=o.map(((t,e)=>`int ${a[e]} = index / ${t}; ${e===o.length-1?`int ${a[e+1]} = index - ${a[e]} * ${t}`:`index -= ${a[e]} * ${t}`};`)).join(\"\");return n=`\\n      ivec5 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${e[0]}, ${e[1]}));\\n          int index = resTexRC.y * ${e[0]} + resTexRC.x;\\n          ${s}\\n          return ivec5(r, c, d, d2, d3);\\n        }\\n      `,new i.GlslLibRoutine(n)}getOutputUnpacked6DCoords(t,e){let n=\"\";const r=t.length;let o=null;r<2&&(o=[]),o=new Array(r-1),o[r-2]=t[r-1];for(let e=r-3;e>=0;--e)o[e]=o[e+1]*t[e+1];const a=[\"r\",\"c\",\"d\",\"d2\",\"d3\",\"d4\"],s=o.map(((t,e)=>`int ${a[e]} = index / ${t}; ${e===o.length-1?`int ${a[e+1]} = index - ${a[e]} * ${t}`:`index -= ${a[e]} * ${t}`};`)).join(\"\");return n=`\\n     ivec6 getOutputCoords() {\\n         ivec2 resTexRC = ivec2(TexCoords.xy *\\n                               vec2(${e[0]}, ${e[1]}));\\n         int index = resTexRC.y * ${e[0]} + resTexRC.x;\\n         ${s}\\n         return ivec6(r, c, d, d2, d3, d4);\\n       }\\n     `,new i.GlslLibRoutine(n)}getCommonUtilFuncs(){const t={};let e=\"uvFromFlat\";t[e]=new i.GlslLibRoutine(\"\\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n      int texC = index / texNumR;\\n      int texR = index - texC * texNumR;\\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\\n      //       v.\\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\\n    }\\n    \"),e=\"packedUVfrom1D\",t[e]=new i.GlslLibRoutine(\"\\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n        int texelIndex = index / 2;\\n        int texR = texelIndex / texNumC;\\n        int texC = texelIndex - texR * texNumC;\\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n      }\\n      \"),e=\"packedUVfrom2D\",t[e]=new i.GlslLibRoutine(\"\\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n        int texR = texelIndex / texNumC;\\n        int texC = texelIndex - texR * texNumC;\\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n      }\\n      \"),e=\"packedUVfrom3D\",t[e]=new i.GlslLibRoutine(\"\\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\\n          int texelsInBatch, int texelsInLogicalRow, int b,\\n          int row, int col) {\\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n        int texR = index / texNumC;\\n        int texC = index - texR * texNumC;\\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n      }\\n      \"),e=\"sampleTexture\";const n=(0,o.getGlsl)(this.context.glContext.version);return t[e]=new i.GlslLibRoutine(`\\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n            return ${n.texture2D}(textureSampler, uv).r;\\n        }`),t}getInputsSamplingSnippets(){const t={},e=this.context.outputTextureLayout;return this.context.programInfo.inputNames.forEach(((n,r)=>{const i=this.context.inputTextureLayouts[r],o=(0,s.generateShaderFuncNameFromInputSamplerName)(n);i.isPacked?t[o]=this.getPackedSamplerFromInput(o,n,i):t[o]=this.getUnpackedSamplerFromInput(o,n,i);const a=(0,s.generateShaderFuncNameFromInputSamplerNameAtOutCoords)(n);i.unpackedShape.length<=e.unpackedShape.length&&(i.isPacked?t[a]=this.getPackedSamplerAtOutputCoords(a,i,e,n):t[a]=this.getUnpackedSamplerAtOutputCoords(a,i,e,n))})),t}getPackedSamplerAtOutputCoords(t,e,n,o){const a=e.unpackedShape,u=n.unpackedShape,c=o,l=(0,s.generateShaderFuncNameFromInputSamplerName)(c),p=a.length,f=u.length,d=r.BroadcastUtil.getBroadcastDims(a,u),h=(0,s.getCoordsDataType)(f),g=f-p;let b;const m=(0,s.getGlChannels)();b=0===p?\"\":f<2&&d.length>=1?\"coords = 0;\":d.map((t=>`coords.${m[t+g]} = 0;`)).join(\"\\n\");let y=\"\";y=f<2&&p>0?\"coords\":a.map(((t,e)=>`coords.${m[e+g]}`)).join(\", \");let _=\"return outputValue;\";const v=1===r.ShapeUtil.size(a),w=1===r.ShapeUtil.size(u);if(1!==p||v||w){if(v&&!w)_=1===f?\"\\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\\n        \":\"\\n          return vec4(outputValue.x);\\n        \";else if(d.length){const t=p-2,e=p-1;d.indexOf(t)>-1&&d.indexOf(e)>-1?_=\"return vec4(outputValue.x);\":d.indexOf(t)>-1?_=\"return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);\":d.indexOf(e)>-1&&(_=\"return vec4(outputValue.xx, outputValue.zz);\")}}else _=\"\\n        return vec4(outputValue.xy, outputValue.xy);\\n      \";const x=`\\n      vec4 ${t}() {\\n        ${h} coords = getOutputCoords();\\n        \\n        int lastDim = coords.${m[f-1]};\\n        coords.${m[f-1]} = coords.${m[f-2]};\\n        coords.${m[f-2]} = lastDim;\\n      \\n        ${b}\\n        vec4 outputValue = ${l}(${y});\\n        ${_}\\n      }\\n    `;return new i.GlslLibRoutine(x,[\"coordinates.getOutputCoords\"])}getUnpackedSamplerAtOutputCoords(t,e,n,o){const a=[n.width,n.height],u=[e.width,e.height],c=e.unpackedShape.length,l=n.unpackedShape.length,p=e.unpackedShape,f=n.unpackedShape,d=(0,s.generateShaderFuncNameFromInputSamplerName)(o);if(c===l&&r.ArrayUtil.arraysEqual(u,a)){const e=`\\n          float ${t}() {\\n            return sampleTexture(${o}, TexCoords);\\n          }\\n        `;return new i.GlslLibRoutine(e,[\"coordinates.sampleTexture\"])}const h=(0,s.getCoordsDataType)(l),g=r.BroadcastUtil.getBroadcastDims(p,f),b=l-c;let m;const y=(0,s.getGlChannels)();m=0===c?\"\":l<2&&g.length>=1?\"coords = 0;\":g.map((t=>`coords.${y[t+b]} = 0;`)).join(\"\\n\");let _=\"\";_=l<2&&c>0?\"coords\":e.unpackedShape.map(((t,e)=>`coords.${y[e+b]}`)).join(\", \");const v=`\\n        float ${t}() {\\n          ${h} coords = getOutputCoords();\\n          ${m}\\n          return ${d}(${_});\\n        }\\n      `;return new i.GlslLibRoutine(v,[\"coordinates.getOutputCoords\"])}getPackedSamplerFromInput(t,e,n){switch(n.unpackedShape.length){case 0:return this.getPackedSamplerScalar(t,e);case 1:return this.getPackedSampler1D(t,e,n);case 2:return this.getPackedSampler2D(t,e,n);case 3:return this.getPackedSampler3D(t,e,n);default:return this.getPackedSamplerND(t,e,n)}}getUnpackedSamplerFromInput(t,e,n){const r=n.unpackedShape;switch(r.length){case 0:return this.getUnpackedSamplerScalar(t,e,n);case 1:return this.getUnpackedSampler1D(t,e,n);case 2:return this.getUnpackedSampler2D(t,e,n);case 3:return this.getUnpackedSampler3D(t,e,n);case 4:return this.getUnpackedSampler4D(t,e,n);case 5:return this.getUnpackedSampler5D(t,e,n);case 6:return this.getUnpackedSampler6D(t,e,n);default:throw new Error(`Unsupported dimension ${r.length}-D`)}}getPackedSamplerScalar(t,e){const n=`\\n          vec4 ${t}() {\\n            return ${(0,o.getGlsl)(this.context.glContext.version).texture2D}(${e}, halfCR);\\n          }\\n        `;return new i.GlslLibRoutine(n)}getPackedSampler1D(t,e,n){const r=[n.width,n.height],a=[r[1],r[0]],s=(0,o.getGlsl)(this.context.glContext.version),u=`vec4 ${t}(int index) {\\n      vec2 uv = packedUVfrom1D(\\n      ${a[0]}, ${a[1]}, index);\\n      return ${s.texture2D}(${e}, uv);\\n    }`;return new i.GlslLibRoutine(u,[\"coordinates.packedUVfrom1D\"])}getPackedSampler2D(t,e,n){const a=n.unpackedShape,s=[n.width,n.height],u=(0,o.getGlsl)(this.context.glContext.version),c=s[0],l=s[1];if(null!=s&&r.ArrayUtil.arraysEqual(a,s)){const n=`vec4 ${t}(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${l}.0, ${c}.0);\\n        return ${u.texture2D}(${e}, uv);\\n      }`;return new i.GlslLibRoutine(n)}const p=s,f=Math.ceil(a[1]/2),d=`vec4 ${t}(int row, int col) {\\n      vec2 uv = packedUVfrom2D(${p[1]}, ${p[0]}, ${f}, row, col);\\n      return ${u.texture2D}(${e}, uv);\\n    }`;return new i.GlslLibRoutine(d,[\"coordinates.packedUVfrom2D\"])}getPackedSampler3D(t,e,n){const r=n.unpackedShape,a=[n.width,n.height],u=[a[0],a[1]],c=(0,o.getGlsl)(this.context.glContext.version);if(1===r[0]){const o=r.slice(1),a=[1,2],u=(0,s.squeezeInputShape)(r,o),c=[\"b\",\"row\",\"col\"],l=JSON.parse(JSON.stringify(n));l.unpackedShape=u;const p=this.getPackedSamplerFromInput(t,e,l),f=`${p.routineBody}\\n      vec4 ${t}(int b, int row, int col) {\\n        return ${t}(${(0,s.getSqueezedParams)(c,a)});\\n      } `;return new i.GlslLibRoutine(f,p.dependencies)}const l=u[0],p=u[1],f=Math.ceil(r[2]/2),d=`vec4 ${t}(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        ${p}, ${l}, ${f*Math.ceil(r[1]/2)}, ${f}, b, row, col);\\n      return ${c.texture2D}(${e}, uv);}`;return new i.GlslLibRoutine(d,[\"coordinates.packedUVfrom3D\"])}getPackedSamplerND(t,e,n){const r=n.unpackedShape,a=r.length,s=[n.width,n.height],u=(0,o.getGlsl)(this.context.glContext.version),c=[s[0],s[1]],l=c[1],p=c[0],f=Math.ceil(r[a-1]/2);let d=f*Math.ceil(r[a-2]/2),h=\"int b, int row, int col\",g=`b * ${d} + (row / 2) * ${f} + (col / 2)`;for(let t=2;t<a-1;t++)h=`int b${t}, `+h,d*=r[a-t-1],g=`b${t} * ${d} + `+g;const b=`vec4 ${t}(${h}) {\\n      int index = ${g};\\n      int texR = index / ${p};\\n      int texC = index - texR * ${p};\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}, ${l});\\n      return ${u.texture2D}(${e}, uv);\\n    }`;return new i.GlslLibRoutine(b)}getUnpackedSamplerScalar(t,e,n){const[r,o]=[n.width,n.height];if(1===r&&1===o){const n=`\\n          float ${t}() {\\n            return sampleTexture(${e}, halfCR);\\n          }\\n        `;return new i.GlslLibRoutine(n,[\"coordinates.sampleTexture\"])}const a=`\\n        float ${t}() {\\n          int offset_${e} = coordsToOffset(TexCoords, ${r}, ${o});\\n          vec2 uv = uvFromFlat(${r}, ${o}, offset_${e});\\n          return sampleTexture(${e}, uv);\\n        }\\n      `;return new i.GlslLibRoutine(a,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"])}getUnpackedSampler1D(t,e,n){const r=n.width,o=n.height;if(1===o&&1===r){const n=`\\n        float ${t}(int index) {\\n          return sampleTexture(${e}, halfCR);\\n        }\\n      `;return new i.GlslLibRoutine(n,[\"coordinates.sampleTexture\"])}if(1===o){const n=`\\n          float ${t}(int index) {\\n            vec2 uv = vec2((float(index) + 0.5) / ${r}.0, 0.5);\\n            return sampleTexture(${e}, uv);\\n          }\\n        `;return new i.GlslLibRoutine(n,[\"coordinates.sampleTexture\"])}if(1===r){const n=`\\n          float ${t}(int index) {\\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${o}.0);\\n            return sampleTexture(${e}, uv);\\n          }\\n        `;return new i.GlslLibRoutine(n,[\"coordinates.sampleTexture\"])}const a=`\\n        float ${t}(int index) {\\n          vec2 uv = uvFromFlat(${r}, ${o}, index);\\n          return sampleTexture(${e}, uv);\\n        }\\n      `;return new i.GlslLibRoutine(a,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\"])}getUnpackedSampler2D(t,e,n){const o=n.unpackedShape,u=[n.height,n.width];if(null!=u&&r.ArrayUtil.arraysEqual(o,u)){const n=`\\n          float ${t}(int row, int col) {\\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${u[1]}.0, ${u[0]}.0);\\n            return sampleTexture(${e}, uv);\\n          }\\n        `;return new i.GlslLibRoutine(n,[\"coordinates.sampleTexture\"])}const{newShape:c,keptDims:l}=(0,a.squeezeShape)(o),p=c;if(p.length<o.length){const r=(0,s.squeezeInputShape)(o,p),a=JSON.parse(JSON.stringify(n));a.unpackedShape=r;const u=[\"col\",\"row\"],c=`\\n          ${this.getUnpackedSamplerFromInput(t,e,a).routineBody}\\n          float ${t}(int row, int col) {\\n            return ${t}(${(0,s.getSqueezedParams)(u,l)});\\n          }\\n        `;return new i.GlslLibRoutine(c,[\"coordinates.sampleTexture\"])}const f=u[1],d=u[0];if(1===d){const n=`\\n          float ${t}(int row, int col) {\\n            int offset_${e} = coordsToOffset(TexCoords, ${f}, ${d});\\n            float index = dot(vec3(row, col, offset_${e}), vec3(${o[1]}, 1, 1));\\n            vec2 uv = vec2(0.5, (index + 0.5) / ${f}.0);\\n            return sampleTexture(${e}, uv);\\n          }\\n        `;return new i.GlslLibRoutine(n,[\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"])}if(1===f){const n=`\\n          float ${t}(int row, int col) {\\n            int offset_${e} = coordsToOffset(TexCoords, ${f}, ${d});\\n            float index = dot(vec3(row, col, offset_${e}), vec3(${o[1]}, 1, 1));\\n            vec2 uv = vec2((index + 0.5) / ${d}.0, 0.5);\\n            return sampleTexture(${e}, uv);\\n          }\\n        `;return new i.GlslLibRoutine(n,[\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"])}const h=`\\n        float ${t}(int row, int col) {\\n          int index = col * ${o[1]} + row;\\n          vec2 uv = uvFromFlat(${f}, ${d}, index);\\n          return sampleTexture(${e}, uv);\\n        }\\n      `;return new i.GlslLibRoutine(h,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"])}getUnpackedSampler3D(t,e,n){const r=n.unpackedShape,o=r[1]*r[2],u=r[2],{newShape:c,keptDims:l}=(0,a.squeezeShape)(r),p=c;if(p.length<r.length){const o=(0,s.squeezeInputShape)(r,p),a=[\"batch\",\"col\",\"row\"],u=JSON.parse(JSON.stringify(n));u.unpackedShape=o;const c=this.getUnpackedSamplerFromInput(t,e,u),f=l.reverse(),d=`\\n          ${c.routineBody}\\n          float ${t}(int batch, int row, int col) {\\n            return ${t}(${(0,s.getSqueezedParams)(a,f)});\\n          }\\n        `;return new i.GlslLibRoutine(d,c.dependencies)}const f=`\\n          float ${t}(int depth, int row, int col) {\\n            // Explicitly use integer operations as dot() only works on floats.\\n            int index = depth * ${o} + col * ${u} + row;\\n            vec2 uv = uvFromFlat(${n.width}, ${n.height}, index);\\n            return sampleTexture(${e}, uv);\\n          }\\n      `;return new i.GlslLibRoutine(f,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"])}getUnpackedSampler4D(t,e,n){const r=n.unpackedShape,o=r[3],a=r[2]*o,s=`\\n        float ${t}(int row, int col, int depth, int depth2) {\\n          int index = row * ${r[1]*a} + col * ${a} +\\n              depth2 * ${o} + depth;\\n          vec2 uv = uvFromFlat(${n.width}, ${n.height}, index);\\n          return sampleTexture(${e}, uv);\\n        }\\n      `;return new i.GlslLibRoutine(s,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\"])}getUnpackedSampler5D(t,e,n){const r=n.unpackedShape,o=r[4],u=r[3]*o,c=r[2]*u,l=r[1]*c,{newShape:p,keptDims:f}=(0,a.squeezeShape)(r);if(p.length<r.length){const o=(0,s.squeezeInputShape)(r,p),a=[\"row\",\"col\",\"depth\",\"depth2\",\"depth3\"],u=JSON.parse(JSON.stringify(n));u.unpackedShape=o;const c=`\\n          ${this.getUnpackedSamplerFromInput(t,e,u).routineBody}\\n          float ${t}(int row, int col, int depth, int depth2, int depth3) {\\n            return ${t}(${(0,s.getSqueezedParams)(a,f)});\\n          }\\n        `;return new i.GlslLibRoutine(c,[\"coordinates.sampleTexture\",\"coordinates.uvFromFlat\"])}const d=`\\n        float ${t}(int row, int col, int depth, int depth2, int depth3) {\\n          int index = row * ${l} + col * ${c} + depth * ${u} +\\n          depth3 * ${o} + depth2;\\n          vec2 uv = uvFromFlat(${n.width}, ${n.height}, index);\\n          return sampleTexture(${e}, uv);\\n        }\\n      `;return new i.GlslLibRoutine(d,[\"coordinates.sampleTexture\",\"coordinates.uvFromFlat\"])}getUnpackedSampler6D(t,e,n){const r=n.unpackedShape,o=r[5],u=r[4]*o,c=r[3]*u,l=r[2]*c,p=r[1]*l,{newShape:f,keptDims:d}=(0,a.squeezeShape)(r);if(f.length<r.length){const o=(0,s.squeezeInputShape)(r,f),a=[\"row\",\"col\",\"depth\",\"depth2\",\"depth3\",\"depth4\"],u=JSON.parse(JSON.stringify(n));u.unpackedShape=o;const c=`\\n            ${this.getUnpackedSamplerFromInput(t,e,u).routineBody}\\n            float ${t}(int row, int col, int depth,\\n              int depth2, int depth3, int depth4) {\\n              return ${t}(${(0,s.getSqueezedParams)(a,d)});\\n            }\\n          `;return new i.GlslLibRoutine(c,[\"coordinates.sampleTexture\",\"coordinates.uvFromFlat\"])}const h=`\\n          float ${t}(int row, int col, int depth,\\n            int depth2, int depth3, int depth4) {\\n            int index = row * ${p} + col * ${l} + depth * ${c} +\\n            depth2 * ${u} + depth3 * ${o} + depth4;\\n            vec2 uv = uvFromFlat(${n.width}, ${n.height}, index);\\n            return sampleTexture(${e}, uv);\\n          }\\n        `;return new i.GlslLibRoutine(h,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"])}toVec(){const t=this.context.outputTextureLayout,e=t.shape.length,n=t.strides,r=t.width,o=t.height,a=[];for(let t=0;t<e-1;++t)a.push(`\\n        c[${t}] = offset / ${n[t]};`),a.push(`\\n        offset -= c[${t}] * ${n[t]};`);a.push(`\\n        c[${e-1}] = offset;`);const s=`\\n      void toVec(vec2 texCoords, out int c[${e}]) {\\n        int offset = coordsToOffset(texCoords, ${r}, ${o});\\n        ${a.join(\"\")}\\n      }\\n      void toVec(int offset, out int c[${e}]) {\\n        ${a.join(\"\")}\\n      }\\n    `;return{toVec:new i.GlslLibRoutine(s,[\"coordinates.coordsToOffset\"])}}valueFrom(){const t={};return this.context.programInfo.inputNames.forEach(((e,n)=>{const r=this.context.inputTextureLayouts[n],o=(r.unpackedShape.length>0?r.unpackedShape:r.shape).length;let a=`_${e}`;t[a]=new i.GlslLibRoutine(this.getValueFromSingle(e,o,r.width,r.height,!1),[`shapeUtils.indicesToOffset${a}`,\"coordinates.offsetToCoords\",\"fragcolor.getColorAsFloat\"]),a+=\"_T\",t[a]=new i.GlslLibRoutine(this.getValueFromSingle(e,o,r.width,r.height,!0),[`shapeUtils.indicesToOffset${a}`,\"coordinates.offsetToCoords\",\"fragcolor.getColorAsFloat\"])})),t}getValueFromSingle(t,e,n,r,i){let a=`_${t}`;return i&&(a+=\"_T\"),`\\n        float ${a}(int m[${e}]) {\\n          int offset = indicesToOffset${a}(m);\\n          vec2 coords = offsetToCoords(offset, ${n}, ${r});\\n          float value = getColorAsFloat(${(0,o.getGlsl)(this.context.glContext.version).texture2D}(${t}, coords));\\n          return value;\\n        }\\n        `}getPackedValueFrom(t,e,n,r,i){let a=`_${t}_Pack`;return i&&(a+=\"_T\"),`\\n        vec4 ${a}(int m[${e}]) {\\n          int offset = indicesToOffset_${t}(m);\\n          vec2 coords = offsetToCoords(offset, ${n}, ${r});\\n          return ${(0,o.getGlsl)(this.context.glContext.version).texture2D}(${t}, coords);\\n        }\\n        `}}e.CoordsGlslLib=u},8520:(t,e)=>{\"use strict\";var n;Object.defineProperty(e,\"__esModule\",{value:!0}),e.TopologicalSortGlslRoutines=e.GlslLibRoutineNode=e.GlslLibRoutine=e.GlslLib=e.GlslContext=e.FunctionType=void 0,(n=e.FunctionType||(e.FunctionType={}))[n.ValueBased=0]=\"ValueBased\",n[n.Positional=1]=\"Positional\",e.GlslContext=class{constructor(t,e,n,r){this.glContext=t,this.programInfo=e,this.inputTextureLayouts=n,this.outputTextureLayout=r}},e.GlslLib=class{constructor(t){this.context=t}},e.GlslLibRoutine=class{constructor(t,e){this.routineBody=t,this.dependencies=e}},e.GlslLibRoutineNode=class{constructor(t,e,n){this.name=t,this.dependencies=n||[],e&&(this.routineBody=e)}addDependency(t){t&&this.dependencies.push(t)}},e.TopologicalSortGlslRoutines=class{static returnOrderedNodes(t){if(!t||0===t.length)return[];if(1===t.length)return t;const e=new Set,n=new Set,r=new Array;return this.createOrderedNodes(t,e,n,r),r}static createOrderedNodes(t,e,n,r){for(let i=0;i<t.length;++i)this.dfsTraverse(t[i],e,n,r)}static dfsTraverse(t,e,n,r){if(!t||n.has(t.name))return;if(e.has(t.name))throw new Error(\"Cyclic dependency detected. Can't topologically sort routines needed for shader.\");e.add(t.name);const i=t.dependencies;if(i&&i.length>0)for(let t=0;t<i.length;++t)this.dfsTraverse(i[t],e,n,r);r.push(t),n.add(t.name),e.delete(t.name)}}},7341:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.EncodingGlslLib=void 0;const r=n(8520);class i extends r.GlslLib{constructor(t){super(t)}getFunctions(){return Object.assign(Object.assign({},this.encodeFloat32()),this.decodeFloat32())}getCustomTypes(){return{}}encodeFloat32(){return{encode:new r.GlslLibRoutine(\"highp vec4 encode(highp float f) {\\n        return vec4(f, 0.0, 0.0, 0.0);\\n      }\\n        \")}}decodeFloat32(){return{decode:new r.GlslLibRoutine(\"highp float decode(highp vec4 rgba) {\\n        return rgba.r;\\n      }\\n        \")}}encodeUint8(){const t=i.isLittleEndian()?\"rgba.rgba=rgba.abgr;\":\"\";return{encode:new r.GlslLibRoutine(`\\n      highp vec4 encode(highp float f) {\\n        highp float F = abs(f);\\n        highp float Sign = step(0.0,-f);\\n        highp float Exponent = floor(log2(F));\\n        highp float Mantissa = (exp2(- Exponent) * F);\\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\\n        highp vec4 rgba;\\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\\n        ${t}\\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\\n        return rgba;\\n    }\\n        `)}}decodeUint8(){const t=i.isLittleEndian()?\"rgba.rgba=rgba.abgr;\":\"\";return{decode:new r.GlslLibRoutine(`\\n        highp float decode(highp vec4 rgba) {\\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\\n          ${t}\\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\\n          return Result;\\n      }\\n        `)}}static isLittleEndian(){const t=new ArrayBuffer(4),e=new Uint32Array(t),n=new Uint8Array(t);if(e[0]=3735928559,239===n[0])return!0;if(222===n[0])return!1;throw new Error(\"unknown endianness\")}}e.EncodingGlslLib=i},9894:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.FragColorGlslLib=void 0;const r=n(8520),i=n(5060);class o extends r.GlslLib{constructor(t){super(t)}getFunctions(){return Object.assign(Object.assign({},this.setFragColor()),this.getColorAsFloat())}getCustomTypes(){return{}}setFragColor(){const t=(0,i.getGlsl)(this.context.glContext.version);return{setFragColor:new r.GlslLibRoutine(`\\n        void setFragColor(float value) {\\n            ${t.output} = encode(value);\\n        }\\n        `,[\"encoding.encode\"])}}getColorAsFloat(){return{getColorAsFloat:new r.GlslLibRoutine(\"\\n        float getColorAsFloat(vec4 color) {\\n            return decode(color);\\n        }\\n        \",[\"encoding.decode\"])}}}e.FragColorGlslLib=o},2848:(t,e)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.replaceInlines=void 0;const n=/@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;e.replaceInlines=function(t){const e={};let r;for(;null!==(r=n.exec(t));){const t=r[3].split(\",\").map((t=>{const e=t.trim().split(\" \");return e&&2===e.length?{type:e[0],name:e[1]}:null})).filter((t=>null!==t));e[r[2]]={params:t,body:r[4]}}for(const n in e){const i=\"(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;\".replace(\"__FUNC__\",n),o=new RegExp(i,\"gm\");for(;null!==(r=o.exec(t));){const i=r[1],o=r[2],a=r[3].split(\",\"),s=i?`${i} ${o};`:\"\";let u=e[n].body,c=\"\";e[n].params.forEach(((t,e)=>{t&&(c+=`${t.type} ${t.name} = ${a[e]};\\n`)})),u=`${c}\\n ${u}`,u=u.replace(\"return\",`${o} = `);const l=`\\n      ${s}\\n      {\\n        ${u}\\n      }\\n      `;t=t.replace(r[0],l)}}return t.replace(n,\"\")}},8879:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.GlslPreprocessor=void 0;const r=n(8520),i=n(2848),o=n(5483),a=n(5060);e.GlslPreprocessor=class{constructor(t,e,n,i){this.libs={},this.glslLibRoutineDependencyGraph={},this.context=new r.GlslContext(t,e,n,i),Object.keys(o.glslRegistry).forEach((t=>{const e=new o.glslRegistry[t](this.context);this.libs[t]=e}));const a=this.glslLibRoutineDependencyGraph;for(const t in this.libs){const e=this.libs[t].getFunctions();for(const n in e){const i=t+\".\"+n;let o;a[i]?(o=a[i],o.routineBody=e[n].routineBody):(o=new r.GlslLibRoutineNode(i,e[n].routineBody),a[i]=o);const s=e[n].dependencies;if(s)for(let t=0;t<s.length;++t)if(a[s[t]])o.addDependency(a[s[t]]);else{const e=new r.GlslLibRoutineNode(s[t]);a[s[t]]=e,o.addDependency(e)}}}}preprocess(){const t=this.context.programInfo;let e=t.shaderSource;return this.context.programInfo.hasMain||(e=`${e}\\n      ${(0,a.getDefaultFragShaderMain)(this.context.glContext.version,this.context.outputTextureLayout.shape.length)}`),e=(0,i.replaceInlines)(e),`${(0,a.getFragShaderPreamble)(this.context.glContext.version)}\\n    ${this.getUniforms(t.inputNames,t.variables)}\\n    ${this.getImports(e)}\\n    ${e}`}getImports(t){const e=this.selectGlslLibRoutinesToBeIncluded(t);if(0===e.length)return\"\";let n=\"\";for(let t=0;t<e.length;++t){if(!e[t].routineBody)throw new Error(`Missing body for the Glsl Library routine: ${e[t].name}`);n+=e[t].routineBody+\"\\n\"}return n}selectGlslLibRoutinesToBeIncluded(t){const e=[];return Object.keys(this.glslLibRoutineDependencyGraph).forEach((n=>{const r=n.split(\".\")[1];-1!==t.indexOf(r)&&e.push(this.glslLibRoutineDependencyGraph[n])})),r.TopologicalSortGlslRoutines.returnOrderedNodes(e)}getUniforms(t,e){const n=[];if(t)for(const e of t)n.push(`uniform sampler2D ${e};`);if(e)for(const t of e)n.push(`uniform ${t.type} ${t.name}${t.arrayLength?`[${t.arrayLength}]`:\"\"};`);return n.join(\"\\n\")}}},5483:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.glslRegistry=void 0;const r=n(5107),i=n(7341),o=n(9894),a=n(2655),s=n(3891);e.glslRegistry={encoding:i.EncodingGlslLib,fragcolor:o.FragColorGlslLib,vec:s.VecGlslLib,shapeUtils:a.ShapeUtilsGlslLib,coordinates:r.CoordsGlslLib}},2655:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.ShapeUtilsGlslLib=void 0;const r=n(8520);class i extends r.GlslLib{constructor(t){super(t)}getFunctions(){return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},this.bcastIndex()),this.bcastMatmulIndex()),this.offsetToIndices()),this.indicesToOffset()),this.incrementIndices())}getCustomTypes(){return{}}bcastIndex(){const t=this.context.outputTextureLayout.shape.length,e={};return this.context.programInfo.inputNames.forEach(((n,i)=>{const o=this.context.inputTextureLayouts[i].unpackedShape;if(o.length<=t){const i=o.length,a=t-i,s=`bcastIndices_${n}`;let u=\"\";for(let t=0;t<i;++t)u+=`\\n          realIndices[${t}] = int( mod(float(bcastedIndices[${a+t}]), ${o[t]}.0) );\\n          `;const c=`\\n        void ${s} (int bcastedIndices[${t}], out int realIndices[${i}]) {\\n          ${u}\\n        }\\n        `;e[s]=new r.GlslLibRoutine(c)}})),e}bcastMatmulIndex(){const t=this.context.outputTextureLayout.shape.length,e={};return this.context.programInfo.inputNames.forEach(((n,i)=>{const o=this.context.inputTextureLayouts[i].shape;if(!(o.length<2||o.length>t)){const i=o.length,a=t-i,s=`bcastMatmulIndices_${n}`;let u=\"\";for(let t=0;t<i-2;++t)u+=`\\n          realIndices[${t}] = int( mod(float(bcastedIndices[${a+t}]), ${o[t]}.0) );\\n          `;const c=`\\n        void ${s}(int bcastedIndices[${t}], out int realIndices[${i}]) {\\n          ${u}\\n          realIndices[${i-1}] = bcastedIndices[${t-1}];\\n          realIndices[${i-2}] = bcastedIndices[${t-2}];\\n        }\\n        `;e[s]=new r.GlslLibRoutine(c)}})),e}indicesToOffset(){const t={};return this.context.programInfo.inputNames.forEach(((e,n)=>{const o=this.context.inputTextureLayouts[n].shape,a=this.context.inputTextureLayouts[n].strides,s=o.length;let u=`indicesToOffset_${e}`;t[u]=new r.GlslLibRoutine(i.indexToOffsetSingle(u,s,a)),u=`indicesToOffset_${e}_T`,t[u]=new r.GlslLibRoutine(i.indexToOffsetSingle(u,s,a.slice().reverse()))})),t}static indexToOffsetSingle(t,e,n){let r=\"\";for(let t=e-1;t>=0;--t)r+=`\\n        offset += indices[${t}] * ${n[t]};\\n        `;return`\\n      int ${t}(int indices[${e}]) {\\n        int offset = 0;\\n        ${r}\\n        return offset;\\n      }\\n      `}offsetToIndices(){const t={};return this.context.programInfo.inputNames.forEach(((e,n)=>{const o=this.context.inputTextureLayouts[n].shape,a=this.context.inputTextureLayouts[n].strides,s=o.length;let u=`offsetToIndices_${e}`;t[u]=new r.GlslLibRoutine(i.offsetToIndicesSingle(u,s,a)),u=`offsetToIndices_${e}_T`,t[u]=new r.GlslLibRoutine(i.offsetToIndicesSingle(u,s,a.slice().reverse()))})),t}static offsetToIndicesSingle(t,e,n){const r=[];for(let t=0;t<e-1;++t)r.push(`\\n      indices[${t}] = offset / ${n[t]};`),r.push(`\\n        offset -= indices[${t}] * ${n[t]};`);return r.push(`\\n      indices[${e-1}] = offset;`),`\\n      void ${t}(int offset, out int indices[${e}]) {\\n        ${r.join(\"\")}\\n      }\\n      `}incrementIndices(){const t={};return this.context.programInfo.inputNames.forEach(((e,n)=>{const i=this.context.inputTextureLayouts[n].shape,o=i.length,a=`incrementIndices_${e}`;let s=\"\";for(let t=0;t<o;++t)s+=`\\n        shape[${t}] = ${i[t]};`;const u=`\\n        void ${a}(int axis, out int indices[${o}]) {\\n          int shape[${o}];\\n          ${s};\\n          for(int i = ${o} -1 ; i >= 0; --i) {\\n            if(i > axis) continue;\\n            indices[i] += 1;\\n            if(indices[i] < shape[i]) {\\n              break;\\n            }\\n            indices[i] = 0;\\n          }\\n        }\\n        `;t[a]=new r.GlslLibRoutine(u)})),t}}e.ShapeUtilsGlslLib=i},5060:(t,e)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.getDefaultFragShaderMain=e.getFragShaderPreamble=e.getVertexShaderSource=e.getGlsl=void 0;const n={version:\"\",attribute:\"attribute\",varyingVertex:\"varying\",varyingFrag:\"varying\",texture2D:\"texture2D\",output:\"gl_FragColor\",outputDeclaration:\"\"},r={version:\"#version 300 es\",attribute:\"in\",varyingVertex:\"out\",varyingFrag:\"in\",texture2D:\"texture\",output:\"outputColor\",outputDeclaration:\"out vec4 outputColor;\"};function i(t){return 1===t?n:r}e.getGlsl=i,e.getVertexShaderSource=function(t){const e=i(t);return`${e.version}\\n      precision highp float;\\n      ${e.attribute} vec3 position;\\n      ${e.attribute} vec2 textureCoord;\\n\\n      ${e.varyingVertex} vec2 TexCoords;\\n\\n      void main()\\n      {\\n          gl_Position = vec4(position, 1.0);\\n          TexCoords = textureCoord;\\n      }`},e.getFragShaderPreamble=function(t){const e=i(t);return`${e.version}\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    ${e.varyingFrag} vec2 TexCoords;\\n    ${e.outputDeclaration}\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    // Custom vector types to handle higher dimenalities.\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    `},e.getDefaultFragShaderMain=function(t,e){return`\\n  void main() {\\n    int indices[${e}];\\n    toVec(TexCoords, indices);\\n    vec4 result = vec4(process(indices));\\n    ${i(t).output} = result;\\n  }\\n  `}},3891:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.VecGlslLib=void 0;const r=n(8520);class i extends r.GlslLib{constructor(t){super(t)}getCustomTypes(){return{}}getFunctions(){return Object.assign(Object.assign(Object.assign(Object.assign({},this.binaryVecFunctions()),this.copyVec()),this.setVecItem()),this.getVecItem())}binaryVecFunctions(){const t=this.context.outputTextureLayout.shape.length,e={add:\"+=\",sub:\"-=\",mul:\"*=\",div:\"/=\"},n={};for(const i in e){const o=`${i}Vec`;let a=\"\";for(let n=0;n<t;++n)a+=`\\n          dest[${n}] ${e[i]} src[${n}];\\n          `;const s=`\\n        void ${o}(int src[${t}], out int dest[${t}]) {\\n          ${a}\\n        }\\n        `;n[o]=new r.GlslLibRoutine(s)}return n}copyVec(){const t=this.context.outputTextureLayout.shape.length;let e=\"\";for(let n=0;n<t;++n)e+=`\\n        dest[${n}] = src[${n}];\\n        `;const n=`\\n      void copyVec(int src[${t}], out int dest[${t}]) {\\n        ${e}\\n      }\\n      `;return{copyVec:new r.GlslLibRoutine(n)}}setVecItem(){const t=this.context.outputTextureLayout.shape.length;let e=`\\n        if(index < 0)\\n            index =${t} + index;\\n        if (index == 0)\\n            m[0] = value;\\n        `;for(let n=1;n<t-1;++n)e+=`\\n        else if (index == ${n})\\n            m[${n}] = value;\\n            `;e+=`\\n        else\\n            m[${t-1}] = value;\\n        `;const n=`\\n      void setVecItem(out int m[${t}], int index, int value) {\\n        ${e}\\n      }\\n        `;return{setVecItem:new r.GlslLibRoutine(n)}}getVecItem(){const t=this.context.outputTextureLayout.shape.length;let e=`\\n        if(index < 0)\\n            index = ${t} + index;\\n        if (index == 0)\\n            return m[0];\\n      `;for(let n=1;n<t-1;++n)e+=`\\n        else if (index == ${n})\\n            return m[${n}];\\n      `;e+=`\\n        else\\n            return m[${t-1}];\\n        `;const n=`\\n      int getVecItem(int m[${t}], int index) {\\n        ${e}\\n      }\\n    `;return{getVecItem:new r.GlslLibRoutine(n)}}}e.VecGlslLib=i},8316:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.WebGLInferenceHandler=void 0;const r=n(6231),i=n(9162),o=n(2517),a=n(2403),s=n(7019),u=n(8710),c=n(5611),l=n(4057),p=n(2039);e.WebGLInferenceHandler=class{constructor(t){this.session=t,this.packedTextureDataCache=new Map,this.unpackedTextureDataCache=new Map}calculateTextureWidthAndHeight(t,e){return(0,l.calculateTextureWidthAndHeight)(this.session.layoutStrategy,t,e)}executeProgram(t,e){if(e.length<t.inputNames.length)throw new Error(`Input size mustn't be less than ${t.inputNames.length}.`);if(t.inputNames.length!==t.inputTypes.length)throw new Error(\"input names size does not match input types\");const n=[];for(let r=0;r<t.inputNames.length;++r)n[r]=this.getOrCreateTextureData(e[r],t.inputTypes[r]);const r=((t,e)=>{const n=e.map((t=>`${t.unpackedShape.join(\",\")};${t.width}x${t.height}`)).join(\"_\");let r=t.name;return t.cacheHint&&(r+=\"[\"+t.cacheHint+\"]\"),r+=\":\"+n,r})(t,n);let i=this.session.programManager.getArtifact(r);const o=i?i.programInfo:\"function\"==typeof t.get?t.get():t,a=(0,l.createTextureLayoutFromTextureType)(this.session.layoutStrategy,o.output.dims,o.output.textureType),s=this.createTextureData(a,o.output.type);return i||(i=this.session.programManager.build(o,n,s),this.session.programManager.setArtifact(r,i)),this.runProgram(i,n,s),s}run(t,e){return this.executeProgram(t,e).tensor}runProgram(t,e,n){for(let n=0;n<e.length;++n)if(!!e[n].isPacked!=(t.programInfo.inputTypes[n]===p.TextureType.packed))throw new Error(`input[${n}] property packed inconsistent`);if(!!n.isPacked!=(t.programInfo.output.textureType===p.TextureType.packed))throw new Error(\"output property packed inconsistent\");this.session.programManager.run(t,e,n)}getOrCreateTextureData(t,e){let n=this.getTextureData(t.dataId,e===p.TextureType.packed);if(!n&&(n=this.getTextureData(t.dataId,e!==p.TextureType.packed),n))return e===p.TextureType.packed?this.pack(n):this.unpack(n);if(!n){const r=(0,l.createTextureLayoutFromTextureType)(this.session.layoutStrategy,t.dims,e);if(e===p.TextureType.packedLastDimension){const n=1,r=4,i=t.dims;if(4===i.length){const o=[i[0],Math.ceil(i[1]*i[2]*i[3]/r)],a=(0,l.createTextureLayoutFromTextureType)(this.session.layoutStrategy,o,e);let s=t.numberData;if(i[1]*i[2]*i[3]%r!=0){const e=i[0],o=i[1]*i[2]*i[3],a=Math.ceil(o*n/r)*r;s=new Float32Array(e*a);for(let r=0;r<e;++r){const e=r*o,i=r*a+r%n*o;s.set(t.numberData.subarray(e,e+o),i)}}return this.createTextureData(a,t.type,s,t,1)}}if(e===p.TextureType.packed){const e=(0,l.createTextureLayoutFromShape)(this.session.layoutStrategy,t.dims,1,[],{reverseWH:!0}),r=this.createTextureData(e,t.type,t.numberData,t,1);n=this.pack(r)}else n=this.createTextureData(r,t.type,t.numberData,t,1)}return n}createTextureDataFromLayoutBindTensor(t,e,n,r){return this.createTextureData(t,e,n,r,1)}createTextureData(t,e,n,i,o){r.Logger.verbose(\"InferenceHandler\",`Creating TextureData: layout:[${JSON.stringify(t)}]`);const a=this.session.textureManager.createTextureFromLayout(e,t,n,o);return this.createTextureDataFromTexture(t,e,a,i)}reshapeUnpacked(t,e){const n=this.getOrCreateTextureData(t,p.TextureType.unpacked),r={channels:n.channels,height:n.height,width:n.width,shape:0!==e.length?e:[1],strides:o.ShapeUtil.computeStrides(e),unpackedShape:e};return this.createTextureDataFromTexture(r,t.type,n.texture).tensor}reshapePacked(t,e){const n=this.getOrCreateTextureData(t,p.TextureType.packed);if((0,s.isReshapeCheap)(t.dims,e)){const r={channels:n.channels,height:n.height,width:n.width,shape:0!==e.length?e:[1],strides:o.ShapeUtil.computeStrides(e),unpackedShape:e,isPacked:!0};return this.createTextureDataFromTexture(r,t.type,n.texture).tensor}const r=(0,s.processDims3D)(t.dims),i=(0,s.processDims3D)(e),a=this.reshapePacked(t,r),u=this.run((0,s.createPackedReshape3DProgramInfoLoader)(this,a,i),[a]);return this.reshapePacked(u,e)}cast(t,e){const n=this.getOrCreateTextureData(t,p.TextureType.unpacked);return this.createTextureDataFromTexture(n,e,n.texture).tensor}createTextureDataFromTexture(t,e,n,r,o){const a=Object.assign(Object.assign({},t),{tensor:r||new i.Tensor(t.unpackedShape,e,(t=>this.readTexture(a)),(async t=>this.readTextureAsync(a)),void 0,o),texture:n});return this.setTextureData(a.tensor.dataId,a,t.isPacked),a}getTextureData(t,e=!1){return this.session.isInitializer(t)?this.session.getTextureData(t,e):e?this.packedTextureDataCache.get(t):this.unpackedTextureDataCache.get(t)}setTextureData(t,e,n=!1){this.session.isInitializer(t)?this.session.setTextureData(t,e,n):(n?this.packedTextureDataCache:this.unpackedTextureDataCache).set(t,e)}isTextureLayoutCached(t,e=!1){return!!this.getTextureData(t.dataId,e)}dispose(){this.session.textureManager.clearActiveTextures(),this.packedTextureDataCache.forEach((t=>this.session.textureManager.releaseTexture(t))),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache.forEach((t=>this.session.textureManager.releaseTexture(t))),this.unpackedTextureDataCache=new Map}readTexture(t){return t.isPacked?this.readTexture(this.unpack(t)):this.session.backend.glContext.isFloat32DownloadSupported?this.session.textureManager.readTexture(t,t.tensor.type,t.channels):this.session.textureManager.readUint8TextureAsFloat((0,u.encodeAsUint8)(this,t))}async readTextureAsync(t){return t.isPacked?this.readTextureAsync(this.unpack(t)):this.session.backend.glContext.isFloat32DownloadSupported?this.session.textureManager.readTextureAsync(t,t.tensor.type,t.channels):this.session.textureManager.readUint8TextureAsFloat((0,u.encodeAsUint8)(this,t))}pack(t){return this.executeProgram((0,a.createPackProgramInfoLoader)(this,t.tensor),[t.tensor])}unpack(t){return this.executeProgram((0,c.createUnpackProgramInfoLoader)(this,t.tensor),[t.tensor])}}},1640:function(t,e,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!(\"get\"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,i)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,\"default\",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)\"default\"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return i(e,t),e};Object.defineProperty(e,\"__esModule\",{value:!0}),e.WEBGL_OP_RESOLVE_RULES=void 0;const a=n(2898),s=o(n(7839)),u=n(4196),c=n(2069),l=n(8138),p=n(9663),f=n(5193),d=n(7992),h=n(1253),g=n(4776),b=n(6572),m=n(3346),y=n(5623),_=n(2870),v=n(2143),w=n(4939),x=n(718),T=n(2268),S=n(8117),O=n(2278),A=n(5524),E=n(5975),I=n(3933),P=n(6558),D=n(5723),$=n(3738),k=o(n(4909)),C=n(8428),F=n(9793);e.WEBGL_OP_RESOLVE_RULES=[[\"Abs\",\"\",\"6+\",k.abs],[\"Acos\",\"\",\"7+\",k.acos],[\"Add\",\"\",\"7+\",s.add],[\"And\",\"\",\"7+\",s.and],[\"Asin\",\"\",\"7+\",k.asin],[\"Atan\",\"\",\"7+\",k.atan],[\"AveragePool\",\"\",\"7+\",v.averagePool,v.parseAveragePoolAttributes],[\"BatchNormalization\",\"\",\"7+\",a.batchNormalization,a.parseBatchNormalizationAttributes],[\"Cast\",\"\",\"6+\",u.cast,u.parseCastAttributes],[\"Ceil\",\"\",\"6+\",k.ceil],[\"Clip\",\"\",\"6-10\",k.clip,k.parseClipAttributes],[\"Clip\",\"\",\"11+\",k.clipV11],[\"Concat\",\"\",\"4+\",c.concat,c.parseConcatAttributes],[\"Conv\",\"\",\"1+\",l.conv,l.parseConvAttributes],[\"ConvTranspose\",\"\",\"1+\",p.convTranspose,p.parseConvTransposeAttributes],[\"Cos\",\"\",\"7+\",k.cos],[\"Div\",\"\",\"7+\",s.div],[\"Dropout\",\"\",\"7+\",k.identity],[\"DepthToSpace\",\"\",\"1+\",f.depthToSpace,f.parseDepthToSpaceAttributes],[\"Equal\",\"\",\"7+\",s.equal],[\"Elu\",\"\",\"6+\",k.elu,k.parseEluAttributes],[\"Exp\",\"\",\"6+\",k.exp],[\"Flatten\",\"\",\"1+\",d.flatten,d.parseFlattenAttributes],[\"Floor\",\"\",\"6+\",k.floor],[\"FusedConv\",\"com.microsoft\",\"1+\",l.conv,l.parseConvAttributes],[\"Gather\",\"\",\"1+\",h.gather,h.parseGatherAttributes],[\"Gemm\",\"\",\"7-10\",g.gemm,g.parseGemmAttributesV7],[\"Gemm\",\"\",\"11+\",g.gemm,g.parseGemmAttributesV11],[\"GlobalAveragePool\",\"\",\"1+\",v.globalAveragePool,v.parseGlobalAveragePoolAttributes],[\"GlobalMaxPool\",\"\",\"1+\",v.globalMaxPool],[\"Greater\",\"\",\"7+\",s.greater],[\"Identity\",\"\",\"1+\",k.identity],[\"ImageScaler\",\"\",\"1+\",b.imageScaler,b.parseImageScalerAttributes],[\"InstanceNormalization\",\"\",\"6+\",m.instanceNormalization,m.parseInstanceNormalizationAttributes],[\"LeakyRelu\",\"\",\"6+\",k.leakyRelu,k.parseLeakyReluAttributes],[\"Less\",\"\",\"7+\",s.less],[\"Log\",\"\",\"6+\",k.log],[\"MatMul\",\"\",\"1+\",y.matMul,y.parseMatMulAttributes],[\"MaxPool\",\"\",\"1+\",v.maxPool,v.parseMaxPoolAttributes],[\"Mul\",\"\",\"7+\",s.mul],[\"Neg\",\"\",\"6+\",k.neg],[\"Not\",\"\",\"1+\",k.not],[\"Or\",\"\",\"7+\",s.or],[\"Pad\",\"\",\"2-10\",_.padV2,_.parsePadAttributesV2],[\"Pad\",\"\",\"11+\",_.padV11,_.parsePadAttributesV11],[\"Pow\",\"\",\"7+\",s.pow],[\"PRelu\",\"\",\"7+\",s.pRelu],[\"ReduceLogSum\",\"\",\"1+\",w.reduceLogSum,w.parseReduceAttributes],[\"ReduceMax\",\"\",\"1+\",w.reduceMax,w.parseReduceAttributes],[\"ReduceMean\",\"\",\"1+\",w.reduceMean,w.parseReduceAttributes],[\"ReduceMin\",\"\",\"1+\",w.reduceMin,w.parseReduceAttributes],[\"ReduceProd\",\"\",\"1+\",w.reduceProd,w.parseReduceAttributes],[\"ReduceSum\",\"\",\"1-12\",w.reduceSum,w.parseReduceAttributes],[\"ReduceSumSquare\",\"\",\"1+\",w.reduceLogSumSquare,w.parseReduceAttributes],[\"Relu\",\"\",\"6+\",k.relu],[\"Reshape\",\"\",\"5+\",x.reshape],[\"Resize\",\"\",\"10\",T.resize,T.parseResizeAttributesV10],[\"Resize\",\"\",\"11+\",T.resize,T.parseResizeAttributesV11],[\"Shape\",\"\",\"1+\",S.shape],[\"Sigmoid\",\"\",\"6+\",k.sigmoid],[\"Sin\",\"\",\"7+\",k.sin],[\"Slice\",\"\",\"10+\",O.sliceV10],[\"Slice\",\"\",\"1-9\",O.slice,O.parseSliceAttributes],[\"Softmax\",\"\",\"1-12\",A.softmax,A.parseSoftmaxAttributes],[\"Softmax\",\"\",\"13+\",A.softmaxV13,A.parseSoftmaxAttributesV13],[\"Split\",\"\",\"2-12\",E.split,E.parseSplitAttributes],[\"Sqrt\",\"\",\"6+\",k.sqrt],[\"Squeeze\",\"\",\"1-12\",I.squeeze,I.parseSqueezeAttributes],[\"Squeeze\",\"\",\"13+\",I.squeezeV13],[\"Sub\",\"\",\"7+\",s.sub],[\"Sum\",\"\",\"6+\",P.sum],[\"Tan\",\"\",\"7+\",k.tan],[\"Tanh\",\"\",\"6+\",k.tanh],[\"Tile\",\"\",\"6+\",D.tile],[\"Transpose\",\"\",\"1+\",$.transpose,$.parseTransposeAttributes],[\"Upsample\",\"\",\"7-8\",F.upsample,F.parseUpsampleAttributesV7],[\"Upsample\",\"\",\"9\",F.upsample,F.parseUpsampleAttributesV9],[\"Unsqueeze\",\"\",\"1-12\",C.unsqueeze,C.parseUnsqueezeAttributes],[\"Unsqueeze\",\"\",\"13+\",C.unsqueezeV13],[\"Xor\",\"\",\"7+\",s.xor]]},2898:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseBatchNormalizationAttributes=e.batchNormalization=void 0;const r=n(246),i=n(5060),o=n(2039),a={name:\"BatchNormalization\",inputNames:[\"A\",\"Scale\",\"B\",\"Mean\",\"Variance\"],inputTypes:[o.TextureType.unpacked,o.TextureType.unpacked,o.TextureType.unpacked,o.TextureType.unpacked,o.TextureType.unpacked]};e.batchNormalization=(t,e,n)=>(u(e),[t.run(Object.assign(Object.assign({},a),{cacheHint:n.cacheKey,get:()=>s(t,e,n)}),e)]),e.parseBatchNormalizationAttributes=t=>{const e=t.attributes.getFloat(\"epsilon\",1e-5),n=t.attributes.getFloat(\"momentum\",.9),i=t.attributes.getInt(\"spatial\",1);return(0,r.createAttributeWithCacheKey)({epsilon:e,momentum:n,spatial:i})};const s=(t,e,n)=>{const r=(0,i.getGlsl)(t.session.backend.glContext.version),s=e[0].dims.length,[u,c]=t.calculateTextureWidthAndHeight(e[1].dims,o.TextureType.unpacked),l=`\\n  float process(int[${s}] indices) {\\n    vec2 position = offsetToCoords(indices[1], ${u}, ${c});\\n    float scale = getColorAsFloat(${r.texture2D}(Scale, position));\\n    float mean = getColorAsFloat(${r.texture2D}(Mean, position));\\n    float variance = getColorAsFloat(${r.texture2D}(Variance, position));\\n    float b = getColorAsFloat(${r.texture2D}(B, position));\\n\\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${n.epsilon})) ) + b;\\n  }`;return Object.assign(Object.assign({},a),{output:{dims:e[0].dims,type:e[0].type,textureType:o.TextureType.unpacked},shaderSource:l})},u=t=>{if(!t||5!==t.length)throw new Error(\"BatchNormalization requires 5 inputs.\");const e=t[0],n=t[1],r=t[2],i=t[3],o=t[4];if(e.dims.length<3||1!==n.dims.length||1!==r.dims.length||1!==i.dims.length||1!==o.dims.length)throw new Error(\"invalid input shape.\");if(n.dims[0]!==e.dims[1]||r.dims[0]!==e.dims[1]||i.dims[0]!==e.dims[1]||o.dims[0]!==e.dims[1])throw new Error(\"invalid input shape.\");if(\"float32\"!==e.type&&\"float64\"!==e.type||\"float32\"!==n.type&&\"float64\"!==n.type||\"float32\"!==r.type&&\"float64\"!==r.type||\"float32\"!==i.type&&\"float64\"!==i.type||\"float32\"!==o.type&&\"float64\"!==o.type)throw new Error(\"invalid input tensor types.\")}},7839:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.xor=e.sub=e.pRelu=e.pow=e.or=e.mul=e.less=e.greater=e.equal=e.div=e.and=e.add=e.glslPRelu=e.glslPow=e.glslXor=e.glslOr=e.glslAnd=e.glslLess=e.glslGreater=e.glslEqual=e.glslSub=e.glslMul=e.glslDiv=e.glslAdd=void 0;const r=n(2517),i=n(8520),o=n(5060),a=n(2039);function s(){const t=\"add_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return a + b;\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    return v1 + v2;\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}function u(){const t=\"div_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return a / b;\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    return v1 / v2;\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}function c(){const t=\"mul_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return a * b;\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    return v1 * v2;\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}function l(){const t=\"sub_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return a - b;\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    return v1 - v2;\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}function p(){const t=\"equal_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return float(a == b);\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    return vec4(equal(v1, v2));\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}function f(){const t=\"greater_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return float(a > b);\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    return vec4( v1.r > v2.r ,\\n      v1.g > v2.g,\\n      v1.b > v2.b,\\n      v1.a > v2.a );\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}function d(){const t=\"less_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return float(a < b);\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    return vec4( v1.r < v2.r ,\\n                v1.g < v2.g,\\n                v1.b < v2.b,\\n                v1.a < v2.a );\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}function h(){const t=\"and_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return float( bool(a) && bool(b) );\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    bvec4 b1 = bvec4(v1);\\n    bvec4 b2 = bvec4(v2);\\n    return vec4( b1.r && b2.r ,\\n                b1.g && b2.g,\\n                b1.b && b2.b,\\n                b1.a && b2.a );\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}function g(){const t=\"or_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return float( bool(a) || bool(b) );\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    bvec4 b1 = bvec4(v1);\\n    bvec4 b2 = bvec4(v2);\\n    return vec4( b1.r || b2.r ,\\n                b1.g || b2.g,\\n                b1.b || b2.b,\\n                b1.a || b2.a );\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}function b(){const t=\"xor_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return float( bool(a) ^^ bool(b) );\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    bvec4 b1 = bvec4(v1);\\n    bvec4 b2 = bvec4(v2);\\n    return vec4( b1.r ^^ b2.r ,\\n                b1.g ^^ b2.g,\\n                b1.b ^^ b2.b,\\n                b1.a ^^ b2.a );\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}function m(){return function(t){const e=`${t}_`;return{body:`\\n  float ${e}(float a, float b) {\\n    return ${t}(a, b);\\n  }\\n  vec4 ${e}(vec4 v1, vec4 v2) {\\n    return ${t}(v1, v2);\\n  }\\n  `,name:e,type:i.FunctionType.ValueBased}}(\"pow\")}function y(){const t=\"prelu_\";return{body:`\\n  float ${t}(float a, float b) {\\n    return a < 0.0 ? a * b: a;\\n  }\\n  vec4 ${t}(vec4 v1, vec4 v2) {\\n    return vec4(\\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\\n      );\\n  }\\n  `,name:t,type:i.FunctionType.ValueBased}}e.glslAdd=s,e.glslDiv=u,e.glslMul=c,e.glslSub=l,e.glslEqual=p,e.glslGreater=f,e.glslLess=d,e.glslAnd=h,e.glslOr=g,e.glslXor=b,e.glslPow=m,e.glslPRelu=y;const _=(t,e,n,r=e[0].type,i)=>{const o=t.session.pack?a.TextureType.packed:a.TextureType.unpacked;return{name:n.name,inputNames:[\"A\",\"B\"],inputTypes:[o,o],cacheHint:i,get:()=>v(t,e,n,r)}},v=(t,e,n,i=e[0].type)=>{const s=t.session.pack?a.TextureType.packed:a.TextureType.unpacked,u=!r.ShapeUtil.areEqual(e[0].dims,e[1].dims);let c=e[0].dims;const l=t.session.pack;if(u){const a=r.BroadcastUtil.calcShape(e[0].dims,e[1].dims,!1);if(!a)throw new Error(\"Can't perform binary op on the given tensors\");c=a;const u=c.length,p=0!==e[0].dims.length?e[0].dims.length:1,f=0!==e[1].dims.length?e[1].dims.length:1,d=0!==e[0].dims.length?\"bcastIndices_A(indices, aindices);\":\"aindices[0] = 0;\",h=0!==e[1].dims.length?\"bcastIndices_B(indices, bindices);\":\"bindices[0] = 0;\",g=(0,o.getGlsl)(t.session.backend.glContext.version),b=l?`\\n      ${n.body}\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n        vec4 result = ${n.name}(a, b);\\n        ${g.output} = result;\\n      }`:`\\n      ${n.body}\\n      float process(int indices[${u}]) {\\n        int aindices[${p}];\\n        int bindices[${f}];\\n        ${d}\\n        ${h}\\n        return ${n.name}(_A(aindices), _B(bindices));\\n      }`;return{name:n.name,inputNames:[\"A\",\"B\"],inputTypes:[s,s],output:{dims:c,type:i,textureType:s},shaderSource:b,hasMain:l}}const p=(0,o.getGlsl)(t.session.backend.glContext.version),f=`\\n    ${n.body}\\n    void main() {\\n      vec4 v1 = ${p.texture2D}(A, TexCoords);\\n      vec4 v2 = ${p.texture2D}(B, TexCoords);\\n      vec4 result = ${n.name}(v1, v2);\\n      ${p.output} = result;\\n    }\\n    `;return{name:n.name,inputNames:[\"A\",\"B\"],inputTypes:[s,s],output:{dims:e[0].dims,type:i,textureType:s},shaderSource:f,hasMain:!0}};e.add=(t,e)=>[t.run(_(t,e,s()),e)],e.and=(t,e)=>[t.run(_(t,e,h(),\"bool\"),e)],e.div=(t,e)=>[t.run(_(t,e,u()),e)],e.equal=(t,e)=>[t.run(_(t,e,p(),\"bool\"),e)],e.greater=(t,e)=>[t.run(_(t,e,f(),\"bool\"),e)],e.less=(t,e)=>[t.run(_(t,e,d(),\"bool\"),e)],e.mul=(t,e)=>[t.run(_(t,e,c()),e)],e.or=(t,e)=>[t.run(_(t,e,g(),\"bool\"),e)],e.pow=(t,e)=>[t.run(_(t,e,m()),e)],e.pRelu=(t,e)=>[t.run(_(t,e,y()),e)],e.sub=(t,e)=>[t.run(_(t,e,l()),e)],e.xor=(t,e)=>[t.run(_(t,e,b(),\"bool\"),e)]},4196:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseCastAttributes=e.cast=void 0;const r=n(2517);e.cast=(t,e,n)=>(i(e),[t.cast(e[0],n)]),e.parseCastAttributes=t=>r.ProtoUtil.tensorDataTypeFromProto(t.attributes.getInt(\"to\"));const i=t=>{if(!t||1!==t.length)throw new Error(\"Cast requires 1 input.\");if(\"string\"===t[0].type)throw new Error(\"Invalid input type.\")}},1163:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.createPackedConcatProgramInfoLoader=void 0;const r=n(5060),i=n(2039),o=n(9390),a=n(2827);e.createPackedConcatProgramInfoLoader=(t,e,n)=>{const u=(c=e.length,l=n.cacheKey,{name:\"Concat (packed)\",inputNames:Array.from({length:c},((t,e)=>`X${e}`)),inputTypes:Array(c).fill(i.TextureType.packed),cacheHint:l});var c,l;return Object.assign(Object.assign({},u),{get:()=>((t,e,n,u)=>{const c=n[0].dims.slice();if(u>=c.length||u<-1*c.length)throw new Error(\"axis specified for concat doesn't match input dimensionality\");u<0&&(u=c.length+u);const l=c.slice(0);for(let t=1;t<n.length;t++){const e=n[t].dims.slice();for(let t=0;t<c.length;t++)if(t===u)l[u]+=e[t];else if(c[t]!==e[t])throw new Error(\"non concat dimensions must match\")}const p=l.length,f=(0,a.getChannels)(\"coords\",p),d=(0,o.getCoordsDataType)(p),h=(0,a.unpackFromChannel)(),g=n.map((t=>t.dims)),b=(0,o.getGlChannels)(p),m=new Array(g.length-1);m[0]=g[0][u];for(let t=1;t<m.length;t++)m[t]=m[t-1]+g[t][u];const y=b[u],_=b.slice(-2),v=b.join();let w=`if (${y} < ${m[0]}) {\\n        return getChannel(\\n            getX0(${v}), vec2(${_.join()}));\\n        }`;for(let t=1;t<m.length;t++){const e=m[t-1];w+=`\\n            if (${y} < ${m[t]}  && ${y} >= ${m[t-1]}) {\\n              return getChannel(\\n                getX${t}(${s(b,y,e)}),\\n                vec2(${s(_,y,e)}));\\n            }`}const x=m.length,T=m[m.length-1];w+=`\\n            return getChannel(\\n              getX${x}(${s(b,y,T)}),\\n              vec2(${s(_,y,T)}));`;const S=(0,r.getGlsl)(t.session.backend.glContext.version),O=`\\n          ${h}\\n          float getValue(${b.map((t=>\"int \"+t))}) {\\n            ${w}\\n          }\\n\\n          void main() {\\n            ${d} coords = getOutputCoords();\\n            int lastDim = coords.${b[p-1]};\\n            coords.${b[p-1]} = coords.${b[p-2]};\\n            coords.${b[p-2]} = lastDim;\\n\\n            vec4 result = vec4(getValue(${f}), 0., 0., 0.);\\n\\n            ${f[p-1]} = ${f[p-1]} + 1;\\n            if (${f[p-1]} < ${l[p-1]}) {\\n              result.g = getValue(${f});\\n            }\\n\\n            ${f[p-2]} = ${f[p-2]} + 1;\\n            if (${f[p-2]} < ${l[p-2]}) {\\n              result.a = getValue(${f});\\n            }\\n\\n            ${f[p-1]} = ${f[p-1]} - 1;\\n            if (${f[p-2]} < ${l[p-2]} &&\\n                ${f[p-1]} < ${l[p-1]}) {\\n              result.b = getValue(${f});\\n            }\\n            ${S.output} = result;\\n          }\\n        `;return Object.assign(Object.assign({},e),{output:{dims:l,type:n[0].type,textureType:i.TextureType.packed},shaderSource:O,hasMain:!0})})(t,u,e,n.axis)})};const s=(t,e,n)=>{const r=t.indexOf(e);return t.map(((t,e)=>e===r?`${t} - ${n}`:t)).join()}},2069:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseConcatAttributes=e.concat=void 0;const r=n(246),i=n(2039),o=n(1163);e.concat=(t,e,n)=>(p(e),t.session.pack&&e[0].dims.length>1?[t.run((0,o.createPackedConcatProgramInfoLoader)(t,e,n),e)]:[t.run(a(t,e,n),e)]);const a=(t,e,n)=>{const r=(o=e.length,a=n.cacheKey,{name:\"Concat\",inputNames:Array.from({length:o},((t,e)=>`X${e}`)),inputTypes:Array(o).fill(i.TextureType.unpacked),cacheHint:a});var o,a;return Object.assign(Object.assign({},r),{get:()=>((t,e,n,r)=>{const o=n[0].dims.slice();if(r>=o.length||r<-1*o.length)throw new Error(\"axis specified for concat doesn't match input dimensionality\");r<0&&(r=o.length+r);const a=o.slice(0);for(let t=1;t<n.length;t++){const e=n[t].dims.slice();for(let t=0;t<o.length;t++)if(t===r)a[r]+=e[t];else if(o[t]!==e[t])throw new Error(\"non concat dimensions must match\")}const p=a.length,f=new Array(n.length);let d=0;for(let t=0;t<f.length;++t)d+=n[t].dims[r],f[t]=d;let h=\"\";h=n.length<5?s(f):u(f);const g=`\\n        ${c(n.length,p)}\\n        ${l(f)}\\n        ${h}\\n        float process(int indices[${p}]) {\\n          int textureIndex = getTextureWhereDataResides (indices[${r}]);\\n\\n          if(textureIndex != 0) {\\n            indices[${r}] = indices[${r}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\\n          }\\n\\n          return fetchDataFromCorrectTexture(textureIndex, indices);\\n        }`;return Object.assign(Object.assign({},e),{output:{dims:a,type:n[0].type,textureType:i.TextureType.unpacked},shaderSource:g})})(0,r,e,n.axis)})},s=t=>`int getTextureWhereDataResides(int index) {\\n      ${t.map(((t,e)=>`if(index<${t}) {return ${e};}\\n`)).join(\"\")}\\n    }`,u=t=>s(t),c=(t,e)=>{const n=[`float fetchDataFromCorrectTexture(int textureIndex, int indices[${e}]) {`];for(let e=0;e<t;++e)0===e?n.push(`\\tif (textureIndex == ${e}) { return _X${e}(indices); }`):e===t-1?n.push(`\\telse { return _X${e}(indices); }`):n.push(`\\telse if (textureIndex == ${e}) { return _X${e}(indices); }`);return n.push(\"\\t}\"),n.join(\"\\n\")},l=t=>{const e=[\"int getSizeInConcatAxisValueFromIndex(int index) {\"];for(let n=0;n<t.length;++n)0===n?e.push(`\\tif (index == ${n}) { return ${t[n]}; }`):n===t.length-1?e.push(`\\telse { return ${t[n]}; }`):e.push(`\\telse if (index == ${n}) { return ${t[n]}; }`);return e.push(\"\\t}\"),e.join(\"\\n\")};e.parseConcatAttributes=t=>(0,r.createAttributeWithCacheKey)({axis:t.attributes.getInt(\"axis\")});const p=t=>{if(!t||t.length<1)throw new Error(\"too few inputs\");const e=t[0].type,n=t[0].dims.length;if(\"string\"===e)throw new Error(\"string tensor is not supported yet\");for(const r of t){if(r.type!==e)throw new Error(\"input tensors should be one type\");if(r.dims.length!==n)throw new Error(\"input tensors should have the same shape\")}}},4770:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.createUnpackedGroupedConvProgramInfoLoader=void 0;const r=n(6231),i=n(5060),o=n(2039),a=n(8138),s=n(2823);e.createUnpackedGroupedConvProgramInfoLoader=(t,e,n)=>{const u=(c=e.length>2,l=n.cacheKey,{name:\"GroupedConv\",inputNames:c?[\"X\",\"W\",\"Bias\"]:[\"X\",\"W\"],inputTypes:c?[o.TextureType.unpacked,o.TextureType.unpacked,o.TextureType.unpacked]:[o.TextureType.unpacked,o.TextureType.unpacked],cacheHint:l});var c,l;return Object.assign(Object.assign({},u),{get:()=>((t,e,n,u)=>{const c=e.length>2?\"value += getBias(output_channel);\":\"\",l=e[0].dims.slice(),p=e[1].dims.slice(),f=p[0]/u.group;r.Logger.verbose(\"GroupedConv\",`autpPad:${u.autoPad}, dilations:${u.dilations}, group:${u.group}, kernelShape:${u.kernelShape}, pads:${u.pads}, strides:${u.strides}`);const d=(0,a.calculateOutputShape)(l,p,u.dilations,u.pads,u.strides),h=(0,i.getGlsl)(t.session.backend.glContext.version),{activationFunction:g,applyActivation:b}=(0,s.getActivationSnippet)(u),m=`\\n  const ivec2 strides = ivec2(${u.strides[0]}, ${u.strides[1]});\\n  const ivec2 pads = ivec2(${u.pads[0]}, ${u.pads[1]});\\n  ${g}\\n  void main() {\\n    ivec4 coords = getOutputCoords();\\n    int batch = coords.x;\\n    int output_channel = coords.y;\\n    ivec2 xRCCorner = coords.zw * strides - pads;\\n    int group_id = output_channel / ${f};\\n\\n    float value = 0.0;\\n    for (int wInChannel = 0; wInChannel < ${p[1]}; wInChannel++) {\\n      int input_channel = group_id * ${p[1]} + wInChannel;\\n      for (int wHeight = 0; wHeight < ${p[2]}; wHeight++) {\\n        int xHeight = xRCCorner.x + wHeight * ${u.dilations[0]};\\n\\n        if (xHeight < 0 || xHeight >= ${l[2]}) {\\n          continue;\\n        }\\n\\n        for (int wWidth = 0; wWidth < ${p[3]}; wWidth++) {\\n          int xWidth = xRCCorner.y + wWidth * ${u.dilations[1]};\\n          if (xWidth < 0 || xWidth >= ${l[3]}) {\\n            continue;\\n          }\\n\\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\\n          value += xVal*wVal;\\n        }\\n      }\\n    }\\n    ${c}\\n    ${b}\\n    ${h.output} = vec4(value, .0, .0, .0);\\n  }\\n`;return Object.assign(Object.assign({},n),{output:{dims:d,type:e[0].type,textureType:o.TextureType.unpacked},shaderSource:m,hasMain:!0})})(t,e,u,n)})}},1386:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.conv2DPacked=e.conv2DPackedPointwise=void 0;const r=n(8138),i=n(8555),o=n(708);e.conv2DPackedPointwise=(t,e,n)=>{const i=e[0].dims,a=e[1].dims,s=(0,r.calculateOutputShape)(i,a,n.dilations,n.pads,n.strides),u=t.reshapePacked(e[0],[i[1],i[2]*i[3]]),c=t.reshapePacked(e[1],[a[0],a[1]]),l=e.length>2?[c,u,e[2]]:[c,u],p=t.run((0,o.createPackedMatmulProgramInfoLoader)(t,l,n),l);return t.reshapePacked(p,s)},e.conv2DPacked=(t,e,n)=>{const a=e[0].dims,s=e[1].dims,u=(0,r.calculateOutputShape)(a,s,n.dilations,n.pads,n.strides),c=t.run((0,i.createPackedIm2ColProgramInfoLoader)(t,e[0],e[1],u,n),[e[0]]),l=t.reshapePacked(e[1],[s[0],s[1]*s[2]*s[3]]),p=3===e.length?[l,c,e[2]]:[l,c],f=t.run((0,o.createPackedMatmulProgramInfoLoader)(t,p,n),p);return t.reshapePacked(f,u)}},9663:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseConvTransposeAttributes=e.convTranspose=void 0;const r=n(246),i=n(5060),o=n(2039),a=n(2823),s=(t,e,n,r,i,o)=>(t-1)*e+n+(r-1)*i+1-o,u=(t,e,n,r,i)=>{const o=Math.floor(t/2);\"SAME_UPPER\"===e?(n[r]=o,n[i]=t-o):\"SAME_LOWER\"===e&&(n[r]=t-o,n[i]=o)};e.convTranspose=(t,e,n)=>(f(e,n),c(t,e,n));const c=(t,e,n)=>{const r=p(n,e);return[l(t,e,r)]},l=(t,e,n)=>t.run(((t,e,n)=>{const r=(s=e.length>2,u=n.cacheKey,{name:\"ConvTranspose\",inputNames:s?[\"X\",\"W\",\"B\"]:[\"X\",\"W\"],inputTypes:s?[o.TextureType.unpacked,o.TextureType.unpacked,o.TextureType.unpacked]:[o.TextureType.unpacked,o.TextureType.unpacked],cacheHint:u});var s,u;return Object.assign(Object.assign({},r),{get:()=>((t,e,n,r)=>{const s=e.length>2?\"getB(output_channel)\":\"0.0\",u=e[0].dims,c=e[1].dims,l=c[1],p=c[0]/r.group,f=[e[0].dims[0],e[1].dims[1]*r.group,...r.outputShape],d=(0,i.getGlsl)(t.session.backend.glContext.version),{activationFunction:h,applyActivation:g}=(0,a.getActivationSnippet)(r),b=`\\n  const ivec2 strides = ivec2(${r.strides[0]}, ${r.strides[1]});\\n  const ivec2 pads = ivec2(${r.pads[0]}, ${r.pads[1]});\\n  ${h}\\n  void main() {\\n    ivec4 coords = getOutputCoords();\\n    int batch = coords.x;\\n    int output_channel = coords.y;\\n\\n    ivec2 loc = coords.zw + pads;\\n\\n    int group_id = output_channel / ${l};\\n    int wOutChannel = output_channel - group_id * ${l};\\n\\n    float value = ${s};\\n    for (int inChannelOffset = 0; inChannelOffset < ${p}; inChannelOffset++) {\\n      int input_channel = group_id * ${p} + inChannelOffset;\\n      for (int wWOff = 0; wWOff < ${c[2]}; wWOff++) {\\n        for (int wHOff = 0; wHOff < ${c[3]}; wHOff++) {\\n          ivec2 wOff = ivec2(wWOff * ${r.dilations[0]}, wHOff * ${r.dilations[1]});\\n          ivec2 wLoc = loc - wOff;\\n          ivec2 wLocIn = wLoc / strides;\\n          if (\\n            wLocIn * strides == wLoc &&\\n            wLocIn.x >= 0 && wLocIn.x < ${u[2]} &&\\n            wLocIn.y >= 0 && wLocIn.y < ${u[3]}\\n          ) {\\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\\n            value += xVal * wVal;\\n          }\\n        }\\n      }\\n    }\\n    ${g}\\n    ${d.output} = vec4(value, .0, .0, .0);\\n  }\\n`;return Object.assign(Object.assign({},n),{output:{dims:f,type:e[0].type,textureType:o.TextureType.unpacked},shaderSource:b,hasMain:!0})})(t,e,r,n)})})(t,e,n),e),p=(t,e)=>{const n=t.kernelShape.slice();if(0===t.kernelShape.length)for(let t=2;t<e[1].dims.length;++t)n.push(e[1].dims[t]);const r=t.pads.slice(),i=t.outputShape.slice();((t,e,n,r,i,o,a,c)=>{const l=t.length-2,p=0===c.length;for(let f=0;f<l;++f){const d=p?t[f+2]*o[f]:c[f],h=s(t[f+2],o[f],i[f],e[f],n[f],d);u(h,r,i,f,f+l),p&&c.push(o[f]*(t[f+2]-1)+a[f]+(e[f]-1)*n[f]+1-i[f]-i[f+l])}})(e[0].dims,n,t.dilations,t.autoPad,r,t.strides,t.outputPadding,i);const o=Object.assign({},t);return Object.assign(o,{kernelShape:n,pads:r,outputShape:i,cacheKey:t.cacheKey}),o};e.parseConvTransposeAttributes=t=>{const e=t.attributes,n=(0,a.parseInternalActivationAttributes)(e),i=e.getString(\"auto_pad\",\"NOTSET\"),o=e.getInts(\"dilations\",[1,1]),s=e.getInt(\"group\",1),u=e.getInts(\"kernel_shape\",[]),c=e.getInts(\"output_padding\",[0,0]),l=e.getInts(\"output_shape\",[]),p=e.getInts(\"pads\",[0,0,0,0]),f=e.getInts(\"strides\",[1,1]);return(0,r.createAttributeWithCacheKey)(Object.assign({autoPad:i,dilations:o,group:s,kernelShape:u,outputPadding:c,outputShape:l,pads:p,strides:f},n))};const f=(t,e)=>{if(!t||2!==t.length&&3!==t.length)throw new Error(\"Conv requires 2 or 3 inputs\");if(4!==t[0].dims.length||4!==t[1].dims.length)throw new Error(\"currently only support 2-dimensional conv\");if(t[0].dims[1]!==t[1].dims[0])throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");const n=t[1].dims[1]*e.group;if(3===t.length&&(1!==t[2].dims.length||t[2].dims[0]!==n))throw new Error(\"invalid bias\");const r=t[0].dims.length-2;if(e.dilations.length!==r)throw new Error(`dilations should be ${r}D`);if(e.strides.length!==r)throw new Error(`strides should be ${r}D`);if(e.pads.length!==2*r)throw new Error(`pads should be ${2*r}D`);if(e.outputPadding.length!==r)throw new Error(`output_padding should be ${r}D`);if(0!==e.kernelShape.length&&e.kernelShape.length!==t[1].dims.length-2)throw new Error(\"invalid kernel shape\");if(0!==e.outputShape.length&&e.outputShape.length!==t[0].dims.length-2)throw new Error(\"invalid output shape\");if(\"float32\"!==t[0].type||\"float32\"!==t[1].type)throw new Error(\"ConvTranspose input(X,W) should be float tensor\");if(3===t.length&&\"float32\"!==t[2].type)throw new Error(\"ConvTranspose input(bias) should be float tensor\")}},8138:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseConvAttributes=e.conv=e.calculateOutputShape=void 0;const r=n(246),i=n(2517),o=n(4770),a=n(1386),s=n(9828),u=n(2823),c=n(3248),l=n(5623);e.calculateOutputShape=(t,e,n,r,i)=>{const o=t[0],a=t.slice(2),s=a.length,u=e[0],c=e.slice(2).map(((t,e)=>t+(t-1)*(n[e]-1))),l=a.map(((t,e)=>t+r[e]+r[e+s])).map(((t,e)=>Math.floor((t-c[e]+i[e])/i[e])));return[o,u].concat(...l)},e.conv=(t,e,n)=>(g(e,n),p(t,e,n));const p=(t,e,n)=>{const r=h(n,e),i=t.session.pack,s=1===r.kernelShape[0]&&1===r.kernelShape[1];return r.group>1?[t.run((0,o.createUnpackedGroupedConvProgramInfoLoader)(t,e,r),e)]:s&&i?[f(t,e,r)]:i&&4===e[0].dims.length&&1===e[0].dims[0]&&!s?[(0,a.conv2DPacked)(t,e,r)]:[d(t,e,r)]},f=(t,n,r)=>{const i=n[0].dims,o=n[1].dims,a=(0,e.calculateOutputShape)(i,o,r.dilations,r.pads,r.strides),s=t.reshapeUnpacked(n[0],[i[1],i[2]*i[3]]),u=t.reshapeUnpacked(n[1],[o[0],o[1]]),c=n.length>2?[u,s,n[2]]:[u,s],p=t.run((0,l.createMatmulProgramInfoLoader)(c,r),c);return t.reshapeUnpacked(p,a)},d=(t,n,r)=>{const i=n[0].dims,o=n[1].dims,a=(0,e.calculateOutputShape)(i,o,r.dilations,r.pads,r.strides),u=t.run((0,c.createIm2ColProgramInfoLoader)(t,n[0],n[1],a,r),[n[0]]),l=3===n.length?[u,n[1],n[2]]:[u,n[1]];return t.run((0,s.createDotProductProgramInfoLoader)(t,n,a,r),l)},h=(t,e)=>{const n=t.kernelShape.slice();if(0===t.kernelShape.length)for(let t=2;t<e[1].dims.length;++t)n.push(e[1].dims[t]);const r=t.pads.slice();i.PoolConvUtil.adjustPadsBasedOnAutoPad(e[0].dims,t.strides,t.dilations,n,r,t.autoPad);const o=Object.assign({},t);return Object.assign(o,{kernelShape:n,pads:r,cacheKey:t.cacheKey}),o};e.parseConvAttributes=t=>{const e=t.attributes,n=(0,u.parseInternalActivationAttributes)(e),i=e.getString(\"auto_pad\",\"NOTSET\"),o=e.getInts(\"dilations\",[1,1]),a=e.getInt(\"group\",1),s=e.getInts(\"kernel_shape\",[]),c=e.getInts(\"pads\",[0,0,0,0]),l=e.getInts(\"strides\",[1,1]);return(0,r.createAttributeWithCacheKey)(Object.assign({autoPad:i,dilations:o,group:a,kernelShape:s,pads:c,strides:l},n))};const g=(t,e)=>{if(!t||2!==t.length&&3!==t.length)throw new Error(\"Conv requires 2 or 3 inputs\");if(4!==t[0].dims.length||4!==t[1].dims.length)throw new Error(\"currently only support 2-dimensional conv\");if(t[0].dims[1]!==t[1].dims[1]*e.group)throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");if(3===t.length&&(1!==t[2].dims.length||t[1].dims[0]!==t[2].dims[0]))throw new Error(\"invalid bias\");const n=t[0].dims.length-2;if(e.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(e.strides.length!==n)throw new Error(`strides should be ${n}D`);if(e.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(0!==e.kernelShape.length&&e.kernelShape.length!==t[1].dims.length-2)throw new Error(\"invalid kernel shape\");if(\"float32\"!==t[0].type||\"float32\"!==t[1].type)throw new Error(\"Conv input(X,W) should be float tensor\");if(3===t.length&&\"float32\"!==t[2].type)throw new Error(\"Conv input(bias) should be float tensor\")}},5193:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseDepthToSpaceAttributes=e.depthToSpace=void 0;const r=n(3738);e.depthToSpace=(t,e,n)=>{i(e);const o=n.blocksize,a=o*o,s=\"DCR\"===n.mode?[0,3,4,1,5,2]:[0,1,4,2,5,3],u=\"DCR\"===n.mode?[e[0].dims[0],o,o,e[0].dims[1]/a,e[0].dims[2],e[0].dims[3]]:[e[0].dims[0],e[0].dims[1]/a,o,o,e[0].dims[2],e[0].dims[3]],c=t.reshapeUnpacked(e[0],u),l={perm:s,cacheKey:`${s}`},[p]=(0,r.transpose)(t,[c],l),f=[e[0].dims[0],e[0].dims[1]/a,e[0].dims[2]*o,e[0].dims[3]*o];return[t.reshapeUnpacked(p,f)]},e.parseDepthToSpaceAttributes=t=>{const e=t.attributes.getInt(\"blocksize\");if(e<1)throw new Error(`blocksize must be >= 1, but got : ${e} for DepthToSpace`);const n=t.attributes.getString(\"mode\",\"DCR\");if(\"DCR\"!==n&&\"CRD\"!==n)throw new Error(`unrecognized mode: ${n} for DepthToSpace`);return{mode:n,blocksize:e}};const i=t=>{if(1!==t.length)throw new Error(`DepthToSpace expect 1 inputs, but got ${t.length}`);if(\"string\"===t[0].type||4!==t[0].dims.length)throw new TypeError(\"DepthToSpace input should be a 4-D numeric tensor\")}},9828:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.createDotProductProgramInfoLoader=void 0;const r=n(2517),i=n(5060),o=n(2039),a=n(2823),s=n(3248);e.createDotProductProgramInfoLoader=(t,e,n,u)=>{const c=((t,e)=>({name:\"ConvDotProduct\",inputNames:t?[\"Im2Col\",\"K\",\"B\"]:[\"Im2Col\",\"K\"],inputTypes:t?[o.TextureType.unpacked,o.TextureType.packedLastDimension,o.TextureType.unpacked]:[o.TextureType.unpacked,o.TextureType.packedLastDimension],cacheKey:e.activationCacheKey}))(e.length>2,u);return Object.assign(Object.assign({},c),{get:()=>((t,e,n,u,c)=>{const l=n[0].dims,p=n[1].dims,f=[p[0],Math.ceil(l[1]*p[2]*p[3]/4)],d=(0,s.calculateIm2ColDims)(l,p,u),[h,g]=t.calculateTextureWidthAndHeight(f,o.TextureType.packedLastDimension),b=r.ShapeUtil.computeStrides(d),[m,y]=t.calculateTextureWidthAndHeight(d,o.TextureType.packedLastDimension),_=u.length,v=n.length<3?\"0.0\":\"_B(b)\",w=Math.ceil(l[1]*p[2]*p[3]/4),{activationFunction:x,applyActivation:T}=(0,a.getActivationSnippet)(c),S=(0,i.getGlsl)(t.session.backend.glContext.version),O=`\\n${x}\\nfloat process(int indices[${_}]) {\\n  int b[1];\\n  b[0] = indices[1];\\n  int im2col[4];\\n  im2col[0] = indices[0];\\n  im2col[1] = indices[2];\\n  im2col[2] = indices[3];\\n  int im2colOffset = im2col[0] * ${b[0]} + im2col[1] * ${b[1]} + im2col[2] * ${b[2]};\\n  int kernelOffset = indices[1] * ${f[1]};\\n  float value = ${v};\\n  for (int i = 0; i < ${w}; ++i) {\\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${m}, ${y});\\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${h}, ${g});\\n    value += dot(${S.texture2D}(Im2Col, im2colCoords), ${S.texture2D}(K, kernelCoords));\\n    ++im2colOffset;\\n    ++kernelOffset;\\n  }\\n  ${T}\\n  return value;\\n}`;return Object.assign(Object.assign({},e),{output:{dims:u,type:n[0].type,textureType:o.TextureType.unpacked},shaderSource:O})})(t,c,e,n,u)})}},7992:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseFlattenAttributes=e.flatten=void 0;const r=n(2517);e.flatten=(t,e,n)=>{i(e,n);const o=r.ShapeUtil.flattenShape(e[0].dims,n);return[t.reshapeUnpacked(e[0],o)]},e.parseFlattenAttributes=t=>t.attributes.getInt(\"axis\",1);const i=(t,e)=>{if(!t||1!==t.length)throw new Error(\"Flatten requires 1 input.\");const n=t[0].dims.length;if(0===n)throw new Error(\"scalar tensor is not supported.\");if(e<-n||e>n)throw new Error(\"Invalid axis\");if(\"string\"===t[0].type)throw new Error(\"string tensor is not supported.\")}},2823:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseInternalActivationAttributes=e.getActivationSnippet=void 0;const r=n(2517),i=n(4909);e.getActivationSnippet=function(t){let e;switch(t.activation){case\"Relu\":e=(0,i.glslRelu)();break;case\"Sigmoid\":e=(0,i.glslSigmoid)();break;case\"Clip\":e=(0,i.glslClip)(t.clipMin,t.clipMax);break;default:return{activationFunction:\"\",applyActivation:\"\"}}const n=e.name;return{activationFunction:e.body,applyActivation:`value = ${n}_(value);`}},e.parseInternalActivationAttributes=t=>{const e=t.getString(\"activation\",\"\");if(\"Clip\"===e){const[n,i]=t.getFloats(\"activation_params\",[r.MIN_CLIP,r.MAX_CLIP]);return{activation:e,clipMax:i,clipMin:n,activationCacheKey:`${e}:${n},${i}`}}return{activation:e,activationCacheKey:e}}},1253:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseGatherAttributes=e.gather=void 0;const r=n(246),i=n(782),o=n(2517),a=n(2039);e.gather=(t,e,n)=>(c(e,n.axis),[t.run(u(t,e,n),e)]),e.parseGatherAttributes=t=>(0,r.createAttributeWithCacheKey)({axis:t.attributes.getInt(\"axis\",0)});const s={name:\"Gather\",inputNames:[\"A\",\"B\"],inputTypes:[a.TextureType.unpacked,a.TextureType.unpacked]},u=(t,e,n)=>{const r=Object.assign(Object.assign({},s),{cacheHint:n.cacheKey});return Object.assign(Object.assign({},r),{get:()=>((t,e,n,r)=>{const i=n[0].dims.slice(),s=n[1].dims.slice(),u=new Array(i.length+s.length-1);r=o.ShapeUtil.normalizeAxis(r,i.length);const c=[];for(let t=0;t<u.length;t++)t<r?(u[t]=i[t],c.push(`inputIdx[${t}] = outputIdx[${t}];`)):t<r+s.length?(u[t]=s[t-r],c.push(`indexDataIdx[${t-r}] = outputIdx[${t}];`)):(u[t]=i[t-s.length+1],c.push(`inputIdx[${t-s.length+1}] = outputIdx[${t}];`));const l=`\\n      float process(int outputIdx[${u.length||1}]) {\\n        int inputIdx[${i.length}];\\n        int indexDataIdx[${s.length||1}];\\n        indexDataIdx[0] = 0;\\n        ${c.join(\"\\n        \")}\\n        int idx = int(_B(indexDataIdx));\\n        inputIdx[${r}] = idx < 0 ? idx + ${i[r]} : idx;\\n        return _A(inputIdx);\\n      }`;return Object.assign(Object.assign({},e),{output:{dims:u,type:n[0].type,textureType:a.TextureType.unpacked},shaderSource:l})})(0,r,e,n.axis)})},c=(t,e)=>{if(!t||2!==t.length)throw new Error(\"Gather requires 2 inputs.\");const n=t[0].dims.length;if(n<1)throw new Error(\"Invalid input shape.\");if(e<-n||e>n-1)throw new Error(\"Invalid axis.\");if(-1===i.NUMBER_TYPES.indexOf(t[0].type))throw new Error(\"Invaid input type.\");if(\"int32\"!==t[1].type&&\"int16\"!==t[1].type)throw new Error(\"Invaid input type.\")}},4776:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseGemmAttributesV11=e.parseGemmAttributesV7=e.gemm=void 0;const r=n(246),i=n(2517),o=n(2039);e.gemm=(t,e,n)=>(c(e,n),[t.run(s(e,n),e)]);const a=(t,e)=>{const n=0!==t.attributes.getInt(\"transA\",0),i=0!==t.attributes.getInt(\"transB\",0),o=t.attributes.getFloat(\"alpha\",1),a=t.attributes.getFloat(\"beta\",1);return(0,r.createAttributeWithCacheKey)({transA:n,transB:i,alpha:o,beta:a,isOptionalC:e})};e.parseGemmAttributesV7=t=>a(t,!1),e.parseGemmAttributesV11=t=>a(t,!0);const s=(t,e)=>{const n={name:\"Gemm\",inputNames:3===t.length?[\"A\",\"B\",\"C\"]:[\"A\",\"B\"],inputTypes:3===t.length?[o.TextureType.unpacked,o.TextureType.unpacked,o.TextureType.unpacked]:[o.TextureType.unpacked,o.TextureType.unpacked],key:e.cacheKey};return Object.assign(Object.assign({},n),{get:()=>u(n,t,e)})},u=(t,e,n)=>{const r=e[0].dims.slice(),a=e[1].dims.slice(),[s,u]=i.GemmUtil.getShapeOfGemmResult(r,n.transA,a,n.transB,3===e.length?e[2].dims:void 0),c=[s,u];if(!c)throw new Error(\"Can't use gemm on the given tensors\");let l=r[r.length-1],p=\"\";n.transA&&(l=r[0]),n.transA&&n.transB?p=\"value += _A_T(a) * _B_T(b);\":n.transA&&!n.transB?p=\"value += _A_T(a) * _B(b);\":!n.transA&&n.transB?p=\"value += _A(a) * _B_T(b);\":n.transA||n.transB||(p=\"value += _A(a) * _B(b);\");const f=c.length,d=`\\n      float process(int indices[${f}]) {\\n          int a[${f}];\\n          int b[${f}];\\n          ${3===e.length?`int c[${e[2].dims.length}];`:\"\"}\\n\\n          copyVec(indices, a);\\n          copyVec(indices, b);\\n          ${3===e.length?\"bcastIndices_C(indices, c);\":\"\"}\\n\\n          float value = 0.0;\\n          for (int k=0; k<${l}; ++k) {\\n              a[${f-1}] = k;\\n              b[${f-2}] = k;\\n              ${p}\\n          }\\n\\n          value = value * alpha;\\n          ${3===e.length?\"value += beta * _C(c);\":\"\"}\\n          return value;\\n      }`;return Object.assign(Object.assign({},t),{output:{dims:c,type:e[0].type,textureType:o.TextureType.unpacked},variables:[{name:\"alpha\",type:\"float\",data:n.alpha},{name:\"beta\",type:\"float\",data:n.beta}],shaderSource:d})},c=(t,e)=>{if(!t)throw new Error(\"Input is missing\");if(e.isOptionalC&&(t.length<2||t.length>3))throw new Error(\"Invaid input shape.\");if(!e.isOptionalC&&3!==t.length)throw new Error(\"Gemm requires 3 inputs\");if(3===t.length&&1!==t[2].dims.length&&2!==t[2].dims.length)throw new Error(\"Invalid input shape of C\");if(\"float32\"!==t[0].type&&\"float64\"!==t[0].type||\"float32\"!==t[1].type&&\"float64\"!==t[1].type||3===t.length&&\"float32\"!==t[2].type&&\"float64\"!==t[2].type)throw new Error(\"Invalid input type.\");if(t[0].type!==t[1].type||3===t.length&&t[0].type!==t[2].type)throw new Error(\"Input types are mismatched\")}},8555:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.createPackedIm2ColProgramInfoLoader=void 0;const r=n(5060),i=n(2039),o=n(2827);e.createPackedIm2ColProgramInfoLoader=(t,e,n,a,s)=>{const u=(c=s.cacheKey,{name:\"Im2Col (packed)\",inputNames:[\"A\"],inputTypes:[i.TextureType.packed],cacheHint:c});var c;return Object.assign(Object.assign({},u),{get:()=>((t,e,n,a,s,u)=>{const c=n.dims,l=a.dims,p=s.length,f=[l[1]*l[2]*l[3],s[2]*s[3]],d=l[2]*l[3],h=(0,o.unpackFromChannel)(),g=(0,r.getGlsl)(t.session.backend.glContext.version);let b=\"\";for(let t=0;t<=1;t++)for(let e=0;e<=1;e++)b+=`\\n            blockIndex = rc.x + ${e};\\n            pos = rc.y + ${t};\\n\\n            if(blockIndex < ${f[1]} && pos < ${f[0]}) {\\n              offsetY = int(blockIndex / (${s[p-1]})) * ${u.strides[0]} -\\n                ${u.pads[0]};\\n              d0 = offsetY + ${u.dilations[0]} * (imod(pos, ${d}) / ${l[2]});\\n\\n              if(d0 < ${c[2]} && d0 >= 0) {\\n                offsetX = imod(blockIndex, ${s[p-1]}) * ${u.strides[1]} -\\n                  ${u.pads[1]};\\n                d1 = offsetX + ${u.dilations[1]} * imod(imod(pos, ${d}), ${l[2]});\\n\\n                if(d1 < ${c[3]} && d1 >= 0) {\\n\\n                  ch = int(float(pos)/ ${d}.);\\n                    innerDims = vec2(d0, d1);\\n                    result[${2*t+e}] = getChannel(\\n                      getA(0, ch, int(innerDims.x),\\n                      int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n\\n          `;const m=`\\n      ${h}\\n\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n          vec4 result = vec4(0.0);\\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n          vec2 innerDims;\\n          ${b}\\n          ${g.output} = result;\\n      }\\n            `;return Object.assign(Object.assign({},e),{output:{dims:f,type:n.type,textureType:i.TextureType.packed},shaderSource:m,hasMain:!0})})(t,u,e,n,a,s)})}},3248:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.calculateIm2ColDims=e.createIm2ColProgramInfoLoader=void 0;const r=n(2039);e.createIm2ColProgramInfoLoader=(t,n,i,o,a)=>{const s=(u=a.cacheKey,{name:\"Im2Col\",inputNames:[\"X\"],inputTypes:[r.TextureType.unpacked],cacheHint:u});var u;return Object.assign(Object.assign({},s),{get:()=>((t,n,i,o,a,s)=>{const u=i.dims,c=o.dims,l=a.length,p=(0,e.calculateIm2ColDims)(u,c,a,4),f=`\\n        const int XC = ${u[1]};\\n        const int XH = ${u[2]};\\n        const int XW = ${u[3]};\\n        const int KH = ${s.kernelShape[0]};\\n        const int KW = ${s.kernelShape[1]};\\n        const int dilationH = ${s.dilations[0]};\\n        const int dilationW = ${s.dilations[1]};\\n        const int strideH = ${s.strides[0]};\\n        const int strideW = ${s.strides[1]};\\n        const int padH = ${s.pads[0]};\\n        const int padW = ${s.pads[1]};\\n        const int KHKW = KH*KW;\\n        const int XCKHKW = XC * KHKW;\\n        const int outputChannels = 4;\\n        vec4 process(int indices[${l}]) {\\n          int b  = indices[0]; // batch size\\n          int oh = indices[1] * strideH - padH; //output height\\n          int ow = indices[2] * strideW - padW; //output width\\n          int p = indices[3] * outputChannels; //patch\\n          vec4 value = vec4(0.0);\\n          for(int i=0; i < outputChannels; ++i) {\\n            if(p < XCKHKW) {\\n              int patchC = p / KHKW;\\n              int patchH = (p - patchC*KHKW) / KW;\\n              int patchW = (p - patchC*KHKW) - patchH * KW;\\n              int xh2 = oh + patchH * dilationH;\\n              int xw2 = ow + patchW * dilationW;\\n              int x[${u.length}];\\n              x[0] = b;\\n              x[1] = patchC;\\n              x[2] = xh2;\\n              x[3] = xw2;\\n              if(xh2 >= 0 &&\\n                  xh2 < XH &&\\n                  xw2 >= 0 &&\\n                  xw2 < XW) {\\n                value[i] = _X(x);\\n              }\\n            }\\n            ++p;\\n          }\\n          return value;\\n        }\\n        `;return Object.assign(Object.assign({},n),{output:{dims:p,type:i.type,textureType:r.TextureType.packedLastDimension},shaderSource:f})})(0,s,n,i,o,a)})},e.calculateIm2ColDims=(t,e,n,r=4)=>[n[0],n[2],n[3],Math.ceil(t[1]*e[2]*e[3]/r)]},6572:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseImageScalerAttributes=e.imageScaler=void 0;const r=n(246),i=n(2039);e.imageScaler=(t,e,n)=>(u(e),[t.run(a(t,e,n),e)]),e.parseImageScalerAttributes=t=>{const e=t.attributes.getFloat(\"scale\"),n=t.attributes.getFloats(\"bias\");return(0,r.createAttributeWithCacheKey)({scale:e,bias:n})};const o={name:\"ImageScaler\",inputNames:[\"X\"],inputTypes:[i.TextureType.unpacked]},a=(t,e,n)=>{const r=Object.assign(Object.assign({},o),{cacheHint:n.cacheKey});return Object.assign(Object.assign({},r),{get:()=>((t,e,n,r)=>{const o=n[0].dims.slice(),a=o.length,u=`\\n      ${s(r.bias.length)}\\n      float process(int indices[${a}]) {\\n        return _X(indices) * scale + getBias(bias, indices[1]);\\n      }`;return Object.assign(Object.assign({},e),{output:{dims:o,type:n[0].type,textureType:i.TextureType.unpacked},variables:[{name:\"bias\",type:\"float\",arrayLength:r.bias.length,data:r.bias},{name:\"scale\",type:\"float\",data:r.scale}],shaderSource:u})})(0,r,e,n)})},s=t=>{const e=[`float getBias(float bias[${t}], int channel) {`];for(let n=0;n<t;++n)0===n?e.push(`\\tif (channel == ${n}) { return bias[${n}]; }`):n===t-1?e.push(`\\telse { return bias[${n}]; }`):e.push(`\\telse if (channel == ${n}) { return bias[${n}]; }`);return e.push(\"\\t}\"),e.join(\"\\n\")},u=t=>{if(!t||1!==t.length)throw new Error(\"ImageScaler requires 1 input.\");if(4!==t[0].dims.length)throw new Error(\"Invalid input shape.\");if(\"float32\"!==t[0].type&&\"float64\"!==t[0].type)throw new Error(\"Invalid input type.\")}},3346:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseInstanceNormalizationAttributes=e.instanceNormalization=void 0;const r=n(5060),i=n(2039);e.instanceNormalization=(t,e,n)=>{c(e);const r=t.run(a(e[0]),e);return[t.run(u(t,e[0],n,r.dims),[e[0],r,e[1],e[2]])]},e.parseInstanceNormalizationAttributes=t=>t.attributes.getFloat(\"epsilon\",1e-5);const o={name:\"InstanceNormalization_MeanAndVariance\",inputNames:[\"X\"],inputTypes:[i.TextureType.unpacked]},a=t=>Object.assign(Object.assign({},o),{get:()=>((t,e)=>{const n=e.dims.slice(),r=n[1],o=n[2]*n[3],a=[n[0],r],s=`\\n      vec4 process(int[2] indices) {\\n        vec4 v = vec4(0.0);\\n        int a[4];\\n        a[0] = indices[0];\\n        a[1] = indices[1];\\n        float temp = 0.0;\\n        for(int a2=0; a2<${n[2]}; a2++) {\\n          a[2] = a2;\\n          for(int a3=0; a3<${n[3]}; a3++) {\\n            a[3] = a3;\\n            float x = _X(a);\\n            temp += x;\\n          }\\n        }\\n        float mean = temp / float(${o});\\n        temp = 0.0;\\n        for(int a2=0; a2<${n[2]}; a2++) {\\n          a[2] = a2;\\n          for(int a3=0; a3<${n[3]}; a3++) {\\n            a[3] = a3;\\n            float x = _X(a);\\n            temp += (x - mean) * (x - mean);\\n          }\\n        }\\n        v.r = mean;\\n        v.g = temp / float(${o});\\n\\n        return v;\\n      }`;return Object.assign(Object.assign({},t),{output:{dims:a,type:e.type,textureType:i.TextureType.packedLastDimension},shaderSource:s})})(o,t)}),s={name:\"InstanceNormalization_ComputeOutput\",inputNames:[\"X\",\"MeanAndVariance\",\"Scale\",\"B\"],inputTypes:[i.TextureType.unpacked,i.TextureType.packedLastDimension,i.TextureType.unpacked,i.TextureType.unpacked]},u=(t,e,n,o)=>{const a=Object.assign(Object.assign({},s),{cacheHint:`${n}`});return Object.assign(Object.assign({},a),{get:()=>((t,e,n,o,a)=>{const s=(0,r.getGlsl)(t.session.backend.glContext.version),[u,c]=t.calculateTextureWidthAndHeight(a,i.TextureType.packedLastDimension),[l,p]=[u/4,c],f=`\\n      vec4 get_MeanAndVariance(int[2] mv) {\\n        int offset = indicesToOffset_MeanAndVariance(mv);\\n        vec2 coords = offsetToCoords(offset, ${l}, ${p});\\n        return ${s.texture2D}(MeanAndVariance, coords);\\n      }\\n\\n      float process(int[4] indices) {\\n        int mv[2];\\n        mv[0] = indices[0];\\n        mv[1] = indices[1];\\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\\n        float mean = mean_and_variance.r;\\n        float variance = mean_and_variance.g;\\n\\n        int sb[1];\\n        sb[0] = indices[1];\\n        float scale = _Scale(sb);\\n        float b = _B(sb);\\n\\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\\n      }`;return Object.assign(Object.assign({},e),{output:{dims:n.dims,type:n.type,textureType:i.TextureType.unpacked},variables:[{name:\"epsilon\",type:\"float\",data:o}],shaderSource:f})})(t,a,e,n,o)})},c=t=>{if(!t||3!==t.length)throw new Error(\"InstanceNormalization requires 3 inputs.\");const e=t[0],n=t[1],r=t[2];if(e.dims.length<3||1!==n.dims.length||1!==r.dims.length)throw new Error(\"Invalid input shape.\");if(n.dims[0]!==e.dims[1]||r.dims[0]!==e.dims[1])throw new Error(\"Input shapes are mismatched.\");if(\"float32\"!==e.type&&\"float64\"!==e.type||\"float32\"!==n.type&&\"float64\"!==n.type||\"float32\"!==r.type&&\"float64\"!==r.type)throw new Error(\"Invalid input type.\");if(4!==t[0].dims.length)throw new Error(\"Only support 4-D input shape.\")}},708:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.createPackedMatmulProgramInfoLoader=void 0;const r=n(2517),i=n(5060),o=n(2039),a=n(9390),s=n(2823),u=n(5623);e.createPackedMatmulProgramInfoLoader=(t,e,n)=>{const c=(l=e.length>2,p=n.activationCacheKey,{name:\"MatMul (packed)\",inputNames:l?[\"A\",\"B\",\"Bias\"]:[\"A\",\"B\"],inputTypes:l?[o.TextureType.packed,o.TextureType.packed,o.TextureType.packed]:[o.TextureType.packed,o.TextureType.packed],cacheHint:p});var l,p;return Object.assign(Object.assign({},c),{get:()=>((t,e,n,c)=>{const l=n.length>2,p=l?\"value += getBiasForMatmul();\":\"\",f=n[0].dims,d=n[1].dims,h=r.BroadcastUtil.calcShape(f,d,!0),g=!r.ShapeUtil.areEqual(n[0].dims,n[1].dims);if(!h)throw new Error(\"Can't use matmul on the given tensors\");const b=f[f.length-1],m=Math.ceil(b/2),y=f.length,_=d.length,v=(0,i.getGlsl)(t.session.backend.glContext.version),w=(0,a.getCoordsDataType)(h.length),x=h.length,T=(0,a.getGlChannels)(),{activationFunction:S,applyActivation:O}=(0,s.getActivationSnippet)(c),A=l?`${(0,u.getBiasForMatmul)(w,T,n[2].dims,h,!0)}`:\"\",E=g?`${function(t,e,n,i){let o=[],a=[];const s=n[0].dims,u=n[1].dims,c=s.length,l=u.length,p=i.length,f=p-c,d=p-l;o=s.map(((t,n)=>`coords.${e[n+f]}`)),o[c-1]=\"i*2\",o.join(\", \"),a=u.map(((t,n)=>`coords.${e[n+d]}`)),a[l-2]=\"i*2\",a.join(\", \");const h=r.BroadcastUtil.getBroadcastDims(s,i),g=r.BroadcastUtil.getBroadcastDims(u,i),b=h.map((t=>`coords.${e[t+f]} = 0;`)).join(\"\\n\"),m=g.map((t=>`coords.${e[t+d]} = 0;`)).join(\"\\n\"),y=`int lastDim = coords.${e[p-1]};\\n  coords.${e[p-1]} = coords.${e[p-2]};\\n  coords.${e[p-2]} = lastDim;`;return`\\nvec4 getAAtOutCoordsMatmul(int i) {\\n  ${t} coords = getOutputCoords();\\n  ${y}\\n  ${b}\\n  vec4 outputValue = getA(${o});\\n  return outputValue;\\n}\\n\\nvec4 getBAtOutCoordsMatmul(int i) {\\n  ${t} coords = getOutputCoords();\\n  ${y}\\n  ${m}\\n  vec4 outputValue = getB(${a});\\n  return outputValue;\\n}`}(w,T,n,h)}`:\"\",I=g?\"getAAtOutCoordsMatmul(i)\":`getA(${function(t,e){let n=\"\";for(let r=0;r<e-2;r++)n+=`rc.${t[r]}, `;return n+=`rc.${t[e-2]}, i*2`,n}(T,y)})`,P=g?\"getBAtOutCoordsMatmul(i)\":`getB(${function(t,e){let n=\"\";for(let r=0;r<e-2;r++)n+=`rc.${t[r]}, `;return n+=`i*2, rc.${t[e-1]}`,n}(T,_)})`,D=`\\n            ${E}\\n            ${A}\\n            ${S}\\n            void main() {\\n              ${g?\"\":`${w} rc =\\n          getOutputCoords(); int lastDim = rc.${T[x-1]}; rc.${T[x-1]} =\\n          rc.${T[x-2]}; rc.${T[x-2]} = lastDim;\\n      `}\\n\\n              vec4 value = vec4(0);\\n              for (int i = 0; i < ${m}; i++) {\\n                vec4 a = ${I};\\n                vec4 b = ${P};\\n\\n                value += (a.rrbb * b.rgrg);\\n                value += (a.ggaa * b.baba);\\n              }\\n              ${p}\\n              ${O}\\n              ${v.output} = value;\\n            }`;return Object.assign(Object.assign({},e),{output:{dims:h,type:n[0].type,textureType:o.TextureType.packed},shaderSource:D,hasMain:!0})})(t,c,e,n)})}},5623:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.getBiasForMatmul=e.createMatmulProgramInfoLoader=e.parseMatMulAttributes=e.matMul=void 0;const r=n(2517),i=n(2039),o=n(9390),a=n(2823),s=n(708);function u(t,e){const n=(s=t.length>2,u=e.activationCacheKey,{name:\"MatMul\",inputNames:s?[\"A\",\"B\",\"Bias\"]:[\"A\",\"B\"],inputTypes:s?[i.TextureType.unpacked,i.TextureType.unpacked,i.TextureType.unpacked]:[i.TextureType.unpacked,i.TextureType.unpacked],cacheHint:u});var s,u;return Object.assign(Object.assign({},n),{get:()=>function(t,e,n){const s=e[0].dims,u=e[1].dims,c=r.BroadcastUtil.calcShape(s,u,!0);if(!c)throw new Error(\"Can't use matmul on the given tensors\");const p=(0,o.getCoordsDataType)(c.length),f=(0,o.getGlChannels)(),{activationFunction:d,applyActivation:h}=(0,a.getActivationSnippet)(n),g=e.length>2,b=g?\"value += getBiasForMatmul();\":\"\",m=g?`${l(p,f,e[2].dims,c,!1)}`:\"\",y=c.length,_=s.length,v=u.length,w=`\\n    ${d}\\n    ${m}\\n    float process(int indices[${y}]) {\\n        int a[${_}];\\n        int b[${v}];\\n        bcastMatmulIndices_A(indices, a);\\n        bcastMatmulIndices_B(indices, b);\\n\\n        float value;\\n        for (int k=0; k<${s[s.length-1]}; ++k) {\\n            a[${_-1}] = k;\\n            b[${v-2}] = k;\\n            value += _A(a) * _B(b);\\n        }\\n        ${b}\\n        ${h}\\n        return value;\\n    }`;return Object.assign(Object.assign({},t),{output:{dims:c,type:e[0].type,textureType:i.TextureType.unpacked},shaderSource:w})}(n,t,e)})}e.matMul=(t,e,n)=>(c(e),t.session.pack?[t.run((0,s.createPackedMatmulProgramInfoLoader)(t,e,n),e)]:[t.run(u(e,n),e)]),e.parseMatMulAttributes=t=>(0,a.parseInternalActivationAttributes)(t.attributes),e.createMatmulProgramInfoLoader=u;const c=t=>{if(!t||2!==t.length)throw new Error(\"MatMul requires 2 inputs.\");if(t[0].dims[t[0].dims.length-1]!==t[1].dims[t[1].dims.length-2])throw new Error(\"shared dimension does not match.\");if(\"float32\"!==t[0].type&&\"float64\"!==t[0].type||\"float32\"!==t[1].type&&\"float64\"!==t[1].type)throw new Error(\"inputs should be float type\");if(t[0].type!==t[1].type)throw new Error(\"inputs types should match\")};function l(t,e,n,i,o){let a=\"\";const s=n.length,u=i.length,c=u-s;a=u<2&&s>0?\"coords\":n.map(((t,n)=>`coords.${e[n+c]}`)).join(\", \");const l=r.BroadcastUtil.getBroadcastDims(n,i).map((t=>`coords.${e[t+c]} = 0;`)).join(\"\\n\");let p=\"vec4(outputValue.xx, outputValue.yy)\";return 1===r.ShapeUtil.size(n)&&(p=\"vec4(outputValue.x)\"),o?`\\nvec4 getBiasForMatmul() {\\n  ${t} coords = getOutputCoords();\\n  ${l}\\n  vec4 outputValue = getBias(${a});\\n  return ${p};\\n}`:`\\nfloat getBiasForMatmul() {\\n  ${t} coords = getOutputCoords();\\n  ${l}\\n  return getBias(coords.x);\\n}`}e.getBiasForMatmul=l},2403:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.createPackProgramInfoLoader=void 0;const r=n(5060),i=n(2039),o=n(9390),a=n(2827),s={name:\"pack\",inputNames:[\"A\"],inputTypes:[i.TextureType.unpackedReversed]};e.createPackProgramInfoLoader=(t,e)=>Object.assign(Object.assign({},s),{get:()=>((t,e)=>{const n=(0,r.getGlsl)(t.session.backend.glContext.version),u=e.dims,c=u.length,l=e.dims.length,p=(0,o.getCoordsDataType)(l),f=(0,a.getChannels)(\"rc\",l),d=(h=l,g=f,b=u[u.length-2],m=u[u.length-1],0===h||1===h?\"\":`\\n    int r = ${g[h-2]};\\n    int c = ${g[h-1]};\\n    int rp1 = ${g[h-2]} + 1;\\n    int cp1 = ${g[h-1]} + 1;\\n    bool rEdge = rp1 >= ${m};\\n    bool cEdge = cp1 >= ${b};\\n    `);var h,g,b,m;let y;y=0===c?[1,1]:1===c?[u[0],1]:[u[l-1],u[l-2]];const _=function(t,e,n){if(0===t)return\"false\";if(1===t)return`rc > ${e[0]}`;let r=\"\";for(let i=t-2;i<t;i++)r+=`${n[i]} >= ${e[i-t+2]}`,i<t-1&&(r+=\"||\");return r}(l,y,f),v=function(t,e){const n=t.length;if(0===n)return\"getA(), 0, 0, 0\";if(1===n)return`getA(rc),\\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\\n            0, 0`;let r=\"\";if(n>2)for(let t=0;t<n-2;++t)r+=`${e[t]},`;return`getA(${r}r, c),\\n          rEdge ? 0. : getA(${r}rp1, c),\\n          cEdge ? 0. : getA(${r}r, cp1),\\n          rEdge || cEdge ? 0. : getA(${r}rp1, cp1)`}(u,f),w=`\\n        void main() {\\n          ${p} rc = getOutputCoords();\\n\\n          if(${_}) {\\n            ${n.output} = vec4(0);\\n          } else {\\n            ${d}\\n\\n            ${n.output} = vec4(${v});\\n          }\\n        }\\n      `;return Object.assign(Object.assign({},s),{hasMain:!0,output:{dims:e.dims,type:e.type,textureType:i.TextureType.packed},shaderSource:w})})(t,e)})},2827:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.unpackFromChannel=e.getChannels=e.getVecChannels=void 0;const r=n(9390);function i(t,e){return(0,r.getGlChannels)(e).map((e=>`${t}.${e}`))}e.getVecChannels=i,e.getChannels=function(t,e){return 1===e?[t]:i(t,e)},e.unpackFromChannel=function(){return\"\\n    float getChannel(vec4 frag, int dim) {\\n      int modCoord = imod(dim, 2);\\n      return modCoord == 0 ? frag.r : frag.g;\\n    }\\n\\n    float getChannel(vec4 frag, vec2 innerDims) {\\n      vec2 modCoord = mod(innerDims, 2.);\\n      return modCoord.x == 0. ?\\n        (modCoord.y == 0. ? frag.r : frag.g) :\\n        (modCoord.y == 0. ? frag.b : frag.a);\\n    }\\n  \"}},2870:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parsePadAttributesV11=e.padV11=e.parsePadAttributesV2=e.padV2=void 0;const r=n(246),i=n(2517),o=n(5060),a=n(2039),s={name:\"Pad\",inputNames:[\"A\"],inputTypes:[a.TextureType.unpacked]};e.padV2=(t,e,n)=>(l(e),[t.run(Object.assign(Object.assign({},s),{cacheHint:n.cacheKey,get:()=>c(t,e[0],n)}),e)]),e.parsePadAttributesV2=t=>{const e=t.attributes.getString(\"mode\",\"constant\"),n=t.attributes.getFloat(\"value\",0),i=t.attributes.getInts(\"pads\");return(0,r.createAttributeWithCacheKey)({mode:e,value:n,pads:i})},e.padV11=(t,n,r)=>{p(n);const i=u(t,n,r);return(0,e.padV2)(t,[n[0]],i)},e.parsePadAttributesV11=t=>t.attributes.getString(\"mode\",\"constant\");const u=(t,e,n)=>{if(!t.session.isInitializer(e[1].dataId)||e.length>=3&&!t.session.isInitializer(e[2].dataId))throw new Error(\"dynamic pad attributes are not allowed\");const i=Array.from(e[1].integerData),o=e.length>=3?e[2].floatData[0]:0;return(0,r.createAttributeWithCacheKey)({mode:n,pads:i,value:o})},c=(t,e,n)=>{const r=i.ShapeUtil.padShape(e.dims.slice(),n.pads),o=r.length,s=`\\n      ${f(t,e,n)}\\n      float process(int[${o}] indices) {\\n          return padA(indices);\\n      }`;return{name:\"Pad\",inputNames:[\"A\"],inputTypes:[a.TextureType.unpacked],output:{dims:r,type:e.type,textureType:a.TextureType.unpacked},shaderSource:s}},l=t=>{if(!t||1!==t.length)throw new Error(\"Pad requires 1 input\");if(\"float32\"!==t[0].type&&\"float64\"!==t[0].type)throw new Error(\"Invalid input type.\")},p=t=>{if(!t||2!==t.length&&3!==t.length)throw new Error(\"Pad requires 2 or 3 inputs\");if(\"int32\"!==t[1].type)throw new Error(\"Invalid input type.\");if(t.length>=3&&\"string\"===t[2].type)throw new Error(\"Invalid input type.\")},f=(t,e,n)=>{const r=(0,o.getGlsl)(t.session.backend.glContext.version),[s,u]=t.calculateTextureWidthAndHeight(e.dims,a.TextureType.unpacked),c=i.ShapeUtil.computeStrides(e.dims);switch(n.mode){case\"constant\":return d(r,e.dims,c,s,u,n.pads,n.value);case\"reflect\":return h(r,e.dims,c,s,u,n.pads);case\"edge\":return g(r,e.dims,c,s,u,n.pads);default:throw new Error(\"Invalid mode\")}},d=(t,e,n,r,i,o,a)=>{const s=e.length;let u=\"\";for(let t=s-1;t>=0;--t)u+=`\\n        k = m[${t}] - ${o[t]};\\n        if (k < 0)  return constant;\\n        if (k >= ${e[t]}) return constant;\\n        offset += k * ${n[t]};\\n        `;return`\\n      float padA(int m[${s}]) {\\n        const float constant = float(${a});\\n        int offset = 0;\\n        int k = 0;\\n        ${u}\\n        vec2 coords = offsetToCoords(offset, ${r}, ${i});\\n        float value = getColorAsFloat(${t.texture2D}(A, coords));\\n        return value;\\n      }\\n      `},h=(t,e,n,r,i,o)=>{const a=e.length;let s=\"\";for(let t=a-1;t>=0;--t)s+=`\\n        k = m[${t}] - ${o[t]};\\n        if (k < 0) { k = -k; }\\n        {\\n          const int _2n_1 = ${2*(e[t]-1)};\\n          k = int( mod( float(k), float(_2n_1) ) ) ;\\n          if(k >= ${e[t]}) { k = _2n_1 - k; }\\n        }\\n        offset += k * ${n[t]};\\n        `;return`\\n      float padA(int m[${a}]) {\\n        int offset = 0;\\n        int k = 0;\\n        ${s}\\n        vec2 coords = offsetToCoords(offset, ${r}, ${i});\\n        float value = getColorAsFloat(${t.texture2D}(A, coords));\\n        return value;\\n      }\\n      `},g=(t,e,n,r,i,o)=>{const a=e.length;let s=\"\";for(let t=a-1;t>=0;--t)s+=`\\n        k = m[${t}] - ${o[t]};\\n        if (k < 0)  k = 0;\\n        if (k >= ${e[t]}) k = ${e[t]-1};\\n        offset += k * ${n[t]};\\n      `;return`\\n      float padA(int m[${a}]) {\\n        int offset = 0;\\n        int k = 0;\\n        ${s}\\n        vec2 coords = offsetToCoords(offset, ${r}, ${i});\\n        float value = getColorAsFloat(${t.texture2D}(A, coords));\\n        return value;\\n      }\\n      `}},2143:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.globalMaxPool=e.parseMaxPoolAttributes=e.maxPool=e.parseGlobalAveragePoolAttributes=e.globalAveragePool=e.parseAveragePoolAttributes=e.averagePool=void 0;const r=n(246),i=n(2517),o=n(2039);e.averagePool=(t,e,n)=>{p(e);const r={name:\"AveragePool\",inputNames:[\"X\"],inputTypes:[o.TextureType.unpacked],cacheHint:n.cacheKey};return[t.run(Object.assign(Object.assign({},r),{get:()=>a(e,r,!1,n)}),e)]},e.parseAveragePoolAttributes=t=>{const e=t.attributes.getString(\"auto_pad\",\"NOTSET\"),n=t.attributes.getInt(\"ceil_mode\",0),i=0!==t.attributes.getInt(\"count_include_pad\",0),o=t.attributes.getInts(\"kernel_shape\"),a=t.attributes.getInts(\"strides\",[]),s=t.attributes.getInts(\"pads\",[]);if(0!==n)throw new Error(\"using ceil() in shape computation is not yet supported for AveragePool\");return(0,r.createAttributeWithCacheKey)({autoPad:e,ceilMode:n,countIncludePad:i,kernelShape:o,strides:a,pads:s})};const a=(t,e,n,r)=>{const[a,s]=u(t,r,n),c=i.ShapeUtil.size(a.kernelShape);let l=\"\";a.countIncludePad?l+=`value /= float(${c});`:l+=`value /= float(${c} - pad);`;const p=`\\n        ${f(t[0].dims,a,\"value += _X(x);\",l,\"0.0\")}\\n      `;return Object.assign(Object.assign({},e),{output:{dims:s,type:t[0].type,textureType:o.TextureType.unpacked},shaderSource:p})};e.globalAveragePool=(t,e,n)=>{p(e);const r={name:\"GlobalAveragePool\",inputNames:[\"X\"],inputTypes:[o.TextureType.unpacked],cacheHint:`${n.countIncludePad}`};return[t.run(Object.assign(Object.assign({},r),{get:()=>a(e,r,!0,n)}),e)]},e.parseGlobalAveragePoolAttributes=t=>{const e=0!==t.attributes.getInt(\"count_include_pad\",0);return(0,r.createAttributeWithCacheKey)({autoPad:\"\",ceilMode:0,countIncludePad:e,kernelShape:[],strides:[],pads:[]})},e.maxPool=(t,e,n)=>{p(e);const r={name:\"MaxPool\",inputNames:[\"X\"],inputTypes:[o.TextureType.unpacked],cacheHint:n.cacheKey};return[t.run(Object.assign(Object.assign({},r),{get:()=>s(e,r,!1,n)}),e)]},e.parseMaxPoolAttributes=t=>{const e=t.attributes.getString(\"auto_pad\",\"NOTSET\"),n=t.attributes.getInt(\"ceil_mode\",0),i=t.attributes.getInts(\"kernel_shape\"),o=t.attributes.getInts(\"strides\",[]),a=t.attributes.getInts(\"pads\",[]),s=t.attributes.getInt(\"storage_order\",0),u=t.attributes.getInts(\"dilations\",[]);if(0!==s)throw new Error(\"column major storage order is not yet supported for MaxPool\");if(0!==n)throw new Error(\"using ceil() in shape computation is not yet supported for MaxPool\");return(0,r.createAttributeWithCacheKey)({autoPad:e,ceilMode:n,countIncludePad:!1,kernelShape:i,strides:o,pads:a,storageOrder:s,dilations:u})};const s=(t,e,n,r)=>{const[i,a]=u(t,r,n),s=`\\n      ${f(t[0].dims,i,\"\\n      value = max(_X(x), value);\\n    \",\"\",\"-1e5\")}\\n    `;return Object.assign(Object.assign({},e),{output:{dims:a,type:t[0].type,textureType:o.TextureType.unpacked},shaderSource:s})},u=(t,e,n)=>{const r=t[0].dims.slice(),o=Object.hasOwnProperty.call(e,\"dilations\"),a=e.kernelShape.slice(),s=e.strides.slice(),u=o?e.dilations.slice():[],c=e.pads.slice();i.PoolConvUtil.adjustPoolAttributes(n,r,a,s,u,c);const l=i.PoolConvUtil.computePoolOutputShape(n,r,s,u,a,c,e.autoPad),p=Object.assign({},e);return o?Object.assign(p,{kernelShape:a,strides:s,pads:c,dilations:u,cacheKey:e.cacheKey}):Object.assign(p,{kernelShape:a,strides:s,pads:c,cacheKey:e.cacheKey}),[p,l]},c={autoPad:\"\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:\"\"},l={name:\"GlobalMaxPool\",inputNames:[\"X\"],inputTypes:[o.TextureType.unpacked]};e.globalMaxPool=(t,e)=>(p(e),[t.run(Object.assign(Object.assign({},l),{get:()=>s(e,l,!0,c)}),e)]);const p=t=>{if(!t||1!==t.length)throw new Error(\"Pool ops requires 1 input.\");if(\"float32\"!==t[0].type&&\"float64\"!==t[0].type)throw new Error(\"Invalid input type.\")},f=(t,e,n,r,o)=>{const a=t.length;if(e.kernelShape.length<=2){const i=e.kernelShape[e.kernelShape.length-1],s=e.strides[e.strides.length-1],u=e.pads[e.pads.length/2-1],c=e.pads[e.pads.length-1],l=t[a-1];let p=\"\",f=\"\",d=\"\";if(p=u+c!==0?`\\n          for (int i = 0; i < ${i}; i++) {\\n            x[${a} - 1] = indices[${a} - 1] * ${s} - ${u} + i;\\n            if (x[${a} - 1] < 0 || x[${a} - 1] >= ${l}) {\\n              pad++;\\n              continue;\\n            }\\n            ${n}\\n          }`:`\\n          for (int i = 0; i < ${i}; i++) {\\n            x[${a} - 1] = indices[${a} - 1] * ${s} - ${u} + i;\\n            ${n}\\n          }`,2===e.kernelShape.length){const n=e.kernelShape[e.kernelShape.length-2],r=e.strides[e.strides.length-2],o=e.pads[e.pads.length/2-2],s=e.pads[e.pads.length-2],u=t[a-2];f=o+s!==0?`\\n            for (int j = 0; j < ${n}; j++) {\\n              x[${a} - 2] = indices[${a} - 2] * ${r} - ${o} + j;\\n              if (x[${a} - 2] < 0 || x[${a} - 2] >= ${u}) {\\n                pad+= ${i};\\n                continue;\\n              }\\n          `:`\\n            for (int j = 0; j < ${n}; j++) {\\n              x[${a} - 2] = indices[${a} - 2] * ${r} - ${o} + j;\\n            `,d=\"\\n          }\\n        \"}return`\\n        float process(int indices[${a}]) {\\n          int x[${a}];\\n          copyVec(indices, x);\\n\\n          float value = ${o};\\n          int pad = 0;\\n          ${f}\\n          ${p}\\n          ${d}\\n          ${r}\\n          return value;\\n        }\\n      `}{const s=i.ShapeUtil.size(e.kernelShape),u=i.ShapeUtil.computeStrides(e.kernelShape),c=u.length,l=e.pads.length,p=h(c),f=d(t,\"inputDims\"),g=d(e.pads,\"pads\"),b=d(u,\"kernelStrides\"),m=d(e.strides,\"strides\");let y=\"\";return y=e.pads.reduce(((t,e)=>t+e))?`\\n            if (x[j] >= inputDims[j] || x[j] < 0) {\\n              pad++;\\n              isPad = true;\\n              break;\\n            }\\n          }\\n          if (!isPad) {\\n            ${n}\\n          }`:`\\n          }\\n          ${n}\\n        `,`\\n        ${p}\\n        float process(int indices[${a}]) {\\n          int x[${a}];\\n          copyVec(indices, x);\\n          int offset[${c}];\\n          int pads[${l}];\\n          int inputDims[${a}];\\n          int kernelStrides[${c}];\\n          int strides[${c}];\\n          ${g}\\n          ${f}\\n          ${m}\\n          ${b}\\n\\n          float value = ${o};\\n          int pad = 0;\\n          bool isPad = false;\\n          for (int i = 0; i < ${s}; i++) {\\n            offsetToIndices(i, kernelStrides, offset);\\n            isPad = false;\\n            for (int j = ${a} - ${c}; j < ${a}; j++) {\\n              x[j] = indices[j] * strides[j - ${a} + ${c}]\\n                + offset[j - ${a} + ${c}] - pads[j - 2];\\n              ${y}\\n          }\\n          ${r}\\n\\n          return value;\\n        }\\n      `}},d=(t,e)=>{let n=\"\";for(let r=0;r<t.length;r++)n+=`\\n      ${e}[${r}] = ${t[r]};\\n    `;return n},h=t=>`\\n  void offsetToIndices(int offset, int[${t}] strides, out int[${t}] indices) {\\n    if (${t} == 0) {\\n      return;\\n    }\\n    for (int i = 0; i < ${t} - 1; ++i) {\\n      indices[i] = offset / strides[i];\\n      offset -= indices[i] * strides[i];\\n    }\\n    indices[${t} - 1] = offset;\\n  }`},4939:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.reduceLogSumSquare=e.reduceLogSum=e.reduceProd=e.reduceMin=e.reduceMax=e.reduceMean=e.reduceSum=e.parseReduceAttributes=void 0;const r=n(246),i=n(782),o=n(2517),a=n(2039),s=(t,e,n,r,i)=>{c(e);const o={name:r,inputNames:[\"A\"],inputTypes:[a.TextureType.unpacked]};return[t.run(Object.assign(Object.assign({},o),{cacheHint:n.cacheKey,get:()=>u(t,e,n,r,i,o)}),e)]};e.parseReduceAttributes=t=>{const e=t.attributes.getInts(\"axes\",[]),n=1===t.attributes.getInt(\"keepdims\",1);return(0,r.createAttributeWithCacheKey)({axes:e,keepDims:n})};const u=(t,e,n,r,i,s)=>{const u=[],c=e[0].dims.length||1,l=[],p=o.ShapeUtil.normalizeAxes(n.axes,e[0].dims.length),f=i(e,p);let d=f[1];for(let t=0;t<e[0].dims.length;t++)p.indexOf(t)>=0||0===p.length?(n.keepDims&&u.push(1),d=`\\n          for(int j${t} = 0; j${t} < ${e[0].dims[t]}; j${t}++) {\\n            inputIdx[${t}] = j${t};\\n            ${d}\\n          }`):(l.push(`inputIdx[${t}] = outputIdx[${u.length}];`),u.push(e[0].dims[t]));const h=`\\n      float process(int outputIdx[${u.length||1}]) {\\n        float value;                 // final result\\n        int inputIdx[${c}];      // addressing input data\\n        ${l.join(\"\\n\")}\\n        ${f[0]}       // init ops for reduce max/min\\n        ${d}\\n        ${f[2]}       // final computation for reduce mean\\n        return value;\\n      }`;return Object.assign(Object.assign({},s),{output:{dims:u,type:e[0].type,textureType:a.TextureType.unpacked},shaderSource:h})},c=t=>{if(!t||1!==t.length)throw new Error(\"Reduce op requires 1 input.\");if(-1===i.NUMBER_TYPES.indexOf(t[0].type))throw new Error(\"Invalid input type.\")};e.reduceSum=(t,e,n)=>s(t,e,n,\"ReduceSum\",(()=>[\"value = 0.0;\",\"value += _A(inputIdx);\",\"\"])),e.reduceMean=(t,e,n)=>s(t,e,n,\"ReduceMean\",((t,e)=>{let n=1;for(let r=0;r<t[0].dims.length;r++)(e.indexOf(r)>=0||0===e.length)&&(n*=t[0].dims[r]);return[\"value = 0.0;\",\"value += _A(inputIdx);\",`value /= ${n}.;`]})),e.reduceMax=(t,e,n)=>s(t,e,n,\"ReduceMax\",((t,e)=>{const n=[];for(let r=0;r<t[0].dims.length;r++)(e.indexOf(r)>=0||0===e.length)&&n.push(`inputIdx[${r}] = 0;`);return[`${n.join(\"\\n\")}\\nvalue = _A(inputIdx);`,\"value = max(value, _A(inputIdx));\",\"\"]})),e.reduceMin=(t,e,n)=>s(t,e,n,\"ReduceMin\",((t,e)=>{const n=[];for(let r=0;r<t[0].dims.length;r++)(e.indexOf(r)>=0||0===e.length)&&n.push(`inputIdx[${r}] = 0;`);return[`${n.join(\"\\n\")}\\nvalue = _A(inputIdx);`,\"value = min(value, _A(inputIdx));\",\"\"]})),e.reduceProd=(t,e,n)=>s(t,e,n,\"ReduceProd\",(()=>[\"value = 1.0;\",\"value *= _A(inputIdx);\",\"\"])),e.reduceLogSum=(t,e,n)=>s(t,e,n,\"ReduceLogSum\",(()=>[\"value = 0.0;\",\"value += _A(inputIdx);\",\"value = log(value);\"])),e.reduceLogSumSquare=(t,e,n)=>s(t,e,n,\"ReduceLogSumSquare\",(()=>[\"float t; value = 0.0;\",\"t = _A(inputIdx); value += t * t;\",\"\"]))},7019:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.isReshapeCheap=e.processDims3D=e.createPackedReshape3DProgramInfoLoader=void 0;const r=n(2517),i=n(5060),o=n(2039),a=n(2827);e.createPackedReshape3DProgramInfoLoader=(t,e,n)=>{const s=(t=>({name:\"Reshape (packed)\",inputTypes:[o.TextureType.packed],inputNames:[\"A\"],cacheHint:`${t}`}))(n);return Object.assign(Object.assign({},s),{get:()=>((t,e,n,s)=>{const u=e.dims,c=s;let l=\"\";for(let t=0;t<4;t++){let e=\"\";switch(t){case 0:e=\"outputCoords = rc;\";break;case 1:e=\"outputCoords = ivec3(rc.x, rc.y+1, rc.z);\";break;case 2:e=\"outputCoords = ivec3(rc.x, rc.y, rc.z+1);\";break;case 3:e=\"outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);\";break;default:throw new Error}l+=`\\n        ${e}\\n        ${t>0?\"if(outputCoords.y < rows && outputCoords.z < cols){\":\"\"}\\n          int flattenedIndex = getFlattenedIndex(outputCoords);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[${t}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\\n\\n        ${t>0?\"}\":\"\"}\\n      `}const p=(0,i.getGlsl)(t.session.backend.glContext.version),f=`\\n      ${function(t){const e=r.ShapeUtil.computeStrides(t),n=[\"b\",\"r\",\"c\"],i=\"index\";return`\\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      ${e.map(((t,r)=>`int ${n[r]} = ${i} / ${t}; ${r===e.length-1?`int ${n[r+1]} = ${i} - ${n[r]} * ${t}`:`index -= ${n[r]} * ${t}`};`)).join(\"\")}\\n      return ivec3(b, r, c);\\n    }\\n  `}(u)}\\n      ${function(t){const e=r.ShapeUtil.computeStrides(t);return`\\n  int getFlattenedIndex(ivec3 coords) {\\n    // reverse y, z order\\n    return coords.x * ${e[0]} + coords.z * ${e[1]} + coords.y;\\n  }\\n`}(c)}\\n      ${(0,a.unpackFromChannel)()}\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.0);\\n\\n        ivec3 outputCoords;\\n        int rows = ${c[2]};\\n        int cols = ${c[1]};\\n\\n        ${l}\\n        ${p.output} = result;\\n      }\\n    `;return Object.assign(Object.assign({},n),{output:{dims:c,type:e.type,textureType:o.TextureType.packed},shaderSource:f,hasMain:!0})})(t,e,s,n)})},e.processDims3D=function(t){if(0===t.length)return[1,1,1];let e=1;for(let n=0;n<t.length-2;++n)e*=t[n];return[e,t.length>1?t[t.length-2]:1,t[t.length-1]]},e.isReshapeCheap=function(t,e){let n=!1;return n=0===t.length||0===e.length||(t.length<2||e.length<2?t[t.length-1]===e[e.length-1]:t[t.length-1]===e[e.length-1]&&t[t.length-2]===e[e.length-2]),n}},718:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.reshape=void 0;const r=n(2517);e.reshape=(t,e)=>{const n=r.ShapeUtil.calculateReshapedDims(e[0].dims,e[1].integerData);return t.session.pack?[t.reshapePacked(e[0],n)]:[t.reshapeUnpacked(e[0],n)]}},2268:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseResizeAttributesV11=e.parseResizeAttributesV10=e.resize=void 0;const r=n(5060),i=n(2039),o=n(9390),a=n(2827),s=n(9793),u={name:\"Resize\",inputNames:[\"A\"],inputTypes:[i.TextureType.packed]};e.resize=(t,e,n)=>((0,s.validateInputs)(e,n),[t.run(Object.assign(Object.assign({},u),{cacheHint:n.cacheKey,get:()=>c(t,e,n)}),e)]),e.parseResizeAttributesV10=t=>(0,s.parseUpsampleAttributes)(t,10),e.parseResizeAttributesV11=t=>(0,s.parseUpsampleAttributes)(t,11);const c=(t,e,n)=>{const s=(0,r.getGlsl)(t.session.backend.glContext.version),[c,p]=l(e,n);if(c.every((t=>1===t))&&\"tf_crop_and_resize\"!==n.coordinateTransformMode)return Object.assign(Object.assign({},u),{output:{dims:p,type:e[0].type,textureType:i.TextureType.packed},hasMain:!0,shaderSource:`void main() {\\n                    vec4 v = ${s.texture2D}(X, TexCoords);\\n                    ${s.output} = v;\\n                }`});const f=p.length;if(f<2)throw new Error(`output dimension should be at least 2, but got ${f}`);const d=p[f-2],h=p[f-1],g=e[0].dims;if(f!==g.length)throw new Error(`output dimension should match input ${g.length}, but got ${f}`);const b=g[f-2],m=g[f-1],y=c[f-2],_=c[f-1];let v=\"\";if(\"linear\"!==n.mode)throw new Error(`resize (packed) does not support mode: '${n.mode}'`);switch(n.coordinateTransformMode){case\"asymmetric\":v=\"\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        return vec4(coords) / scaleWHWH;\\n                    }\\n                \";break;case\"half_pixel\":v=\"\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\\n                    }\\n                \";break;case\"pytorch_half_pixel\":v=`\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        vec4 fcoords = vec4(coords);\\n                        return vec4(\\n                            ${h}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\\n                            ${d}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\\n                            ${h}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\\n                            ${d}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\\n                          );\\n                    }\\n                `;break;case\"align_corners\":v=`\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        vec4 resized = vec4(${h}.0 - 1.0, ${d}.0 - 1.0, ${h}.0 - 1.0,\\n                            ${d}.0 - 1.0);\\n                        vec4 original = vec4(${m}.0 - 1.0, ${b}.0 - 1.0, ${m}.0 - 1.0,\\n                            ${b}.0 - 1.0);\\n                        vec4 new_scale = original / resized;\\n                        return vec4(coords) * new_scale;\\n                    }\\n                `;break;default:throw new Error(`resize (packed) does not support coordinateTransformMode:                                 '${n.coordinateTransformMode}'`)}const w=(0,o.getCoordsDataType)(f),x=`\\n            const vec2 inputWH = vec2(${b}.0, ${m}.0);\\n            const vec4 scaleWHWH = vec4(float(${y}), float(${_}), float(${y}), float(${_}));\\n            ${(0,a.unpackFromChannel)()}\\n            ${v}\\n            float getAValue(int x10, int r, int c, int d) {\\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\\n            }\\n            void main() {\\n                ${w} rc = getOutputCoords();\\n\\n                int batch = rc[0];\\n                int depth = rc[1];\\n\\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\\n\\n                // calculate the source index in fraction\\n                vec4 sourceFrac = getSourceFracIndex(coords);\\n\\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\\n\\n                bool hasNextRow = rc.w < ${d-1};\\n                bool hasNextCol = rc.z < ${h-1};\\n\\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\\n                vec4 topLeft = vec4(\\n                    getAValue(batch, depth, x00.x, x00.y),\\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\\n\\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\\n                vec4 topRight = vec4(\\n                    getAValue(batch, depth, x00.x, x00.w),\\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\\n\\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\\n                vec4 bottomLeft = vec4(\\n                    getAValue(batch, depth, x00.z, x00.y),\\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\\n\\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\\n                vec4 bottomRight = vec4(\\n                    getAValue(batch, depth, x00.z, x00.w),\\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\\n\\n                // calculate the interpolation fraction on u and v direction\\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\\n\\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\\n\\n                ${s.output} = vec4(newValue);\\n            }\\n        `;return Object.assign(Object.assign({},u),{output:{dims:p,type:e[0].type,textureType:i.TextureType.packed},hasMain:!0,shaderSource:x})},l=(t,e)=>{const n=t[0].dims;let r,i=e.scales;if(0===i.length){const o=t[e.scalesInputIdx];if(o&&0!==o.size){if(t[e.sizesInputIdx])throw new Error(\"Only one of scales or sizes must be provided as input.\");i=p(o,e.mode,e.isResize)}else{const o=t[e.sizesInputIdx];if(!o||0===o.size)throw new Error(\"Either scales or sizes MUST be provided as input.\");r=Array.from(o.integerData),i=f(r,n,e.mode,e.isResize)}}else if(t[e.sizesInputIdx])throw new Error(\"Only one of scales or sizes must be provided as input.\");const o=r||n.map(((t,e)=>Math.floor(t*i[e])));return[i,o]},p=(t,e,n)=>{const r=Array.from(t.floatData);return(0,s.scalesValidation)(r,e,n),r},f=(t,e,n,r)=>{const i=e.length,o=new Array(i);for(let n=0,r=i;n<r;n++)if(0===e[n]){if(0!==t[n])throw new Error(\"Input dim is zero but required output dim is non-zero.\");o[n]=1}else o[n]=t[n]/e[n];return(0,s.scalesValidation)(o,n,r),o}},8117:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.shape=void 0;const r=n(9162);e.shape=(t,e)=>(i(e),[new r.Tensor([e[0].dims.length],\"int32\",void 0,void 0,new Int32Array(e[0].dims))]);const i=t=>{if(!t||1!==t.length)throw new Error(\"Shape requires 1 input.\")}},2278:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.sliceV10=e.parseSliceAttributes=e.slice=void 0;const r=n(246),i=n(782),o=n(2517),a=n(2039),s={name:\"Slice\",inputNames:[\"A\"],inputTypes:[a.TextureType.unpacked]};e.slice=(t,e,n)=>(c(e),[t.run(Object.assign(Object.assign({},s),{cacheHint:n.cacheKey,get:()=>u(t,e[0],n)}),e)]),e.parseSliceAttributes=t=>{const e=t.attributes.getInts(\"starts\"),n=t.attributes.getInts(\"ends\"),i=t.attributes.getInts(\"axes\",[]);return(0,r.createAttributeWithCacheKey)({starts:e,ends:n,axes:i})};const u=(t,e,n)=>{const r=0===n.axes.length?e.dims.slice(0).map(((t,e)=>e)):n.axes,i=o.ShapeUtil.normalizeAxes(r,e.dims.length),u=n.starts.map(((t,n)=>t>e.dims[i[n]]-1?e.dims[i[n]]:o.ShapeUtil.normalizeAxis(t,e.dims[i[n]]))),c=n.ends.map(((t,n)=>t>e.dims[i[n]]-1?e.dims[i[n]]:o.ShapeUtil.normalizeAxis(t,e.dims[i[n]]))),l=e.dims.slice(),p=[];for(let t=0;t<i.length;t++)l[i[t]]=c[t]-u[t],u[t]>0&&p.push(`outputIdx[${i[t]}] += ${u[t]};`);const f=`\\n      float process(int outputIdx[${l.length}]) {\\n        ${p.join(\"\\n      \")}\\n        return _A(outputIdx);\\n      }`;return Object.assign(Object.assign({},s),{output:{dims:l,type:e.type,textureType:a.TextureType.unpacked},shaderSource:f})},c=t=>{if(!t||1!==t.length)throw new Error(\"Slice requires 1 input.\");if(-1===i.NUMBER_TYPES.indexOf(t[0].type))throw new Error(\"Invalid input type.\")};e.sliceV10=(t,e)=>{p(e);const n=l(t,e);return[t.run(Object.assign(Object.assign({},s),{cacheHint:n.cacheKey,get:()=>u(t,e[0],n)}),[e[0]])]};const l=(t,e)=>{if(!t.session.isInitializer(e[1].dataId)||!t.session.isInitializer(e[2].dataId)||e.length>=4&&!t.session.isInitializer(e[3].dataId)||e.length>=5&&!t.session.isInitializer(e[4].dataId))throw new Error(\"dynamic slice attributes are not allowed\");if(e.length>=5&&e[4].integerData.some((t=>1!==t)))throw new Error(\"currently non-1 steps is not supported for Slice\");const n=Array.from(e[1].integerData),r=Array.from(e[2].integerData),i=e.length>=4?Array.from(e[3].integerData):[];return{starts:n,ends:r,axes:i,cacheKey:`${i};${n};${r}`}},p=t=>{if(!t||t.length<3||t.length>5)throw new Error(\"Invalid input number.\");if(\"int32\"!==t[1].type||1!==t[1].dims.length)throw new Error(\"Invalid input type.\");if(\"int32\"!==t[2].type||1!==t[2].dims.length)throw new Error(\"Invalid input type.\");if(t.length>=4&&(\"int32\"!==t[3].type||1!==t[3].dims.length))throw new Error(\"Invalid input type.\");if(t.length>=5&&(\"int32\"!==t[4].type||1!==t[4].dims.length))throw new Error(\"Invalid input type.\")}},5524:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.softmaxV13=e.parseSoftmaxAttributesV13=e.parseSoftmaxAttributes=e.softmax=void 0;const r=n(246),i=n(2517),o=n(5060),a=n(2039),s=n(3738),u={name:\"SoftmaxComputeMax\",inputNames:[\"A\"],inputTypes:[a.TextureType.unpacked]},c={name:\"SoftmaxComputeScale\",inputNames:[\"A\",\"Max\"],inputTypes:[a.TextureType.unpacked,a.TextureType.unpacked]},l={name:\"SoftMax\",inputNames:[\"A\",\"Max\",\"Norm\"],inputTypes:[a.TextureType.unpacked,a.TextureType.unpacked,a.TextureType.unpacked]};e.softmax=(t,e,n)=>{g(e);const r=e[0].dims.slice(),o=i.ShapeUtil.normalizeAxis(n.axis,r.length),a=i.ShapeUtil.sizeToDimension(r,o),s=i.ShapeUtil.sizeFromDimension(r,o);return p(t,e,n,a,s)},e.parseSoftmaxAttributes=t=>(0,r.createAttributeWithCacheKey)({axis:t.attributes.getInt(\"axis\",1)}),e.parseSoftmaxAttributesV13=t=>(0,r.createAttributeWithCacheKey)({axis:t.attributes.getInt(\"axis\",-1)}),e.softmaxV13=(t,e,n)=>{g(e);const o=e[0].dims.slice(),a=i.ShapeUtil.normalizeAxis(n.axis,o.length),u=o.length,c=a!==u-1,l=[];let f,d=[],h=[];c&&(d=Array.from({length:u}).map(((t,e)=>e)),d[a]=u-1,d[u-1]=a,d.map((t=>l.push(o[t]))),f=(0,r.createAttributeWithCacheKey)({perm:d}),h=(0,s.transpose)(t,e,f));const b=c?i.ShapeUtil.sizeToDimension(l,u-1):i.ShapeUtil.sizeToDimension(o,u-1),m=c?i.ShapeUtil.sizeFromDimension(l,u-1):i.ShapeUtil.sizeFromDimension(o,u-1),y=p(t,c?h:e,n,b,m);return c?(0,s.transpose)(t,y,f):y};const p=(t,e,n,r,i)=>{const o=f(t,e[0],r,i,[r]),a=t.run(Object.assign(Object.assign({},u),{cacheHint:n.cacheKey,get:()=>o}),e),s=d(t,e[0],r,i,o.output.dims,[r]),p=t.run(Object.assign(Object.assign({},c),{cacheHint:n.cacheKey,get:()=>s}),[e[0],a]),g=h(t,e[0],r,i,o.output.dims,s.output.dims);return[t.run(Object.assign(Object.assign({},l),{cacheHint:n.cacheKey,get:()=>g}),[e[0],a,p])]},f=(t,e,n,r,i)=>{const[s,c]=t.calculateTextureWidthAndHeight(e.dims,a.TextureType.unpacked),l=i.length;if(n<1||r<1)throw new Error(\"Logical row count N and feature count D must be greater than or equal to 1\");if(1!==i.length)throw new Error(\"Dimensionality of the output should be 1\");if(i[0]!==n)throw new Error(\"Shape of the output should be equal to logical row count\");const p=(0,o.getGlsl)(t.session.backend.glContext.version),f=`\\n      float process(int[${l}] indices) {\\n        int logical_row_start_offset = indices[0] * ${r};\\n\\n        float max = getColorAsFloat(${p.texture2D}(A, offsetToCoords(logical_row_start_offset, ${s},\\n        ${c} )));\\n        for(int i=1; i<${r}; ++i)\\n        {\\n          float current = getColorAsFloat(${p.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\\n            ${s}, ${c})));\\n          if(current > max)\\n          max = current;\\n        }\\n\\n        return max;\\n      }`;return Object.assign(Object.assign({},u),{output:{dims:i,type:e.type,textureType:a.TextureType.unpacked},shaderSource:f})},d=(t,e,n,r,i,s)=>{const[u,l]=t.calculateTextureWidthAndHeight(e.dims,a.TextureType.unpacked),p=s.length;if(n<1||r<1)throw new Error(\"Logical row count N and feature count D must be greater than or equal to 1\");if(1!==s.length)throw new Error(\"Dimensionality of the output should be 1\");if(s[0]!==n)throw new Error(\"Shape of the output should be equal to logical row count\");if(1!==i.length)throw new Error(\"Dimensionality of the intermediate results should be 1\");if(i[0]!==n)throw new Error(\"Shape of the intermediate results should be equal to logical row count\");const f=`\\n      float process(int[${p}] indices) {\\n        int logical_row_start_offset = indices[0] * ${r};\\n\\n        float norm_factor = 0.0;\\n        float max = _Max(indices);\\n        for(int i=0; i<${r}; ++i)\\n        {\\n          norm_factor += exp(getColorAsFloat(${(0,o.getGlsl)(t.session.backend.glContext.version).texture2D}(A, offsetToCoords(logical_row_start_offset + i,\\n            ${u}, ${l}))) - max);\\n        }\\n\\n        return norm_factor;\\n      }`;return Object.assign(Object.assign({},c),{output:{dims:s,type:e.type,textureType:a.TextureType.unpacked},shaderSource:f})},h=(t,e,n,r,i,o)=>{const[s,u]=t.calculateTextureWidthAndHeight(e.dims,a.TextureType.unpacked),c=e.dims.length;if(n<1||r<1)throw new Error(\"Logical row count N and feature count D must be greater than or equal to 1\");if(1!==i.length||1!==o.length)throw new Error(\"Dimensionality of the intermediate results should be 1\");if(i[0]!==n||o[0]!==n)throw new Error(\"Shape of the intermediate results should be equal to logical row count\");const p=`\\n      float process(int[${c}] indices) {\\n\\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\\n      int offset = coordsToOffset(TexCoords, ${s}, ${u});\\n\\n      //determine the logical row for this index\\n      int logical_row_index[1];\\n      logical_row_index[0] = offset / ${r};\\n\\n      float norm_factor = _Norm(logical_row_index);\\n\\n      // avoid possible division by 0\\n      // if norm_facor is 0, all elements are zero\\n      // if so, return 0\\n      if(norm_factor == 0.0)\\n        return 0.0;\\n\\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\\n    }`;return Object.assign(Object.assign({},l),{output:{dims:e.dims,type:e.type,textureType:a.TextureType.unpacked},shaderSource:p})},g=t=>{if(!t||1!==t.length)throw new Error(\"Softmax requires 1 input.\");if(\"float32\"!==t[0].type&&\"float64\"!==t[0].type)throw new Error(\"Invalid input type\")}},5975:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseSplitAttributes=e.split=void 0;const r=n(246),i=n(2517),o=n(2039),a={name:\"Split\",inputNames:[\"A\"],inputTypes:[o.TextureType.unpacked]};e.split=(t,e,n)=>{c(e);const r=i.ShapeUtil.normalizeAxis(n.axis,e[0].dims.length),o=s(t,e,r,n),l=[];for(let i=0;i<o;++i)l.push(t.run(Object.assign(Object.assign({},a),{cacheHint:`${n.cacheKey};${i}`,get:()=>u(t,e[0],n,r,i)}),e));return l},e.parseSplitAttributes=t=>{const e=t.attributes.getInt(\"axis\",0),n=t.attributes.getInts(\"split\",[]),i=t.outputs.length;return(0,r.createAttributeWithCacheKey)({axis:e,split:n,numOutputs:i})};const s=(t,e,n,r)=>{const[,o]=i.SplitUtil.splitShape(e[0].dims,n,r.split,r.numOutputs);return o.length},u=(t,e,n,r,s)=>{const[u,c]=i.SplitUtil.splitShape(e.dims,r,n.split,n.numOutputs),l=c[s],p=u[s],f=`\\n      float process(int indices[${p.length}]) {\\n        indices[${r}] += ${l};\\n        return _A(indices);\\n      }\\n    `;return Object.assign(Object.assign({},a),{cacheHint:`${n.cacheKey}:${s}`,output:{dims:p,type:e.type,textureType:o.TextureType.unpacked},shaderSource:f})},c=t=>{if(!t||1!==t.length)throw new Error(\"Split requires one input.\");if(\"int8\"!==t[0].type&&\"uint8\"!==t[0].type&&\"int16\"!==t[0].type&&\"uint16\"!==t[0].type&&\"int32\"!==t[0].type&&\"uint32\"!==t[0].type&&\"float32\"!==t[0].type&&\"float64\"!==t[0].type&&\"bool\"!==t[0].type)throw new Error(\"Invalid input type.\")}},3933:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseSqueezeAttributes=e.squeezeV13=e.squeeze=void 0;const r=n(2517);e.squeeze=(t,e,n)=>{i(e);const o=r.ShapeUtil.squeezeShape(e[0].dims,n);return[t.reshapeUnpacked(e[0],o)]},e.squeezeV13=(t,n)=>(o(n),(0,e.squeeze)(t,[n[0]],Array.from(n[1].integerData))),e.parseSqueezeAttributes=t=>t.attributes.getInts(\"axes\");const i=t=>{if(!t||1!==t.length)throw new Error(\"Squeeze requires 1 input.\");if(\"string\"===t[0].type)throw new Error(\"invalid input tensor types.\")},o=t=>{if(!t||2!==t.length)throw new Error(\"Squeeze requires 2 inputs.\");if(\"int32\"!==t[1].type)throw new Error(\"Invalid input type.\")}},6558:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.sum=void 0;const r=n(5060),i=n(2039);e.sum=(t,e)=>{a(e);const n={name:\"Sum\",inputNames:e.map(((t,e)=>`X${e}`)),inputTypes:new Array(e.length).fill(i.TextureType.unpacked)};return[t.run(Object.assign(Object.assign({},n),{get:()=>o(t,e,n)}),e)]};const o=(t,e,n)=>{const o=(0,r.getGlsl)(t.session.backend.glContext.version),a=e[0].dims.slice(),s=`\\n      void main() {\\n        vec4 result = ${e.map(((t,e)=>`${o.texture2D}(X${e},TexCoords)`)).join(\" + \")};\\n        ${o.output} = result;\\n      }\\n    `;return Object.assign(Object.assign({},n),{output:{dims:a,type:e[0].type,textureType:i.TextureType.unpacked},hasMain:!0,shaderSource:s})},a=t=>{if(!t||0===t.length)throw new Error(\"Sum requires inputs.\");const e=t[0].dims.length;for(let n=1;n<t.length;n++){if(e!==t[n].dims.length)throw new Error(\"Input shapes are mismatched.\");for(let r=0;r<e;r++)if(t[0].dims[r]!==t[n].dims[r])throw new Error(\"Input shapes are not matched.\")}if(\"float32\"!==t[0].type&&\"float64\"!==t[0].type)throw new Error(\"Invalid input type.\");for(let e=1;e<t.length;e++)if(t[0].type!==t[e].type)throw new Error(\"Input types are not matched.\")}},5723:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.tile=void 0;const r=n(782),i=n(2039);e.tile=(t,e)=>{a(e);const n={name:\"Tile\",inputNames:[\"A\"],inputTypes:[i.TextureType.unpacked]};return[t.run(Object.assign(Object.assign({},n),{get:()=>o(t,e,n)}),e)]};const o=(t,e,n)=>{const r=e[0].dims.slice(),o=new Array(r.length),a=[];for(let t=0;t<r.length;t++)o[t]=r[t]*e[1].numberData[t],a.push(`inputIdx[${t}] = int(mod(float(outputIdx[${t}]), ${r[t]}.));`);const s=o.length,u=`\\n      float process(int outputIdx[${s}]) {\\n        int inputIdx[${s}];\\n        ${a.join(\"\\n\")}\\n        return _A(inputIdx);\\n      }\\n    `;return Object.assign(Object.assign({},n),{output:{dims:o,type:e[0].type,textureType:i.TextureType.unpacked},shaderSource:u})},a=t=>{if(!t||2!==t.length)throw new Error(\"Tile requires 2 input.\");if(1!==t[1].dims.length)throw new Error(\"The second input shape must 1 dimension.\");if(t[1].dims[0]!==t[0].dims.length)throw new Error(\"Invalid input shape.\");if(-1===r.NUMBER_TYPES.indexOf(t[0].type))throw new Error(\"Invalid input type.\");if(\"int32\"!==t[1].type&&\"int16\"!==t[1].type)throw new Error(\"Invalid repeat type.\")}},3738:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseTransposeAttributes=e.transpose=void 0;const r=n(246),i=n(2517),o=n(2039),a={name:\"Transpose\",inputNames:[\"A\"],inputTypes:[o.TextureType.unpacked]};e.transpose=(t,e,n)=>(p(e),[t.run(Object.assign(Object.assign({},a),{cacheHint:n.cacheKey,get:()=>s(t,e[0],n.perm)}),e)]),e.parseTransposeAttributes=t=>(0,r.createAttributeWithCacheKey)({perm:t.attributes.getInts(\"perm\",[])});const s=(t,e,n)=>{const r=e.dims;n=u(r,n);const i=c(r,n),s=r.length,p=`\\n      ${l(\"perm\",n,s)}\\n      float process(int indices[${s}]) {\\n        int a[${s}];\\n        perm(a, indices);\\n        return _A(a);\\n      }`;return Object.assign(Object.assign({},a),{output:{dims:i,type:e.type,textureType:o.TextureType.unpacked},shaderSource:p})},u=(t,e)=>(e&&e.length!==t.length&&(e=[...t.keys()].reverse()),e),c=(t,e)=>(e=u(t,e),i.ShapeUtil.sortBasedOnPerm(t,e)),l=(t,e,n)=>{const r=[];r.push(`void ${t}(out int a[${n}], int src[${n}]) {`);for(let t=0;t<n;++t)r.push(`\\ta[${e[t]}]=src[${t}];`);return r.push(\"\\t}\"),r.join(\"\\n\")},p=t=>{if(!t||1!==t.length)throw new Error(\"Transpose requires 1 input.\");if(\"float32\"!==t[0].type&&\"float64\"!==t[0].type)throw new Error(\"input should be float tensor\")}},8710:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.encodeAsUint8=void 0;const r=n(5060),i=n(2039);e.encodeAsUint8=(t,e)=>{const n=e.shape,o=(0,r.getGlsl)(t.session.backend.glContext.version),a=`\\n    const float FLOAT_MAX = 1.70141184e38;\\n    const float FLOAT_MIN = 1.17549435e-38;\\n\\n    bool isNaN(float val) {\\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\\n    }\\n\\n    highp vec4 encodeAsUint8(highp float v) {\\n      if (isNaN(v)) {\\n        return vec4(255, 255, 255, 255);\\n      }\\n\\n      highp float av = abs(v);\\n\\n      if(av < FLOAT_MIN) {\\n        return vec4(0.0, 0.0, 0.0, 0.0);\\n      } else if(v > FLOAT_MAX) {\\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n      } else if(v < -FLOAT_MAX) {\\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n      }\\n\\n      highp vec4 c = vec4(0,0,0,0);\\n\\n      highp float e = floor(log2(av));\\n      highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n      c[2] = floor(128.0 * m);\\n      m -= c[2] / 128.0;\\n      c[1] = floor(32768.0 * m);\\n      m -= c[1] / 32768.0;\\n      c[0] = floor(8388608.0 * m);\\n\\n      highp float ebias = e + 127.0;\\n      c[3] = floor(ebias / 2.0);\\n      ebias -= c[3] * 2.0;\\n      c[2] += floor(ebias) * 128.0;\\n\\n      c[3] += 128.0 * step(0.0, -v);\\n\\n      return c / 255.0;\\n    }\\n\\n    void main() {\\n      float value = ${o.texture2D}(X,TexCoords).r;\\n      ${o.output} = encodeAsUint8(value);\\n    }`,s={name:\"Uint8Encode\",inputTypes:[i.TextureType.unpacked],inputNames:[\"X\"],output:{dims:n,type:e.tensor.type,textureType:i.TextureType.downloadUint8AsFloat},shaderSource:a,hasMain:!0};return t.executeProgram(s,[e.tensor])}},4909:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.tanh=e.tan=e.sqrt=e.sin=e.sigmoid=e.relu=e.not=e.neg=e.log=e.parseLeakyReluAttributes=e.leakyRelu=e.identity=e.floor=e.exp=e.parseEluAttributes=e.elu=e.cos=e.ceil=e.clipV11=e.parseClipAttributes=e.clip=e.atan=e.asin=e.acos=e.abs=e.glslTanh=e.glslTan=e.glslSqrt=e.glslSigmoid=e.glslRelu=e.glslSin=e.glslNot=e.glslNeg=e.glslLog=e.glslLeakyRelu=e.glslIdentity=e.glslClip=e.glslFloor=e.glslExp=e.glslElu=e.glslCos=e.glslCeil=e.glslAtan=e.glslAsin=e.glslAcos=e.glslAbs=void 0;const r=n(246),i=n(2517),o=n(8520),a=n(5060),s=n(2039);function u(){return P(\"abs\")}function c(){return P(\"acos\")}function l(){return P(\"asin\")}function p(){return P(\"atan\")}function f(){return P(\"ceil\")}function d(){return P(\"cos\")}function h(t){const e=\"elu\";return{body:`\\n  const float alpha = float(${t});\\n\\n  float ${e}_(float a) {\\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\\n  }\\n  vec4 ${e}_(vec4 v) {\\n    return vec4(${e}_(v.x), ${e}_(v.y), ${e}_(v.z), ${e}_(v.w));\\n  }\\n  `,name:e,type:o.FunctionType.ValueBased}}function g(){return P(\"exp\")}function b(){return P(\"floor\")}function m(t,e){const n=\"clip\";return{body:`\\n  const float min = float(${t});\\n  const float max = float(${e});\\n\\n  float ${n}_(float a) {\\n    return clamp(a, min, max);\\n  }\\n  vec4 ${n}_(vec4 v) {\\n    return clamp(v, min, max);\\n  }\\n  `,name:n,type:o.FunctionType.ValueBased}}function y(){const t=\"indentity\";return{body:`\\n  float ${t}_(float a) {\\n    return a;\\n  }\\n  vec4 ${t}_(vec4 v) {\\n    return v;\\n  }\\n  `,name:t,type:o.FunctionType.ValueBased}}function _(t){const e=\"leakyRelu\";return{body:`\\n  const float alpha = float(${t});\\n\\n  float ${e}_(float a) {\\n    return a < 0.0 ? a * alpha : a;\\n  }\\n  vec4 ${e}_(vec4 v) {\\n    return vec4(${e}_(v.x), ${e}_(v.y), ${e}_(v.z), ${e}_(v.w));\\n  }\\n  `,name:e,type:o.FunctionType.ValueBased}}function v(){return P(\"log\")}function w(){const t=\"neg\";return{body:`\\n  float ${t}_(float a) {\\n    return -a;\\n  }\\n  vec4 ${t}_(vec4 v) {\\n    return -v;\\n  }\\n  `,name:t,type:o.FunctionType.ValueBased}}function x(){const t=\"not\";return{body:`\\n  float ${t}_(float a) {\\n    return float( ! bool(a) );\\n  }\\n  bool ${t}_(bool a) {\\n    return !a;\\n  }\\n  vec4 ${t}_(vec4 v) {\\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\\n  }\\n  bvec4 ${t}_(bvec4 v) {\\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\\n  }\\n  `,name:t,type:o.FunctionType.ValueBased}}function T(){return P(\"sin\")}function S(){const t=\"relu\";return{body:`\\n  float ${t}_(float a) {\\n    return max( a, 0.0 );\\n  }\\n  vec4 ${t}_(vec4 v) {\\n    return max( v, 0.0 );\\n  }\\n  `,name:t,type:o.FunctionType.ValueBased}}function O(){const t=\"sigmoid\";return{body:`\\n  float ${t}_(float a) {\\n    return 1.0 / (1.0 + exp(-a));\\n  }\\n  vec4 ${t}_(vec4 v) {\\n    return 1.0 / (1.0 + exp(-v));\\n  }\\n  `,name:t,type:o.FunctionType.ValueBased}}function A(){return P(\"sqrt\")}function E(){return P(\"tan\")}function I(){const t=\"tanh\";return{body:`\\n  float ${t}_(float a) {\\n    a = clamp(a, -10., 10.);\\n    a = exp(2.*a);\\n    return (a - 1.) / (a + 1.);\\n  }\\n  vec4 ${t}_(vec4 v) {\\n    v = clamp(v, -10., 10.);\\n    v = exp(2.*v);\\n    return (v - 1.) / (v + 1.);\\n  }\\n  `,name:t,type:o.FunctionType.ValueBased}}function P(t){return{body:`\\n  float ${t}_(float a) {\\n    return ${t}(a);\\n  }\\n  vec4 ${t}_(vec4 v) {\\n    return ${t}(v);\\n  }\\n  `,name:t,type:o.FunctionType.ValueBased}}e.glslAbs=u,e.glslAcos=c,e.glslAsin=l,e.glslAtan=p,e.glslCeil=f,e.glslCos=d,e.glslElu=h,e.glslExp=g,e.glslFloor=b,e.glslClip=m,e.glslIdentity=y,e.glslLeakyRelu=_,e.glslLog=v,e.glslNeg=w,e.glslNot=x,e.glslSin=T,e.glslRelu=S,e.glslSigmoid=O,e.glslSqrt=A,e.glslTan=E,e.glslTanh=I;const D=(t,e,n,r)=>{const i=t.session.pack?s.TextureType.packed:s.TextureType.unpacked,o={name:n.name,inputTypes:[i],inputNames:[\"A\"],cacheHint:r};return Object.assign(Object.assign({},o),{get:()=>((t,e,n,r)=>{const i=t.session.pack?s.TextureType.packed:s.TextureType.unpacked,o=(0,a.getGlsl)(t.session.backend.glContext.version);return Object.assign(Object.assign({},e),{output:{dims:n.dims,type:n.type,textureType:i},shaderSource:`\\n     ${r.body}\\n     void main() {\\n       vec4 v = ${o.texture2D}(A, TexCoords);\\n       v = ${r.name}_(v);\\n       ${o.output} = v;\\n     }\\n     `,hasMain:!0})})(t,o,e,n)})};e.abs=(t,e)=>[t.run(D(t,e[0],u()),e)],e.acos=(t,e)=>[t.run(D(t,e[0],c()),e)],e.asin=(t,e)=>[t.run(D(t,e[0],l()),e)],e.atan=(t,e)=>[t.run(D(t,e[0],p()),e)],e.clip=(t,e,n)=>[t.run(D(t,e[0],m(n.min,n.max),n.cacheKey),e)],e.parseClipAttributes=t=>(0,r.createAttributeWithCacheKey)({min:t.attributes.getFloat(\"min\",i.MIN_CLIP),max:t.attributes.getFloat(\"max\",i.MAX_CLIP)}),e.clipV11=(t,n)=>{const r=$(t,n);return(0,e.clip)(t,[n[0]],r)};const $=(t,e)=>{if(e.length>=3&&(!t.session.isInitializer(e[1].dataId)||!t.session.isInitializer(e[2].dataId)))throw new Error(\"dynamic clip attributes are not allowed\");const n=e.length>=3?e[1].numberData[0]:i.MIN_CLIP,o=e.length>=3?e[2].numberData[0]:i.MAX_CLIP;return(0,r.createAttributeWithCacheKey)({min:n,max:o})};e.ceil=(t,e)=>[t.run(D(t,e[0],f()),e)],e.cos=(t,e)=>[t.run(D(t,e[0],d()),e)],e.elu=(t,e,n)=>[t.run(D(t,e[0],h(n.alpha),n.cacheKey),e)],e.parseEluAttributes=t=>(0,r.createAttributeWithCacheKey)({alpha:t.attributes.getFloat(\"alpha\",1)}),e.exp=(t,e)=>[t.run(D(t,e[0],g()),e)],e.floor=(t,e)=>[t.run(D(t,e[0],b()),e)],e.identity=(t,e)=>[t.run(D(t,e[0],y()),e)],e.leakyRelu=(t,e,n)=>[t.run(D(t,e[0],_(n.alpha),n.cacheKey),e)],e.parseLeakyReluAttributes=t=>(0,r.createAttributeWithCacheKey)({alpha:t.attributes.getFloat(\"alpha\",.01)}),e.log=(t,e)=>[t.run(D(t,e[0],v()),e)],e.neg=(t,e)=>[t.run(D(t,e[0],w()),e)],e.not=(t,e)=>[t.run(D(t,e[0],x()),e)],e.relu=(t,e)=>[t.run(D(t,e[0],S()),e)],e.sigmoid=(t,e)=>[t.run(D(t,e[0],O()),e)],e.sin=(t,e)=>[t.run(D(t,e[0],T()),e)],e.sqrt=(t,e)=>[t.run(D(t,e[0],A()),e)],e.tan=(t,e)=>[t.run(D(t,e[0],E()),e)],e.tanh=(t,e)=>[t.run(D(t,e[0],I()),e)]},5611:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.createUnpackProgramInfoLoader=e.createUnpackProgramInfo=void 0;const r=n(5060),i=n(2039),o=n(9390),a=n(2827),s={name:\"unpack\",inputNames:[\"A\"],inputTypes:[i.TextureType.packed]};e.createUnpackProgramInfo=(t,e)=>{const n=e.dims.length,u=(0,a.getChannels)(\"rc\",n),c=u.slice(-2),l=(0,o.getCoordsDataType)(n),p=(0,a.unpackFromChannel)(),f=0===e.dims.length?\"\":function(t,e){if(1===t)return\"rc\";let n=\"\";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=\",\");return n}(n,u),d=n<=1?\"rc\":`vec2(${c.join(\",\")})`,h=`\\n    ${p}\\n    void main() {\\n      ${l} rc = getOutputCoords();\\n\\n       // Sample the texture with the coords to get the rgba channel value.\\n       vec4 packedInput = getA(${f});\\n\\n       ${(0,r.getGlsl)(t.session.backend.glContext.version).output} = vec4(getChannel(packedInput, ${d}), 0, 0, 0);\\n     }\\n   `;return Object.assign(Object.assign({},s),{hasMain:!0,output:{dims:e.dims,type:e.type,textureType:i.TextureType.unpacked},shaderSource:h})},e.createUnpackProgramInfoLoader=(t,n)=>Object.assign(Object.assign({},s),{get:()=>(0,e.createUnpackProgramInfo)(t,n)})},8428:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.parseUnsqueezeAttributes=e.unsqueezeV13=e.unsqueeze=void 0;const r=n(2517);e.unsqueeze=(t,e,n)=>{i(e);const o=r.ShapeUtil.unsqueezeShape(e[0].dims,n);return[t.reshapeUnpacked(e[0],o)]},e.unsqueezeV13=(t,n)=>(o(n),(0,e.unsqueeze)(t,[n[0]],Array.from(n[1].integerData))),e.parseUnsqueezeAttributes=t=>t.attributes.getInts(\"axes\");const i=t=>{if(!t||1!==t.length)throw new Error(\"Unsqueeze requires 1 input.\");if(\"string\"===t[0].type)throw new Error(\"invalid input tensor types.\")},o=t=>{if(!t||2!==t.length)throw new Error(\"Unsqueeze requires 2 inputs.\");if(\"int32\"!==t[1].type)throw new Error(\"Invalid input type.\")}},9793:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.scalesValidation=e.validateInputs=e.parseUpsampleAttributes=e.parseUpsampleAttributesV9=e.parseUpsampleAttributesV7=e.upsample=void 0;const r=n(246),i=n(5060),o=n(2039),a={name:\"Upsample\",inputNames:[\"X\"],inputTypes:[o.TextureType.unpacked]};e.upsample=(t,n,r)=>((0,e.validateInputs)(n,r),[t.run(Object.assign(Object.assign({},a),{cacheHint:r.cacheKey,get:()=>s(t,n,r)}),n)]),e.parseUpsampleAttributesV7=t=>(0,e.parseUpsampleAttributes)(t,7),e.parseUpsampleAttributesV9=t=>(0,e.parseUpsampleAttributes)(t,9),e.parseUpsampleAttributes=(t,n)=>{const i=n>=10,o=t.attributes.getString(\"mode\",\"nearest\");if(\"nearest\"!==o&&\"linear\"!==o&&(n<11||\"cubic\"!==o))throw new Error(`unrecognized mode: ${o}`);let a=[];n<9&&(a=t.attributes.getFloats(\"scales\"),(0,e.scalesValidation)(a,o,i));const s=t.attributes.getFloat(\"extrapolation_value\",0),u=n>10?t.attributes.getString(\"coordinate_transformation_mode\",\"half_pixel\"):\"asymmetric\";if(-1===[\"asymmetric\",\"pytorch_half_pixel\",\"tf_half_pixel_for_nn\",\"align_corners\",\"tf_crop_and_resize\",\"half_pixel\"].indexOf(u))throw new Error(`coordinate_transform_mode '${u}' is not supported`);const c=\"tf_crop_and_resize\"===u,l=c,p=\"nearest\"===o&&n>=11?t.attributes.getString(\"nearest_mode\",\"round_prefer_floor\"):\"\";if(-1===[\"round_prefer_floor\",\"round_prefer_ceil\",\"floor\",\"ceil\",\"\"].indexOf(p))throw new Error(`nearest_mode '${p}' is not supported`);const f=t.attributes.getFloat(\"cubic_coeff_a\",-.75),d=0!==t.attributes.getInt(\"exclude_outside\",0);if(d&&\"cubic\"!==o)throw new Error(\"exclude_outside can be set to 1 only when mode is CUBIC.\");const h=n<11||\"nearest\"===o&&\"asymmetric\"===u&&\"floor\"===p;let g=0,b=0,m=0;return n>10?t.inputs.length>2?(g=1,b=2,m=3):(b=1,m=2):9===n&&(b=1),(0,r.createAttributeWithCacheKey)({opset:n,isResize:i,mode:o,scales:a,extrapolationValue:s,coordinateTransformMode:u,useExtrapolation:l,needRoiInput:c,nearestMode:p,cubicCoefficientA:f,excludeOutside:d,useNearest2xOptimization:h,roiInputIdx:g,scalesInputIdx:b,sizesInputIdx:m})};const s=(t,e,n)=>{const r=(0,i.getGlsl)(t.session.backend.glContext.version),[s,u]=t.calculateTextureWidthAndHeight(e[0].dims,o.TextureType.unpacked),c=e[0].dims.map(((t,e)=>Math.floor(t*n.scales[e]))),[l,p]=t.calculateTextureWidthAndHeight(c,o.TextureType.unpacked),f=c.length,d=new Array(f),h=new Array(f);let g=`\\n      int output_pitches[${f}];\\n      int input_pitches[${f}];\\n      `;for(let t=f-1;t>=0;t--)d[t]=t===f-1?1:d[t+1]*c[t+1],h[t]=t===f-1?1:h[t+1]*e[0].dims[t+1],g+=`\\n        output_pitches[${t}] = ${d[t]};\\n        input_pitches[${t}] = ${h[t]};\\n        `;const b=`\\n      float getInputFloat(int index) {\\n        vec2 coords = offsetToCoords(index, ${s}, ${u});\\n        float value = getColorAsFloat(${r.texture2D}(X, coords));\\n        return value;\\n      }\\n      `,m=\"nearest\"===n.mode?`\\n    ${b}\\n    float process(int indices[${f}]) {\\n      int input_index = 0;\\n      int output_index = coordsToOffset(TexCoords, ${l}, ${p});\\n\\n      ${g}\\n\\n      int d, m;\\n      for (int dim = 0; dim < ${f}; ++dim) {\\n        d = output_index / output_pitches[dim];\\n        m = output_index - d * output_pitches[dim];\\n        output_index = m;\\n\\n        if (scales[dim] != 1 && d > 0) {\\n          int d2 = d / scales[dim];\\n          m = d - d2 * scales[dim];\\n          d = d2;\\n        }\\n        input_index += input_pitches[dim] * d;\\n      }\\n\\n      return getInputFloat(input_index);\\n    }`:4===f?`\\n    ${b}\\n    float process(int indices[4]) {\\n      int input_index = 0;\\n      int output_index = coordsToOffset(TexCoords, ${l}, ${p});\\n\\n      ${g}\\n\\n      int m;\\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\\n      index_of_dim0 = output_index / output_pitches[0];\\n      m = output_index - index_of_dim0 * output_pitches[0];\\n      index_of_dim1 = m / output_pitches[1];\\n      m = m - index_of_dim1 * output_pitches[1];\\n      index_of_dim2 = m / output_pitches[2];\\n      m = m - index_of_dim2 * output_pitches[2];\\n      index_of_dim3 = m;\\n\\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\\n      index_of_input_dim2 = index_of_dim2 / scales[2];\\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\\n      index_of_input_dim3 = index_of_dim3 / scales[3];\\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\\n\\n      input_index = index_of_dim0 * input_pitches[0] +\\n            index_of_dim1 * input_pitches[1] +\\n            index_of_input_dim2 * input_pitches[2] +\\n            index_of_input_dim3;\\n\\n      float x00 = getInputFloat(input_index);\\n      float x10, x01, x11;\\n\\n      bool end_of_dim2 = false;\\n      if (index_of_input_dim2 == (${e[0].dims[2]} - 1)) {\\n        // It's the end in dimension 2\\n        x01 = x00;\\n        end_of_dim2 = true;\\n      } else {\\n        x01 = getInputFloat(input_index + input_pitches[2]);\\n      }\\n\\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\\n        // It's the end in dimension 3\\n        x10 = x00;\\n        x11 = x01;\\n      }\\n      else {\\n        x10 = getInputFloat(input_index + 1);\\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\\n      }\\n\\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\\n    }`:`\\n    ${b}\\n    float process(int indices[2]) {\\n      int input_index = 0;\\n      int output_index = coordsToOffset(TexCoords, ${l}, ${p});\\n\\n      ${g}\\n\\n      int m;\\n      int index_of_dim0, index_of_dim1;\\n      index_of_dim0 = output_index / output_pitches[0];\\n      m = output_index - index_of_dim0 * output_pitches[0];\\n      index_of_dim1 = m;\\n\\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\\n      index_of_input_dim0 = index_of_dim0 / scales[0];\\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\\n      index_of_input_dim1 = index_of_dim1 / scales[1];\\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\\n\\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\\n\\n      float x00 = getInputFloat(input_index);\\n      float x10, x01, x11;\\n\\n      bool end_of_dim0 = false;\\n      if (index_of_input_dim0 == (${e[0].dims[0]} - 1)) {\\n        // It's the end in dimension 0\\n        x01 = x00;\\n        end_of_dim0 = true;\\n      } else {\\n        x01 = getInputFloat(input_index + input_pitches[0]);\\n      }\\n\\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\\n        // It's the end in dimension 1\\n        x10 = x00;\\n        x11 = x01;\\n      }\\n      else {\\n        x10 = getInputFloat(input_index + 1);\\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\\n      }\\n\\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\\n    }`;return Object.assign(Object.assign({},a),{output:{dims:c,type:e[0].type,textureType:o.TextureType.unpacked},shaderSource:m,variables:[{name:\"scales\",type:\"int\",arrayLength:n.scales.length,data:n.scales.map((t=>Math.ceil(t)))}]})};e.validateInputs=(t,e)=>{if(!t||e.opset<9&&1!==t.length||e.opset>=9&&e.opset<11&&2!==t.length||e.opset>=11&&t.length<2)throw new Error(\"invalid inputs.\");if(e.scales.length>0&&t[0].dims.length!==e.scales.length)throw new Error(\"Invalid input shape.\");if(\"string\"===t[0].type)throw new Error(\"Invalid input tensor types.\")},e.scalesValidation=(t,e,n)=>{if(n){for(const e of t)if(e<=0)throw new Error(\"Scale value should be greater than 0.\")}else for(const e of t)if(e<1)throw new Error(\"Scale value should be greater than or equal to 1.\");if(!(\"linear\"!==e&&\"cubic\"!==e||2===t.length||4===t.length&&1===t[0]&&1===t[1]))throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the ${n?\"Resize\":\"Upsample\"} opeartor.`)}},1958:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.ProgramManager=void 0;const r=n(1670),i=n(6231),o=n(8879),a=n(5060);e.ProgramManager=class{constructor(t,e,n){this.profiler=t,this.glContext=e,this.textureLayoutStrategy=n,this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,e){this.repo.set(t,e)}run(t,e,n){var r;this.profiler.event(\"op\",`ProgramManager.run ${null!==(r=t.programInfo.name)&&void 0!==r?r:\"unknown kernel\"}`,(()=>{var r;const o=this.glContext.gl,a=t.program;o.useProgram(a);try{this.bindOutput(n),this.attributesBound||this.bindAttributes(t.attribLocations),this.bindUniforms(t.uniformLocations,null!==(r=t.programInfo.variables)&&void 0!==r?r:[],e)}catch(e){throw i.Logger.error(\"ProgramManager\",t.programInfo.shaderSource),e}this.profiler.event(\"backend\",\"GlContext.draw()\",(()=>{this.glContext.draw()}))}),this.glContext)}dispose(){this.vertexShader&&this.glContext.deleteShader(this.vertexShader),this.repo.forEach((t=>this.glContext.deleteProgram(t.program)))}build(t,e,n){return this.profiler.event(\"backend\",\"ProgramManager.build\",(()=>{const r=new o.GlslPreprocessor(this.glContext,t,e,n),i=r.preprocess(),a=this.compile(i);return{programInfo:t,program:a,uniformLocations:this.getUniformLocations(a,r.context.programInfo.inputNames,r.context.programInfo.variables),attribLocations:this.getAttribLocations(a)}}))}compile(t){if(!this.vertexShader){i.Logger.verbose(\"ProrgramManager\",\"Compiling and caching Vertex shader for the first time\");const t=(0,a.getVertexShaderSource)(this.glContext.version);this.vertexShader=this.glContext.compileShader(t,this.glContext.gl.VERTEX_SHADER)}r.env.debug&&i.Logger.verbose(\"ProrgramManager\",`FragShader:\\n${t}\\n`);const e=this.glContext.compileShader(t,this.glContext.gl.FRAGMENT_SHADER),n=this.glContext.createProgram(this.vertexShader,e);return this.glContext.deleteShader(e),n}bindOutput(t){const e=t.width,n=t.height;i.Logger.verbose(\"ProrgramManager\",`Binding output texture to Framebuffer: w/h=${e}/${n}, shape=${t.shape}, type=${t.tensor.type}`),this.glContext.attachFramebuffer(t.texture,e,n)}bindAttributes(t){const e=t.position,n=t.textureCoord;this.glContext.setVertexAttributes(e,n),this.attributesBound=!0}bindUniforms(t,e,n){var r;const i=this.glContext.gl;let o=0;for(const{name:a,type:s,location:u,arrayLength:c}of t){const t=null===(r=e.find((t=>t.name===a)))||void 0===r?void 0:r.data;if(\"sampler2D\"!==s&&!t)throw new Error(`variable '${a}' does not have data defined in program info`);switch(s){case\"sampler2D\":this.bindTexture(n[o],u,o),o++;break;case\"float\":c?i.uniform1fv(u,t):i.uniform1f(u,t);break;case\"int\":c?i.uniform1iv(u,t):i.uniform1i(u,t);break;default:throw new Error(`Uniform not implemented: ${s}`)}}}bindTexture(t,e,n){this.glContext.bindTextureToUniform(t.texture,n,e)}getAttribLocations(t){return{position:this.getAttribLocation(t,\"position\"),textureCoord:this.getAttribLocation(t,\"textureCoord\")}}getUniformLocations(t,e,n){const r=[];if(e)for(const n of e)r.push({name:n,type:\"sampler2D\",location:this.getUniformLocation(t,n)});if(n)for(const e of n)r.push(Object.assign(Object.assign({},e),{location:this.getUniformLocation(t,e.name)}));return r}getUniformLocation(t,e){const n=this.glContext.gl.getUniformLocation(t,e);if(null===n)throw new Error(`Uniform ${e} not found.`);return n}getAttribLocation(t,e){return this.glContext.gl.getAttribLocation(t,e)}}},6416:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.WebGLSessionHandler=void 0;const r=n(6231),i=n(1047),o=n(8316),a=n(1640),s=n(1958),u=n(7859),c=n(5702);e.WebGLSessionHandler=class{constructor(t,e){this.backend=t,this.context=e,this.layoutStrategy=new u.PreferLogicalStrategy(t.glContext.maxTextureSize),this.programManager=new s.ProgramManager(this.context.profiler,t.glContext,this.layoutStrategy),this.textureManager=new c.TextureManager(t.glContext,this.layoutStrategy,this.context.profiler,{reuseTextures:\"full\"===t.textureCacheMode}),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache=new Map,this.pack=t.pack,this.pack2unpackMap=new Map,this.unpack2packMap=new Map}createInferenceHandler(){return new o.WebGLInferenceHandler(this)}onGraphInitialized(t){const e=t.getValues().filter((t=>-1===t.from&&t.tensor)).map((t=>t.tensor.dataId));this.initializers=new Set(e)}isInitializer(t){return!!this.initializers&&this.initializers.has(t)}addInitializer(t){this.initializers.add(t)}getTextureData(t,e){return e?this.packedTextureDataCache.get(t):this.unpackedTextureDataCache.get(t)}setTextureData(t,e,n=!1){r.Logger.verbose(\"WebGLSessionHandler\",\"Storing Texture data in cache\"),n?this.packedTextureDataCache.set(t,e):this.unpackedTextureDataCache.set(t,e)}dispose(){this.programManager.dispose(),this.textureManager.clearActiveTextures(),this.packedTextureDataCache.forEach((t=>this.textureManager.releaseTexture(t,!0))),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache.forEach((t=>this.textureManager.releaseTexture(t,!0))),this.unpackedTextureDataCache=new Map}resolve(t,e,n){const r=(0,i.resolveOperator)(t,e,a.WEBGL_OP_RESOLVE_RULES);return{impl:r.opImpl,context:r.opInit?r.opInit(t,n):t}}}},7769:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.Uint8DataEncoder=e.RGBAFloatDataEncoder=e.RedFloat32DataEncoder=void 0;const r=n(6231);e.RedFloat32DataEncoder=class{constructor(t,e=1){if(1===e)this.internalFormat=t.R32F,this.format=t.RED,this.textureType=t.FLOAT,this.channelSize=e;else{if(4!==e)throw new Error(`Invalid number of channels: ${e}`);this.internalFormat=t.RGBA32F,this.format=t.RGBA,this.textureType=t.FLOAT,this.channelSize=e}}encode(t,e){let n,i;return t.constructor!==Float32Array&&(r.Logger.warning(\"Encoder\",\"data was not of type Float32; creating new Float32Array\"),i=new Float32Array(t)),e*this.channelSize>t.length?(r.Logger.warning(\"Encoder\",\"Source data too small. Allocating larger array\"),i=t,n=this.allocate(e*this.channelSize),i.forEach(((t,e)=>n[e]=t))):(i=t,n=i),n}allocate(t){return new Float32Array(4*t)}decode(t,e){return 1===this.channelSize?t.filter(((t,e)=>e%4==0)).subarray(0,e):t.subarray(0,e)}},e.RGBAFloatDataEncoder=class{constructor(t,e=1,n){if(1!==e&&4!==e)throw new Error(`Invalid number of channels: ${e}`);this.internalFormat=t.RGBA,this.format=t.RGBA,this.channelSize=e,this.textureType=n||t.FLOAT}encode(t,e){let n=t;return 1===this.channelSize&&(r.Logger.verbose(\"Encoder\",\"Exploding into a larger array\"),n=this.allocate(e),t.forEach(((t,e)=>n[4*e]=t))),n}allocate(t){return new Float32Array(4*t)}decode(t,e){return 1===this.channelSize?t.filter(((t,e)=>e%4==0)).subarray(0,e):t.subarray(0,e)}},e.Uint8DataEncoder=class{constructor(t,e=1){if(this.channelSize=4,1===e)this.internalFormat=t.ALPHA,this.format=t.ALPHA,this.textureType=t.UNSIGNED_BYTE,this.channelSize=e;else{if(4!==e)throw new Error(`Invalid number of channels: ${e}`);this.internalFormat=t.RGBA,this.format=t.RGBA,this.textureType=t.UNSIGNED_BYTE,this.channelSize=e}}encode(t,e){return new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}allocate(t){return new Uint8Array(t*this.channelSize)}decode(t,e){if(t instanceof Uint8Array)return t.subarray(0,e);throw new Error(`Invalid array type: ${t.constructor}`)}}},7859:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.getBatchDim=e.sizeToSquarishShape=e.getRowsCols=e.sizeFromShape=e.isInt=e.parseAxisParam=e.squeezeShape=e.PreferLogicalStrategy=e.AlwaysKeepOriginalSizeStrategy=void 0;const r=n(6231),i=n(2517);function o(t,e){const n=[],r=[],i=null!=e&&Array.isArray(e)&&0===e.length,o=null==e||i?null:a(e,t).sort();let s=0;for(let e=0;e<t.length;++e){if(null!=o){if(o[s]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==o[s]||o[s]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),o[s]<=e&&s++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function a(t,e){const n=e.length;return t=null==t?e.map(((t,e)=>e)):[].concat(t),(0,i.assert)(t.every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${t}`)),(0,i.assert)(t.every(s),(()=>`All values in axis param must be integers but got axis ${t}`)),t.map((t=>t<0?n+t:t))}function s(t){return t%1==0}function u(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function c(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}e.AlwaysKeepOriginalSizeStrategy=class{constructor(t){this.maxTextureSize=t}computeTextureWH(t,e){if(0===t.length)return[1,1];const n=this.maxTextureSize;if(e&&void 0!==e.breakAxis){const i=e.breakAxis>=t.length?1:t.slice(e.breakAxis).reduce(((t,e)=>t*e)),o=e.breakAxis<=0?1:t.slice(0,e.breakAxis).reduce(((t,e)=>t*e));if(!(i>n||o>n))return[i,o];r.Logger.verbose(\"TextureLayout\",`Given width/height preferences were unattainable: shape:${t}, breakAxis:${e.breakAxis}`)}const i=t.reduce(((t,e)=>t*e));let o=Math.floor(Math.sqrt(i));for(;o<n&&o<i&&i%o!=0;o++);if(o>=n||i%o!=0)throw new Error(`The given dimensions are outside this GPU's boundaries: ${t}`);return[o,i/o]}},e.PreferLogicalStrategy=class{constructor(t){this.maxTextureSize=t}computeTextureWH(t,e){const n=this.computeTexture(t,e);return e&&e.isPacked&&(n[0]/=2,n[1]/=2),e&&e.reverseWH?[n[1],n[0]]:n}computeTexture(t,e){const n=e&&e.isPacked;if(0===t.length)return n?[2,2]:[1,1];let i=this.maxTextureSize;if(e&&void 0!==e.breakAxis){const n=e.breakAxis>=t.length?1:t.slice(e.breakAxis).reduce(((t,e)=>t*e)),o=e.breakAxis<=0?1:t.slice(0,e.breakAxis).reduce(((t,e)=>t*e));if(!(n>i||o>i))return[n,o];r.Logger.verbose(\"TextureLayout\",`Given width/height preferences were unattainable: shape:${t}, breakAxis:${e.breakAxis}`)}let a=t.slice(0);if(n&&(i*=2,a=a.map(((t,e)=>e>=a.length-2?a[e]%2==0?a[e]:a[e]+1:a[e])),1===a.length&&(a=[2,a[0]])),2!==a.length){const t=o(a);a=t.newShape}const s=u(a);return a.length<=1&&s<=i?[1,s]:2===a.length&&a[0]<=i&&a[1]<=i?a:3===a.length&&a[0]*a[1]<=i&&a[2]<=i?[a[0]*a[1],a[2]]:3===a.length&&a[0]<=i&&a[1]*a[2]<=i?[a[0],a[1]*a[2]]:4===a.length&&a[0]*a[1]*a[2]<=i&&a[3]<=i?[a[0]*a[1]*a[2],a[3]]:4===a.length&&a[0]<=i&&a[1]*a[2]*a[3]<=i?[a[0],a[1]*a[2]*a[3]]:n?c(s/4).map((t=>2*t)):c(s)}},e.squeezeShape=o,e.parseAxisParam=a,e.isInt=s,e.sizeFromShape=u,e.getRowsCols=function(t){if(0===t.length)throw Error(\"Cannot get rows and columns of an empty shape array.\");return[t.length>1?t[t.length-2]:1,t[t.length-1]]},e.sizeToSquarishShape=c,e.getBatchDim=function(t,e=2){return u(t.slice(0,t.length-e))}},4057:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.createTextureLayoutFromShape=e.calculateTextureWidthAndHeight=e.createTextureLayoutFromTextureType=void 0;const r=n(2517),i=n(2039);e.createTextureLayoutFromTextureType=(t,n,r)=>{const o=r===i.TextureType.unpacked||r===i.TextureType.unpackedReversed?1:4,a=r===i.TextureType.packed,s=r===i.TextureType.unpackedReversed||r===i.TextureType.packed,u=r===i.TextureType.packedLastDimension?n.length-1:void 0,c=r===i.TextureType.packedLastDimension?n.map(((t,e)=>e===n.length-1?4*t:t)):void 0;return(0,e.createTextureLayoutFromShape)(t,n,o,c,{isPacked:a,reverseWH:s,breakAxis:u})},e.calculateTextureWidthAndHeight=(t,n,r)=>{const i=(0,e.createTextureLayoutFromTextureType)(t,n,r);return[i.width,i.height]},e.createTextureLayoutFromShape=(t,e,n=1,i,o)=>{const a=!(!o||!o.isPacked),[s,u]=t.computeTextureWH(a&&i||e,o),c=e.length;let l=e.slice(0);if(0===c&&(l=[1]),1===n)i=e;else if(a){if(4!==n)throw new Error(\"a packed texture must be 4-channel\");i=e,c>0&&(l[c-1]=Math.ceil(l[c-1]/2)),c>1&&(l[c-2]=Math.ceil(l[c-2]/2))}else if(!i)throw new Error(\"Unpacked shape is needed when using channels > 1\");return{width:s,height:u,channels:n,isPacked:a,shape:l,strides:r.ShapeUtil.computeStrides(l),unpackedShape:i,reversedWH:o&&o.reverseWH}}},5702:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.TextureManager=void 0;const r=n(6231);e.TextureManager=class{constructor(t,e,n,r){this.glContext=t,this.layoutStrategy=e,this.profiler=n,this.config=r,this.pendingRead=new Map,r.reuseTextures&&(this.inUseTextures=new Map,this.idleTextures=new Map,this.textureLookup=new Map)}createTextureFromLayout(t,e,n,i){const o=this.toEncoderType(t),a=this.glContext.getEncoder(o,e.channels||1,i);if(e.isPacked&&1===i)throw new Error(\"not implemented\");const s=e.width,u=e.height;let c,l;if(this.config.reuseTextures){c=`${s}x${u}_${a.format}_${a.internalFormat}_${a.textureType}`,l=this.inUseTextures.get(c),l||(l=[],this.inUseTextures.set(c,l));const e=this.idleTextures.get(c);if(e&&e.length>0){const r=e.pop();return l.push(r),1===i&&this.glContext.updateTexture(r,s,u,a,this.toTextureData(t,n)),r}}r.Logger.verbose(\"TextureManager\",`Creating new texture of size ${e.width}x${e.height}`);const p=this.glContext.allocateTexture(s,u,a,this.toTextureData(t,n));return this.config.reuseTextures&&(l.push(p),this.textureLookup.set(p,c)),p}readTexture(t,e,n){return n||(n=1),this.profiler.event(\"backend\",\"TextureManager.readTexture\",(()=>{const r=t.shape.reduce(((t,e)=>t*e))*n,i=this.glContext.readTexture(t.texture,t.width,t.height,r,this.toEncoderType(e),n);return this.toTensorData(e,i)}))}async readTextureAsync(t,e,n){const r=t.tensor.dataId;if(n||(n=1),this.pendingRead.has(r)){const t=this.pendingRead.get(r);return new Promise((e=>null==t?void 0:t.push(e)))}return this.profiler.event(\"backend\",\"TextureManager.readTextureAsync\",(async()=>{this.pendingRead.set(r,[]);const i=t.shape.reduce(((t,e)=>t*e))*n;await this.glContext.createAndWaitForFence();const o=this.glContext.readTexture(t.texture,t.width,t.height,i,this.toEncoderType(e),n),a=this.toTensorData(e,o),s=this.pendingRead.get(r);return this.pendingRead.delete(r),null==s||s.forEach((t=>t(a))),a}))}readUint8TextureAsFloat(t){return this.profiler.event(\"backend\",\"TextureManager.readUint8TextureAsFloat\",(()=>{const e=t.shape.reduce(((t,e)=>t*e)),n=this.glContext.readTexture(t.texture,t.width,t.height,4*e,\"byte\",4);return new Float32Array(n.buffer,n.byteOffset,e)}))}releaseTexture(t,e){let n;if(this.config.reuseTextures&&(n=this.textureLookup.get(t.texture),n)){e&&this.textureLookup.delete(n);const r=this.inUseTextures.get(n);if(r){const e=r.indexOf(t.texture);if(-1!==e){r.splice(e,1);let i=this.idleTextures.get(n);i||(i=[],this.idleTextures.set(n,i)),i.push(t.texture)}}}n&&!e||(r.Logger.verbose(\"TextureManager\",`Deleting texture of size ${t.width}x${t.height}`),this.glContext.deleteTexture(t.texture))}toTensorData(t,e){switch(t){case\"int16\":return e instanceof Int16Array?e:Int16Array.from(e);case\"int32\":return e instanceof Int32Array?e:Int32Array.from(e);case\"int8\":return e instanceof Int8Array?e:Int8Array.from(e);case\"uint16\":return e instanceof Uint16Array?e:Uint16Array.from(e);case\"uint32\":return e instanceof Uint32Array?e:Uint32Array.from(e);case\"uint8\":case\"bool\":return e instanceof Uint8Array?e:Uint8Array.from(e);case\"float32\":return e instanceof Float32Array?e:Float32Array.from(e);case\"float64\":return e instanceof Float64Array?e:Float64Array.from(e);default:throw new Error(`TensorData type ${t} is not supported`)}}toTextureData(t,e){if(e)return e instanceof Float32Array?e:new Float32Array(e)}toEncoderType(t){return\"float\"}clearActiveTextures(){this.glContext.clearActiveTextures()}}},2039:(t,e)=>{\"use strict\";var n;Object.defineProperty(e,\"__esModule\",{value:!0}),e.TextureType=void 0,(n=e.TextureType||(e.TextureType={}))[n.unpacked=0]=\"unpacked\",n[n.unpackedReversed=1]=\"unpackedReversed\",n[n.packed=2]=\"packed\",n[n.downloadUint8AsFloat=3]=\"downloadUint8AsFloat\",n[n.packedLastDimension=4]=\"packedLastDimension\"},9390:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.getGlChannels=e.getCoordsDataType=e.getSqueezedParams=e.squeezeInputShape=e.generateShaderFuncNameFromInputSamplerNameAtOutCoords=e.generateShaderFuncNameFromInputSamplerName=e.repeatedTry=e.getPackedShape=void 0;const r=n(2517);e.getPackedShape=function(t){const e=t.length;return t.slice(0,e-1).concat(t[e-1]/4)},e.repeatedTry=async function(t,e=(t=>0),n){return new Promise(((r,i)=>{let o=0;const a=()=>{if(t())return void r();o++;const s=e(o);null!=n&&o>=n?i():setTimeout(a,s)};a()}))},e.generateShaderFuncNameFromInputSamplerName=function(t){return(0,r.assert)(void 0!==t&&0!==t.length,(()=>\"empty string found for sampler name\")),\"get\"+t.charAt(0).toUpperCase()+t.slice(1)},e.generateShaderFuncNameFromInputSamplerNameAtOutCoords=function(t){return(0,r.assert)(void 0!==t&&0!==t.length,(()=>\"empty string found for sampler name\")),\"get\"+t.charAt(0).toUpperCase()+t.slice(1)+\"AtOutCoords\"},e.squeezeInputShape=function(t,e){let n=JSON.parse(JSON.stringify(t));return n=e,n},e.getSqueezedParams=function(t,e){return e.map((e=>t[e])).join(\", \")},e.getCoordsDataType=function(t){if(t<=1)return\"int\";if(2===t)return\"ivec2\";if(3===t)return\"ivec3\";if(4===t)return\"ivec4\";if(5===t)return\"ivec5\";if(6===t)return\"ivec6\";throw Error(`GPU for rank ${t} is not yet supported`)},e.getGlChannels=function(t=6){return[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,t)}},7305:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.createNewWebGLContext=e.createWebGLContext=void 0;const r=n(6231),i=n(1713),o={};function a(t){const e=function(){if(\"undefined\"==typeof document){if(\"undefined\"==typeof OffscreenCanvas)throw new TypeError(\"failed to create canvas: OffscreenCanvas is not supported\");return new OffscreenCanvas(1,1)}const t=document.createElement(\"canvas\");return t.width=1,t.height=1,t}();let n;const o={alpha:!1,depth:!1,antialias:!1,stencil:!1,preserveDrawingBuffer:!1,premultipliedAlpha:!1,failIfMajorPerformanceCaveat:!1};if((!t||\"webgl2\"===t)&&(n=e.getContext(\"webgl2\",o),n))try{return new i.WebGLContext(n,2)}catch(t){r.Logger.warning(\"GlContextFactory\",`failed to create WebGLContext using contextId 'webgl2'. Error: ${t}`)}if((!t||\"webgl\"===t)&&(n=e.getContext(\"webgl\",o)||e.getContext(\"experimental-webgl\",o),n))try{return new i.WebGLContext(n,1)}catch(t){r.Logger.warning(\"GlContextFactory\",`failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${t}`)}throw new Error(\"WebGL is not supported\")}e.createWebGLContext=function t(e){let n;e&&\"webgl2\"!==e||!(\"webgl2\"in o)?e&&\"webgl\"!==e||!(\"webgl\"in o)||(n=o.webgl):n=o.webgl2,n=n||a(e),e=e||1===n.version?\"webgl\":\"webgl2\";const r=n.gl;return o[e]=n,r.isContextLost()?(delete o[e],t(e)):(r.disable(r.DEPTH_TEST),r.disable(r.STENCIL_TEST),r.disable(r.BLEND),r.disable(r.DITHER),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SAMPLE_COVERAGE),r.enable(r.SCISSOR_TEST),r.enable(r.CULL_FACE),r.cullFace(r.BACK),n)},e.createNewWebGLContext=a},1713:function(t,e,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!(\"get\"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,i)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,\"default\",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)\"default\"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return i(e,t),e};Object.defineProperty(e,\"__esModule\",{value:!0}),e.WebGLContext=e.linearSearchLastTrue=void 0;const a=n(1670),s=o(n(7769)),u=n(9390);function c(t){let e=0;for(;e<t.length&&t[e]();++e);return e-1}e.linearSearchLastTrue=c,e.WebGLContext=class{constructor(t,e){this.frameBufferBound=!1,this.itemsToPoll=[],this.gl=t,this.version=e,this.getExtensions(),this.vertexbuffer=this.createVertexbuffer(),this.framebuffer=this.createFramebuffer(),this.queryVitalParameters()}allocateTexture(t,e,n,r){const i=this.gl,o=i.createTexture();i.bindTexture(i.TEXTURE_2D,o),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.NEAREST),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.NEAREST),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE);const a=r?n.encode(r,t*e):null;return i.texImage2D(i.TEXTURE_2D,0,n.internalFormat,t,e,0,n.format,n.textureType,a),this.checkError(),o}updateTexture(t,e,n,r,i){const o=this.gl;o.bindTexture(o.TEXTURE_2D,t);const a=r.encode(i,e*n);o.texSubImage2D(o.TEXTURE_2D,0,0,0,e,n,r.format,r.textureType,a),this.checkError()}attachFramebuffer(t,e,n){const r=this.gl;r.bindTexture(r.TEXTURE_2D,t),r.bindFramebuffer(r.FRAMEBUFFER,this.framebuffer),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0),this.checkError(),r.viewport(0,0,e,n),r.scissor(0,0,e,n)}readTexture(t,e,n,r,i,o){const a=this.gl;o||(o=1),this.frameBufferBound||this.attachFramebuffer(t,e,n);const s=this.getEncoder(i,o),u=s.allocate(e*n);return a.bindTexture(a.TEXTURE_2D,t),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,t,0),a.readPixels(0,0,e,n,a.RGBA,s.textureType,u),this.checkError(),s.decode(u,r)}isFramebufferReady(){return!0}getActiveTexture(){const t=this.gl;return\"TEXTURE\"+(t.getParameter(this.gl.ACTIVE_TEXTURE)-t.TEXTURE0)}getTextureBinding(){return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D)}getFramebufferBinding(){return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING)}setVertexAttributes(t,e){const n=this.gl;n.vertexAttribPointer(t,3,n.FLOAT,!1,20,0),n.enableVertexAttribArray(t),-1!==e&&(n.vertexAttribPointer(e,2,n.FLOAT,!1,20,12),n.enableVertexAttribArray(e)),this.checkError()}createProgram(t,e){const n=this.gl,r=n.createProgram();return n.attachShader(r,t),n.attachShader(r,e),n.linkProgram(r),r}compileShader(t,e){const n=this.gl,r=n.createShader(e);if(!r)throw new Error(`createShader() returned null with type ${e}`);if(n.shaderSource(r,t),n.compileShader(r),!1===n.getShaderParameter(r,n.COMPILE_STATUS))throw new Error(`Failed to compile shader: ${n.getShaderInfoLog(r)}\\nShader source:\\n${t}`);return r}deleteShader(t){this.gl.deleteShader(t)}bindTextureToUniform(t,e,n){const r=this.gl;r.activeTexture(r.TEXTURE0+e),this.checkError(),r.bindTexture(r.TEXTURE_2D,t),this.checkError(),r.uniform1i(n,e),this.checkError()}draw(){this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4),this.checkError()}checkError(){if(a.env.debug){const t=this.gl,e=t.getError();let n=\"\";switch(e){case t.NO_ERROR:return;case t.INVALID_ENUM:n=\"INVALID_ENUM\";break;case t.INVALID_VALUE:n=\"INVALID_VALUE\";break;case t.INVALID_OPERATION:n=\"INVALID_OPERATION\";break;case t.INVALID_FRAMEBUFFER_OPERATION:n=\"INVALID_FRAMEBUFFER_OPERATION\";break;case t.OUT_OF_MEMORY:n=\"OUT_OF_MEMORY\";break;case t.CONTEXT_LOST_WEBGL:n=\"CONTEXT_LOST_WEBGL\";break;default:n=`Unknown WebGL Error: ${e.toString(16)}`}throw new Error(n)}}deleteTexture(t){this.gl.deleteTexture(t)}deleteProgram(t){this.gl.deleteProgram(t)}getEncoder(t,e,n=0){if(2===this.version)return new s.RedFloat32DataEncoder(this.gl,e);switch(t){case\"float\":return 1===n||this.isRenderFloat32Supported?new s.RGBAFloatDataEncoder(this.gl,e):new s.RGBAFloatDataEncoder(this.gl,e,this.textureHalfFloatExtension.HALF_FLOAT_OES);case\"int\":throw new Error(\"not implemented\");case\"byte\":return new s.Uint8DataEncoder(this.gl,e);default:throw new Error(`Invalid dataType: ${t}`)}}clearActiveTextures(){const t=this.gl;for(let e=0;e<this.maxTextureImageUnits;++e)t.activeTexture(t.TEXTURE0+e),t.bindTexture(t.TEXTURE_2D,null)}dispose(){if(this.disposed)return;const t=this.gl;t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteFramebuffer(this.framebuffer),t.bindBuffer(t.ARRAY_BUFFER,null),t.deleteBuffer(this.vertexbuffer),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.finish(),this.disposed=!0}createDefaultGeometry(){return new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0])}createVertexbuffer(){const t=this.gl,e=t.createBuffer();if(!e)throw new Error(\"createBuffer() returned null\");const n=this.createDefaultGeometry();return t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW),this.checkError(),e}createFramebuffer(){const t=this.gl.createFramebuffer();if(!t)throw new Error(\"createFramebuffer returned null\");return t}queryVitalParameters(){const t=this.gl;if(this.isFloatTextureAttachableToFrameBuffer=this.checkFloatTextureAttachableToFrameBuffer(),this.isRenderFloat32Supported=this.checkRenderFloat32(),this.isFloat32DownloadSupported=this.checkFloat32Download(),1===this.version&&!this.textureHalfFloatExtension&&!this.isRenderFloat32Supported)throw new Error(\"both float32 and float16 TextureType are not supported\");this.isBlendSupported=!this.isRenderFloat32Supported||this.checkFloat32Blend(),this.maxTextureSize=t.getParameter(t.MAX_TEXTURE_SIZE),this.maxTextureImageUnits=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),this.version}getExtensions(){2===this.version?(this.colorBufferFloatExtension=this.gl.getExtension(\"EXT_color_buffer_float\"),this.disjointTimerQueryWebgl2Extension=this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\")):(this.textureFloatExtension=this.gl.getExtension(\"OES_texture_float\"),this.textureHalfFloatExtension=this.gl.getExtension(\"OES_texture_half_float\"))}checkFloatTextureAttachableToFrameBuffer(){const t=this.gl,e=t.createTexture();t.bindTexture(t.TEXTURE_2D,e);const n=2===this.version?t.RGBA32F:t.RGBA;t.texImage2D(t.TEXTURE_2D,0,n,1,1,0,t.RGBA,t.FLOAT,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0);const i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(e),t.deleteFramebuffer(r),i}checkRenderFloat32(){if(2===this.version){if(!this.colorBufferFloatExtension)return!1}else if(!this.textureFloatExtension)return!1;return this.isFloatTextureAttachableToFrameBuffer}checkFloat32Download(){if(2===this.version){if(!this.colorBufferFloatExtension)return!1}else{if(!this.textureFloatExtension)return!1;if(!this.gl.getExtension(\"WEBGL_color_buffer_float\"))return!1}return this.isFloatTextureAttachableToFrameBuffer}checkFloat32Blend(){const t=this.gl;let e,n,r,i,o;try{e=t.createTexture(),n=t.createFramebuffer(),t.bindTexture(t.TEXTURE_2D,e);const a=2===this.version?t.RGBA32F:t.RGBA;return t.texImage2D(t.TEXTURE_2D,0,a,1,1,0,t.RGBA,t.FLOAT,null),t.bindFramebuffer(t.FRAMEBUFFER,n),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0),t.enable(t.BLEND),r=t.createShader(t.VERTEX_SHADER),!!r&&(t.shaderSource(r,\"void main(){}\"),t.compileShader(r),i=t.createShader(t.FRAGMENT_SHADER),!!i&&(t.shaderSource(i,\"precision highp float;void main(){gl_FragColor=vec4(0.5);}\"),t.compileShader(i),o=t.createProgram(),!!o&&(t.attachShader(o,r),t.attachShader(o,i),t.linkProgram(o),t.useProgram(o),t.drawArrays(t.POINTS,0,1),t.getError()===t.NO_ERROR)))}finally{t.disable(t.BLEND),o&&t.deleteProgram(o),r&&t.deleteShader(r),i&&t.deleteShader(i),n&&(t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteFramebuffer(n)),e&&(t.bindTexture(t.TEXTURE_2D,null),t.deleteTexture(e))}}beginTimer(){if(2===this.version&&this.disjointTimerQueryWebgl2Extension){const t=this.gl,e=this.disjointTimerQueryWebgl2Extension,n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}throw new Error(\"WebGL1 profiling currently not supported.\")}endTimer(){if(2!==this.version||!this.disjointTimerQueryWebgl2Extension)throw new Error(\"WebGL1 profiling currently not supported\");{const t=this.gl,e=this.disjointTimerQueryWebgl2Extension;t.endQuery(e.TIME_ELAPSED_EXT)}}isTimerResultAvailable(t){let e=!1,n=!1;if(2!==this.version||!this.disjointTimerQueryWebgl2Extension)throw new Error(\"WebGL1 profiling currently not supported\");{const r=this.gl,i=this.disjointTimerQueryWebgl2Extension;e=r.getQueryParameter(t,r.QUERY_RESULT_AVAILABLE),n=r.getParameter(i.GPU_DISJOINT_EXT)}return e&&!n}getTimerResult(t){let e=0;if(2!==this.version)throw new Error(\"WebGL1 profiling currently not supported\");{const n=this.gl;e=n.getQueryParameter(t,n.QUERY_RESULT),n.deleteQuery(t)}return e/1e6}async waitForQueryAndGetTime(t){return await(0,u.repeatedTry)((()=>this.isTimerResultAvailable(t))),this.getTimerResult(t)}async createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e;const n=t,r=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);return t.flush(),e=null===r?()=>!0:()=>{const t=n.clientWaitSync(r,0,0);return t===n.ALREADY_SIGNALED||t===n.CONDITION_SATISFIED},{query:r,isFencePassed:e}}async pollFence(t){return new Promise((e=>{this.addItemToPoll((()=>t.isFencePassed()),(()=>e()))}))}pollItems(){const t=c(this.itemsToPoll.map((t=>t.isDoneFn)));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}async addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||await(0,u.repeatedTry)((()=>(this.pollItems(),0===this.itemsToPoll.length)))}}},1036:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.ExecutionPlan=void 0;const r=n(6231);class i{constructor(t,e){this.op=t,this.node=e}}e.ExecutionPlan=class{constructor(t,e,n){this.graph=t,this.profiler=n,this.initialize(e)}initialize(t){this.profiler.event(\"session\",\"ExecutionPlan.initialize\",(()=>{const e=this.graph.getNodes();if(e.length!==t.length)throw new Error(\"The size of nodes and OPs do not match.\");this._ops=t.map(((t,n)=>new i(t,e[n]))),this.reset(),this._starter=[],this._ops.forEach(((t,e)=>{let n=!0;for(const e of t.node.inputs)if(!this._values[e]&&-1===this.graph.getInputIndices().indexOf(e)){n=!1;break}n&&this._starter.push(e)}))}))}reset(){this._values=this.graph.getValues().map((t=>t.tensor))}async execute(t,e){return this.profiler.event(\"session\",\"ExecutionPlan.execute\",(async()=>{this.reset();const n=t.createInferenceHandler(),i=this.graph.getInputIndices();if(e.length!==i.length)throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${e.length} expected: ${i.length}`);e.forEach(((t,e)=>{const n=i[e];this._values[n]=t}));const o=this._starter.slice(0),a=this.graph.getValues(),s=this.graph.getNodes();let u=0;for(;u<o.length;){const t=o[u++],e=this._ops[t],i=e.node.inputs.map((t=>this._values[t]));if(-1!==i.indexOf(void 0))throw new Error(`unresolved input detected: op: ${e.node}`);const c=i;r.Logger.verbose(\"ExecPlan\",`Runing op:${e.node.name} (${c.map(((t,n)=>`'${e.node.inputs[n]}': ${t.type}[${t.dims.join(\",\")}]`)).join(\", \")})`);const l=await this.profiler.event(\"node\",e.node.name,(async()=>e.op.impl(n,c,e.op.context)));if(l.length!==e.node.outputs.length)throw new Error(\"the size of output does not match model definition.\");l.forEach(((t,n)=>{const r=e.node.outputs[n];if(this._values[r])throw new Error(`output [${r}] already has value: op:${e.node.name}`);this._values[r]=t}));const p=new Set;l.forEach(((t,n)=>{const r=e.node.outputs[n];for(const t of a[r].to){const e=s[t];let n=!0;for(const t of e.inputs)if(!this._values[t]){n=!1;break}n&&p.add(t)}})),o.push(...p)}const c=[];for(let t=0;t<this.graph.getOutputIndices().length;t++){const e=this.graph.getOutputIndices()[t],n=this._values[e];if(void 0===n)throw new Error(`required output [${e}] does not have value`);0===e?await n.getData():n.data,c.push(n)}return r.Logger.verbose(\"ExecPlan\",\"disposing of inferenceHandler\"),n.dispose(),c}))}}},7070:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.Graph=void 0;const r=n(1446),i=n(7778),o=n(9395),a=n(9162),s=n(2517);var u=o.onnxruntime.experimental.fbs;e.Graph={from:(t,e)=>new p(t,e)};class c{constructor(t){this._from=void 0,this._to=[],this.tensor=void 0,this.type=void 0,t&&(this.type=s.ProtoUtil.tensorValueTypeFromProto(t.type.tensorType))}get from(){return this._from}get to(){return this._to}}class l{constructor(t,e){t instanceof r.onnx.NodeProto?(this.name=t.name,this.opType=t.opType,this.attributes=new i.Attribute(t.attribute)):t instanceof u.Node&&(this.name=null!=e?e:t.name(),this.opType=t.opType(),this.attributes=new i.Attribute(s.ProtoUtil.tensorAttributesFromORTFormat(t))),this.inputs=[],this.outputs=[],this.executeNode=!0}}class p{constructor(t,e){if(!t)throw new TypeError(\"graph is empty\");this.buildGraph(t),this.transformGraph(e),this.checkIsAcyclic()}getInputIndices(){return this._allInputIndices}getInputNames(){return this._allInputNames}getOutputIndices(){return this._allOutputIndices}getOutputNames(){return this._allOutputNames}getValues(){return this._allData}getNodes(){return this._nodes}buildGraph(t){if(t instanceof r.onnx.GraphProto)this.buildGraphFromOnnxFormat(t);else{if(!(t instanceof u.Graph))throw new TypeError(\"Graph type is not supported.\");this.buildGraphFromOrtFormat(t)}}buildGraphFromOnnxFormat(t){const e=new Map;this._allData=[],this._allInputIndices=[],this._allInputNames=[],this._allOutputIndices=[],this._allOutputNames=[],this._nodes=[];const n=new Map;if(!t.input)throw new Error(\"missing information in graph: input\");const r=[];for(const n of t.input){if(e.has(n.name))throw new Error(`duplicated input name: ${n.name}`);const t=this._allData.push(new c(n))-1;e.set(n.name,t),r.push(n.name)}if(!t.initializer)throw new Error(\"missing information in graph: initializer\");for(const n of t.initializer){let t=e.get(n.name);if(void 0===t){const r=new c;r.type={shape:{dims:s.ProtoUtil.tensorDimsFromProto(n.dims)},tensorType:s.ProtoUtil.tensorDataTypeFromProto(n.dataType)},t=this._allData.push(r)-1,e.set(n.name,t)}this._allData[t]._from=-1,this._allData[t].tensor=a.Tensor.fromProto(n)}for(let t=0;t<this._allData.length;t++)this._allData[t].tensor||(this._allInputIndices.push(t),this._allInputNames.push(r[t]));if(!t.output)throw new Error(\"missing information in graph: output\");for(const n of t.output){if(e.has(n.name))throw new Error(`duplicated output name: ${n.name}`);const t=this._allData.push(new c(n))-1;e.set(n.name,t),this._allOutputIndices.push(t),this._allOutputNames.push(n.name)}if(!t.node)throw new Error(\"missing information in graph: node\");for(const e of t.node){if(!e.name)for(let t=0;;t++){const r=`unnamed_${e.opType}_${t}`;if(!n.has(r)){e.name=r;break}}if(n.has(e.name))throw new Error(`duplicated node name: ${e.name}`);const t=this._nodes.push(new l(e))-1;n.set(e.name,t)}for(let n=0;n<this._nodes.length;n++){const r=this._nodes[n],i=t.node[n];if(!i.output)throw new Error(`missing output for node: ${i.name}`);for(const t of i.output){let o=e.get(t);if(void 0===o&&(o=this._allData.push(new c)-1,e.set(t,o)),r.outputs.push(o),void 0!==this._allData[o]._from)throw new Error(`multiple nodes output to one data value: ${o}`);if(this._allData[o]._from=n,\"Constant\"===i.opType){if(!i.attribute||1!==i.attribute.length||!i.attribute[0].t)throw new Error(\"missing attributes or missing tensor value in attributes for this Constant operator\");if(!i.output||1!==i.output.length)throw new Error(\"missing output or incorrect number of outputs for this Constant operator\");r.outputs.pop(),r.executeNode=!1,this._allData[o]._from=-1,this._allData[o].tensor=a.Tensor.fromProto(i.attribute[0].t)}}}for(let n=0;n<this._nodes.length;n++){const r=this._nodes[n],i=t.node[n];if(!i.input)throw new Error(`missing input for node: ${i.name}`);for(const t of i.input){const o=e.get(t);if(void 0===o){if(\"\"===t&&3===i.input.length&&\"Resize\"===i.opType)continue;throw new Error(`unrecognized input '${t}' for node: ${i.name}`)}r.inputs.push(o),this._allData[o]._to.push(n)}}return!0}buildGraphFromOrtFormat(t){var e,n,r;const i=new Map;this._allData=[],this._allInputIndices=[],this._allInputNames=[],this._allOutputIndices=[],this._allOutputNames=[],this._nodes=[];const o=new Map,p=[];for(let o=0;o<t.inputsLength();o++){const a=t.inputs(o);if(i.has(a))throw new Error(`duplicated input name: ${a}`);for(let o=0;o<t.nodeArgsLength();o++)if((null===(e=t.nodeArgs(o))||void 0===e?void 0:e.name())===a){const e=new c;if((null===(r=null===(n=t.nodeArgs(o))||void 0===n?void 0:n.type())||void 0===r?void 0:r.valueType())!==u.TypeInfoValue.tensor_type)throw new Error(\"Unexpected value type for the nodeArg.\");const l=t.nodeArgs(o).type().value(new u.TensorTypeAndShape),f=s.ProtoUtil.tensorDataTypeFromProto(l.elemType()),d=l.shape(),h=[];for(let t=0;t<d.dimLength();t++)h.push(s.LongUtil.longToNumber(d.dim(t).value().dimValue()));e.type={shape:{dims:h},tensorType:f};const g=this._allData.push(e)-1;i.set(a,g),p.push(a)}}for(let e=0;e<t.initializersLength();e++){const n=t.initializers(e);let r=i.get(n.name());if(void 0===r){const t=new c,e=s.ProtoUtil.tensorDimsFromORTFormat(n),o=s.ProtoUtil.tensorDataTypeFromProto(n.dataType());t.type={shape:{dims:e},tensorType:o},r=this._allData.push(t)-1,i.set(n.name(),r)}this._allData[r]._from=-1,this._allData[r].tensor=a.Tensor.fromOrtTensor(n)}for(let t=0;t<this._allData.length;t++)this._allData[t].tensor||(this._allInputIndices.push(t),this._allInputNames.push(p[t]));for(let e=0;e<t.outputsLength();e++){const n=t.outputs(e);if(i.has(n))throw new Error(`duplicated output name: ${n}`);const r=this._allData.push(new c)-1;i.set(n,r),this._allOutputIndices.push(r),this._allOutputNames.push(n)}if(!t.nodes)throw new Error(\"missing information in graph: node\");for(let e=0;e<t.nodesLength();e++){const n=t.nodes(e);let r=n.name();if(!r)for(let t=0;r=`unnamed_${n.opType()}_${t}`,o.has(r);t++);if(o.has(r))throw new Error(`duplicated node name: ${r}`);const i=this._nodes.push(new l(n,r))-1;o.set(r,i)}for(let e=0;e<this._nodes.length;e++){const n=this._nodes[e],r=t.nodes(e);if(null==r)throw new Error(`No node exists at index ${e}`);if(0===(null==r?void 0:r.outputsLength()))throw new Error(`missing output for node: ${r.name}`);for(let t=0;t<(null==r?void 0:r.outputsLength());t++){const o=null==r?void 0:r.outputs(t);let s=i.get(o);if(void 0===s&&(s=this._allData.push(new c)-1,i.set(o,s)),n.outputs.push(s),void 0!==this._allData[s]._from)throw new Error(`multiple nodes output to one data value: ${s}`);if(this._allData[s]._from=e,\"Constant\"===r.opType()){if(1!==r.attributesLength()||!r.attributes(0).t())throw new Error(\"missing attributes or missing tensor value in attributes for this Constant operator\");if(1!==r.outputsLength())throw new Error(\"missing output or incorrect number of outputs for this Constant operator\");n.outputs.pop(),n.executeNode=!1,this._allData[s]._from=-1,this._allData[s].tensor=a.Tensor.fromOrtTensor(r.attributes(0).t())}}}for(let e=0;e<this._nodes.length;e++){const n=this._nodes[e],r=t.nodes(e);if(0===r.inputsLength())throw new Error(`missing input for node: ${r.name}`);for(let t=0;t<r.inputsLength();t++){const o=r.inputs(t),a=i.get(o);if(void 0===a)throw new Error(`unrecognized input '${o}' for node: ${r.name()}`);n.inputs.push(a),this._allData[a]._to.push(e)}}}checkIsAcyclic(){const t=new Set;this._allInputIndices.forEach((e=>{this._allData[e]._to.forEach((e=>{t.add(e)}))}));const e=Array.from(t),n=new Array(this._nodes.length).fill(\"white\");for(;e.length>0;){const t=e.pop();\"gray\"===n[t]?n[t]=\"black\":(e.push(t),n[t]=\"gray\",this._nodes[t].outputs.forEach((r=>{const i=this._allData[r];if(void 0!==i.tensor)throw new Error(\"node outputs should not be initialized\");if(i._from!==t)throw new Error(\"from property of the Value object doesn't match index of Node being processed\");i._to.forEach((t=>{if(\"gray\"===n[t])throw new Error(\"model graph is cyclic\");\"white\"===n[t]&&e.push(t)}))})))}}transformGraph(t){this.removeAllIdentityNodes(),this.removeAllDropoutNodes(),this.fuseConvActivationNodes(),t&&t.transformGraph(this),this.finalizeGraph()}finalizeGraph(){let t=0;for(let e=0;e<this._nodes.length;e++)this._nodes[e].executeNode?t>0&&(this._nodes[e].inputs.forEach((n=>{const r=this._allData[n]._to.indexOf(e+t);-1!==r&&(this._allData[n]._to[r]=e)})),this._nodes[e].outputs.forEach((n=>{this._allData[n]._from&&this._allData[n]._from===e+t&&(this._allData[n]._from=e)}))):(t++,this._nodes[e].outputs.forEach((t=>{this._allData[t]._from=-2})),this._nodes.splice(e,1),e--);t=0;for(let e=0;e<this._allData.length;e++)if(-2!==this._allData[e].from||-1!==this._allOutputIndices.indexOf(e+t)){if(t>0){let n=-1;void 0!==this._allData[e].from&&-1!==this._allData[e].from?(n=this._nodes[this._allData[e].from].outputs.indexOf(e+t),-1!==n&&(this._nodes[this._allData[e].from].outputs[n]=e)):(n=this._allInputIndices.indexOf(e+t),-1!==n&&(this._allInputIndices[n]=e)),this._allData[e].to.forEach((r=>{n=this._nodes[r].inputs.indexOf(e+t),-1!==n&&(this._nodes[r].inputs[n]=e)})),0===this._allData[e].to.length&&(n=this._allOutputIndices.indexOf(e+t),-1!==n&&(this._allOutputIndices[n]=e))}}else t++,this._allData.splice(e,1),e--}deleteNode(t){const e=this._nodes[t];if(e.outputs.length>1)for(let t=1;t<e.outputs.length;t++)if(this._allData[e.outputs[t]].to.length>0)throw new Error(\"Node deletion with more than one output connected to other nodes is not supported. \");e.executeNode=!1;const n=e.inputs[0],r=e.outputs[0],i=this._allData[r].to,o=this._allData[n].to.indexOf(t);if(-1===o)throw new Error(\"The Value object doesn't have the current Node in it's 'to' property \");this._allData[n].to.splice(o,1),this._allData[r]._to=[];const a=this._allOutputIndices.indexOf(r);if(-1!==a&&(this._allOutputIndices[a]=n),i&&i.length>0)for(const t of i){const e=this._nodes[t].inputs.indexOf(r);if(-1===e)throw new Error(\"The Node object doesn't have the output Value in it's 'inputs' property \");this._nodes[t].inputs[e]=n,this._allData[n].to.push(t)}}removeAllDropoutNodes(){let t=0;for(const e of this._nodes){if(\"Dropout\"===e.opType){if(1!==e.inputs.length)throw new Error(\"Dropout nodes should only contain one input. \");if(1!==e.outputs.length&&2!==e.outputs.length)throw new Error(\"Dropout nodes should contain either 1 or 2 output(s)\");if(2===e.outputs.length&&0!==this._allData[e.outputs[1]]._to.length)throw new Error(\"Dropout nodes's second output should not be referenced by other nodes\");this.deleteNode(t)}t++}}removeAllIdentityNodes(){let t=0;for(const e of this._nodes)\"Identity\"===e.opType&&this.deleteNode(t),t++}isActivation(t){switch(t.opType){case\"Relu\":case\"Sigmoid\":case\"Clip\":return!0;default:return!1}}fuseConvActivationNodes(){for(const t of this._nodes)if(\"Conv\"===t.opType){const e=this._allData[t.outputs[0]]._to;if(1===e.length&&this.isActivation(this._nodes[e[0]])){const n=this._nodes[e[0]];if(\"Clip\"===n.opType)if(1===n.inputs.length)try{t.attributes.set(\"activation_params\",\"floats\",[n.attributes.getFloat(\"min\"),n.attributes.getFloat(\"max\")])}catch(e){t.attributes.set(\"activation_params\",\"floats\",[s.MIN_CLIP,s.MAX_CLIP])}else{if(!(n.inputs.length>=3&&void 0!==this._allData[n.inputs[1]].tensor&&void 0!==this._allData[n.inputs[2]].tensor))continue;t.attributes.set(\"activation_params\",\"floats\",[this._allData[n.inputs[1]].tensor.floatData[0],this._allData[n.inputs[2]].tensor.floatData[0]])}t.attributes.set(\"activation\",\"string\",n.opType),this.deleteNode(e[0])}}}}},6231:(t,e)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.now=e.Profiler=e.Logger=void 0;const n={verbose:1e3,info:2e3,warning:4e3,error:5e3,fatal:6e3},r={none:new class{log(t,e,n){}},console:new class{log(t,e,n){console.log(`${this.color(t)} ${n?\"\u001b[35m\"+n+\"\u001b[0m \":\"\"}${e}`)}color(t){switch(t){case\"verbose\":return\"\u001b[34;40mv\u001b[0m\";case\"info\":return\"\u001b[32mi\u001b[0m\";case\"warning\":return\"\u001b[30;43mw\u001b[0m\";case\"error\":return\"\u001b[31;40me\u001b[0m\";case\"fatal\":return\"\u001b[101mf\u001b[0m\";default:throw new Error(`unsupported severity: ${t}`)}}}},i={provider:\"console\",minimalSeverity:\"warning\",logDateTime:!0,logSourceLocation:!1};let o={\"\":i};function a(t,e,n,r){if(void 0===e)return i=t,{verbose:a.verbose.bind(null,i),info:a.info.bind(null,i),warning:a.warning.bind(null,i),error:a.error.bind(null,i),fatal:a.fatal.bind(null,i)};if(void 0===n)s(t,e);else if(\"number\"==typeof n&&void 0===r)s(t,e);else if(\"string\"==typeof n&&void 0===r)s(t,n,0,e);else{if(\"string\"!=typeof n||\"number\"!=typeof r)throw new TypeError(\"input is valid\");s(t,n,0,e)}var i}function s(t,e,i,a){const s=o[a||\"\"]||o[\"\"];n[t]<n[s.minimalSeverity]||(s.logDateTime&&(e=`${(new Date).toISOString()}|${e}`),s.logSourceLocation,r[s.provider].log(t,e,a))}!function(t){function e(t){o={},n(\"\",t||{})}function n(t,n){if(\"*\"===t)e(n);else{const e=o[t]||i;o[t]={provider:n.provider||e.provider,minimalSeverity:n.minimalSeverity||e.minimalSeverity,logDateTime:void 0===n.logDateTime?e.logDateTime:n.logDateTime,logSourceLocation:void 0===n.logSourceLocation?e.logSourceLocation:n.logSourceLocation}}}t.verbose=function(e,n){t(\"verbose\",e,n)},t.info=function(e,n){t(\"info\",e,n)},t.warning=function(e,n){t(\"warning\",e,n)},t.error=function(e,n){t(\"error\",e,n)},t.fatal=function(e,n){t(\"fatal\",e,n)},t.reset=e,t.set=n,t.setWithEnv=function(t){const e={};t.logLevel&&(e.minimalSeverity=t.logLevel),n(\"\",e)}}(a||(a={})),e.Logger=a;class u{constructor(t,e,n,r,i,o){this.category=t,this.name=e,this.startTime=n,this.endCallback=r,this.timer=i,this.ctx=o}end(){return this.endCallback(this)}async checkTimer(){if(void 0===this.ctx||void 0===this.timer)throw new Error(\"No webgl timer found\");return this.ctx.endTimer(),this.ctx.waitForQueryAndGetTime(this.timer)}}class c{constructor(t,e,n,r){this.category=t,this.name=e,this.startTime=n,this.endTime=r}}e.Profiler=class{static create(t){return void 0===t?new this:new this(t.maxNumberEvents,t.flushBatchSize,t.flushIntervalInMilliseconds)}constructor(t,e,n){this._started=!1,this._flushPointer=0,this._started=!1,this._maxNumberEvents=void 0===t?1e4:t,this._flushBatchSize=void 0===e?10:e,this._flushIntervalInMilliseconds=void 0===n?5e3:n}start(){this._started=!0,this._timingEvents=[],this._flushTime=(0,e.now)(),this._flushPointer=0}stop(){for(this._started=!1;this._flushPointer<this._timingEvents.length;this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer])}event(t,e,n,r){const i=this._started?this.begin(t,e,r):void 0;let o=!1;const a=n();if(a&&\"function\"==typeof a.then)return o=!0,new Promise(((t,e)=>{a.then((async e=>{i&&await i.end(),t(e)}),(async t=>{i&&await i.end(),e(t)}))}));if(!o&&i){const t=i.end();if(t&&\"function\"==typeof t.then)return new Promise(((e,n)=>{t.then((()=>{e(a)}),(t=>{n(t)}))}))}return a}begin(t,n,r){if(!this._started)throw new Error(\"profiler is not started yet\");if(void 0===r){const r=(0,e.now)();return this.flush(r),new u(t,n,r,(t=>this.endSync(t)))}{const e=r.beginTimer();return new u(t,n,0,(async t=>this.end(t)),e,r)}}async end(t){const e=await t.checkTimer();this._timingEvents.length<this._maxNumberEvents&&(this._timingEvents.push(new c(t.category,t.name,t.startTime,e)),this.flush(e))}endSync(t){const n=(0,e.now)();this._timingEvents.length<this._maxNumberEvents&&(this._timingEvents.push(new c(t.category,t.name,t.startTime,n)),this.flush(n))}logOneEvent(t){e.Logger.verbose(`Profiler.${t.category}`,`${(t.endTime-t.startTime).toFixed(2)}ms on event '${t.name}' at ${t.endTime.toFixed(2)}`)}flush(t){if(this._timingEvents.length-this._flushPointer>=this._flushBatchSize||t-this._flushTime>=this._flushIntervalInMilliseconds){for(const t=this._flushPointer;this._flushPointer<t+this._flushBatchSize&&this._flushPointer<this._timingEvents.length;this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer]);this._flushTime=(0,e.now)()}}get started(){return this._started}},e.now=\"undefined\"!=typeof performance&&performance.now?()=>performance.now():Date.now},2644:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.Model=void 0;const r=n(5686),i=n(1446),o=n(7070),a=n(9395),s=n(2517);var u=a.onnxruntime.experimental.fbs;e.Model=class{constructor(){}load(t,e,n){if(!n)try{return void this.loadFromOnnxFormat(t,e)}catch(t){if(void 0!==n)throw t}this.loadFromOrtFormat(t,e)}loadFromOnnxFormat(t,e){const n=i.onnx.ModelProto.decode(t);if(s.LongUtil.longToNumber(n.irVersion)<3)throw new Error(\"only support ONNX model with IR_VERSION>=3\");this._opsets=n.opsetImport.map((t=>({domain:t.domain,version:s.LongUtil.longToNumber(t.version)}))),this._graph=o.Graph.from(n.graph,e)}loadFromOrtFormat(t,e){const n=new r.flatbuffers.ByteBuffer(t),i=u.InferenceSession.getRootAsInferenceSession(n).model();if(s.LongUtil.longToNumber(i.irVersion())<3)throw new Error(\"only support ONNX model with IR_VERSION>=3\");this._opsets=[];for(let t=0;t<i.opsetImportLength();t++){const e=i.opsetImport(t);this._opsets.push({domain:null==e?void 0:e.domain(),version:s.LongUtil.longToNumber(e.version())})}this._graph=o.Graph.from(i.graph(),e)}get graph(){return this._graph}get opsets(){return this._opsets}}},782:(t,e)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.FLOAT_TYPES=e.INT_TYPES=e.NUMBER_TYPES=void 0,e.NUMBER_TYPES=[\"float32\",\"float64\",\"int32\",\"int16\",\"int8\",\"uint16\",\"uint32\",\"uint8\"],e.INT_TYPES=[\"int32\",\"int16\",\"int8\",\"uint16\",\"uint32\",\"uint8\"],e.FLOAT_TYPES=[\"float32\",\"float64\"]},1047:(t,e)=>{\"use strict\";function n(t,e){if(e.endsWith(\"+\")){const n=Number.parseInt(e.substring(0,e.length-1),10);return!isNaN(n)&&n<=t}if(2===e.split(\"-\").length){const n=e.split(\"-\"),r=Number.parseInt(n[0],10),i=Number.parseInt(n[1],10);return!isNaN(r)&&!isNaN(i)&&r<=t&&t<=i}return Number.parseInt(e,10)===t}Object.defineProperty(e,\"__esModule\",{value:!0}),e.resolveOperator=void 0,e.resolveOperator=function(t,e,r){for(const i of r){const r=i[0],o=i[1],a=i[2],s=i[3],u=i[4];if(t.opType===r)for(const t of e)if((t.domain===o||\"ai.onnx\"===t.domain&&\"\"===o)&&n(t.version,a))return{opImpl:s,opInit:u}}throw new TypeError(`cannot resolve operator '${t.opType}' with opsets: ${e.map((t=>`${t.domain||\"ai.onnx\"} v${t.version}`)).join(\", \")}`)}},9395:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.onnxruntime=void 0;const r=n(5686);var i,o;i=e.onnxruntime||(e.onnxruntime={}),function(t){let e;!function(t){t[t.UNDEFINED=0]=\"UNDEFINED\",t[t.FLOAT=1]=\"FLOAT\",t[t.INT=2]=\"INT\",t[t.STRING=3]=\"STRING\",t[t.TENSOR=4]=\"TENSOR\",t[t.GRAPH=5]=\"GRAPH\",t[t.FLOATS=6]=\"FLOATS\",t[t.INTS=7]=\"INTS\",t[t.STRINGS=8]=\"STRINGS\",t[t.TENSORS=9]=\"TENSORS\",t[t.GRAPHS=10]=\"GRAPHS\",t[t.SPARSE_TENSOR=11]=\"SPARSE_TENSOR\",t[t.SPARSE_TENSORS=12]=\"SPARSE_TENSORS\"}(e=t.AttributeType||(t.AttributeType={}))}((o=i.experimental||(i.experimental={})).fbs||(o.fbs={})),function(t){!function(t){!function(t){let e;!function(t){t[t.UNKNOWN=0]=\"UNKNOWN\",t[t.VALUE=1]=\"VALUE\",t[t.PARAM=2]=\"PARAM\"}(e=t.DimensionValueType||(t.DimensionValueType={}))}(t.fbs||(t.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(t){!function(t){let e;!function(t){t[t.UNDEFINED=0]=\"UNDEFINED\",t[t.FLOAT=1]=\"FLOAT\",t[t.UINT8=2]=\"UINT8\",t[t.INT8=3]=\"INT8\",t[t.UINT16=4]=\"UINT16\",t[t.INT16=5]=\"INT16\",t[t.INT32=6]=\"INT32\",t[t.INT64=7]=\"INT64\",t[t.STRING=8]=\"STRING\",t[t.BOOL=9]=\"BOOL\",t[t.FLOAT16=10]=\"FLOAT16\",t[t.DOUBLE=11]=\"DOUBLE\",t[t.UINT32=12]=\"UINT32\",t[t.UINT64=13]=\"UINT64\",t[t.COMPLEX64=14]=\"COMPLEX64\",t[t.COMPLEX128=15]=\"COMPLEX128\",t[t.BFLOAT16=16]=\"BFLOAT16\"}(e=t.TensorDataType||(t.TensorDataType={}))}(t.fbs||(t.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(t){!function(t){let e;!function(t){t[t.Primitive=0]=\"Primitive\",t[t.Fused=1]=\"Fused\"}(e=t.NodeType||(t.NodeType={}))}(t.fbs||(t.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(t){!function(t){let e;!function(t){t[t.NONE=0]=\"NONE\",t[t.tensor_type=1]=\"tensor_type\",t[t.sequence_type=2]=\"sequence_type\",t[t.map_type=3]=\"map_type\"}(e=t.TypeInfoValue||(t.TypeInfoValue={}))}(t.fbs||(t.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsShape(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsShape(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}dim(e,n){let r=this.bb.__offset(this.bb_pos,4);return r?(n||new t.experimental.fbs.Dimension).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}dimLength(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}static startShape(t){t.startObject(1)}static addDim(t,e){t.addFieldOffset(0,e,0)}static createDimVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startDimVector(t,e){t.startVector(4,e,4)}static endShape(t){return t.endObject()}static createShape(t,e){return n.startShape(t),n.addDim(t,e),n.endShape(t)}}e.Shape=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDimension(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDimension(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}value(e){let n=this.bb.__offset(this.bb_pos,4);return n?(e||new t.experimental.fbs.DimensionValue).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}denotation(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startDimension(t){t.startObject(2)}static addValue(t,e){t.addFieldOffset(0,e,0)}static addDenotation(t,e){t.addFieldOffset(1,e,0)}static endDimension(t){return t.endObject()}static createDimension(t,e,r){return n.startDimension(t),n.addValue(t,e),n.addDenotation(t,r),n.endDimension(t)}}e.Dimension=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDimensionValue(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDimensionValue(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}dimType(){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readInt8(this.bb_pos+e):t.experimental.fbs.DimensionValueType.UNKNOWN}dimValue(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}dimParam(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__string(this.bb_pos+e,t):null}static startDimensionValue(t){t.startObject(3)}static addDimType(e,n){e.addFieldInt8(0,n,t.experimental.fbs.DimensionValueType.UNKNOWN)}static addDimValue(t,e){t.addFieldInt64(1,e,t.createLong(0,0))}static addDimParam(t,e){t.addFieldOffset(2,e,0)}static endDimensionValue(t){return t.endObject()}static createDimensionValue(t,e,r,i){return n.startDimensionValue(t),n.addDimType(t,e),n.addDimValue(t,r),n.addDimParam(t,i),n.endDimensionValue(t)}}e.DimensionValue=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTensorTypeAndShape(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTensorTypeAndShape(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}elemType(){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readInt32(this.bb_pos+e):t.experimental.fbs.TensorDataType.UNDEFINED}shape(e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.Shape).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startTensorTypeAndShape(t){t.startObject(2)}static addElemType(e,n){e.addFieldInt32(0,n,t.experimental.fbs.TensorDataType.UNDEFINED)}static addShape(t,e){t.addFieldOffset(1,e,0)}static endTensorTypeAndShape(t){return t.endObject()}static createTensorTypeAndShape(t,e,r){return n.startTensorTypeAndShape(t),n.addElemType(t,e),n.addShape(t,r),n.endTensorTypeAndShape(t)}}e.TensorTypeAndShape=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMapType(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMapType(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}keyType(){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readInt32(this.bb_pos+e):t.experimental.fbs.TensorDataType.UNDEFINED}valueType(e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startMapType(t){t.startObject(2)}static addKeyType(e,n){e.addFieldInt32(0,n,t.experimental.fbs.TensorDataType.UNDEFINED)}static addValueType(t,e){t.addFieldOffset(1,e,0)}static endMapType(t){return t.endObject()}static createMapType(t,e,r){return n.startMapType(t),n.addKeyType(t,e),n.addValueType(t,r),n.endMapType(t)}}e.MapType=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSequenceType(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSequenceType(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}elemType(e){let n=this.bb.__offset(this.bb_pos,4);return n?(e||new t.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startSequenceType(t){t.startObject(1)}static addElemType(t,e){t.addFieldOffset(0,e,0)}static endSequenceType(t){return t.endObject()}static createSequenceType(t,e){return n.startSequenceType(t),n.addElemType(t,e),n.endSequenceType(t)}}e.SequenceType=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(t){(t.fbs||(t.fbs={})).EdgeEnd=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}nodeIndex(){return this.bb.readUint32(this.bb_pos)}srcArgIndex(){return this.bb.readInt32(this.bb_pos+4)}dstArgIndex(){return this.bb.readInt32(this.bb_pos+8)}static createEdgeEnd(t,e,n,r){return t.prep(4,12),t.writeInt32(r),t.writeInt32(n),t.writeInt32(e),t.offset()}}}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNodeEdge(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNodeEdge(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}nodeIndex(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readUint32(this.bb_pos+t):0}inputEdges(e,n){let r=this.bb.__offset(this.bb_pos,6);return r?(n||new t.experimental.fbs.EdgeEnd).__init(this.bb.__vector(this.bb_pos+r)+12*e,this.bb):null}inputEdgesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}outputEdges(e,n){let r=this.bb.__offset(this.bb_pos,8);return r?(n||new t.experimental.fbs.EdgeEnd).__init(this.bb.__vector(this.bb_pos+r)+12*e,this.bb):null}outputEdgesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}static startNodeEdge(t){t.startObject(3)}static addNodeIndex(t,e){t.addFieldInt32(0,e,0)}static addInputEdges(t,e){t.addFieldOffset(1,e,0)}static startInputEdgesVector(t,e){t.startVector(12,e,4)}static addOutputEdges(t,e){t.addFieldOffset(2,e,0)}static startOutputEdgesVector(t,e){t.startVector(12,e,4)}static endNodeEdge(t){return t.endObject()}static createNodeEdge(t,e,r,i){return n.startNodeEdge(t),n.addNodeIndex(t,e),n.addInputEdges(t,r),n.addOutputEdges(t,i),n.endNodeEdge(t)}}e.NodeEdge=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNode(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNode(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}docString(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}domain(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__string(this.bb_pos+e,t):null}sinceVersion(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt32(this.bb_pos+t):0}index(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.readUint32(this.bb_pos+t):0}opType(t){let e=this.bb.__offset(this.bb_pos,14);return e?this.bb.__string(this.bb_pos+e,t):null}type(){let e=this.bb.__offset(this.bb_pos,16);return e?this.bb.readInt32(this.bb_pos+e):t.experimental.fbs.NodeType.Primitive}executionProviderType(t){let e=this.bb.__offset(this.bb_pos,18);return e?this.bb.__string(this.bb_pos+e,t):null}inputs(t,e){let n=this.bb.__offset(this.bb_pos,20);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}inputsLength(){let t=this.bb.__offset(this.bb_pos,20);return t?this.bb.__vector_len(this.bb_pos+t):0}outputs(t,e){let n=this.bb.__offset(this.bb_pos,22);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}outputsLength(){let t=this.bb.__offset(this.bb_pos,22);return t?this.bb.__vector_len(this.bb_pos+t):0}attributes(e,n){let r=this.bb.__offset(this.bb_pos,24);return r?(n||new t.experimental.fbs.Attribute).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}attributesLength(){let t=this.bb.__offset(this.bb_pos,24);return t?this.bb.__vector_len(this.bb_pos+t):0}inputArgCounts(t){let e=this.bb.__offset(this.bb_pos,26);return e?this.bb.readInt32(this.bb.__vector(this.bb_pos+e)+4*t):0}inputArgCountsLength(){let t=this.bb.__offset(this.bb_pos,26);return t?this.bb.__vector_len(this.bb_pos+t):0}inputArgCountsArray(){let t=this.bb.__offset(this.bb_pos,26);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}implicitInputs(t,e){let n=this.bb.__offset(this.bb_pos,28);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}implicitInputsLength(){let t=this.bb.__offset(this.bb_pos,28);return t?this.bb.__vector_len(this.bb_pos+t):0}static startNode(t){t.startObject(13)}static addName(t,e){t.addFieldOffset(0,e,0)}static addDocString(t,e){t.addFieldOffset(1,e,0)}static addDomain(t,e){t.addFieldOffset(2,e,0)}static addSinceVersion(t,e){t.addFieldInt32(3,e,0)}static addIndex(t,e){t.addFieldInt32(4,e,0)}static addOpType(t,e){t.addFieldOffset(5,e,0)}static addType(e,n){e.addFieldInt32(6,n,t.experimental.fbs.NodeType.Primitive)}static addExecutionProviderType(t,e){t.addFieldOffset(7,e,0)}static addInputs(t,e){t.addFieldOffset(8,e,0)}static createInputsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startInputsVector(t,e){t.startVector(4,e,4)}static addOutputs(t,e){t.addFieldOffset(9,e,0)}static createOutputsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startOutputsVector(t,e){t.startVector(4,e,4)}static addAttributes(t,e){t.addFieldOffset(10,e,0)}static createAttributesVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startAttributesVector(t,e){t.startVector(4,e,4)}static addInputArgCounts(t,e){t.addFieldOffset(11,e,0)}static createInputArgCountsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startInputArgCountsVector(t,e){t.startVector(4,e,4)}static addImplicitInputs(t,e){t.addFieldOffset(12,e,0)}static createImplicitInputsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startImplicitInputsVector(t,e){t.startVector(4,e,4)}static endNode(t){return t.endObject()}static createNode(t,e,r,i,o,a,s,u,c,l,p,f,d,h){return n.startNode(t),n.addName(t,e),n.addDocString(t,r),n.addDomain(t,i),n.addSinceVersion(t,o),n.addIndex(t,a),n.addOpType(t,s),n.addType(t,u),n.addExecutionProviderType(t,c),n.addInputs(t,l),n.addOutputs(t,p),n.addAttributes(t,f),n.addInputArgCounts(t,d),n.addImplicitInputs(t,h),n.endNode(t)}}e.Node=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsValueInfo(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsValueInfo(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}docString(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}type(e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new t.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startValueInfo(t){t.startObject(3)}static addName(t,e){t.addFieldOffset(0,e,0)}static addDocString(t,e){t.addFieldOffset(1,e,0)}static addType(t,e){t.addFieldOffset(2,e,0)}static endValueInfo(t){return t.endObject()}static createValueInfo(t,e,r,i){return n.startValueInfo(t),n.addName(t,e),n.addDocString(t,r),n.addType(t,i),n.endValueInfo(t)}}e.ValueInfo=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTypeInfo(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTypeInfo(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}denotation(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}valueType(){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readUint8(this.bb_pos+e):t.experimental.fbs.TypeInfoValue.NONE}value(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__union(t,this.bb_pos+e):null}static startTypeInfo(t){t.startObject(3)}static addDenotation(t,e){t.addFieldOffset(0,e,0)}static addValueType(e,n){e.addFieldInt8(1,n,t.experimental.fbs.TypeInfoValue.NONE)}static addValue(t,e){t.addFieldOffset(2,e,0)}static endTypeInfo(t){return t.endObject()}static createTypeInfo(t,e,r,i){return n.startTypeInfo(t),n.addDenotation(t,e),n.addValueType(t,r),n.addValue(t,i),n.endTypeInfo(t)}}e.TypeInfo=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(t){!function(t){class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsOperatorSetId(t,n){return(n||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsOperatorSetId(t,n){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(n||new e).__init(t.readInt32(t.position())+t.position(),t)}domain(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}version(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}static startOperatorSetId(t){t.startObject(2)}static addDomain(t,e){t.addFieldOffset(0,e,0)}static addVersion(t,e){t.addFieldInt64(1,e,t.createLong(0,0))}static endOperatorSetId(t){return t.endObject()}static createOperatorSetId(t,n,r){return e.startOperatorSetId(t),e.addDomain(t,n),e.addVersion(t,r),e.endOperatorSetId(t)}}t.OperatorSetId=e}(t.fbs||(t.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTensor(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTensor(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}docString(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}dims(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+8*t):this.bb.createLong(0,0)}dimsLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}dataType(){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readInt32(this.bb_pos+e):t.experimental.fbs.TensorDataType.UNDEFINED}rawData(t){let e=this.bb.__offset(this.bb_pos,12);return e?this.bb.readUint8(this.bb.__vector(this.bb_pos+e)+t):0}rawDataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}rawDataArray(){let t=this.bb.__offset(this.bb_pos,12);return t?new Uint8Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}stringData(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}stringDataLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}static startTensor(t){t.startObject(6)}static addName(t,e){t.addFieldOffset(0,e,0)}static addDocString(t,e){t.addFieldOffset(1,e,0)}static addDims(t,e){t.addFieldOffset(2,e,0)}static createDimsVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startDimsVector(t,e){t.startVector(8,e,8)}static addDataType(e,n){e.addFieldInt32(3,n,t.experimental.fbs.TensorDataType.UNDEFINED)}static addRawData(t,e){t.addFieldOffset(4,e,0)}static createRawDataVector(t,e){t.startVector(1,e.length,1);for(let n=e.length-1;n>=0;n--)t.addInt8(e[n]);return t.endVector()}static startRawDataVector(t,e){t.startVector(1,e,1)}static addStringData(t,e){t.addFieldOffset(5,e,0)}static createStringDataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startStringDataVector(t,e){t.startVector(4,e,4)}static endTensor(t){return t.endObject()}static createTensor(t,e,r,i,o,a,s){return n.startTensor(t),n.addName(t,e),n.addDocString(t,r),n.addDims(t,i),n.addDataType(t,o),n.addRawData(t,a),n.addStringData(t,s),n.endTensor(t)}}e.Tensor=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSparseTensor(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSparseTensor(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}values(e){let n=this.bb.__offset(this.bb_pos,4);return n?(e||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}indices(e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}dims(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+8*t):this.bb.createLong(0,0)}dimsLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSparseTensor(t){t.startObject(3)}static addValues(t,e){t.addFieldOffset(0,e,0)}static addIndices(t,e){t.addFieldOffset(1,e,0)}static addDims(t,e){t.addFieldOffset(2,e,0)}static createDimsVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startDimsVector(t,e){t.startVector(8,e,8)}static endSparseTensor(t){return t.endObject()}static createSparseTensor(t,e,r,i){return n.startSparseTensor(t),n.addValues(t,e),n.addIndices(t,r),n.addDims(t,i),n.endSparseTensor(t)}}e.SparseTensor=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsAttribute(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsAttribute(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}docString(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}type(){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.readInt32(this.bb_pos+e):t.experimental.fbs.AttributeType.UNDEFINED}f(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readFloat32(this.bb_pos+t):0}i(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}s(t){let e=this.bb.__offset(this.bb_pos,14);return e?this.bb.__string(this.bb_pos+e,t):null}t(e){let n=this.bb.__offset(this.bb_pos,16);return n?(e||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}g(e){let n=this.bb.__offset(this.bb_pos,18);return n?(e||new t.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}floats(t){let e=this.bb.__offset(this.bb_pos,20);return e?this.bb.readFloat32(this.bb.__vector(this.bb_pos+e)+4*t):0}floatsLength(){let t=this.bb.__offset(this.bb_pos,20);return t?this.bb.__vector_len(this.bb_pos+t):0}floatsArray(){let t=this.bb.__offset(this.bb_pos,20);return t?new Float32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}ints(t){let e=this.bb.__offset(this.bb_pos,22);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+8*t):this.bb.createLong(0,0)}intsLength(){let t=this.bb.__offset(this.bb_pos,22);return t?this.bb.__vector_len(this.bb_pos+t):0}strings(t,e){let n=this.bb.__offset(this.bb_pos,24);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}stringsLength(){let t=this.bb.__offset(this.bb_pos,24);return t?this.bb.__vector_len(this.bb_pos+t):0}tensors(e,n){let r=this.bb.__offset(this.bb_pos,26);return r?(n||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}tensorsLength(){let t=this.bb.__offset(this.bb_pos,26);return t?this.bb.__vector_len(this.bb_pos+t):0}graphs(e,n){let r=this.bb.__offset(this.bb_pos,28);return r?(n||new t.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}graphsLength(){let t=this.bb.__offset(this.bb_pos,28);return t?this.bb.__vector_len(this.bb_pos+t):0}static startAttribute(t){t.startObject(13)}static addName(t,e){t.addFieldOffset(0,e,0)}static addDocString(t,e){t.addFieldOffset(1,e,0)}static addType(e,n){e.addFieldInt32(2,n,t.experimental.fbs.AttributeType.UNDEFINED)}static addF(t,e){t.addFieldFloat32(3,e,0)}static addI(t,e){t.addFieldInt64(4,e,t.createLong(0,0))}static addS(t,e){t.addFieldOffset(5,e,0)}static addT(t,e){t.addFieldOffset(6,e,0)}static addG(t,e){t.addFieldOffset(7,e,0)}static addFloats(t,e){t.addFieldOffset(8,e,0)}static createFloatsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addFloat32(e[n]);return t.endVector()}static startFloatsVector(t,e){t.startVector(4,e,4)}static addInts(t,e){t.addFieldOffset(9,e,0)}static createIntsVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startIntsVector(t,e){t.startVector(8,e,8)}static addStrings(t,e){t.addFieldOffset(10,e,0)}static createStringsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startStringsVector(t,e){t.startVector(4,e,4)}static addTensors(t,e){t.addFieldOffset(11,e,0)}static createTensorsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startTensorsVector(t,e){t.startVector(4,e,4)}static addGraphs(t,e){t.addFieldOffset(12,e,0)}static createGraphsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startGraphsVector(t,e){t.startVector(4,e,4)}static endAttribute(t){return t.endObject()}static createAttribute(t,e,r,i,o,a,s,u,c,l,p,f,d,h){return n.startAttribute(t),n.addName(t,e),n.addDocString(t,r),n.addType(t,i),n.addF(t,o),n.addI(t,a),n.addS(t,s),n.addT(t,u),n.addG(t,c),n.addFloats(t,l),n.addInts(t,p),n.addStrings(t,f),n.addTensors(t,d),n.addGraphs(t,h),n.endAttribute(t)}}e.Attribute=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsGraph(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsGraph(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}initializers(e,n){let r=this.bb.__offset(this.bb_pos,4);return r?(n||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}initializersLength(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}nodeArgs(e,n){let r=this.bb.__offset(this.bb_pos,6);return r?(n||new t.experimental.fbs.ValueInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}nodeArgsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}nodes(e,n){let r=this.bb.__offset(this.bb_pos,8);return r?(n||new t.experimental.fbs.Node).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}maxNodeIndex(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readUint32(this.bb_pos+t):0}nodeEdges(e,n){let r=this.bb.__offset(this.bb_pos,12);return r?(n||new t.experimental.fbs.NodeEdge).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}nodeEdgesLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}inputs(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}inputsLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}outputs(t,e){let n=this.bb.__offset(this.bb_pos,16);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}outputsLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}sparseInitializers(e,n){let r=this.bb.__offset(this.bb_pos,18);return r?(n||new t.experimental.fbs.SparseTensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}sparseInitializersLength(){let t=this.bb.__offset(this.bb_pos,18);return t?this.bb.__vector_len(this.bb_pos+t):0}static startGraph(t){t.startObject(8)}static addInitializers(t,e){t.addFieldOffset(0,e,0)}static createInitializersVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startInitializersVector(t,e){t.startVector(4,e,4)}static addNodeArgs(t,e){t.addFieldOffset(1,e,0)}static createNodeArgsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startNodeArgsVector(t,e){t.startVector(4,e,4)}static addNodes(t,e){t.addFieldOffset(2,e,0)}static createNodesVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startNodesVector(t,e){t.startVector(4,e,4)}static addMaxNodeIndex(t,e){t.addFieldInt32(3,e,0)}static addNodeEdges(t,e){t.addFieldOffset(4,e,0)}static createNodeEdgesVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startNodeEdgesVector(t,e){t.startVector(4,e,4)}static addInputs(t,e){t.addFieldOffset(5,e,0)}static createInputsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startInputsVector(t,e){t.startVector(4,e,4)}static addOutputs(t,e){t.addFieldOffset(6,e,0)}static createOutputsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startOutputsVector(t,e){t.startVector(4,e,4)}static addSparseInitializers(t,e){t.addFieldOffset(7,e,0)}static createSparseInitializersVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startSparseInitializersVector(t,e){t.startVector(4,e,4)}static endGraph(t){return t.endObject()}static createGraph(t,e,r,i,o,a,s,u,c){return n.startGraph(t),n.addInitializers(t,e),n.addNodeArgs(t,r),n.addNodes(t,i),n.addMaxNodeIndex(t,o),n.addNodeEdges(t,a),n.addInputs(t,s),n.addOutputs(t,u),n.addSparseInitializers(t,c),n.endGraph(t)}}e.Graph=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsModel(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsModel(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}irVersion(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}opsetImport(e,n){let r=this.bb.__offset(this.bb_pos,6);return r?(n||new t.experimental.fbs.OperatorSetId).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}opsetImportLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}producerName(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__string(this.bb_pos+e,t):null}producerVersion(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.__string(this.bb_pos+e,t):null}domain(t){let e=this.bb.__offset(this.bb_pos,12);return e?this.bb.__string(this.bb_pos+e,t):null}modelVersion(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}docString(t){let e=this.bb.__offset(this.bb_pos,16);return e?this.bb.__string(this.bb_pos+e,t):null}graph(e){let n=this.bb.__offset(this.bb_pos,18);return n?(e||new t.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}graphDocString(t){let e=this.bb.__offset(this.bb_pos,20);return e?this.bb.__string(this.bb_pos+e,t):null}static startModel(t){t.startObject(9)}static addIrVersion(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addOpsetImport(t,e){t.addFieldOffset(1,e,0)}static createOpsetImportVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startOpsetImportVector(t,e){t.startVector(4,e,4)}static addProducerName(t,e){t.addFieldOffset(2,e,0)}static addProducerVersion(t,e){t.addFieldOffset(3,e,0)}static addDomain(t,e){t.addFieldOffset(4,e,0)}static addModelVersion(t,e){t.addFieldInt64(5,e,t.createLong(0,0))}static addDocString(t,e){t.addFieldOffset(6,e,0)}static addGraph(t,e){t.addFieldOffset(7,e,0)}static addGraphDocString(t,e){t.addFieldOffset(8,e,0)}static endModel(t){return t.endObject()}static createModel(t,e,r,i,o,a,s,u,c,l){return n.startModel(t),n.addIrVersion(t,e),n.addOpsetImport(t,r),n.addProducerName(t,i),n.addProducerVersion(t,o),n.addDomain(t,a),n.addModelVersion(t,s),n.addDocString(t,u),n.addGraph(t,c),n.addGraphDocString(t,l),n.endModel(t)}}e.Model=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(t){!function(t){class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsKernelCreateInfos(t,n){return(n||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKernelCreateInfos(t,n){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(n||new e).__init(t.readInt32(t.position())+t.position(),t)}nodeIndices(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readUint32(this.bb.__vector(this.bb_pos+e)+4*t):0}nodeIndicesLength(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}nodeIndicesArray(){let t=this.bb.__offset(this.bb_pos,4);return t?new Uint32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}kernelDefHashes(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readUint64(this.bb.__vector(this.bb_pos+e)+8*t):this.bb.createLong(0,0)}kernelDefHashesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}static startKernelCreateInfos(t){t.startObject(2)}static addNodeIndices(t,e){t.addFieldOffset(0,e,0)}static createNodeIndicesVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startNodeIndicesVector(t,e){t.startVector(4,e,4)}static addKernelDefHashes(t,e){t.addFieldOffset(1,e,0)}static createKernelDefHashesVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startKernelDefHashesVector(t,e){t.startVector(8,e,8)}static endKernelCreateInfos(t){return t.endObject()}static createKernelCreateInfos(t,n,r){return e.startKernelCreateInfos(t),e.addNodeIndices(t,n),e.addKernelDefHashes(t,r),e.endKernelCreateInfos(t)}}t.KernelCreateInfos=e}(t.fbs||(t.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSubGraphSessionState(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSubGraphSessionState(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}graphId(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}sessionState(e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.SessionState).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startSubGraphSessionState(t){t.startObject(2)}static addGraphId(t,e){t.addFieldOffset(0,e,0)}static addSessionState(t,e){t.addFieldOffset(1,e,0)}static endSubGraphSessionState(t){let e=t.endObject();return t.requiredField(e,4),e}static createSubGraphSessionState(t,e,r){return n.startSubGraphSessionState(t),n.addGraphId(t,e),n.addSessionState(t,r),n.endSubGraphSessionState(t)}}e.SubGraphSessionState=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSessionState(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSessionState(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}kernels(e){let n=this.bb.__offset(this.bb_pos,4);return n?(e||new t.experimental.fbs.KernelCreateInfos).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}subGraphSessionStates(e,n){let r=this.bb.__offset(this.bb_pos,6);return r?(n||new t.experimental.fbs.SubGraphSessionState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*e),this.bb):null}subGraphSessionStatesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSessionState(t){t.startObject(2)}static addKernels(t,e){t.addFieldOffset(0,e,0)}static addSubGraphSessionStates(t,e){t.addFieldOffset(1,e,0)}static createSubGraphSessionStatesVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startSubGraphSessionStatesVector(t,e){t.startVector(4,e,4)}static endSessionState(t){return t.endObject()}static createSessionState(t,e,r){return n.startSessionState(t),n.addKernels(t,e),n.addSubGraphSessionStates(t,r),n.endSessionState(t)}}e.SessionState=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={})),function(t){!function(e){!function(e){class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInferenceSession(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInferenceSession(t,e){return t.setPosition(t.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static bufferHasIdentifier(t){return t.__has_identifier(\"ORTM\")}ortVersion(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}model(e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.Model).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}sessionState(e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new t.experimental.fbs.SessionState).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startInferenceSession(t){t.startObject(3)}static addOrtVersion(t,e){t.addFieldOffset(0,e,0)}static addModel(t,e){t.addFieldOffset(1,e,0)}static addSessionState(t,e){t.addFieldOffset(2,e,0)}static endInferenceSession(t){return t.endObject()}static finishInferenceSessionBuffer(t,e){t.finish(e,\"ORTM\")}static finishSizePrefixedInferenceSessionBuffer(t,e){t.finish(e,\"ORTM\",!0)}static createInferenceSession(t,e,r,i){return n.startInferenceSession(t),n.addOrtVersion(t,e),n.addModel(t,r),n.addSessionState(t,i),n.endInferenceSession(t)}}e.InferenceSession=n}(e.fbs||(e.fbs={}))}(t.experimental||(t.experimental={}))}(e.onnxruntime||(e.onnxruntime={}))},7448:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.OnnxjsSessionHandler=void 0;const r=n(1670),i=n(9162);e.OnnxjsSessionHandler=class{constructor(t){this.session=t,this.inputNames=this.session.inputNames,this.outputNames=this.session.outputNames}async dispose(){}async run(t,e,n){const o=new Map;for(const e in t)if(Object.hasOwnProperty.call(t,e)){const n=t[e];o.set(e,new i.Tensor(n.dims,n.type,void 0,void 0,n.data))}const a=await this.session.run(o),s={};return a.forEach(((t,e)=>{s[e]=new r.Tensor(t.type,t.data,t.dims)})),s}startProfiling(){this.session.startProfiling()}endProfiling(){this.session.endProfiling()}}},6919:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.Session=void 0;const r=n(7067),i=n(1296),o=n(7091),a=n(1036),s=n(6231),u=n(2644);e.Session=class{constructor(t={}){this._initialized=!1,this.backendHint=t.backendHint,this.profiler=s.Profiler.create(t.profiler),this.context={profiler:this.profiler,graphInputTypes:[],graphInputDims:[]}}get inputNames(){return this._model.graph.getInputNames()}get outputNames(){return this._model.graph.getOutputNames()}startProfiling(){this.profiler.start()}endProfiling(){this.profiler.stop()}async loadModel(t,e,n){await this.profiler.event(\"session\",\"Session.loadModel\",(async()=>{const a=await(0,o.resolveBackend)(this.backendHint);if(this.sessionHandler=a.createSessionHandler(this.context),this._model=new u.Model,\"string\"==typeof t){const e=t.endsWith(\".ort\");if(\"undefined\"==typeof fetch){const n=await(0,i.promisify)(r.readFile)(t);this.initialize(n,e)}else{const n=await fetch(t),r=await n.arrayBuffer();this.initialize(new Uint8Array(r),e)}}else if(ArrayBuffer.isView(t))this.initialize(t);else{const r=new Uint8Array(t,e||0,n||t.byteLength);this.initialize(r)}}))}initialize(t,e){if(this._initialized)throw new Error(\"already initialized\");this.profiler.event(\"session\",\"Session.initialize\",(()=>{const n=this.sessionHandler.transformGraph?this.sessionHandler:void 0;this._model.load(t,n,e),this.sessionHandler.onGraphInitialized&&this.sessionHandler.onGraphInitialized(this._model.graph),this.initializeOps(this._model.graph),this._executionPlan=new a.ExecutionPlan(this._model.graph,this._ops,this.profiler)})),this._initialized=!0}async run(t){if(!this._initialized)throw new Error(\"session not initialized yet\");return this.profiler.event(\"session\",\"Session.run\",(async()=>{const e=this.normalizeAndValidateInputs(t),n=await this._executionPlan.execute(this.sessionHandler,e);return this.createOutput(n)}))}normalizeAndValidateInputs(t){const e=this._model.graph.getInputNames();if(Array.isArray(t)){if(t.length!==e.length)throw new Error(`incorrect input array length: expected ${e.length} but got ${t.length}`)}else{if(t.size!==e.length)throw new Error(`incorrect input map size: expected ${e.length} but got ${t.size}`);const n=new Array(t.size);let r=0;for(let i=0;i<e.length;++i){const o=t.get(e[i]);if(!o)throw new Error(`missing input tensor for: '${name}'`);n[r++]=o}t=n}if(this.context.graphInputTypes&&0!==this.context.graphInputTypes.length&&this.context.graphInputDims&&0!==this.context.graphInputDims.length)this.validateInputTensorDims(this.context.graphInputDims,t,!1);else{const e=this._model.graph.getInputIndices(),n=this._model.graph.getValues(),r=new Array(e.length);for(let i=0;i<e.length;++i){const o=n[e[i]];r[i]=o.type.shape.dims,this.context.graphInputTypes.push(o.type.tensorType),this.context.graphInputDims.push(t[i].dims)}this.validateInputTensorDims(r,t,!0)}return this.validateInputTensorTypes(this.context.graphInputTypes,t),t}validateInputTensorTypes(t,e){for(let n=0;n<e.length;n++){const r=t[n],i=e[n].type;if(r!==i)throw new Error(`input tensor[${n}] check failed: expected type '${r}' but got ${i}`)}}validateInputTensorDims(t,e,n){for(let r=0;r<e.length;r++){const i=t[r],o=e[r].dims;if(!this.compareTensorDims(i,o,n))throw new Error(`input tensor[${r}] check failed: expected shape '[${i.join(\",\")}]' but got [${o.join(\",\")}]`)}}compareTensorDims(t,e,n){if(t.length!==e.length)return!1;for(let r=0;r<t.length;++r)if(t[r]!==e[r]&&(!n||0!==t[r]))return!1;return!0}createOutput(t){const e=this._model.graph.getOutputNames();if(t.length!==e.length)throw new Error(\"expected number of outputs do not match number of generated outputs\");const n=new Map;for(let r=0;r<e.length;++r)n.set(e[r],t[r]);return n}initializeOps(t){const e=t.getNodes();this._ops=new Array(e.length);for(let n=0;n<e.length;n++)this._ops[n]=this.sessionHandler.resolve(e[n],this._model.opsets,t)}}},9162:function(t,e,n){\"use strict\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\"__esModule\",{value:!0}),e.Tensor=void 0;const i=n(3442),o=r(n(3720)),a=n(1446),s=n(9395),u=n(2517);var c=s.onnxruntime.experimental.fbs;class l{get data(){if(void 0===this.cache){const t=this.dataProvider(this.dataId);if(t.length!==this.size)throw new Error(\"Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.\");this.cache=t}return this.cache}get stringData(){if(\"string\"!==this.type)throw new TypeError(\"data type is not string\");return this.data}get integerData(){switch(this.type){case\"uint8\":case\"int8\":case\"uint16\":case\"int16\":case\"int32\":case\"uint32\":case\"bool\":return this.data;default:throw new TypeError(\"data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)\")}}get floatData(){switch(this.type){case\"float32\":case\"float64\":return this.data;default:throw new TypeError(\"data type is not float (float32, float64)\")}}get numberData(){if(\"string\"!==this.type)return this.data;throw new TypeError(\"type cannot be non-number (string)\")}get(t){return this.data[u.ShapeUtil.indicesToOffset(t,this.strides)]}set(t,e){this.data[u.ShapeUtil.indicesToOffset(t,this.strides)]=e}async getData(){return void 0===this.cache&&(this.cache=await this.asyncDataProvider(this.dataId)),this.cache}get strides(){return this._strides||(this._strides=u.ShapeUtil.computeStrides(this.dims)),this._strides}constructor(t,e,n,r,o,a=i.Guid.create()){this.dims=t,this.type=e,this.dataProvider=n,this.asyncDataProvider=r,this.cache=o,this.dataId=a,this.size=u.ShapeUtil.validateDimsAndCalcSize(t);const s=this.size,c=void 0===n&&void 0===r&&void 0===o;if(void 0!==o&&o.length!==s)throw new RangeError(\"Input dims doesn't match data length.\");if(\"string\"===e){if(!(void 0===o||Array.isArray(o)&&o.every((t=>\"string\"==typeof t))))throw new TypeError(\"cache should be a string array\");c&&(this.cache=new Array(s))}else{if(void 0!==o){const t=f(e);if(!(o instanceof t))throw new TypeError(`cache should be type ${t.name}`)}if(c){const t=new ArrayBuffer(s*function(t){switch(t){case\"bool\":case\"int8\":case\"uint8\":return 1;case\"int16\":case\"uint16\":return 2;case\"int32\":case\"uint32\":case\"float32\":return 4;case\"float64\":return 8;default:throw new Error(`cannot calculate sizeof() on type ${t}`)}}(e));this.cache=function(t,e){return new(f(e))(t)}(t,e)}}}static fromProto(t){if(!t)throw new Error(\"cannot construct Value from an empty tensor\");const e=u.ProtoUtil.tensorDataTypeFromProto(t.dataType),n=u.ProtoUtil.tensorDimsFromProto(t.dims),r=new l(n,e);if(\"string\"===e)t.stringData.forEach(((t,e)=>{r.data[e]=(0,u.decodeUtf8String)(t)}));else if(t.rawData&&\"number\"==typeof t.rawData.byteLength&&t.rawData.byteLength>0){const e=r.data,n=new DataView(t.rawData.buffer,t.rawData.byteOffset,t.rawData.byteLength),i=p(t.dataType),o=t.rawData.byteLength/i;if(t.rawData.byteLength%i!=0)throw new Error(\"invalid buffer length\");if(e.length!==o)throw new Error(\"buffer length mismatch\");for(let r=0;r<o;r++){const o=h(n,t.dataType,r*i);e[r]=o}}else{let e;switch(t.dataType){case a.onnx.TensorProto.DataType.FLOAT:e=t.floatData;break;case a.onnx.TensorProto.DataType.INT32:case a.onnx.TensorProto.DataType.INT16:case a.onnx.TensorProto.DataType.UINT16:case a.onnx.TensorProto.DataType.INT8:case a.onnx.TensorProto.DataType.UINT8:case a.onnx.TensorProto.DataType.BOOL:e=t.int32Data;break;case a.onnx.TensorProto.DataType.INT64:e=t.int64Data;break;case a.onnx.TensorProto.DataType.DOUBLE:e=t.doubleData;break;case a.onnx.TensorProto.DataType.UINT32:case a.onnx.TensorProto.DataType.UINT64:e=t.uint64Data;break;default:throw new Error(\"unspecific error\")}if(null==e)throw new Error(\"failed to populate data from a tensorproto value\");const n=r.data;if(n.length!==e.length)throw new Error(\"array length mismatch\");for(let r=0;r<e.length;r++){const i=e[r];o.default.isLong(i)?n[r]=d(i,t.dataType):n[r]=i}}return r}static fromData(t,e,n){return new l(e,n,void 0,void 0,t)}static fromOrtTensor(t){if(!t)throw new Error(\"cannot construct Value from an empty tensor\");const e=u.ProtoUtil.tensorDimsFromORTFormat(t),n=u.ProtoUtil.tensorDataTypeFromProto(t.dataType()),r=new l(e,n);if(\"string\"===n)for(let e=0;e<t.stringDataLength();e++)r.data[e]=t.stringData(e);else if(t.rawDataArray()&&\"number\"==typeof t.rawDataLength()&&t.rawDataLength()>0){const e=r.data,n=new DataView(t.rawDataArray().buffer,t.rawDataArray().byteOffset,t.rawDataLength()),i=p(t.dataType()),o=t.rawDataLength()/i;if(t.rawDataLength()%i!=0)throw new Error(\"invalid buffer length\");if(e.length!==o)throw new Error(\"buffer length mismatch\");for(let r=0;r<o;r++){const o=h(n,t.dataType(),r*i);e[r]=o}}return r}}function p(t){switch(t){case a.onnx.TensorProto.DataType.UINT8:case a.onnx.TensorProto.DataType.INT8:case a.onnx.TensorProto.DataType.BOOL:return 1;case a.onnx.TensorProto.DataType.UINT16:case a.onnx.TensorProto.DataType.INT16:return 2;case a.onnx.TensorProto.DataType.FLOAT:case a.onnx.TensorProto.DataType.INT32:case a.onnx.TensorProto.DataType.UINT32:return 4;case a.onnx.TensorProto.DataType.INT64:case a.onnx.TensorProto.DataType.DOUBLE:case a.onnx.TensorProto.DataType.UINT64:return 8;default:throw new Error(`cannot calculate sizeof() on type ${a.onnx.TensorProto.DataType[t]}`)}}function f(t){switch(t){case\"bool\":case\"uint8\":return Uint8Array;case\"int8\":return Int8Array;case\"int16\":return Int16Array;case\"uint16\":return Uint16Array;case\"int32\":return Int32Array;case\"uint32\":return Uint32Array;case\"float32\":return Float32Array;case\"float64\":return Float64Array;default:throw new Error(\"unspecified error\")}}function d(t,e){if(e===a.onnx.TensorProto.DataType.INT64||e===c.TensorDataType.INT64){if(t.greaterThanOrEqual(2147483648)||t.lessThan(-2147483648))throw new TypeError(\"int64 is not supported\")}else{if(e!==a.onnx.TensorProto.DataType.UINT32&&e!==c.TensorDataType.UINT32&&e!==a.onnx.TensorProto.DataType.UINT64&&e!==c.TensorDataType.UINT64)throw new TypeError(`not a LONG type: ${a.onnx.TensorProto.DataType[e]}`);if(t.greaterThanOrEqual(4294967296)||t.lessThan(0))throw new TypeError(\"uint64 is not supported\")}return t.toNumber()}function h(t,e,n){switch(e){case a.onnx.TensorProto.DataType.BOOL:case a.onnx.TensorProto.DataType.UINT8:return t.getUint8(n);case a.onnx.TensorProto.DataType.INT8:return t.getInt8(n);case a.onnx.TensorProto.DataType.UINT16:return t.getUint16(n,!0);case a.onnx.TensorProto.DataType.INT16:return t.getInt16(n,!0);case a.onnx.TensorProto.DataType.FLOAT:return t.getFloat32(n,!0);case a.onnx.TensorProto.DataType.INT32:return t.getInt32(n,!0);case a.onnx.TensorProto.DataType.UINT32:return t.getUint32(n,!0);case a.onnx.TensorProto.DataType.INT64:return d(o.default.fromBits(t.getUint32(n,!0),t.getUint32(n+4,!0),!1),e);case a.onnx.TensorProto.DataType.DOUBLE:return t.getFloat64(n,!0);case a.onnx.TensorProto.DataType.UINT64:return d(o.default.fromBits(t.getUint32(n,!0),t.getUint32(n+4,!0),!0),e);default:throw new Error(`cannot read from DataView for type ${a.onnx.TensorProto.DataType[e]}`)}}e.Tensor=l},2517:function(t,e,n){\"use strict\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\"__esModule\",{value:!0}),e.decodeUtf8String=e.MAX_CLIP=e.MIN_CLIP=e.PoolConvUtil=e.ReduceUtil=e.SplitUtil=e.MathUtil=e.ShapeUtil=e.LongUtil=e.ProtoUtil=e.GemmUtil=e.arrayCopyHelper=e.BroadcastUtil=e.MatMulUtil=e.ArrayUtil=e.assert=e.checkInputsShape=void 0;const i=n(5686),o=r(n(3720)),a=n(1446),s=n(9162);e.checkInputsShape=function(t,...e){if(!t||t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(!t[n].dims||t[n].dims.length!==e[n])return!1;return!0},e.assert=function(t,e){if(!t)throw new Error(\"string\"==typeof e?e:e())},e.ArrayUtil=class{static arraysEqual(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}};class u{static preprocessInputShapes(t,e){return[1===t.length?[1,t[0]]:t,1===e.length?[e[0],1]:e]}static postprocessOutputShape(t,e,n){1===e&&t.splice(t.length-2,1),1===n&&t.pop()}static calcMatMulShape(t,e){return t[1]!==e[0]?void 0:[t[0],e[1]]}}e.MatMulUtil=u;class c{static calcShape(t,e,n=!1){const r=t.length,i=e.length;if(0===r)return e;if(0===i)return t;const o=Math.max(t.length,e.length),a=new Array(o);if(n){if(r<2||i<2)return;const n=u.calcMatMulShape([t[r-2],t[r-1]],[e[i-2],e[i-1]]);if(void 0===n)return;[a[o-2],a[o-1]]=n}for(let s=n?3:1;s<=o;s++){const n=r-s<0?1:t[r-s],u=i-s<0?1:e[i-s];if(n!==u&&n>1&&u>1)return;a[o-s]=Math.max(n,u)}return a}static index(t,e){const n=new Array(e.length);return c.fillIndex(t,e,n),n}static fillIndex(t,e,n){const r=t.length-e.length;for(let i=0;i<e.length;i++)n[i]=t[r+i]%e[i]}static calc(t,e,n,r,i){const o=c.calcShape(t.dims,e.dims);if(o){if(r&&!f.areEqual(o,t.dims))return;const a=f.size(o),u=r?t:new s.Tensor(o,i||t.type);if(0===o.length)u.set([],n(t.get([]),e.get([])));else{const r=new Array(o.length),i=new Array(t.dims.length),s=new Array(e.dims.length);let l,p=0,f=0,d=!1,h=!1;0===t.dims.length&&(p=t.get([]),d=!0),0===e.dims.length&&(f=e.get([]),h=!0);for(let g=0;g<a;g++){l=g;for(let t=o.length-1;t>=0;t--)r[t]=l%o[t],l=Math.floor(l/o[t]);d||(c.fillIndex(r,t.dims,i),p=t.get(i)),h||(c.fillIndex(r,e.dims,s),f=e.get(s)),u.set(r,n(p,f))}}return u}}static isValidBroadcast(t,e){const n=t.length,r=e.length;if(n>r)return!1;for(let i=1;i<=n;i++)if(1!==t[n-i]&&t[n-i]!==e[r-i])return!1;return!0}static getBroadcastDims(t,e){const n=t.length,r=[];for(let i=0;i<n;i++){const o=n-1-i,a=t[o]||1;(e[e.length-1-i]||1)>1&&1===a&&r.unshift(o)}return r}}e.BroadcastUtil=c,e.arrayCopyHelper=function(t,e,n,r,i){if(r<0||r>=e.length)throw new Error(\"sourceIndex out of bounds\");if(n<0||n>=t.length)throw new Error(\"targetIndex out of bounds\");if(r+i>e.length)throw new Error(\"source indices to be copied are outside bounds\");if(n+i>t.length)throw new Error(\"target array is too small to hold result\");for(let o=0;o<i;o++)t[n+o]=e[r+o]},e.GemmUtil=class{static getShapeOfGemmResult(t,e,n,r,i){if(2!==t.length||2!==n.length)throw new Error(\"shape need to be of size 2\");let o,a,s;e?(o=t[1],a=t[0]):(o=t[0],a=t[1]);let u=-1;if(r?(s=n[0],u=1):(s=n[1],u=0),n[u]!==a)throw new Error(\"dimension mismatch\");if(o<=0||s<=0||a<=0)throw new Error(\"invalid shape specified\");if(i&&!c.isValidBroadcast(i,[o,s]))throw new Error(\"gemm: invalid bias shape for broadcast\");return[o,s,a]}};class l{static tensorDataTypeFromProto(t){switch(t){case a.onnx.TensorProto.DataType.INT8:return\"int8\";case a.onnx.TensorProto.DataType.UINT8:return\"uint8\";case a.onnx.TensorProto.DataType.BOOL:return\"bool\";case a.onnx.TensorProto.DataType.INT16:return\"int16\";case a.onnx.TensorProto.DataType.UINT16:return\"uint16\";case a.onnx.TensorProto.DataType.INT32:return\"int32\";case a.onnx.TensorProto.DataType.UINT32:return\"uint32\";case a.onnx.TensorProto.DataType.FLOAT:return\"float32\";case a.onnx.TensorProto.DataType.DOUBLE:return\"float64\";case a.onnx.TensorProto.DataType.STRING:return\"string\";case a.onnx.TensorProto.DataType.INT64:return\"int32\";case a.onnx.TensorProto.DataType.UINT64:return\"uint32\";default:throw new Error(`unsupported data type: ${a.onnx.TensorProto.DataType[t]}`)}}static tensorDataTypeStringToEnum(t){switch(t){case\"int8\":return a.onnx.TensorProto.DataType.INT8;case\"uint8\":return a.onnx.TensorProto.DataType.UINT8;case\"bool\":return a.onnx.TensorProto.DataType.BOOL;case\"int16\":return a.onnx.TensorProto.DataType.INT16;case\"uint16\":return a.onnx.TensorProto.DataType.UINT16;case\"int32\":return a.onnx.TensorProto.DataType.INT32;case\"uint32\":return a.onnx.TensorProto.DataType.UINT32;case\"float32\":return a.onnx.TensorProto.DataType.FLOAT;case\"float64\":return a.onnx.TensorProto.DataType.DOUBLE;case\"string\":return a.onnx.TensorProto.DataType.STRING;case\"int64\":return a.onnx.TensorProto.DataType.INT64;case\"uint64\":return a.onnx.TensorProto.DataType.UINT64;default:throw new Error(`unsupported data type: ${t}`)}}static tensorDimsFromProto(t){return t.map((t=>o.default.isLong(t)?t.toNumber():t))}static tensorValueTypeFromProto(t){return{tensorType:l.tensorDataTypeFromProto(t.elemType),shape:{dims:l.tensorDimsFromProto(t.shape.dim.map((t=>t.dimValue)))}}}static tensorDimsFromORTFormat(t){const e=[];for(let n=0;n<t.dimsLength();n++)e.push(p.longToNumber(t.dims(n)));return e}static tensorAttributesFromORTFormat(t){const e=[];for(let n=0;n<t.attributesLength();n++)e.push(t.attributes(n));return e}}e.ProtoUtil=l;class p{static longToNumber(t,e){return o.default.isLong(t)?t.toNumber():t instanceof i.flatbuffers.Long?o.default.fromValue({low:t.low,high:t.high,unsigned:null!=e&&e}).toNumber():t}static isLong(t){return o.default.isLong(t)||t instanceof i.flatbuffers.Long}}e.LongUtil=p;class f{static size(t){return f.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,e){if(e<0||e>t.length)throw new Error(`invalid dimension of ${e} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return f.getSizeFromDimensionRange(t,e,t.length)}static sizeToDimension(t,e){if(e<0||e>t.length)throw new Error(`invalid dimension of ${e} for sizeToDimension as Tensor has ${t.length} dimensions.`);return f.getSizeFromDimensionRange(t,0,e)}static getSizeFromDimensionRange(t,e,n){let r=1;for(let i=e;i<n;i++){if(t[i]<=0)throw new Error(\"cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.\");r*=t[i]}return r}static computeStrides(t){const e=t.length;if(0===e)return[];if(1===e)return[1];const n=new Array(e);n[e-1]=1,n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}static transpose(t){return t.slice().reverse()}static indicesToOffset(t,e,n){void 0===n&&(n=t.length);let r=0;for(let i=0;i<n;++i)r+=e[i]*t[i];return r}static offsetToIndices(t,e){const n=e.length;if(0===n)return[];if(1===n)return[t*e[0]];const r=new Array(e.length);for(let n=0;n<r.length-1;++n)r[n]=Math.floor(t/e[n]),t-=r[n]*e[n];return r[r.length-1]=t,r}static normalizeAxis(t,e){if(t<-e&&t>=e)throw new Error(\"unsupported axis for this operation.\");return t<0?t+e:t}static normalizeAxes(t,e){return t.map((t=>this.normalizeAxis(t,e)))}static incrementIndex(t,e,n){if(0===e.length||0===t.length)throw new Error(\"Index incrementing unsupported for scalar Tensor\");if(void 0===n)n=e.length;else if(n<=0||n>e.length)throw new Error(\"Incorrect axis to increment on\");for(let r=n-1;r>=0&&(t[r]++,!(t[r]<e[r]));--r)t[r]=0}static calculateReshapedDims(t,e){if(0===e.length){if(0===t.length||1===f.size(t))return[];throw new Error(\"cannot reshape to a scalar Tensor\")}const n=e.length,r=new Array(n);let i=-1,o=1;for(let a=0;a<n;a++){if(e[a]<-1)throw new Error(\"a dimension in shape hints cannot be less than -1\");if(-1===e[a]){if(-1!==i)throw new Error(\"at most one dimension in shape hints can be -1\");i=a}else{if(0===e[a]){if(a>=t.length)throw new Error(\"the dimension with value zero exceeds the dimension size of the input tensor\");r[a]=t[a]}else r[a]=e[a];o*=r[a]}}const a=f.size(t);if(-1!==i){if(a%o!=0)throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${t}] Output shape: [${e}]`);r[i]=a/o}else if(o!==a)throw new Error(\"reshapedDims and originalDims don't have matching sizes\");return r}static sortBasedOnPerm(t,e){return e?e.map((e=>t[e])):t.slice().reverse()}static padShape(t,e){const n=t.length;return t.map(((t,r)=>t+e[r]+e[r+n]))}static areEqual(t,e){return t.length===e.length&&t.every(((t,n)=>t===e[n]))}static validateDimsAndCalcSize(t){if(t.length>6)throw new TypeError(\"Only rank 0 to 6 is supported for tensor shape.\");let e=1;for(const n of t){if(!Number.isInteger(n))throw new TypeError(`Invalid shape: ${n} is not an integer`);if(n<0||n>2147483647)throw new TypeError(`Invalid shape: length ${n} is not allowed`);e*=n}return e}static flattenShape(t,e){e<0&&(e+=t.length);const n=t.reduce(((t,e)=>t*e),1),r=t.slice(e).reduce(((t,e)=>t*e),1);return[n/r,r]}static squeezeShape(t,e){const n=new Array;e=f.normalizeAxes(e,t.length);for(let r=0;r<t.length;r++){const i=e.indexOf(r)>=0;if(i&&1!==t[r])throw new Error(\"squeeze an axis of size different than 1\");(0===e.length&&t[r]>1||e.length>0&&!i)&&n.push(t[r])}return n}static unsqueezeShape(t,e){const n=new Array(t.length+e.length);n.fill(0);for(let t=0;t<e.length;t++){const r=f.normalizeAxis(e[t],n.length);if(r>=n.length)throw new Error(\"'axes' has an out of range axis\");if(0!==n[r])throw new Error(\"'axes' has a duplicate axis\");n[r]=1}let r=0;for(let e=0;e<n.length;e++)0===n[e]&&(n[e]=t[r++]);if(r!==t.length)throw new Error(\"the unsqueezed dimension could not be established\");return n}}e.ShapeUtil=f,e.MathUtil=class{static sqr(t,e,n,r,i){if(r<0||r>=e.length)throw new Error(\"sourceIndex out of bounds\");if(n<0||n>=t.length)throw new Error(\"targetIndex out of bounds\");if(r+i>e.length)throw new Error(\"source indices to be copied are outside bounds\");if(n+i>t.length)throw new Error(\"target array is too small to hold result\");for(let o=0;o<i;o++)t[n+o]+=Math.pow(e[r+o],2)}static axpy(t,e,n,r,i,o){if(r<0||r>=e.length)throw new Error(\"sourceIndex out of bounds\");if(n<0||n>=t.length)throw new Error(\"targetIndex out of bounds\");if(r+i>e.length)throw new Error(\"source indices to be copied are outside bounds\");if(n+i>t.length)throw new Error(\"target array is too small to hold result\");for(let a=0;a<i;a++)t[n+a]+=o*e[r+a]}static powx(t,e,n,r,i,o){if(r<0||r>=e.length)throw new Error(\"sourceIndex out of bounds\");if(n<0||n>=t.length)throw new Error(\"targetIndex out of bounds\");if(r+i>e.length)throw new Error(\"source indices to be copied are outside bounds\");if(n+i>t.length)throw new Error(\"target array is too small to hold result\");for(let a=0;a<i;a++)t[n+a]=Math.pow(e[r+a],o)}static mul(t,e,n,r,i){if(r<0||r>=e.length)throw new Error(\"sourceIndex out of bounds\");if(n<0||n>=t.length)throw new Error(\"targetIndex out of bounds\");if(r+i>e.length)throw new Error(\"source indices to be copied are outside bounds\");if(n+i>t.length)throw new Error(\"target array is too small to hold result\");for(let o=0;o<i;o++)t[n+o]=e[r+o]*t[n+o]}};class d{static splitShape(t,e,n,r){if(0===n.length){if(!r)throw new Error(\"need to know number of outputs when the 'split' attribute is not specified\");d.determineSplit(t[e],r,n)}const i=[],o=[0];for(let r=0;r<n.length;++r){0!==r&&o.push(o[r-1]+n[r-1]);const a=t.slice();a[e]=n[r],i.push(a)}return[i,o]}static determineSplit(t,e,n){if(t%e!=0)throw new Error(\"cannot split tensor to equal sized parts\");for(let r=0;r<e;++r)n.push(t/e)}}e.SplitUtil=d;class h{static calcReduce(t,e,n,r,i){const o=t.dims.slice(0);0===e.length&&o.forEach(((t,n)=>e.push(n)));const a=h.calcReduceShape(o,e,!0),u=f.size(a),l=new s.Tensor(a,t.type),p=f.computeStrides(a),d=f.computeStrides(o),g=new Array(o.length);for(let n=0;n<u;n++){const a=f.offsetToIndices(n,p);c.fillIndex(a,o,g),l.set(a,h.calcReduceByAxis(t.numberData,e,o,0,f.indicesToOffset(g,d),r,i))}return n?l:new s.Tensor(h.calcReduceShape(o,e,n),l.type,void 0,void 0,l.data,l.dataId)}static calcReduceByAxis(t,e,n,r,i,o,a){let s=0;if(r>=e.length)return o(t[i]);const u=e[r],c=u>=n.length?1:f.size(n.slice(u+1));for(let l=0;l<n[u];l++)s=0===l?h.calcReduceByAxis(t,e,n,r+1,i,o,a):a(s,h.calcReduceByAxis(t,e,n,r+1,i,o,a)),i+=c;return s}static calcReduceShape(t,e,n){const r=t.slice();for(let t=0;t<e.length;t++)r[e[t]]=n?1:0;return r.filter((t=>0!==t))}}e.ReduceUtil=h;class g{static adjustPoolAttributes(t,e,n,r,i,o){if(!t&&n.length!==e.length-2)throw new Error(\"length of specified kernel shapes should be 2 less than length of input dimensions\");if(t)for(let t=0;t<e.length-2;t++)t>=n.length?n.push(e[t+2]):n[t]=e[t+2];for(let t=0;t<n.length;t++)if(t<r.length){if(r[t]<0)throw new Error(\"strides should be greater than or equal to 1\")}else r.push(1);for(let t=0;t<n.length;t++)if(t<i.length){if(i[t]<0)throw new Error(\"dilations should be greater than or equal to 1\")}else i.push(1);for(let t=0;t<2*n.length;t++)if(t<o.length){if(o[t]<0)throw new Error(\"pad should be greater than or equal to 1\")}else o.push(0);for(let t=0;t<n.length;t++){if(n[t]<=0)throw new Error(\"kernel shapes need to be greater than 0\");if(o[t]>=n[t]||o[t+n.length]>=n[t])throw new Error(\"pads should be smaller than kernel\")}}static adjustPadsBasedOnAutoPad(t,e,n,r,i,o){if(o){if(i.length!==2*(t.length-2))throw new Error(\"length of pads should be twice the length of data dimensions\");if(e.length!==t.length-2)throw new Error(\"length of strides should be the length of data dimensions\");if(r.length!==t.length-2)throw new Error(\"length of kernel shapes should be the length of data dimensions\");for(let a=0;a<t.length-2;a++)g.adjustPadAndReturnShape(t[a+2],e[a],n[a],r[a],i,a,a+t.length-2,o)}}static computePoolOutputShape(t,e,n,r,i,o,a){if(e.length<=0)throw new Error(\"input shape must be of size greater than 0\");const s=[e[0],e[1]];return g.computeShapeHelper(t,e,s,n,r,i,o,a),s}static computeConvOutputShape(t,e,n,r,i,o,a){if(t.length<=0||e.length<=0)throw new Error(\"invalid input tensor dims or invalid filter tensor dims\");const s=[t[0],e[0]];return g.computeShapeHelper(!1,t,s,n,r,i,o,a),s}static computeShapeHelper(t,e,n,r,i,o,a,s){if(t)for(let t=0;t<e.length-2;t++)n.push(1);else for(let t=0;t<e.length-2;t++)n.push(g.adjustPadAndReturnShape(e[t+2],r[t],i[t],o[t],a,t,t+e.length-2,s))}static adjustPadAndReturnShape(t,e,n,r,i,o,a,s){const u=n*(r-1)+1;if(!s||\"NOTSET\"===s)return Math.floor((t+i[o]+i[a]-u)/e+1);switch(s){case\"VALID\":return i[o]=0,i[a]=0,Math.floor((t-u)/e+1);case\"SAME_LOWER\":case\"SAME_UPPER\":if(1!==n)throw new Error(\"Dilation not supported for SAME_UPPER or SAME_LOWER\");{const n=((t+e-1)/e-1)*e+r-t;return i[o]=\"SAME_LOWER\"===s?Math.floor((n+1)/2):Math.floor(n/2),i[a]=n-i[o],Math.floor((t+n-r)/e+1)}default:throw new Error(\"Unsupported AutoPad type\")}}}e.PoolConvUtil=g,e.MIN_CLIP=-34028234663852886e22,e.MAX_CLIP=34028234663852886e22,e.decodeUtf8String=function(t){return(new TextDecoder).decode(t)}},7967:(t,e)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.iterateExtraOptions=void 0,e.iterateExtraOptions=(t,n,r,i)=>{if(\"object\"==typeof t&&null!==t){if(r.has(t))throw new Error(\"Circular reference in options\");r.add(t)}Object.entries(t).forEach((([t,o])=>{const a=n?n+t:t;if(\"object\"==typeof o)(0,e.iterateExtraOptions)(o,a+\".\",r,i);else if(\"string\"==typeof o||\"number\"==typeof o)i(a,o.toString());else{if(\"boolean\"!=typeof o)throw new Error(\"Can't handle extra config type: \"+typeof o);i(a,o?\"1\":\"0\")}}))}},2157:function(t,e,n){\"use strict\";var r,i=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!(\"get\"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,i)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,\"default\",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)\"default\"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return o(e,t),e};Object.defineProperty(e,\"__esModule\",{value:!0}),e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initOrt=e.initWasm=void 0;const s=n(1670),u=a(n(349)),c=n(6361),l=()=>!!s.env.wasm.proxy&&\"undefined\"!=typeof document;let p,f,d,h=!1,g=!1,b=!1;const m=[],y=[],_=[],v=[],w=[],x=[],T=()=>{if(h||!g||b||!p)throw new Error(\"worker not ready\")},S=t=>{switch(t.data.type){case\"init-wasm\":h=!1,t.data.err?(b=!0,f[1](t.data.err)):(g=!0,f[0]());break;case\"init-ort\":t.data.err?d[1](t.data.err):d[0]();break;case\"create_allocate\":t.data.err?m.shift()[1](t.data.err):m.shift()[0](t.data.out);break;case\"create_finalize\":t.data.err?y.shift()[1](t.data.err):y.shift()[0](t.data.out);break;case\"create\":t.data.err?_.shift()[1](t.data.err):_.shift()[0](t.data.out);break;case\"release\":t.data.err?v.shift()[1](t.data.err):v.shift()[0]();break;case\"run\":t.data.err?w.shift()[1](t.data.err):w.shift()[0](t.data.out);break;case\"end-profiling\":t.data.err?x.shift()[1](t.data.err):x.shift()[0]()}},O=\"undefined\"!=typeof document?null===(r=null===document||void 0===document?void 0:document.currentScript)||void 0===r?void 0:r.src:void 0;e.initWasm=async()=>{if(l()){if(g)return;if(h)throw new Error(\"multiple calls to 'initWasm()' detected.\");if(b)throw new Error(\"previous call to 'initWasm()' failed.\");return h=!0,void 0===s.env.wasm.wasmPaths&&O&&0!==O.indexOf(\"blob:\")&&(s.env.wasm.wasmPaths=O.substr(0,+O.lastIndexOf(\"/\")+1)),new Promise(((t,e)=>{null==p||p.terminate(),p=n(9710).Z(),p.onmessage=S,f=[t,e];const r={type:\"init-wasm\",in:s.env.wasm};p.postMessage(r)}))}return(0,c.initializeWebAssembly)(s.env.wasm)},e.initOrt=async(t,e)=>{if(l())return T(),new Promise(((n,r)=>{d=[n,r];const i={type:\"init-ort\",in:{numThreads:t,loggingLevel:e}};p.postMessage(i)}));u.initOrt(t,e)},e.createSessionAllocate=async t=>l()?(T(),new Promise(((e,n)=>{m.push([e,n]);const r={type:\"create_allocate\",in:{model:t}};p.postMessage(r,[t.buffer])}))):u.createSessionAllocate(t),e.createSessionFinalize=async(t,e)=>l()?(T(),new Promise(((n,r)=>{y.push([n,r]);const i={type:\"create_finalize\",in:{modeldata:t,options:e}};p.postMessage(i)}))):u.createSessionFinalize(t,e),e.createSession=async(t,e)=>l()?(T(),new Promise(((n,r)=>{_.push([n,r]);const i={type:\"create\",in:{model:t,options:e}};p.postMessage(i,[t.buffer])}))):u.createSession(t,e),e.releaseSession=async t=>{if(l())return T(),new Promise(((e,n)=>{v.push([e,n]);const r={type:\"release\",in:t};p.postMessage(r)}));u.releaseSession(t)},e.run=async(t,e,n,r,i)=>l()?(T(),new Promise(((o,a)=>{w.push([o,a]);const s={type:\"run\",in:{sessionId:t,inputIndices:e,inputs:n,outputIndices:r,options:i}};p.postMessage(s,u.extractTransferableBuffers(n))}))):u.run(t,e,n,r,i),e.endProfiling=async t=>{if(l())return T(),new Promise(((e,n)=>{x.push([e,n]);const r={type:\"end-profiling\",in:t};p.postMessage(r)}));u.endProfiling(t)}},586:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.setRunOptions=void 0;const r=n(7967),i=n(4983),o=n(6361);e.setRunOptions=t=>{const e=(0,o.getInstance)();let n=0;const a=[],s=t||{};try{if(void 0===(null==t?void 0:t.logSeverityLevel))s.logSeverityLevel=2;else if(\"number\"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))s.logVerbosityLevel=0;else if(\"number\"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);void 0===(null==t?void 0:t.terminate)&&(s.terminate=!1);let o=0;if(void 0!==(null==t?void 0:t.tag)&&(o=(0,i.allocWasmString)(t.tag,a)),n=e._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,o),0===n)throw new Error(\"Can't create run options\");return void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,\"\",new WeakSet,((t,r)=>{const o=(0,i.allocWasmString)(t,a),s=(0,i.allocWasmString)(r,a);if(0!==e._OrtAddRunConfigEntry(n,o,s))throw new Error(`Can't set a run config entry: ${t} - ${r}`)})),[n,a]}catch(t){throw 0!==n&&e._OrtReleaseRunOptions(n),a.forEach(e._free),t}}},2306:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.OnnxruntimeWebAssemblySessionHandler=void 0;const r=n(2806),i=n(1670),o=n(2850),a=n(2157);let s;e.OnnxruntimeWebAssemblySessionHandler=class{async createSessionAllocate(t){const e=await fetch(t),n=await e.arrayBuffer();return(0,a.createSessionAllocate)(new Uint8Array(n))}async loadModel(t,e){if(s||(await(0,a.initOrt)(i.env.wasm.numThreads,(t=>{switch(t){case\"verbose\":return 0;case\"info\":return 1;case\"warning\":return 2;case\"error\":return 3;case\"fatal\":return 4;default:throw new Error(`unsupported logging level: ${t}`)}})(i.env.logLevel)),s=!0),\"string\"==typeof t)if(\"undefined\"==typeof fetch){const n=await(0,o.promisify)(r.readFile)(t);[this.sessionId,this.inputNames,this.outputNames]=await(0,a.createSession)(n,e)}else{const n=await this.createSessionAllocate(t);[this.sessionId,this.inputNames,this.outputNames]=await(0,a.createSessionFinalize)(n,e)}else[this.sessionId,this.inputNames,this.outputNames]=await(0,a.createSession)(t,e)}async dispose(){return(0,a.releaseSession)(this.sessionId)}async run(t,e,n){const r=[],o=[];Object.entries(t).forEach((t=>{const e=t[0],n=t[1],i=this.inputNames.indexOf(e);if(-1===i)throw new Error(`invalid input '${e}'`);r.push(n),o.push(i)}));const s=[];Object.entries(e).forEach((t=>{const e=t[0],n=this.outputNames.indexOf(e);if(-1===n)throw new Error(`invalid output '${e}'`);s.push(n)}));const u=await(0,a.run)(this.sessionId,o,r.map((t=>[t.type,t.dims,t.data])),s,n),c={};for(let t=0;t<u.length;t++)c[this.outputNames[s[t]]]=new i.Tensor(u[t][0],u[t][2],u[t][1]);return c}startProfiling(){}endProfiling(){(0,a.endProfiling)(this.sessionId)}}},4919:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.setSessionOptions=void 0;const r=n(7967),i=n(4983),o=n(6361);e.setSessionOptions=t=>{const e=(0,o.getInstance)();let n=0;const a=[],s=t||{};(t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});const e=t.extra.session;e.use_ort_model_bytes_directly||(e.use_ort_model_bytes_directly=\"1\")})(s);try{void 0===(null==t?void 0:t.graphOptimizationLevel)&&(s.graphOptimizationLevel=\"all\");const u=(t=>{switch(t){case\"disabled\":return 0;case\"basic\":return 1;case\"extended\":return 2;case\"all\":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}})(s.graphOptimizationLevel);void 0===(null==t?void 0:t.enableCpuMemArena)&&(s.enableCpuMemArena=!0),void 0===(null==t?void 0:t.enableMemPattern)&&(s.enableMemPattern=!0),void 0===(null==t?void 0:t.executionMode)&&(s.executionMode=\"sequential\");const c=(t=>{switch(t){case\"sequential\":return 0;case\"parallel\":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}})(s.executionMode);let l=0;if(void 0!==(null==t?void 0:t.logId)&&(l=(0,i.allocWasmString)(t.logId,a)),void 0===(null==t?void 0:t.logSeverityLevel))s.logSeverityLevel=2;else if(\"number\"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))s.logVerbosityLevel=0;else if(\"number\"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);if(void 0===(null==t?void 0:t.enableProfiling)&&(s.enableProfiling=!1),n=e._OrtCreateSessionOptions(u,!!s.enableCpuMemArena,!!s.enableMemPattern,c,!!s.enableProfiling,0,l,s.logSeverityLevel,s.logVerbosityLevel),0===n)throw new Error(\"Can't create session options\");return(null==t?void 0:t.executionProviders)&&((t,e,n)=>{for(const r of e){let e=\"string\"==typeof r?r:r.name;switch(e){case\"xnnpack\":e=\"XNNPACK\";break;case\"wasm\":case\"cpu\":continue;default:throw new Error(`not supported EP: ${e}`)}const a=(0,i.allocWasmString)(e,n);if(0!==(0,o.getInstance)()._OrtAppendExecutionProvider(t,a))throw new Error(`Can't append execution provider: ${e}`)}})(n,t.executionProviders,a),void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,\"\",new WeakSet,((t,r)=>{const o=(0,i.allocWasmString)(t,a),s=(0,i.allocWasmString)(r,a);if(0!==e._OrtAddSessionConfigEntry(n,o,s))throw new Error(`Can't set a session config entry: ${t} - ${r}`)})),[n,a]}catch(t){throw 0!==n&&e._OrtReleaseSessionOptions(n),a.forEach(e._free),t}}},4983:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.allocWasmString=void 0;const r=n(6361);e.allocWasmString=(t,e)=>{const n=(0,r.getInstance)(),i=n.lengthBytesUTF8(t)+1,o=n._malloc(i);return n.stringToUTF8(t,o,i),e.push(o),o}},349:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.extractTransferableBuffers=e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initOrt=void 0;const r=n(586),i=n(4919),o=n(4983),a=n(6361);e.initOrt=(t,e)=>{const n=(0,a.getInstance)()._OrtInit(t,e);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)};const s=new Map;e.createSessionAllocate=t=>{const e=(0,a.getInstance)(),n=e._malloc(t.byteLength);return e.HEAPU8.set(t,n),[n,t.byteLength]},e.createSessionFinalize=(t,e)=>{const n=(0,a.getInstance)();let r=0,o=0,u=[];try{if([o,u]=(0,i.setSessionOptions)(e),r=n._OrtCreateSession(t[0],t[1],o),0===r)throw new Error(\"Can't create a session\")}finally{n._free(t[0]),n._OrtReleaseSessionOptions(o),u.forEach(n._free)}const c=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),p=[],f=[],d=[],h=[];for(let t=0;t<c;t++){const e=n._OrtGetInputName(r,t);if(0===e)throw new Error(\"Can't get an input name\");f.push(e),p.push(n.UTF8ToString(e))}for(let t=0;t<l;t++){const e=n._OrtGetOutputName(r,t);if(0===e)throw new Error(\"Can't get an output name\");h.push(e),d.push(n.UTF8ToString(e))}return s.set(r,[r,f,h]),[r,p,d]},e.createSession=(t,n)=>{const r=(0,e.createSessionAllocate)(t);return(0,e.createSessionFinalize)(r,n)},e.releaseSession=t=>{const e=(0,a.getInstance)(),n=s.get(t);if(!n)throw new Error(\"invalid session id\");const r=n[0],i=n[1],o=n[2];i.forEach(e._OrtFree),o.forEach(e._OrtFree),e._OrtReleaseSession(r),s.delete(t)};const u=t=>{switch(t){case\"int8\":return 3;case\"uint8\":return 2;case\"bool\":return 9;case\"int16\":return 5;case\"uint16\":return 4;case\"int32\":return 6;case\"uint32\":return 12;case\"float32\":return 1;case\"float64\":return 11;case\"string\":return 8;case\"int64\":return 7;case\"uint64\":return 13;default:throw new Error(`unsupported data type: ${t}`)}},c=t=>{switch(t){case 3:return\"int8\";case 2:return\"uint8\";case 9:return\"bool\";case 5:return\"int16\";case 4:return\"uint16\";case 6:return\"int32\";case 12:return\"uint32\";case 1:return\"float32\";case 11:return\"float64\";case 8:return\"string\";case 7:return\"int64\";case 13:return\"uint64\";default:throw new Error(`unsupported data type: ${t}`)}},l=t=>{switch(t){case\"float32\":return Float32Array;case\"uint8\":case\"bool\":return Uint8Array;case\"int8\":return Int8Array;case\"uint16\":return Uint16Array;case\"int16\":return Int16Array;case\"int32\":return Int32Array;case\"float64\":return Float64Array;case\"uint32\":return Uint32Array;case\"int64\":return BigInt64Array;case\"uint64\":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}};e.run=(t,e,n,i,p)=>{const f=(0,a.getInstance)(),d=s.get(t);if(!d)throw new Error(\"invalid session id\");const h=d[0],g=d[1],b=d[2],m=e.length,y=i.length;let _=0,v=[];const w=[],x=[];try{[_,v]=(0,r.setRunOptions)(p);for(let t=0;t<m;t++){const e=n[t][0],r=n[t][1],i=n[t][2];let a,s;if(Array.isArray(i)){s=4*i.length,a=f._malloc(s),x.push(a);let t=a/4;for(let e=0;e<i.length;e++){if(\"string\"!=typeof i[e])throw new TypeError(`tensor data at index ${e} is not a string`);f.HEAPU32[t++]=(0,o.allocWasmString)(i[e],x)}}else s=i.byteLength,a=f._malloc(s),x.push(a),f.HEAPU8.set(new Uint8Array(i.buffer,i.byteOffset,s),a);const c=f.stackSave(),l=f.stackAlloc(4*r.length);try{let t=l/4;r.forEach((e=>f.HEAP32[t++]=e));const n=f._OrtCreateTensor(u(e),a,s,l,r.length);if(0===n)throw new Error(\"Can't create a tensor\");w.push(n)}finally{f.stackRestore(c)}}const t=f.stackSave(),a=f.stackAlloc(4*m),s=f.stackAlloc(4*m),d=f.stackAlloc(4*y),T=f.stackAlloc(4*y);try{let n=a/4,r=s/4,o=d/4,u=T/4;for(let t=0;t<m;t++)f.HEAPU32[n++]=w[t],f.HEAPU32[r++]=g[e[t]];for(let t=0;t<y;t++)f.HEAPU32[o++]=0,f.HEAPU32[u++]=b[i[t]];let p=f._OrtRun(h,s,a,m,T,y,d,_);const v=[];if(0===p)for(let t=0;t<y;t++){const e=f.HEAPU32[d/4+t],n=f.stackSave(),r=f.stackAlloc(16);let i,o=0;try{if(p=f._OrtGetTensorData(e,r,r+4,r+8,r+12),0!==p)throw new Error(`Can't access output tensor data. error code = ${p}`);let t=r/4;const a=f.HEAPU32[t++];o=f.HEAPU32[t++];const s=f.HEAPU32[t++],u=f.HEAPU32[t++],d=[];for(let t=0;t<u;t++)d.push(f.HEAPU32[s/4+t]);f._OrtFree(s);const h=0===d.length?1:d.reduce(((t,e)=>t*e));if(i=c(a),\"string\"===i){const t=[];let e=o/4;for(let n=0;n<h;n++){const r=f.HEAPU32[e++],i=n===h-1?void 0:f.HEAPU32[e]-r;t.push(f.UTF8ToString(r,i))}v.push([i,d,t])}else{const t=new(l(i))(h);new Uint8Array(t.buffer,t.byteOffset,t.byteLength).set(f.HEAPU8.subarray(o,o+t.byteLength)),v.push([i,d,t])}}finally{f.stackRestore(n),\"string\"===i&&o&&f._free(o),f._OrtReleaseTensor(e)}}if(0===p)return v;throw new Error(`failed to call OrtRun(). error code = ${p}.`)}finally{f.stackRestore(t)}}finally{w.forEach(f._OrtReleaseTensor),x.forEach(f._free),f._OrtReleaseRunOptions(_),v.forEach(f._free)}},e.endProfiling=t=>{const e=(0,a.getInstance)(),n=s.get(t);if(!n)throw new Error(\"invalid session id\");const r=n[0],i=e._OrtEndProfiling(r);if(0===i)throw new Error(\"Can't get an profile file name\");e._OrtFree(i)},e.extractTransferableBuffers=t=>{const e=[];for(const n of t){const t=n[2];!Array.isArray(t)&&t.buffer&&e.push(t.buffer)}return e}},6361:function(t,e,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!(\"get\"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,i)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,\"default\",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)\"default\"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return i(e,t),e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\"__esModule\",{value:!0}),e.dispose=e.getInstance=e.initializeWebAssembly=void 0;const s=o(n(6449)),u=a(n(932)),c=n(3474);let l,p=!1,f=!1,d=!1;const h=(t,e)=>e?t?\"ort-wasm-simd-threaded.wasm\":\"ort-wasm-threaded.wasm\":t?\"ort-wasm-simd.wasm\":\"ort-wasm.wasm\";e.initializeWebAssembly=async t=>{if(p)return Promise.resolve();if(f)throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");if(d)throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");f=!0;const e=t.initTimeout,r=t.numThreads,i=t.simd,o=r>1&&(()=>{try{return\"undefined\"!=typeof SharedArrayBuffer&&(\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(t){return!1}})(),a=i&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(t){return!1}})(),g=\"string\"==typeof t.wasmPaths?t.wasmPaths:void 0,b=h(!1,o),m=h(a,o),y=\"object\"==typeof t.wasmPaths?t.wasmPaths[m]:void 0;let _=!1;const v=[];if(e>0&&v.push(new Promise((t=>{setTimeout((()=>{_=!0,t()}),e)}))),v.push(new Promise(((t,e)=>{const r=o?c:u.default,i={locateFile:(t,e)=>o&&t.endsWith(\".worker.js\")&&\"undefined\"!=typeof Blob?URL.createObjectURL(new Blob([n(4154)],{type:\"text/javascript\"})):t===b?null!=y?y:(null!=g?g:e)+m:e+t};if(o)if(\"undefined\"==typeof Blob)i.mainScriptUrlOrBlob=s.join(\"/\",\"ort-wasm-threaded.js\");else{const t=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;i.mainScriptUrlOrBlob=new Blob([t],{type:\"text/javascript\"})}r(i).then((e=>{f=!1,p=!0,l=e,t()}),(t=>{f=!1,d=!0,e(t)}))}))),await Promise.race(v),_)throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`)},e.getInstance=()=>{if(p&&l)return l;throw new Error(\"WebAssembly is not initialized yet.\")},e.dispose=()=>{var t;!p||f||d||(f=!0,null===(t=l.PThread)||void 0===t||t.terminateAllThreads(),l=void 0,f=!1,p=!1,d=!0)}},9710:(t,e,n)=>{\"use strict\";n.d(e,{Z:()=>o});var r=n(477),i=n.n(r);function o(){return i()('/*!\\n* ONNX Runtime Web v1.14.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var t={474:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\"/index.js\",function(t){function e(){return j.buffer!=D&&N(j.buffer),P}function r(){return j.buffer!=D&&N(j.buffer),U}function a(){return j.buffer!=D&&N(j.buffer),F}function i(){return j.buffer!=D&&N(j.buffer),I}function o(){return j.buffer!=D&&N(j.buffer),W}var u,c,s;t=t||{},u||(u=void 0!==t?t:{}),u.ready=new Promise((function(t,e){c=t,s=e}));var l,f,p,h,d,y,b=Object.assign({},u),m=\"./this.program\",g=(t,e)=>{throw e},v=\"object\"==typeof window,w=\"function\"==typeof importScripts,_=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,A=\"\";function S(t){return u.locateFile?u.locateFile(t,A):A+t}if(_){let e;A=w?n(908).dirname(A)+\"/\":\"//\",y=()=>{d||(h=n(384),d=n(908))},l=function(t,e){return y(),t=d.normalize(t),h.readFileSync(t,e?void 0:\"utf8\")},p=t=>((t=l(t,!0)).buffer||(t=new Uint8Array(t)),t),f=(t,e,n)=>{y(),t=d.normalize(t),h.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(t){if(!(t instanceof ct))throw t})),process.on(\"unhandledRejection\",(function(t){throw t})),g=(t,e)=>{if(Q())throw process.exitCode=t,e;e instanceof ct||x(\"exiting due to exception: \"+e),process.exit(t)},u.inspect=function(){return\"[Emscripten Module object]\"};try{e=n(925)}catch(t){throw console.error(\\'The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?\\'),t}n.g.Worker=e.Worker}else(v||w)&&(w?A=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\"blob:\")?A.substr(0,A.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",_||(l=t=>{var e=new XMLHttpRequest;return e.open(\"GET\",t,!1),e.send(null),e.responseText},w&&(p=t=>{var e=new XMLHttpRequest;return e.open(\"GET\",t,!1),e.responseType=\"arraybuffer\",e.send(null),new Uint8Array(e.response)}),f=(t,e,n)=>{var r=new XMLHttpRequest;r.open(\"GET\",t,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)}));_&&\"undefined\"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),E=console.warn.bind(console);_&&(y(),T=t=>h.writeSync(1,t+\"\\\\n\"),E=t=>h.writeSync(2,t+\"\\\\n\"));var M,C=u.print||T,x=u.printErr||E;Object.assign(u,b),b=null,u.thisProgram&&(m=u.thisProgram),u.quit&&(g=u.quit),u.wasmBinary&&(M=u.wasmBinary);var R=u.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&at(\"no native wasm support detected\");var j,k,D,P,U,F,I,W,H=!1,L=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function z(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&L)return L.decode(t.buffer instanceof SharedArrayBuffer?t.slice(e,n):t.subarray(e,n));for(r=\"\";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function Y(t,e){return(t>>>=0)?z(r(),t,e):\"\"}function B(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function G(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function N(t){D=t,u.HEAP8=P=new Int8Array(t),u.HEAP16=new Int16Array(t),u.HEAP32=F=new Int32Array(t),u.HEAPU8=U=new Uint8Array(t),u.HEAPU16=new Uint16Array(t),u.HEAPU32=I=new Uint32Array(t),u.HEAPF32=new Float32Array(t),u.HEAPF64=W=new Float64Array(t)}O&&(D=u.buffer);var V=u.INITIAL_MEMORY||16777216;if(O)j=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)j=u.wasmMemory;else if(!((j=new WebAssembly.Memory({initial:V/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),_&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");j&&(D=j.buffer),V=D.byteLength,N(D);var $,q=[],X=[],J=[],Z=[];function Q(){return R||!1}function K(){var t=u.preRun.shift();q.unshift(t)}var tt,et=0,nt=null,rt=null;function at(t){throw O?postMessage({cmd:\"onAbort\",arg:t}):u.onAbort&&u.onAbort(t),x(t=\"Aborted(\"+t+\")\"),H=!0,t=new WebAssembly.RuntimeError(t+\". Build with -sASSERTIONS for more info.\"),s(t),t}function it(){return tt.startsWith(\"data:application/octet-stream;base64,\")}function ot(){var t=tt;try{if(t==tt&&M)return new Uint8Array(M);if(p)return p(t);throw\"both async and sync fetching of the wasm failed\"}catch(t){at(t)}}tt=\"ort-wasm-threaded.wasm\",it()||(tt=S(tt));var ut={};function ct(t){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+t+\")\",this.status=t}function st(t){(t=ht.Vb[t])||at(),ht.mc(t)}function lt(t){var e=ht.Cc();if(!e)return 6;ht.ac.push(e),ht.Vb[t.Ub]=e,e.Ub=t.Ub;var n={cmd:\"run\",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return e.$b=()=>{n.time=performance.now(),e.postMessage(n,t.Nc)},e.loaded&&(e.$b(),delete e.$b),0}function ft(t){if(O)return $t(1,1,t);Q()||(ht.oc(),u.onExit&&u.onExit(t),H=!0),g(t,new ct(t))}function pt(t,e){if(!e&&O)throw bt(t),\"unwind\";Q()||O||(me(),dt(J),be(0),re[1].length&&ae(1,10),re[2].length&&ae(2,10),ht.oc()),ft(t)}var ht={Yb:[],ac:[],qc:[],Vb:{},fc:function(){O&&ht.Ec()},Pc:function(){},Ec:function(){ht.receiveObjectTransfer=ht.Gc,ht.threadInitTLS=ht.pc,ht.setExitStatus=ht.nc,R=!1},nc:function(){},oc:function(){for(var t of Object.values(ht.Vb))ht.mc(t);for(t of ht.Yb)t.terminate();ht.Yb=[]},mc:function(t){var e=t.Ub;delete ht.Vb[e],ht.Yb.push(t),ht.ac.splice(ht.ac.indexOf(t),1),t.Ub=0,Oe(e)},Gc:function(){},pc:function(){ht.qc.forEach((t=>t()))},Fc:function(t,e){t.onmessage=n=>{var r=(n=n.data).cmd;if(t.Ub&&(ht.Bc=t.Ub),n.targetThread&&n.targetThread!=he()){var a=ht.Vb[n.Qc];a?a.postMessage(n,n.transferList):x(\\'Internal error! Worker sent a message \"\\'+r+\\'\" to target pthread \\'+n.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?zt(n.queue):\"spawnThread\"===r?lt(n):\"cleanupThread\"===r?st(n.thread):\"killThread\"===r?(n=n.thread,r=ht.Vb[n],delete ht.Vb[n],r.terminate(),Oe(n),ht.ac.splice(ht.ac.indexOf(r),1),r.Ub=0):\"cancelThread\"===r?ht.Vb[n.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(t.loaded=!0,e&&e(t),t.$b&&(t.$b(),delete t.$b)):\"print\"===r?C(\"Thread \"+n.threadId+\": \"+n.text):\"printErr\"===r?x(\"Thread \"+n.threadId+\": \"+n.text):\"alert\"===r?alert(\"Thread \"+n.threadId+\": \"+n.text):\"setimmediate\"===n.target?t.postMessage(n):\"onAbort\"===r?u.onAbort&&u.onAbort(n.arg):r&&x(\"worker sent an unknown command \"+r);ht.Bc=void 0},t.onerror=t=>{throw x(\"worker sent an error! \"+t.filename+\":\"+t.lineno+\": \"+t.message),t},_&&(t.on(\"message\",(function(e){t.onmessage({data:e})})),t.on(\"error\",(function(e){t.onerror(e)})),t.on(\"detachedExit\",(function(){}))),t.postMessage({cmd:\"load\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:j,wasmModule:k})},yc:function(){var t=S(\"ort-wasm-threaded.worker.js\");ht.Yb.push(new Worker(t))},Cc:function(){return 0==ht.Yb.length&&(ht.yc(),ht.Fc(ht.Yb[0])),ht.Yb.pop()}};function dt(t){for(;0<t.length;)t.shift()(u)}function yt(t){var e=Ee();return t=t(),Me(e),t}function bt(t){if(O)return $t(2,0,t);try{pt(t)}catch(t){t instanceof ct||\"unwind\"==t||g(1,t)}}u.PThread=ht,u.establishStackSpace=function(){var t=he(),e=a()[t+44>>2>>>0];t=a()[t+48>>2>>>0],Te(e,e-t),Me(e)};var mt=[];function gt(t){var e=mt[t];return e||(t>=mt.length&&(mt.length=t+1),mt[t]=e=$.get(t)),e}u.invokeEntryPoint=function(t,e){t=gt(t)(e),Q()?ht.nc(t):Ae(t)};var vt,wt,_t=[],Ot=0,At=0;function St(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){i()[this.Sb+4>>2>>>0]=t},this.bc=function(){return i()[this.Sb+4>>2>>>0]},this.wc=function(t){i()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return i()[this.Sb+8>>2>>>0]},this.rc=function(){a()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,e()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=e()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,e()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=e()[this.Sb+13>>0>>>0]},this.fc=function(t,e){this.cc(0),this.xc(t),this.wc(e),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(a(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(a(),this.Sb>>2,1)},this.cc=function(t){i()[this.Sb+16>>2>>>0]=t},this.tc=function(){return i()[this.Sb+16>>2>>>0]},this.vc=function(){if(Re(this.bc()))return i()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function Tt(t){return ye(new St(t).Sb)}function Et(t,e,n,r){return O?$t(3,1,t,e,n,r):Mt(t,e,n,r)}function Mt(t,e,n,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return O&&0===a.length?Et(t,e,n,r):(t={Ic:n,Ub:t,zc:r,Nc:a},O?(t.Oc=\"spawnThread\",postMessage(t,a),0):lt(t))}function Ct(t,e,n){return O?$t(4,1,t,e,n):0}function xt(t,e){if(O)return $t(5,1,t,e)}function Rt(t,e){if(O)return $t(6,1,t,e)}function jt(t,e,n){if(O)return $t(7,1,t,e,n)}function kt(t,e,n){return O?$t(8,1,t,e,n):0}function Dt(t,e){if(O)return $t(9,1,t,e)}function Pt(t,e,n){if(O)return $t(10,1,t,e,n)}function Ut(t,e,n,r){if(O)return $t(11,1,t,e,n,r)}function Ft(t,e,n,r){if(O)return $t(12,1,t,e,n,r)}function It(t,e,n,r){if(O)return $t(13,1,t,e,n,r)}function Wt(t){if(O)return $t(14,1,t)}function Ht(t,e){if(O)return $t(15,1,t,e)}function Lt(t,e,n){if(O)return $t(16,1,t,e,n)}function zt(t){Atomics.store(a(),t>>2,1),he()&&_e(t),Atomics.compareExchange(a(),t>>2,1,0)}function Yt(t){return i()[t>>>2]+4294967296*a()[t+4>>>2]}function Bt(t,e,n,r,a,i){return O?$t(17,1,t,e,n,r,a,i):-52}function Gt(t,e,n,r,a,i){if(O)return $t(18,1,t,e,n,r,a,i)}function Nt(t){var n=G(t)+1,r=de(n);return r&&B(t,e(),r,n),r}function Vt(t,e,n){function r(t){return(t=t.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?t[1]:\"GMT\"}if(O)return $t(19,1,t,e,n);var o=(new Date).getFullYear(),u=new Date(o,0,1),c=new Date(o,6,1);o=u.getTimezoneOffset();var s=c.getTimezoneOffset(),l=Math.max(o,s);a()[t>>2>>>0]=60*l,a()[e>>2>>>0]=Number(o!=s),t=r(u),e=r(c),t=Nt(t),e=Nt(e),s<o?(i()[n>>2>>>0]=t,i()[n+4>>2>>>0]=e):(i()[n>>2>>>0]=e,i()[n+4>>2>>>0]=t)}function $t(t,e){var n=arguments.length-2,r=arguments;return yt((()=>{for(var a=Ce(8*n),i=a>>3,u=0;u<n;u++){var c=r[2+u];o()[i+u>>>0]=c}return we(t,n,a,e)}))}u.executeNotifiedProxyingQueue=zt,wt=_?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:O?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var qt,Xt=[],Jt={};function Zt(){if(!qt){var t,e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:m||\"./this.program\"};for(t in Jt)void 0===Jt[t]?delete e[t]:e[t]=Jt[t];var n=[];for(t in e)n.push(t+\"=\"+e[t]);qt=n}return qt}function Qt(t,n){if(O)return $t(20,1,t,n);var r=0;return Zt().forEach((function(a,o){var u=n+r;for(o=i()[t+4*o>>2>>>0]=u,u=0;u<a.length;++u)e()[o++>>0>>>0]=a.charCodeAt(u);e()[o>>0>>>0]=0,r+=a.length+1})),0}function Kt(t,e){if(O)return $t(21,1,t,e);var n=Zt();i()[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),i()[e>>2>>>0]=r,0}function te(t){return O?$t(22,1,t):52}function ee(t,e,n,r){return O?$t(23,1,t,e,n,r):52}function ne(t,e,n,r,a){return O?$t(24,1,t,e,n,r,a):70}var re=[null,[],[]];function ae(t,e){var n=re[t];0===e||10===e?((1===t?C:x)(z(n,0)),n.length=0):n.push(e)}function ie(t,e,n,a){if(O)return $t(25,1,t,e,n,a);for(var o=0,u=0;u<n;u++){var c=i()[e>>2>>>0],s=i()[e+4>>2>>>0];e+=8;for(var l=0;l<s;l++)ae(t,r()[c+l>>>0]);o+=s}return i()[a>>2>>>0]=o,0}var oe=0;function ue(t){return 0==t%4&&(0!=t%100||0==t%400)}var ce=[31,29,31,30,31,30,31,31,30,31,30,31],se=[31,28,31,30,31,30,31,31,30,31,30,31];function le(t,n,r,i){function o(t,e,n){for(t=\"number\"==typeof t?t.toString():t||\"\";t.length<e;)t=n[0]+t;return t}function u(t,e){return o(t,e,\"0\")}function c(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function s(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function l(t){var e=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(ue(t.getFullYear())?ce:se)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=s(new Date(t.getFullYear(),0,4)),n=s(n),0>=c(e,t)?0>=c(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var f=a()[i+40>>2>>>0];for(var p in i={Lc:a()[i>>2>>>0],Kc:a()[i+4>>2>>>0],dc:a()[i+8>>2>>>0],jc:a()[i+12>>2>>>0],ec:a()[i+16>>2>>>0],Xb:a()[i+20>>2>>>0],Tb:a()[i+24>>2>>>0],Wb:a()[i+28>>2>>>0],Rc:a()[i+32>>2>>>0],Jc:a()[i+36>>2>>>0],Mc:f?Y(f):\"\"},r=Y(r),f={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(p,\"g\"),f[p]);var h=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(p in f={\"%a\":function(t){return h[t.Tb].substring(0,3)},\"%A\":function(t){return h[t.Tb]},\"%b\":function(t){return d[t.ec].substring(0,3)},\"%B\":function(t){return d[t.ec]},\"%C\":function(t){return u((t.Xb+1900)/100|0,2)},\"%d\":function(t){return u(t.jc,2)},\"%e\":function(t){return o(t.jc,2,\" \")},\"%g\":function(t){return l(t).toString().substring(2)},\"%G\":function(t){return l(t)},\"%H\":function(t){return u(t.dc,2)},\"%I\":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),u(t,2)},\"%j\":function(t){for(var e=0,n=0;n<=t.ec-1;e+=(ue(t.Xb+1900)?ce:se)[n++]);return u(t.jc+e,3)},\"%m\":function(t){return u(t.ec+1,2)},\"%M\":function(t){return u(t.Kc,2)},\"%n\":function(){return\"\\\\n\"},\"%p\":function(t){return 0<=t.dc&&12>t.dc?\"AM\":\"PM\"},\"%S\":function(t){return u(t.Lc,2)},\"%t\":function(){return\"\\\\t\"},\"%u\":function(t){return t.Tb||7},\"%U\":function(t){return u(Math.floor((t.Wb+7-t.Tb)/7),2)},\"%V\":function(t){var e=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&e++,e)53==e&&(4==(n=(t.Tb+371-t.Wb)%7)||3==n&&ue(t.Xb)||(e=1));else{e=52;var n=(t.Tb+7-t.Wb-1)%7;(4==n||5==n&&ue(t.Xb%400-1))&&e++}return u(e,2)},\"%w\":function(t){return t.Tb},\"%W\":function(t){return u(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},\"%y\":function(t){return(t.Xb+1900).toString().substring(2)},\"%Y\":function(t){return t.Xb+1900},\"%z\":function(t){var e=0<=(t=t.Jc);return t=Math.abs(t)/60,(e?\"+\":\"-\")+String(\"0000\"+(t/60*100+t%60)).slice(-4)},\"%Z\":function(t){return t.Mc},\"%%\":function(){return\"%\"}},r=r.replace(/%%/g,\"\\\\0\\\\0\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\"g\"),f[p](i)));return p=function(t){var e=Array(G(t)+1);return B(t,e,0,e.length),e}(r=r.replace(/\\\\0\\\\0/g,\"%\")),p.length>n?0:(function(t,n){e().set(t,n>>>0)}(p,t),p.length-1)}ht.fc();var fe=[null,ft,bt,Et,Ct,xt,Rt,jt,kt,Dt,Pt,Ut,Ft,It,Wt,Ht,Lt,Bt,Gt,Vt,Qt,Kt,te,ee,ne,ie],pe={b:function(t){return de(t+24)+24},n:function(t){return(t=new St(t)).uc()||(t.hc(!0),Ot--),t.ic(!1),_t.push(t),t.sc(),t.vc()},ma:function(t){throw x(\"Unexpected exception thrown, this is not properly supported - aborting\"),H=!0,t},x:function(){Se(0);var t=_t.pop();if(t.Hc()&&!t.kc()){var e=t.Dc();e&&gt(e)(t.Zb),Tt(t.Zb)}At=0},e:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},l:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},h:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},t:Tt,M:function(){var t=_t.pop();t||at(\"no exception to throw\");var e=t.Zb;throw t.kc()||(_t.push(t),t.ic(!0),t.hc(!1),Ot++),At=e,e},c:function(t,e,n){throw new St(t).fc(e,n),At=t,Ot++,t},pa:function(){return Ot},Fa:function(t){ge(t,!w,1,!v),ht.pc()},T:function(t){O?postMessage({cmd:\"cleanupThread\",thread:t}):st(t)},xa:Mt,j:function(t){throw At||(At=t),t},H:Ct,Ma:xt,ua:Rt,wa:jt,oa:kt,Ka:Dt,Ca:Pt,Ja:Ut,V:Ft,va:It,sa:Wt,La:Ht,ta:Lt,Ta:function(){},X:function(){at(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Ua:function(){at(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,e,n,r){if(t==e)setTimeout((()=>zt(r)));else if(O)postMessage({targetThread:t,cmd:\"processProxyingQueue\",queue:r});else{if(!(t=ht.Vb[t]))return;t.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getUTCSeconds(),a()[e+4>>2>>>0]=t.getUTCMinutes(),a()[e+8>>2>>>0]=t.getUTCHours(),a()[e+12>>2>>>0]=t.getUTCDate(),a()[e+16>>2>>>0]=t.getUTCMonth(),a()[e+20>>2>>>0]=t.getUTCFullYear()-1900,a()[e+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[e+28>>2>>>0]=t},Qa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getFullYear()-1900,a()[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1),r=(t.getTime()-n.getTime())/864e5|0;a()[e+28>>2>>>0]=r,a()[e+36>>2>>>0]=-60*t.getTimezoneOffset(),r=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(r!=(n=n.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(n,r)),a()[e+32>>2>>>0]=t},Ra:function(t){var e=new Date(a()[t+20>>2>>>0]+1900,a()[t+16>>2>>>0],a()[t+12>>2>>>0],a()[t+8>>2>>>0],a()[t+4>>2>>>0],a()[t>>2>>>0],0),n=a()[t+32>>2>>>0],r=e.getTimezoneOffset(),i=new Date(e.getFullYear(),0,1),o=new Date(e.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),c=Math.min(u,o);return 0>n?a()[t+32>>2>>>0]=Number(o!=u&&c==r):0<n!=(c==r)&&(o=Math.max(u,o),e.setTime(e.getTime()+6e4*((0<n?c:o)-r))),a()[t+24>>2>>>0]=e.getDay(),n=(e.getTime()-i.getTime())/864e5|0,a()[t+28>>2>>>0]=n,a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},Aa:Bt,Ba:Gt,Sa:function t(e,n,r){t.Ac||(t.Ac=!0,Vt(e,n,r))},y:function(){at(\"\")},U:function(){if(!_&&!w){var t=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";vt||(vt={}),vt[t]||(vt[t]=1,_&&(t=\"warning: \"+t),x(t))}},ra:function(){return 4294901760},B:wt,Ia:function(t,e,n){r().copyWithin(t>>>0,e>>>0,e+n>>>0)},F:function(){return _?n(993).cpus().length:navigator.hardwareConcurrency},Da:function(t,e,n){Xt.length=e,n>>=3;for(var r=0;r<e;r++)Xt[r]=o()[n+r>>>0];return(0>t?ut[-t-1]:fe[t]).apply(null,Xt)},qa:function(t){var e=r().length;if((t>>>=0)<=e||4294901760<t)return!1;for(var n=1;4>=n;n*=2){var a=e*(1+.2/n);a=Math.min(a,t+100663296);var i=Math;a=Math.max(t,a),i=i.min.call(i,4294901760,a+(65536-a%65536)%65536);t:{try{j.grow(i-D.byteLength+65535>>>16),N(j.buffer);var o=1;break t}catch(t){}o=void 0}if(o)return!0}return!1},Na:function(){throw\"unwind\"},Ga:Qt,Ha:Kt,J:pt,I:te,S:ee,ga:ne,R:ie,d:function(){return oe},na:function t(r,a){t.lc||(t.lc=function(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(_)try{var e=n(Object(function(){var t=new Error(\"Cannot find module \\'crypto\\'\");throw t.code=\"MODULE_NOT_FOUND\",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>at(\"randomDevice\")}());for(var i=0;i<a;i++)e()[r+i>>0>>>0]=t.lc();return 0},ia:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ja:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},K:function(t){var e=Ee();try{return gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},f:function(t,e){var n=Ee();try{return gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},P:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},Q:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},k:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},p:function(t,e,n,r){var a=Ee();try{return gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},q:function(t,e,n,r,a){var i=Ee();try{return gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},N:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},s:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},w:function(t,e,n,r,a,i,o){var u=Ee();try{return gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},L:function(t,e,n,r,a,i,o,u){var c=Ee();try{return gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},E:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{return gt(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=Ee();try{return He(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},_:function(t,e,n,r,a,i,o){var u=Ee();try{return ke(t,e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},Z:function(t,e,n,r,a){var i=Ee();try{return Le(t,e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},ca:function(t,e,n,r){var a=Ee();try{return Ie(t,e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},$:function(t){var e=Ee();try{return je(t)}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},ba:function(t,e){var n=Ee();try{return We(t,e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},Y:function(t,e,n){var r=Ee();try{return De(t,e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},g:function(t){var e=Ee();try{gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},r:function(t,e){var n=Ee();try{gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},i:function(t,e,n){var r=Ee();try{gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ha:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},m:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},v:function(t,e,n,r,a){var i=Ee();try{gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},u:function(t,e,n,r,a,i){var o=Ee();try{gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},O:function(t,e,n,r,a,i,o){var u=Ee();try{gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},A:function(t,e,n,r,a,i,o,u){var c=Ee();try{gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},ka:function(t,e,n,r,a,i,o,u,c){var s=Ee();try{gt(t)(e,n,r,a,i,o,u,c)}catch(t){if(Me(s),t!==t+0)throw t;Se(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l){var f=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(Me(f),t!==t+0)throw t;Se(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(Me(b),t!==t+0)throw t;Se(1,0)}},fa:function(t,e,n,r,a,i,o,u){var c=Ee();try{Pe(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},da:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{Fe(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},ea:function(t,e,n,r,a,i){var o=Ee();try{Ue(t,e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},o:function(t){return t},a:j||u.wasmMemory,G:function(t){oe=t},la:le,z:function(t,e,n,r){return le(t,e,n,r)}};!function(){function t(t,e){u.asm=t.exports,ht.qc.push(u.asm.sb),$=u.asm.ub,X.unshift(u.asm.Va),k=e,O||(et--,u.monitorRunDependencies&&u.monitorRunDependencies(et),0==et&&(null!==nt&&(clearInterval(nt),nt=null),rt&&(t=rt,rt=null,t())))}function e(e){t(e.instance,e.module)}function n(t){return function(){if(!M&&(v||w)){if(\"function\"==typeof fetch&&!tt.startsWith(\"file://\"))return fetch(tt,{credentials:\"same-origin\"}).then((function(t){if(!t.ok)throw\"failed to load wasm binary file at \\'\"+tt+\"\\'\";return t.arrayBuffer()})).catch((function(){return ot()}));if(f)return new Promise((function(t,e){f(tt,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return ot()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){x(\"failed to asynchronously prepare wasm: \"+t),at(t)}))}var r={a:pe};if(O||(et++,u.monitorRunDependencies&&u.monitorRunDependencies(et)),u.instantiateWasm)try{return u.instantiateWasm(r,t)}catch(t){return x(\"Module.instantiateWasm callback failed with error: \"+t),!1}(M||\"function\"!=typeof WebAssembly.instantiateStreaming||it()||tt.startsWith(\"file://\")||_||\"function\"!=typeof fetch?n(e):fetch(tt,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(e,(function(t){return x(\"wasm streaming compile failed: \"+t),x(\"falling back to ArrayBuffer instantiation\"),n(e)}))}))).catch(s)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Va).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Wa).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Xa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.Ya).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.Za).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm._a).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.$a).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ab).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.bb).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.cb).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.db).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.eb).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.fb).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.gb).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.hb).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ib).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.jb).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.kb).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.lb).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.mb).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.nb).apply(null,arguments)};var he=u._pthread_self=function(){return(he=u._pthread_self=u.asm.ob).apply(null,arguments)},de=u._malloc=function(){return(de=u._malloc=u.asm.pb).apply(null,arguments)},ye=u._free=function(){return(ye=u._free=u.asm.qb).apply(null,arguments)},be=u._fflush=function(){return(be=u._fflush=u.asm.rb).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.sb).apply(null,arguments)};var me=u.___funcs_on_exit=function(){return(me=u.___funcs_on_exit=u.asm.tb).apply(null,arguments)},ge=u.__emscripten_thread_init=function(){return(ge=u.__emscripten_thread_init=u.asm.vb).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wb).apply(null,arguments)};var ve,we=u._emscripten_run_in_main_runtime_thread_js=function(){return(we=u._emscripten_run_in_main_runtime_thread_js=u.asm.xb).apply(null,arguments)},_e=u.__emscripten_proxy_execute_task_queue=function(){return(_e=u.__emscripten_proxy_execute_task_queue=u.asm.yb).apply(null,arguments)},Oe=u.__emscripten_thread_free_data=function(){return(Oe=u.__emscripten_thread_free_data=u.asm.zb).apply(null,arguments)},Ae=u.__emscripten_thread_exit=function(){return(Ae=u.__emscripten_thread_exit=u.asm.Ab).apply(null,arguments)},Se=u._setThrew=function(){return(Se=u._setThrew=u.asm.Bb).apply(null,arguments)},Te=u._emscripten_stack_set_limits=function(){return(Te=u._emscripten_stack_set_limits=u.asm.Cb).apply(null,arguments)},Ee=u.stackSave=function(){return(Ee=u.stackSave=u.asm.Db).apply(null,arguments)},Me=u.stackRestore=function(){return(Me=u.stackRestore=u.asm.Eb).apply(null,arguments)},Ce=u.stackAlloc=function(){return(Ce=u.stackAlloc=u.asm.Fb).apply(null,arguments)},xe=u.___cxa_can_catch=function(){return(xe=u.___cxa_can_catch=u.asm.Gb).apply(null,arguments)},Re=u.___cxa_is_pointer_type=function(){return(Re=u.___cxa_is_pointer_type=u.asm.Hb).apply(null,arguments)},je=u.dynCall_j=function(){return(je=u.dynCall_j=u.asm.Ib).apply(null,arguments)},ke=u.dynCall_iiiiij=function(){return(ke=u.dynCall_iiiiij=u.asm.Jb).apply(null,arguments)},De=u.dynCall_jii=function(){return(De=u.dynCall_jii=u.asm.Kb).apply(null,arguments)},Pe=u.dynCall_viiiiij=function(){return(Pe=u.dynCall_viiiiij=u.asm.Lb).apply(null,arguments)},Ue=u.dynCall_vjji=function(){return(Ue=u.dynCall_vjji=u.asm.Mb).apply(null,arguments)},Fe=u.dynCall_viiijjjii=function(){return(Fe=u.dynCall_viiijjjii=u.asm.Nb).apply(null,arguments)},Ie=u.dynCall_iij=function(){return(Ie=u.dynCall_iij=u.asm.Ob).apply(null,arguments)},We=u.dynCall_ji=function(){return(We=u.dynCall_ji=u.asm.Pb).apply(null,arguments)},He=u.dynCall_iiiiiij=function(){return(He=u.dynCall_iiiiiij=u.asm.Qb).apply(null,arguments)},Le=u.dynCall_iiij=function(){return(Le=u.dynCall_iiij=u.asm.Rb).apply(null,arguments)};function ze(){function t(){if(!ve&&(ve=!0,u.calledRun=!0,!H)&&(O||dt(X),c(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for(\"function\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var t=u.postRun.shift();Z.unshift(t)}dt(Z)}}if(!(0<et))if(O)c(u),O||dt(X),postMessage({cmd:\"loaded\"});else{if(u.preRun)for(\"function\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)K();dt(q),0<et||(u.setStatus?(u.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){u.setStatus(\"\")}),1),t()}),1)):t())}}if(u.UTF8ToString=Y,u.stringToUTF8=function(t,e,n){return B(t,r(),e,n)},u.lengthBytesUTF8=G,u.keepRuntimeAlive=Q,u.wasmMemory=j,u.stackSave=Ee,u.stackRestore=Me,u.stackAlloc=Ce,u.ExitStatus=ct,u.PThread=ht,rt=function t(){ve||ze(),ve||(rt=t)},u.preInit)for(\"function\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return ze(),t.ready});t.exports=r},932:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\"/index.js\",function(t){var e,r,a;t=t||{},e||(e=void 0!==t?t:{}),e.ready=new Promise((function(t,e){r=t,a=e}));var i,o,u,c,s,l,f=Object.assign({},e),p=\"./this.program\",h=(t,e)=>{throw e},d=\"object\"==typeof window,y=\"function\"==typeof importScripts,b=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,m=\"\";b?(m=y?n(908).dirname(m)+\"/\":\"//\",l=()=>{s||(c=n(384),s=n(908))},i=function(t,e){return l(),t=s.normalize(t),c.readFileSync(t,e?void 0:\"utf8\")},u=t=>((t=i(t,!0)).buffer||(t=new Uint8Array(t)),t),o=(t,e,n)=>{l(),t=s.normalize(t),c.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(t){if(!(t instanceof J))throw t})),process.on(\"unhandledRejection\",(function(t){throw t})),h=(t,e)=>{if(_||0<L)throw process.exitCode=t,e;e instanceof J||w(\"exiting due to exception: \"+e),process.exit(t)},e.inspect=function(){return\"[Emscripten Module object]\"}):(d||y)&&(y?m=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(m=document.currentScript.src),_scriptDir&&(m=_scriptDir),m=0!==m.indexOf(\"blob:\")?m.substr(0,m.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",i=t=>{var e=new XMLHttpRequest;return e.open(\"GET\",t,!1),e.send(null),e.responseText},y&&(u=t=>{var e=new XMLHttpRequest;return e.open(\"GET\",t,!1),e.responseType=\"arraybuffer\",e.send(null),new Uint8Array(e.response)}),o=(t,e,n)=>{var r=new XMLHttpRequest;r.open(\"GET\",t,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)});var g,v=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);Object.assign(e,f),f=null,e.thisProgram&&(p=e.thisProgram),e.quit&&(h=e.quit),e.wasmBinary&&(g=e.wasmBinary);var _=e.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&V(\"no native wasm support detected\");var O,A,S,T,E,M,C=!1,x=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function R(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&x)return x.decode(t.subarray(e,n));for(r=\"\";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(t,e){return(t>>>=0)?R(T,t,e):\"\"}function k(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function D(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function P(){var t=O.buffer;A=t,e.HEAP8=S=new Int8Array(t),e.HEAP16=new Int16Array(t),e.HEAP32=E=new Int32Array(t),e.HEAPU8=T=new Uint8Array(t),e.HEAPU16=new Uint16Array(t),e.HEAPU32=M=new Uint32Array(t),e.HEAPF32=new Float32Array(t),e.HEAPF64=new Float64Array(t)}var U,F=[],I=[],W=[],H=[],L=0;function z(){var t=e.preRun.shift();F.unshift(t)}var Y,B=0,G=null,N=null;function V(t){throw e.onAbort&&e.onAbort(t),w(t=\"Aborted(\"+t+\")\"),C=!0,t=new WebAssembly.RuntimeError(t+\". Build with -sASSERTIONS for more info.\"),a(t),t}function $(){return Y.startsWith(\"data:application/octet-stream;base64,\")}if(Y=\"ort-wasm.wasm\",!$()){var q=Y;Y=e.locateFile?e.locateFile(q,m):m+q}function X(){var t=Y;try{if(t==Y&&g)return new Uint8Array(g);if(u)return u(t);throw\"both async and sync fetching of the wasm failed\"}catch(t){V(t)}}function J(t){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+t+\")\",this.status=t}function Z(t){for(;0<t.length;)t.shift()(e)}var Q=[],K=0,tt=0;function et(t){this.Db=t,this.zb=t-24,this.Ub=function(t){M[this.zb+4>>2>>>0]=t},this.Eb=function(){return M[this.zb+4>>2>>>0]},this.Sb=function(t){M[this.zb+8>>2>>>0]=t},this.Wb=function(){return M[this.zb+8>>2>>>0]},this.Tb=function(){E[this.zb>>2>>>0]=0},this.Ib=function(t){S[this.zb+12>>0>>>0]=t?1:0},this.Pb=function(){return 0!=S[this.zb+12>>0>>>0]},this.Jb=function(t){S[this.zb+13>>0>>>0]=t?1:0},this.Lb=function(){return 0!=S[this.zb+13>>0>>>0]},this.Rb=function(t,e){this.Fb(0),this.Ub(t),this.Sb(e),this.Tb(),this.Ib(!1),this.Jb(!1)},this.Nb=function(){E[this.zb>>2>>>0]+=1},this.Xb=function(){var t=E[this.zb>>2>>>0];return E[this.zb>>2>>>0]=t-1,1===t},this.Fb=function(t){M[this.zb+16>>2>>>0]=t},this.Ob=function(){return M[this.zb+16>>2>>>0]},this.Qb=function(){if(Mt(this.Eb()))return M[this.Db>>2>>>0];var t=this.Ob();return 0!==t?t:this.Db}}function nt(t){return vt(new et(t).zb)}var rt=[];function at(t){var e=rt[t];return e||(t>=rt.length&&(rt.length=t+1),rt[t]=e=U.get(t)),e}function it(t){var e=D(t)+1,n=gt(e);return n&&k(t,S,n,e),n}var ot={};function ut(){if(!ct){var t,e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:p||\"./this.program\"};for(t in ot)void 0===ot[t]?delete e[t]:e[t]=ot[t];var n=[];for(t in e)n.push(t+\"=\"+e[t]);ct=n}return ct}var ct,st=[null,[],[]];function lt(t,e){var n=st[t];0===e||10===e?((1===t?v:w)(R(n,0)),n.length=0):n.push(e)}var ft=0;function pt(t){return 0==t%4&&(0!=t%100||0==t%400)}var ht=[31,29,31,30,31,30,31,31,30,31,30,31],dt=[31,28,31,30,31,30,31,31,30,31,30,31];function yt(t,e,n,r){function a(t,e,n){for(t=\"number\"==typeof t?t.toString():t||\"\";t.length<e;)t=n[0]+t;return t}function i(t,e){return a(t,e,\"0\")}function o(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function u(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function c(t){var e=t.Bb;for(t=new Date(new Date(t.Cb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(pt(t.getFullYear())?ht:dt)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=u(new Date(t.getFullYear(),0,4)),n=u(n),0>=o(e,t)?0>=o(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var s=E[r+40>>2>>>0];for(var l in r={$b:E[r>>2>>>0],Zb:E[r+4>>2>>>0],Gb:E[r+8>>2>>>0],Kb:E[r+12>>2>>>0],Hb:E[r+16>>2>>>0],Cb:E[r+20>>2>>>0],Ab:E[r+24>>2>>>0],Bb:E[r+28>>2>>>0],bc:E[r+32>>2>>>0],Yb:E[r+36>>2>>>0],ac:s?j(s):\"\"},n=j(n),s={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})n=n.replace(new RegExp(l,\"g\"),s[l]);var f=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),p=\"January February March April May June July August September October November December\".split(\" \");for(l in s={\"%a\":function(t){return f[t.Ab].substring(0,3)},\"%A\":function(t){return f[t.Ab]},\"%b\":function(t){return p[t.Hb].substring(0,3)},\"%B\":function(t){return p[t.Hb]},\"%C\":function(t){return i((t.Cb+1900)/100|0,2)},\"%d\":function(t){return i(t.Kb,2)},\"%e\":function(t){return a(t.Kb,2,\" \")},\"%g\":function(t){return c(t).toString().substring(2)},\"%G\":function(t){return c(t)},\"%H\":function(t){return i(t.Gb,2)},\"%I\":function(t){return 0==(t=t.Gb)?t=12:12<t&&(t-=12),i(t,2)},\"%j\":function(t){for(var e=0,n=0;n<=t.Hb-1;e+=(pt(t.Cb+1900)?ht:dt)[n++]);return i(t.Kb+e,3)},\"%m\":function(t){return i(t.Hb+1,2)},\"%M\":function(t){return i(t.Zb,2)},\"%n\":function(){return\"\\\\n\"},\"%p\":function(t){return 0<=t.Gb&&12>t.Gb?\"AM\":\"PM\"},\"%S\":function(t){return i(t.$b,2)},\"%t\":function(){return\"\\\\t\"},\"%u\":function(t){return t.Ab||7},\"%U\":function(t){return i(Math.floor((t.Bb+7-t.Ab)/7),2)},\"%V\":function(t){var e=Math.floor((t.Bb+7-(t.Ab+6)%7)/7);if(2>=(t.Ab+371-t.Bb-2)%7&&e++,e)53==e&&(4==(n=(t.Ab+371-t.Bb)%7)||3==n&&pt(t.Cb)||(e=1));else{e=52;var n=(t.Ab+7-t.Bb-1)%7;(4==n||5==n&&pt(t.Cb%400-1))&&e++}return i(e,2)},\"%w\":function(t){return t.Ab},\"%W\":function(t){return i(Math.floor((t.Bb+7-(t.Ab+6)%7)/7),2)},\"%y\":function(t){return(t.Cb+1900).toString().substring(2)},\"%Y\":function(t){return t.Cb+1900},\"%z\":function(t){var e=0<=(t=t.Yb);return t=Math.abs(t)/60,(e?\"+\":\"-\")+String(\"0000\"+(t/60*100+t%60)).slice(-4)},\"%Z\":function(t){return t.ac},\"%%\":function(){return\"%\"}},n=n.replace(/%%/g,\"\\\\0\\\\0\"),s)n.includes(l)&&(n=n.replace(new RegExp(l,\"g\"),s[l](r)));return l=function(t){var e=Array(D(t)+1);return k(t,e,0,e.length),e}(n=n.replace(/\\\\0\\\\0/g,\"%\")),l.length>e?0:(S.set(l,t>>>0),l.length-1)}var bt={a:function(t){return gt(t+24)+24},m:function(t){return(t=new et(t)).Pb()||(t.Ib(!0),K--),t.Jb(!1),Q.push(t),t.Nb(),t.Qb()},ia:function(t){throw w(\"Unexpected exception thrown, this is not properly supported - aborting\"),C=!0,t},w:function(){Ot(0);var t=Q.pop();if(t.Xb()&&!t.Lb()){var e=t.Wb();e&&at(e)(t.Db),nt(t.Db)}tt=0},d:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},k:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},g:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},s:nt,L:function(){var t=Q.pop();t||V(\"no exception to throw\");var e=t.Db;throw t.Lb()||(Q.push(t),t.Jb(!0),t.Ib(!1),K++),tt=e,e},b:function(t,e,n){throw new et(t).Rb(e,n),tt=t,K++,t},la:function(){return K},i:function(t){throw tt||(tt=t),t},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},Ha:function(){},Ja:function(){V(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Ia:function(){V(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getUTCSeconds(),E[e+4>>2>>>0]=t.getUTCMinutes(),E[e+8>>2>>>0]=t.getUTCHours(),E[e+12>>2>>>0]=t.getUTCDate(),E[e+16>>2>>>0]=t.getUTCMonth(),E[e+20>>2>>>0]=t.getUTCFullYear()-1900,E[e+24>>2>>>0]=t.getUTCDay(),E[e+28>>2>>>0]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},Ea:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getSeconds(),E[e+4>>2>>>0]=t.getMinutes(),E[e+8>>2>>>0]=t.getHours(),E[e+12>>2>>>0]=t.getDate(),E[e+16>>2>>>0]=t.getMonth(),E[e+20>>2>>>0]=t.getFullYear()-1900,E[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1);E[e+28>>2>>>0]=(t.getTime()-n.getTime())/864e5|0,E[e+36>>2>>>0]=-60*t.getTimezoneOffset();var r=new Date(t.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[e+32>>2>>>0]=0|(r!=n&&t.getTimezoneOffset()==Math.min(n,r))},Fa:function(t){var e=new Date(E[t+20>>2>>>0]+1900,E[t+16>>2>>>0],E[t+12>>2>>>0],E[t+8>>2>>>0],E[t+4>>2>>>0],E[t>>2>>>0],0),n=E[t+32>>2>>>0],r=e.getTimezoneOffset(),a=new Date(e.getFullYear(),0,1),i=new Date(e.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),u=Math.min(o,i);return 0>n?E[t+32>>2>>>0]=Number(i!=o&&u==r):0<n!=(u==r)&&(i=Math.max(o,i),e.setTime(e.getTime()+6e4*((0<n?u:i)-r))),E[t+24>>2>>>0]=e.getDay(),E[t+28>>2>>>0]=(e.getTime()-a.getTime())/864e5|0,E[t>>2>>>0]=e.getSeconds(),E[t+4>>2>>>0]=e.getMinutes(),E[t+8>>2>>>0]=e.getHours(),E[t+12>>2>>>0]=e.getDate(),E[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},sa:function(){return-52},ta:function(){},Ga:function t(e,n,r){t.Vb||(t.Vb=!0,function(t,e,n){function r(t){return(t=t.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?t[1]:\"GMT\"}var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var u=o.getTimezoneOffset();E[t>>2>>>0]=60*Math.max(a,u),E[e>>2>>>0]=Number(a!=u),t=r(i),e=r(o),t=it(t),e=it(e),u<a?(M[n>>2>>>0]=t,M[n+4>>2>>>0]=e):(M[n>>2>>>0]=e,M[n+4>>2>>>0]=t)}(e,n,r))},B:function(){V(\"\")},ma:function(){return 4294901760},I:b?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:()=>performance.now(),xa:function(t,e,n){T.copyWithin(t>>>0,e>>>0,e+n>>>0)},G:function(t){var e=T.length;if(4294901760<(t>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=e*(1+.2/n);r=Math.min(r,t+100663296);var a=Math;r=Math.max(t,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);t:{try{O.grow(a-A.byteLength+65535>>>16),P();var i=1;break t}catch(t){}i=void 0}if(i)return!0}return!1},va:function(t,e){var n=0;return ut().forEach((function(r,a){var i=e+n;for(a=M[t+4*a>>2>>>0]=i,i=0;i<r.length;++i)S[a++>>0>>>0]=r.charCodeAt(i);S[a>>0>>>0]=0,n+=r.length+1})),0},wa:function(t,e){var n=ut();M[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),M[e>>2>>>0]=r,0},ba:function(t){_||0<L||(_t(),Z(W),wt(0),st[1].length&&lt(1,10),st[2].length&&lt(2,10)),_||0<L||(e.onExit&&e.onExit(t),C=!0),h(t,new J(t))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(t,e,n,r){for(var a=0,i=0;i<n;i++){var o=M[e>>2>>>0],u=M[e+4>>2>>>0];e+=8;for(var c=0;c<u;c++)lt(t,T[o+c>>>0]);a+=u}return M[r>>2>>>0]=a,0},c:function(){return ft},ja:function t(e,r){t.Mb||(t.Mb=function(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(b)try{var e=n(Object(function(){var t=new Error(\"Cannot find module \\'crypto\\'\");throw t.code=\"MODULE_NOT_FOUND\",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>V(\"randomDevice\")}());for(var a=0;a<r;a++)S[e+a>>0>>>0]=t.Mb();return 0},ea:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},fa:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},J:function(t){var e=At();try{return at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},e:function(t,e){var n=At();try{return at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},N:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},O:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},j:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},o:function(t,e,n,r){var a=At();try{return at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},p:function(t,e,n,r,a){var i=At();try{return at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},M:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},r:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},v:function(t,e,n,r,a,i,o){var u=At();try{return at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},K:function(t,e,n,r,a,i,o,u){var c=At();try{return at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{return at(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},X:function(t,e,n,r,a,i,o,u){var c=At();try{return Ft(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},V:function(t,e,n,r,a,i,o){var u=At();try{return xt(t,e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},U:function(t,e,n,r,a){var i=At();try{return It(t,e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},Z:function(t,e,n,r){var a=At();try{return Pt(t,e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},W:function(t){var e=At();try{return Ct(t)}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},Y:function(t,e){var n=At();try{return Ut(t,e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},T:function(t,e,n){var r=At();try{return Rt(t,e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},f:function(t){var e=At();try{at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},q:function(t,e){var n=At();try{at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},h:function(t,e,n){var r=At();try{at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},da:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},l:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},t:function(t,e,n,r,a){var i=At();try{at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},u:function(t,e,n,r,a,i){var o=At();try{at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},x:function(t,e,n,r,a,i,o){var u=At();try{at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},z:function(t,e,n,r,a,i,o,u){var c=At();try{at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},ga:function(t,e,n,r,a,i,o,u,c){var s=At();try{at(t)(e,n,r,a,i,o,u,c)}catch(t){if(St(s),t!==t+0)throw t;Ot(1,0)}},A:function(t,e,n,r,a,i,o,u,c,s,l){var f=At();try{at(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(St(f),t!==t+0)throw t;Ot(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=At();try{at(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(St(b),t!==t+0)throw t;Ot(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=At();try{jt(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},_:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{Dt(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},$:function(t,e,n,r,a,i){var o=At();try{kt(t,e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},n:function(t){return t},F:function(t){ft=t},ha:yt,y:function(t,e,n,r){return yt(t,e,n,r)}};!function(){function t(t){e.asm=t.exports,O=e.asm.Ka,P(),U=e.asm.ib,I.unshift(e.asm.La),B--,e.monitorRunDependencies&&e.monitorRunDependencies(B),0==B&&(null!==G&&(clearInterval(G),G=null),N&&(t=N,N=null,t()))}function n(e){t(e.instance)}function r(t){return function(){if(!g&&(d||y)){if(\"function\"==typeof fetch&&!Y.startsWith(\"file://\"))return fetch(Y,{credentials:\"same-origin\"}).then((function(t){if(!t.ok)throw\"failed to load wasm binary file at \\'\"+Y+\"\\'\";return t.arrayBuffer()})).catch((function(){return X()}));if(o)return new Promise((function(t,e){o(Y,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return X()}))}().then((function(t){return WebAssembly.instantiate(t,i)})).then((function(t){return t})).then(t,(function(t){w(\"failed to asynchronously prepare wasm: \"+t),V(t)}))}var i={a:bt};if(B++,e.monitorRunDependencies&&e.monitorRunDependencies(B),e.instantiateWasm)try{return e.instantiateWasm(i,t)}catch(t){return w(\"Module.instantiateWasm callback failed with error: \"+t),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||$()||Y.startsWith(\"file://\")||b||\"function\"!=typeof fetch?r(n):fetch(Y,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,i).then(n,(function(t){return w(\"wasm streaming compile failed: \"+t),w(\"falling back to ArrayBuffer instantiation\"),r(n)}))}))).catch(a)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.La).apply(null,arguments)},e._OrtInit=function(){return(e._OrtInit=e.asm.Ma).apply(null,arguments)},e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.Na).apply(null,arguments)},e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.Oa).apply(null,arguments)},e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.Pa).apply(null,arguments)},e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.Qa).apply(null,arguments)},e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.Ra).apply(null,arguments)},e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.Sa).apply(null,arguments)},e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.Ta).apply(null,arguments)},e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.Ua).apply(null,arguments)},e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.Va).apply(null,arguments)},e._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.Wa).apply(null,arguments)},e._OrtFree=function(){return(e._OrtFree=e.asm.Xa).apply(null,arguments)},e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.Ya).apply(null,arguments)},e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.Za).apply(null,arguments)},e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm._a).apply(null,arguments)},e._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.$a).apply(null,arguments)},e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.ab).apply(null,arguments)},e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.bb).apply(null,arguments)},e._OrtRun=function(){return(e._OrtRun=e.asm.cb).apply(null,arguments)},e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.db).apply(null,arguments)};var mt,gt=e._malloc=function(){return(gt=e._malloc=e.asm.eb).apply(null,arguments)},vt=e._free=function(){return(vt=e._free=e.asm.fb).apply(null,arguments)},wt=e._fflush=function(){return(wt=e._fflush=e.asm.gb).apply(null,arguments)},_t=e.___funcs_on_exit=function(){return(_t=e.___funcs_on_exit=e.asm.hb).apply(null,arguments)},Ot=e._setThrew=function(){return(Ot=e._setThrew=e.asm.jb).apply(null,arguments)},At=e.stackSave=function(){return(At=e.stackSave=e.asm.kb).apply(null,arguments)},St=e.stackRestore=function(){return(St=e.stackRestore=e.asm.lb).apply(null,arguments)},Tt=e.stackAlloc=function(){return(Tt=e.stackAlloc=e.asm.mb).apply(null,arguments)},Et=e.___cxa_can_catch=function(){return(Et=e.___cxa_can_catch=e.asm.nb).apply(null,arguments)},Mt=e.___cxa_is_pointer_type=function(){return(Mt=e.___cxa_is_pointer_type=e.asm.ob).apply(null,arguments)},Ct=e.dynCall_j=function(){return(Ct=e.dynCall_j=e.asm.pb).apply(null,arguments)},xt=e.dynCall_iiiiij=function(){return(xt=e.dynCall_iiiiij=e.asm.qb).apply(null,arguments)},Rt=e.dynCall_jii=function(){return(Rt=e.dynCall_jii=e.asm.rb).apply(null,arguments)},jt=e.dynCall_viiiiij=function(){return(jt=e.dynCall_viiiiij=e.asm.sb).apply(null,arguments)},kt=e.dynCall_vjji=function(){return(kt=e.dynCall_vjji=e.asm.tb).apply(null,arguments)},Dt=e.dynCall_viiijjjii=function(){return(Dt=e.dynCall_viiijjjii=e.asm.ub).apply(null,arguments)},Pt=e.dynCall_iij=function(){return(Pt=e.dynCall_iij=e.asm.vb).apply(null,arguments)},Ut=e.dynCall_ji=function(){return(Ut=e.dynCall_ji=e.asm.wb).apply(null,arguments)},Ft=e.dynCall_iiiiiij=function(){return(Ft=e.dynCall_iiiiiij=e.asm.xb).apply(null,arguments)},It=e.dynCall_iiij=function(){return(It=e.dynCall_iiij=e.asm.yb).apply(null,arguments)};function Wt(){function t(){if(!mt&&(mt=!0,e.calledRun=!0,!C)){if(Z(I),r(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var t=e.postRun.shift();H.unshift(t)}Z(H)}}if(!(0<B)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)z();Z(F),0<B||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){e.setStatus(\"\")}),1),t()}),1)):t())}}if(e.UTF8ToString=j,e.stringToUTF8=function(t,e,n){return k(t,T,e,n)},e.lengthBytesUTF8=D,e.stackSave=At,e.stackRestore=St,e.stackAlloc=Tt,N=function t(){mt||Wt(),mt||(N=t)},e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();return Wt(),t.ready});t.exports=r},967:(t,e)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.iterateExtraOptions=void 0,e.iterateExtraOptions=(t,n,r,a)=>{if(\"object\"==typeof t&&null!==t){if(r.has(t))throw new Error(\"Circular reference in options\");r.add(t)}Object.entries(t).forEach((([t,i])=>{const o=n?n+t:t;if(\"object\"==typeof i)(0,e.iterateExtraOptions)(i,o+\".\",r,a);else if(\"string\"==typeof i||\"number\"==typeof i)a(o,i.toString());else{if(\"boolean\"!=typeof i)throw new Error(\"Can\\'t handle extra config type: \"+typeof i);a(o,i?\"1\":\"0\")}}))}},586:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.setRunOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setRunOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};try{if(void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if(\"number\"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if(\"number\"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);void 0===(null==t?void 0:t.terminate)&&(u.terminate=!1);let i=0;if(void 0!==(null==t?void 0:t.tag)&&(i=(0,a.allocWasmString)(t.tag,o)),n=e._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,i),0===n)throw new Error(\"Can\\'t create run options\");return void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,\"\",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddRunConfigEntry(n,i,u))throw new Error(`Can\\'t set a run config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseRunOptions(n),o.forEach(e._free),t}}},919:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.setSessionOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setSessionOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};(t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});const e=t.extra.session;e.use_ort_model_bytes_directly||(e.use_ort_model_bytes_directly=\"1\")})(u);try{void 0===(null==t?void 0:t.graphOptimizationLevel)&&(u.graphOptimizationLevel=\"all\");const c=(t=>{switch(t){case\"disabled\":return 0;case\"basic\":return 1;case\"extended\":return 2;case\"all\":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}})(u.graphOptimizationLevel);void 0===(null==t?void 0:t.enableCpuMemArena)&&(u.enableCpuMemArena=!0),void 0===(null==t?void 0:t.enableMemPattern)&&(u.enableMemPattern=!0),void 0===(null==t?void 0:t.executionMode)&&(u.executionMode=\"sequential\");const s=(t=>{switch(t){case\"sequential\":return 0;case\"parallel\":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}})(u.executionMode);let l=0;if(void 0!==(null==t?void 0:t.logId)&&(l=(0,a.allocWasmString)(t.logId,o)),void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if(\"number\"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if(\"number\"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);if(void 0===(null==t?void 0:t.enableProfiling)&&(u.enableProfiling=!1),n=e._OrtCreateSessionOptions(c,!!u.enableCpuMemArena,!!u.enableMemPattern,s,!!u.enableProfiling,0,l,u.logSeverityLevel,u.logVerbosityLevel),0===n)throw new Error(\"Can\\'t create session options\");return(null==t?void 0:t.executionProviders)&&((t,e,n)=>{for(const r of e){let e=\"string\"==typeof r?r:r.name;switch(e){case\"xnnpack\":e=\"XNNPACK\";break;case\"wasm\":case\"cpu\":continue;default:throw new Error(`not supported EP: ${e}`)}const o=(0,a.allocWasmString)(e,n);if(0!==(0,i.getInstance)()._OrtAppendExecutionProvider(t,o))throw new Error(`Can\\'t append execution provider: ${e}`)}})(n,t.executionProviders,o),void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,\"\",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddSessionConfigEntry(n,i,u))throw new Error(`Can\\'t set a session config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseSessionOptions(n),o.forEach(e._free),t}}},983:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.allocWasmString=void 0;const r=n(361);e.allocWasmString=(t,e)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(t)+1,i=n._malloc(a);return n.stringToUTF8(t,i,a),e.push(i),i}},349:(t,e,n)=>{\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.extractTransferableBuffers=e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initOrt=void 0;const r=n(586),a=n(919),i=n(983),o=n(361);e.initOrt=(t,e)=>{const n=(0,o.getInstance)()._OrtInit(t,e);if(0!==n)throw new Error(`Can\\'t initialize onnxruntime. error code = ${n}`)};const u=new Map;e.createSessionAllocate=t=>{const e=(0,o.getInstance)(),n=e._malloc(t.byteLength);return e.HEAPU8.set(t,n),[n,t.byteLength]},e.createSessionFinalize=(t,e)=>{const n=(0,o.getInstance)();let r=0,i=0,c=[];try{if([i,c]=(0,a.setSessionOptions)(e),r=n._OrtCreateSession(t[0],t[1],i),0===r)throw new Error(\"Can\\'t create a session\")}finally{n._free(t[0]),n._OrtReleaseSessionOptions(i),c.forEach(n._free)}const s=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],h=[],d=[];for(let t=0;t<s;t++){const e=n._OrtGetInputName(r,t);if(0===e)throw new Error(\"Can\\'t get an input name\");p.push(e),f.push(n.UTF8ToString(e))}for(let t=0;t<l;t++){const e=n._OrtGetOutputName(r,t);if(0===e)throw new Error(\"Can\\'t get an output name\");d.push(e),h.push(n.UTF8ToString(e))}return u.set(r,[r,p,d]),[r,f,h]},e.createSession=(t,n)=>{const r=(0,e.createSessionAllocate)(t);return(0,e.createSessionFinalize)(r,n)},e.releaseSession=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error(\"invalid session id\");const r=n[0],a=n[1],i=n[2];a.forEach(e._OrtFree),i.forEach(e._OrtFree),e._OrtReleaseSession(r),u.delete(t)};const c=t=>{switch(t){case\"int8\":return 3;case\"uint8\":return 2;case\"bool\":return 9;case\"int16\":return 5;case\"uint16\":return 4;case\"int32\":return 6;case\"uint32\":return 12;case\"float32\":return 1;case\"float64\":return 11;case\"string\":return 8;case\"int64\":return 7;case\"uint64\":return 13;default:throw new Error(`unsupported data type: ${t}`)}},s=t=>{switch(t){case 3:return\"int8\";case 2:return\"uint8\";case 9:return\"bool\";case 5:return\"int16\";case 4:return\"uint16\";case 6:return\"int32\";case 12:return\"uint32\";case 1:return\"float32\";case 11:return\"float64\";case 8:return\"string\";case 7:return\"int64\";case 13:return\"uint64\";default:throw new Error(`unsupported data type: ${t}`)}},l=t=>{switch(t){case\"float32\":return Float32Array;case\"uint8\":case\"bool\":return Uint8Array;case\"int8\":return Int8Array;case\"uint16\":return Uint16Array;case\"int16\":return Int16Array;case\"int32\":return Int32Array;case\"float64\":return Float64Array;case\"uint32\":return Uint32Array;case\"int64\":return BigInt64Array;case\"uint64\":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}};e.run=(t,e,n,a,f)=>{const p=(0,o.getInstance)(),h=u.get(t);if(!h)throw new Error(\"invalid session id\");const d=h[0],y=h[1],b=h[2],m=e.length,g=a.length;let v=0,w=[];const _=[],O=[];try{[v,w]=(0,r.setRunOptions)(f);for(let t=0;t<m;t++){const e=n[t][0],r=n[t][1],a=n[t][2];let o,u;if(Array.isArray(a)){u=4*a.length,o=p._malloc(u),O.push(o);let t=o/4;for(let e=0;e<a.length;e++){if(\"string\"!=typeof a[e])throw new TypeError(`tensor data at index ${e} is not a string`);p.HEAPU32[t++]=(0,i.allocWasmString)(a[e],O)}}else u=a.byteLength,o=p._malloc(u),O.push(o),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),o);const s=p.stackSave(),l=p.stackAlloc(4*r.length);try{let t=l/4;r.forEach((e=>p.HEAP32[t++]=e));const n=p._OrtCreateTensor(c(e),o,u,l,r.length);if(0===n)throw new Error(\"Can\\'t create a tensor\");_.push(n)}finally{p.stackRestore(s)}}const t=p.stackSave(),o=p.stackAlloc(4*m),u=p.stackAlloc(4*m),h=p.stackAlloc(4*g),A=p.stackAlloc(4*g);try{let n=o/4,r=u/4,i=h/4,c=A/4;for(let t=0;t<m;t++)p.HEAPU32[n++]=_[t],p.HEAPU32[r++]=y[e[t]];for(let t=0;t<g;t++)p.HEAPU32[i++]=0,p.HEAPU32[c++]=b[a[t]];let f=p._OrtRun(d,u,o,m,A,g,h,v);const w=[];if(0===f)for(let t=0;t<g;t++){const e=p.HEAPU32[h/4+t],n=p.stackSave(),r=p.stackAlloc(16);let a,i=0;try{if(f=p._OrtGetTensorData(e,r,r+4,r+8,r+12),0!==f)throw new Error(`Can\\'t access output tensor data. error code = ${f}`);let t=r/4;const o=p.HEAPU32[t++];i=p.HEAPU32[t++];const u=p.HEAPU32[t++],c=p.HEAPU32[t++],h=[];for(let t=0;t<c;t++)h.push(p.HEAPU32[u/4+t]);p._OrtFree(u);const d=0===h.length?1:h.reduce(((t,e)=>t*e));if(a=s(o),\"string\"===a){const t=[];let e=i/4;for(let n=0;n<d;n++){const r=p.HEAPU32[e++],a=n===d-1?void 0:p.HEAPU32[e]-r;t.push(p.UTF8ToString(r,a))}w.push([a,h,t])}else{const t=new(l(a))(d);new Uint8Array(t.buffer,t.byteOffset,t.byteLength).set(p.HEAPU8.subarray(i,i+t.byteLength)),w.push([a,h,t])}}finally{p.stackRestore(n),\"string\"===a&&i&&p._free(i),p._OrtReleaseTensor(e)}}if(0===f)return w;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(t)}}finally{_.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(v),w.forEach(p._free)}},e.endProfiling=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error(\"invalid session id\");const r=n[0],a=e._OrtEndProfiling(r);if(0===a)throw new Error(\"Can\\'t get an profile file name\");e._OrtFree(a)},e.extractTransferableBuffers=t=>{const e=[];for(const n of t){const t=n[2];!Array.isArray(t)&&t.buffer&&e.push(t.buffer)}return e}},361:function(t,e,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(e,n);a&&!(\"get\"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,a)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,\"default\",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)\"default\"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return a(e,t),e},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\"__esModule\",{value:!0}),e.dispose=e.getInstance=e.initializeWebAssembly=void 0;const u=i(n(449)),c=o(n(932)),s=n(474);let l,f=!1,p=!1,h=!1;const d=(t,e)=>e?t?\"ort-wasm-simd-threaded.wasm\":\"ort-wasm-threaded.wasm\":t?\"ort-wasm-simd.wasm\":\"ort-wasm.wasm\";e.initializeWebAssembly=async t=>{if(f)return Promise.resolve();if(p)throw new Error(\"multiple calls to \\'initializeWebAssembly()\\' detected.\");if(h)throw new Error(\"previous call to \\'initializeWebAssembly()\\' failed.\");p=!0;const e=t.initTimeout,r=t.numThreads,a=t.simd,i=r>1&&(()=>{try{return\"undefined\"!=typeof SharedArrayBuffer&&(\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(t){return!1}})(),o=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(t){return!1}})(),y=\"string\"==typeof t.wasmPaths?t.wasmPaths:void 0,b=d(!1,i),m=d(o,i),g=\"object\"==typeof t.wasmPaths?t.wasmPaths[m]:void 0;let v=!1;const w=[];if(e>0&&w.push(new Promise((t=>{setTimeout((()=>{v=!0,t()}),e)}))),w.push(new Promise(((t,e)=>{const r=i?s:c.default,a={locateFile:(t,e)=>i&&t.endsWith(\".worker.js\")&&\"undefined\"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:\"text/javascript\"})):t===b?null!=g?g:(null!=y?y:e)+m:e+t};if(i)if(\"undefined\"==typeof Blob)a.mainScriptUrlOrBlob=u.join(\"/\",\"ort-wasm-threaded.js\");else{const t=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([t],{type:\"text/javascript\"})}r(a).then((e=>{p=!1,f=!0,l=e,t()}),(t=>{p=!1,h=!0,e(t)}))}))),await Promise.race(w),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`)},e.getInstance=()=>{if(f&&l)return l;throw new Error(\"WebAssembly is not initialized yet.\")},e.dispose=()=>{var t;!f||p||h||(p=!0,null===(t=l.PThread)||void 0===t||t.terminateAllThreads(),l=void 0,p=!1,f=!1,h=!0)}},154:t=>{\"use strict\";t.exports=\\'\"use strict\";var e={},t=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;if(t){var r=require(\"worker_threads\"),a=r.parentPort;a.on(\"message\",(e=>onmessage({data:e})));var o=require(\"fs\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\"utf8\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\" \");t?o.writeSync(2,e+\"\\\\\\\\n\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\"load\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\"string\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\"run\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\"unwind\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\"cancel\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\"setimmediate\"===t.data.target||(\"processProxyingQueue\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\"worker.js received unknown command \"+t.data.cmd),i(t.data)))}catch(t){throw i(\"worker.js onmessage() captured an uncaught exception: \"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n\\'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if(\"object\"==typeof globalThis)return globalThis;try{return this||new Function(\"return this\")()}catch(t){if(\"object\"==typeof window)return window}}(),(()=>{\"use strict\";const t=n(349),e=n(361);self.onmessage=n=>{switch(n.data.type){case\"init-wasm\":(0,e.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\"init-wasm\"})),(t=>postMessage({type:\"init-wasm\",err:t})));break;case\"init-ort\":try{const{numThreads:e,loggingLevel:r}=n.data.in;(0,t.initOrt)(e,r),postMessage({type:\"init-ort\"})}catch(t){postMessage({type:\"init-ort\",err:t})}break;case\"create_allocate\":try{const{model:e}=n.data.in,r=(0,t.createSessionAllocate)(e);postMessage({type:\"create_allocate\",out:r})}catch(t){postMessage({type:\"create_allocate\",err:t})}break;case\"create_finalize\":try{const{modeldata:e,options:r}=n.data.in,a=(0,t.createSessionFinalize)(e,r);postMessage({type:\"create_finalize\",out:a})}catch(t){postMessage({type:\"create_finalize\",err:t})}break;case\"create\":try{const{model:e,options:r}=n.data.in,a=(0,t.createSession)(e,r);postMessage({type:\"create\",out:a})}catch(t){postMessage({type:\"create\",err:t})}break;case\"release\":try{const e=n.data.in;(0,t.releaseSession)(e),postMessage({type:\"release\"})}catch(t){postMessage({type:\"release\",err:t})}break;case\"run\":try{const{sessionId:e,inputIndices:r,inputs:a,outputIndices:i,options:o}=n.data.in,u=(0,t.run)(e,r,a,i,o);postMessage({type:\"run\",out:u},(0,t.extractTransferableBuffers)(u))}catch(t){postMessage({type:\"run\",err:t})}break;case\"end-profiling\":try{const e=n.data.in;(0,t.endProfiling)(e),postMessage({type:\"end-profiling\"})}catch(t){postMessage({type:\"end-profiling\",err:t})}}}})()})();\\n',\"Worker\",void 0,void 0)}},477:t=>{\"use strict\";t.exports=function(t,e,n,r){var i=self||window;try{try{var o;try{o=new i.Blob([t])}catch(e){(o=new(i.BlobBuilder||i.WebKitBlobBuilder||i.MozBlobBuilder||i.MSBlobBuilder)).append(t),o=o.getBlob()}var a=i.URL||i.webkitURL,s=a.createObjectURL(o),u=new i[e](s,n);return a.revokeObjectURL(s),u}catch(r){return new i[e](\"data:application/javascript,\".concat(encodeURIComponent(t)),n)}}catch(t){if(!r)throw Error(\"Inline worker is not supported\");return new i[e](r,n)}}},4154:t=>{\"use strict\";t.exports='\"use strict\";var e={},t=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;if(t){var r=require(\"worker_threads\"),a=r.parentPort;a.on(\"message\",(e=>onmessage({data:e})));var o=require(\"fs\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\"utf8\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\" \");t?o.writeSync(2,e+\"\\\\n\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\"load\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\"string\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\"run\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\"unwind\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\"cancel\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\"setimmediate\"===t.data.target||(\"processProxyingQueue\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\"worker.js received unknown command \"+t.data.cmd),i(t.data)))}catch(t){throw i(\"worker.js onmessage() captured an uncaught exception: \"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\n'},1670:t=>{\"use strict\";t.exports=__WEBPACK_EXTERNAL_MODULE__1670__},7067:()=>{},1296:()=>{},1384:()=>{},3993:()=>{},908:()=>{},6953:()=>{},9925:()=>{},2806:()=>{},6449:()=>{},2850:()=>{},5381:()=>{},5686:(t,e,n)=>{\"use strict\";n.r(e),n.d(e,{flatbuffers:()=>r});var r={};r.Offset,r.Table,r.SIZEOF_SHORT=2,r.SIZEOF_INT=4,r.FILE_IDENTIFIER_LENGTH=4,r.SIZE_PREFIX_LENGTH=4,r.Encoding={UTF8_BYTES:1,UTF16_STRING:2},r.int32=new Int32Array(2),r.float32=new Float32Array(r.int32.buffer),r.float64=new Float64Array(r.int32.buffer),r.isLittleEndian=1===new Uint16Array(new Uint8Array([1,0]).buffer)[0],r.Long=function(t,e){this.low=0|t,this.high=0|e},r.Long.create=function(t,e){return 0==t&&0==e?r.Long.ZERO:new r.Long(t,e)},r.Long.prototype.toFloat64=function(){return(this.low>>>0)+4294967296*this.high},r.Long.prototype.equals=function(t){return this.low==t.low&&this.high==t.high},r.Long.ZERO=new r.Long(0,0),r.Builder=function(t){if(t)e=t;else var e=1024;this.bb=r.ByteBuffer.allocate(e),this.space=e,this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1},r.Builder.prototype.clear=function(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1},r.Builder.prototype.forceDefaults=function(t){this.force_defaults=t},r.Builder.prototype.dataBuffer=function(){return this.bb},r.Builder.prototype.asUint8Array=function(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())},r.Builder.prototype.prep=function(t,e){t>this.minalign&&(this.minalign=t);for(var n=1+~(this.bb.capacity()-this.space+e)&t-1;this.space<n+t+e;){var i=this.bb.capacity();this.bb=r.Builder.growByteBuffer(this.bb),this.space+=this.bb.capacity()-i}this.pad(n)},r.Builder.prototype.pad=function(t){for(var e=0;e<t;e++)this.bb.writeInt8(--this.space,0)},r.Builder.prototype.writeInt8=function(t){this.bb.writeInt8(this.space-=1,t)},r.Builder.prototype.writeInt16=function(t){this.bb.writeInt16(this.space-=2,t)},r.Builder.prototype.writeInt32=function(t){this.bb.writeInt32(this.space-=4,t)},r.Builder.prototype.writeInt64=function(t){this.bb.writeInt64(this.space-=8,t)},r.Builder.prototype.writeFloat32=function(t){this.bb.writeFloat32(this.space-=4,t)},r.Builder.prototype.writeFloat64=function(t){this.bb.writeFloat64(this.space-=8,t)},r.Builder.prototype.addInt8=function(t){this.prep(1,0),this.writeInt8(t)},r.Builder.prototype.addInt16=function(t){this.prep(2,0),this.writeInt16(t)},r.Builder.prototype.addInt32=function(t){this.prep(4,0),this.writeInt32(t)},r.Builder.prototype.addInt64=function(t){this.prep(8,0),this.writeInt64(t)},r.Builder.prototype.addFloat32=function(t){this.prep(4,0),this.writeFloat32(t)},r.Builder.prototype.addFloat64=function(t){this.prep(8,0),this.writeFloat64(t)},r.Builder.prototype.addFieldInt8=function(t,e,n){(this.force_defaults||e!=n)&&(this.addInt8(e),this.slot(t))},r.Builder.prototype.addFieldInt16=function(t,e,n){(this.force_defaults||e!=n)&&(this.addInt16(e),this.slot(t))},r.Builder.prototype.addFieldInt32=function(t,e,n){(this.force_defaults||e!=n)&&(this.addInt32(e),this.slot(t))},r.Builder.prototype.addFieldInt64=function(t,e,n){!this.force_defaults&&e.equals(n)||(this.addInt64(e),this.slot(t))},r.Builder.prototype.addFieldFloat32=function(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat32(e),this.slot(t))},r.Builder.prototype.addFieldFloat64=function(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat64(e),this.slot(t))},r.Builder.prototype.addFieldOffset=function(t,e,n){(this.force_defaults||e!=n)&&(this.addOffset(e),this.slot(t))},r.Builder.prototype.addFieldStruct=function(t,e,n){e!=n&&(this.nested(e),this.slot(t))},r.Builder.prototype.nested=function(t){if(t!=this.offset())throw new Error(\"FlatBuffers: struct must be serialized inline.\")},r.Builder.prototype.notNested=function(){if(this.isNested)throw new Error(\"FlatBuffers: object serialization must not be nested.\")},r.Builder.prototype.slot=function(t){this.vtable[t]=this.offset()},r.Builder.prototype.offset=function(){return this.bb.capacity()-this.space},r.Builder.growByteBuffer=function(t){var e=t.capacity();if(3221225472&e)throw new Error(\"FlatBuffers: cannot grow buffer beyond 2 gigabytes.\");var n=e<<1,i=r.ByteBuffer.allocate(n);return i.setPosition(n-e),i.bytes().set(t.bytes(),n-e),i},r.Builder.prototype.addOffset=function(t){this.prep(r.SIZEOF_INT,0),this.writeInt32(this.offset()-t+r.SIZEOF_INT)},r.Builder.prototype.startObject=function(t){this.notNested(),null==this.vtable&&(this.vtable=[]),this.vtable_in_use=t;for(var e=0;e<t;e++)this.vtable[e]=0;this.isNested=!0,this.object_start=this.offset()},r.Builder.prototype.endObject=function(){if(null==this.vtable||!this.isNested)throw new Error(\"FlatBuffers: endObject called without startObject\");this.addInt32(0);for(var t=this.offset(),e=this.vtable_in_use-1;e>=0&&0==this.vtable[e];e--);for(var n=e+1;e>=0;e--)this.addInt16(0!=this.vtable[e]?t-this.vtable[e]:0);this.addInt16(t-this.object_start);var i=(n+2)*r.SIZEOF_SHORT;this.addInt16(i);var o=0,a=this.space;t:for(e=0;e<this.vtables.length;e++){var s=this.bb.capacity()-this.vtables[e];if(i==this.bb.readInt16(s)){for(var u=r.SIZEOF_SHORT;u<i;u+=r.SIZEOF_SHORT)if(this.bb.readInt16(a+u)!=this.bb.readInt16(s+u))continue t;o=this.vtables[e];break}}return o?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,o-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t},r.Builder.prototype.finish=function(t,e,n){var i=n?r.SIZE_PREFIX_LENGTH:0;if(e){var o=e;if(this.prep(this.minalign,r.SIZEOF_INT+r.FILE_IDENTIFIER_LENGTH+i),o.length!=r.FILE_IDENTIFIER_LENGTH)throw new Error(\"FlatBuffers: file identifier must be length \"+r.FILE_IDENTIFIER_LENGTH);for(var a=r.FILE_IDENTIFIER_LENGTH-1;a>=0;a--)this.writeInt8(o.charCodeAt(a))}this.prep(this.minalign,r.SIZEOF_INT+i),this.addOffset(t),i&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)},r.Builder.prototype.finishSizePrefixed=function(t,e){this.finish(t,e,!0)},r.Builder.prototype.requiredField=function(t,e){var n=this.bb.capacity()-t,r=n-this.bb.readInt32(n);if(0==this.bb.readInt16(r+e))throw new Error(\"FlatBuffers: field \"+e+\" must be set\")},r.Builder.prototype.startVector=function(t,e,n){this.notNested(),this.vector_num_elems=e,this.prep(r.SIZEOF_INT,t*e),this.prep(n,t*e)},r.Builder.prototype.endVector=function(){return this.writeInt32(this.vector_num_elems),this.offset()},r.Builder.prototype.createString=function(t){if(t instanceof Uint8Array)var e=t;else{e=[];for(var n=0;n<t.length;){var r,i=t.charCodeAt(n++);(r=i<55296||i>=56320?i:(i<<10)+t.charCodeAt(n++)+-56613888)<128?e.push(r):(r<2048?e.push(r>>6&31|192):(r<65536?e.push(r>>12&15|224):e.push(r>>18&7|240,r>>12&63|128),e.push(r>>6&63|128)),e.push(63&r|128))}}this.addInt8(0),this.startVector(1,e.length,1),this.bb.setPosition(this.space-=e.length),n=0;for(var o=this.space,a=this.bb.bytes();n<e.length;n++)a[o++]=e[n];return this.endVector()},r.Builder.prototype.createLong=function(t,e){return r.Long.create(t,e)},r.ByteBuffer=function(t){this.bytes_=t,this.position_=0},r.ByteBuffer.allocate=function(t){return new r.ByteBuffer(new Uint8Array(t))},r.ByteBuffer.prototype.clear=function(){this.position_=0},r.ByteBuffer.prototype.bytes=function(){return this.bytes_},r.ByteBuffer.prototype.position=function(){return this.position_},r.ByteBuffer.prototype.setPosition=function(t){this.position_=t},r.ByteBuffer.prototype.capacity=function(){return this.bytes_.length},r.ByteBuffer.prototype.readInt8=function(t){return this.readUint8(t)<<24>>24},r.ByteBuffer.prototype.readUint8=function(t){return this.bytes_[t]},r.ByteBuffer.prototype.readInt16=function(t){return this.readUint16(t)<<16>>16},r.ByteBuffer.prototype.readUint16=function(t){return this.bytes_[t]|this.bytes_[t+1]<<8},r.ByteBuffer.prototype.readInt32=function(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24},r.ByteBuffer.prototype.readUint32=function(t){return this.readInt32(t)>>>0},r.ByteBuffer.prototype.readInt64=function(t){return new r.Long(this.readInt32(t),this.readInt32(t+4))},r.ByteBuffer.prototype.readUint64=function(t){return new r.Long(this.readUint32(t),this.readUint32(t+4))},r.ByteBuffer.prototype.readFloat32=function(t){return r.int32[0]=this.readInt32(t),r.float32[0]},r.ByteBuffer.prototype.readFloat64=function(t){return r.int32[r.isLittleEndian?0:1]=this.readInt32(t),r.int32[r.isLittleEndian?1:0]=this.readInt32(t+4),r.float64[0]},r.ByteBuffer.prototype.writeInt8=function(t,e){this.bytes_[t]=e},r.ByteBuffer.prototype.writeUint8=function(t,e){this.bytes_[t]=e},r.ByteBuffer.prototype.writeInt16=function(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8},r.ByteBuffer.prototype.writeUint16=function(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8},r.ByteBuffer.prototype.writeInt32=function(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24},r.ByteBuffer.prototype.writeUint32=function(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24},r.ByteBuffer.prototype.writeInt64=function(t,e){this.writeInt32(t,e.low),this.writeInt32(t+4,e.high)},r.ByteBuffer.prototype.writeUint64=function(t,e){this.writeUint32(t,e.low),this.writeUint32(t+4,e.high)},r.ByteBuffer.prototype.writeFloat32=function(t,e){r.float32[0]=e,this.writeInt32(t,r.int32[0])},r.ByteBuffer.prototype.writeFloat64=function(t,e){r.float64[0]=e,this.writeInt32(t,r.int32[r.isLittleEndian?0:1]),this.writeInt32(t+4,r.int32[r.isLittleEndian?1:0])},r.ByteBuffer.prototype.getBufferIdentifier=function(){if(this.bytes_.length<this.position_+r.SIZEOF_INT+r.FILE_IDENTIFIER_LENGTH)throw new Error(\"FlatBuffers: ByteBuffer is too short to contain an identifier.\");for(var t=\"\",e=0;e<r.FILE_IDENTIFIER_LENGTH;e++)t+=String.fromCharCode(this.readInt8(this.position_+r.SIZEOF_INT+e));return t},r.ByteBuffer.prototype.__offset=function(t,e){var n=t-this.readInt32(t);return e<this.readInt16(n)?this.readInt16(n+e):0},r.ByteBuffer.prototype.__union=function(t,e){return t.bb_pos=e+this.readInt32(e),t.bb=this,t},r.ByteBuffer.prototype.__string=function(t,e){t+=this.readInt32(t);var n=this.readInt32(t),i=\"\",o=0;if(t+=r.SIZEOF_INT,e===r.Encoding.UTF8_BYTES)return this.bytes_.subarray(t,t+n);for(;o<n;){var a,s=this.readUint8(t+o++);if(s<192)a=s;else{var u=this.readUint8(t+o++);if(s<224)a=(31&s)<<6|63&u;else{var c=this.readUint8(t+o++);a=s<240?(15&s)<<12|(63&u)<<6|63&c:(7&s)<<18|(63&u)<<12|(63&c)<<6|63&this.readUint8(t+o++)}}a<65536?i+=String.fromCharCode(a):(a-=65536,i+=String.fromCharCode(55296+(a>>10),56320+(1023&a)))}return i},r.ByteBuffer.prototype.__indirect=function(t){return t+this.readInt32(t)},r.ByteBuffer.prototype.__vector=function(t){return t+this.readInt32(t)+r.SIZEOF_INT},r.ByteBuffer.prototype.__vector_len=function(t){return this.readInt32(t+this.readInt32(t))},r.ByteBuffer.prototype.__has_identifier=function(t){if(t.length!=r.FILE_IDENTIFIER_LENGTH)throw new Error(\"FlatBuffers: file identifier must be length \"+r.FILE_IDENTIFIER_LENGTH);for(var e=0;e<r.FILE_IDENTIFIER_LENGTH;e++)if(t.charCodeAt(e)!=this.readInt8(this.position_+r.SIZEOF_INT+e))return!1;return!0},r.ByteBuffer.prototype.createLong=function(t,e){return r.Long.create(t,e)}}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var n=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var n in e)__webpack_require__.o(e,n)&&!__webpack_require__.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},__webpack_require__.g=function(){if(\"object\"==typeof globalThis)return globalThis;try{return this||new Function(\"return this\")()}catch(t){if(\"object\"==typeof window)return window}}(),__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})};var __webpack_exports__=__webpack_require__(6018);return __webpack_exports__})()));\n//# sourceMappingURL=ort-web.min.js.map","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__1670__) => {\nreturn ","var _scriptDir,t=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(t){function n(){return E.buffer!=D&&z(E.buffer),j}function e(){return E.buffer!=D&&z(E.buffer),F}function r(){return E.buffer!=D&&z(E.buffer),U}function i(){return E.buffer!=D&&z(E.buffer),Y}function a(){return E.buffer!=D&&z(E.buffer),I}var u,o,c;t=t||{},u||(u=void 0!==t?t:{}),u.ready=new Promise((function(t,n){o=t,c=n}));var f,s,l,p,h,m,d=Object.assign({},u),y=\"./this.program\",b=(t,n)=>{throw n},g=\"object\"==typeof window,_=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=u.ENVIRONMENT_IS_PTHREAD||!1,T=\"\";function O(t){return u.locateFile?u.locateFile(t,T):T+t}if(v){let t;T=_?require(\"path\").dirname(T)+\"/\":__dirname+\"/\",m=()=>{h||(p=require(\"fs\"),h=require(\"path\"))},f=function(t,n){return m(),t=h.normalize(t),p.readFileSync(t,n?void 0:\"utf8\")},l=t=>((t=f(t,!0)).buffer||(t=new Uint8Array(t)),t),s=(t,n,e)=>{m(),t=h.normalize(t),p.readFile(t,(function(t,r){t?e(t):n(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(t){if(!(t instanceof ot))throw t})),process.on(\"unhandledRejection\",(function(t){throw t})),b=(t,n)=>{if(J())throw process.exitCode=t,n;n instanceof ot||x(\"exiting due to exception: \"+n),process.exit(t)},u.inspect=function(){return\"[Emscripten Module object]\"};try{t=require(\"worker_threads\")}catch(t){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),t}global.Worker=t.Worker}else(g||_)&&(_?T=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(T=document.currentScript.src),_scriptDir&&(T=_scriptDir),T=0!==T.indexOf(\"blob:\")?T.substr(0,T.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(f=t=>{var n=new XMLHttpRequest;return n.open(\"GET\",t,!1),n.send(null),n.responseText},_&&(l=t=>{var n=new XMLHttpRequest;return n.open(\"GET\",t,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),s=(t,n,e)=>{var r=new XMLHttpRequest;r.open(\"GET\",t,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):e()},r.onerror=e,r.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var S=console.log.bind(console),A=console.warn.bind(console);v&&(m(),S=t=>p.writeSync(1,t+\"\\n\"),A=t=>p.writeSync(2,t+\"\\n\"));var M,C=u.print||S,x=u.printErr||A;Object.assign(u,d),d=null,u.thisProgram&&(y=u.thisProgram),u.quit&&(b=u.quit),u.wasmBinary&&(M=u.wasmBinary);var R=u.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&rt(\"no native wasm support detected\");var E,k,D,j,F,U,Y,I,W=!1,P=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function H(t,n,e){var r=(n>>>=0)+e;for(e=n;t[e]&&!(e>=r);)++e;if(16<e-n&&t.buffer&&P)return P.decode(t.buffer instanceof SharedArrayBuffer?t.slice(n,e):t.subarray(n,e));for(r=\"\";n<e;){var i=t[n++];if(128&i){var a=63&t[n++];if(192==(224&i))r+=String.fromCharCode((31&i)<<6|a);else{var u=63&t[n++];65536>(i=224==(240&i)?(15&i)<<12|a<<6|u:(7&i)<<18|a<<12|u<<6|63&t[n++])?r+=String.fromCharCode(i):(i-=65536,r+=String.fromCharCode(55296|i>>10,56320|1023&i))}}else r+=String.fromCharCode(i)}return r}function q(t,n){return(t>>>=0)?H(e(),t,n):\"\"}function B(t,n,e,r){if(!(0<r))return 0;var i=e>>>=0;r=e+r-1;for(var a=0;a<t.length;++a){var u=t.charCodeAt(a);if(55296<=u&&57343>=u&&(u=65536+((1023&u)<<10)|1023&t.charCodeAt(++a)),127>=u){if(e>=r)break;n[e++>>>0]=u}else{if(2047>=u){if(e+1>=r)break;n[e++>>>0]=192|u>>6}else{if(65535>=u){if(e+2>=r)break;n[e++>>>0]=224|u>>12}else{if(e+3>=r)break;n[e++>>>0]=240|u>>18,n[e++>>>0]=128|u>>12&63}n[e++>>>0]=128|u>>6&63}n[e++>>>0]=128|63&u}}return n[e>>>0]=0,e-i}function G(t){for(var n=0,e=0;e<t.length;++e){var r=t.charCodeAt(e);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++e):n+=3}return n}function z(t){D=t,u.HEAP8=j=new Int8Array(t),u.HEAP16=new Int16Array(t),u.HEAP32=U=new Int32Array(t),u.HEAPU8=F=new Uint8Array(t),u.HEAPU16=new Uint16Array(t),u.HEAPU32=Y=new Uint32Array(t),u.HEAPF32=new Float32Array(t),u.HEAPF64=I=new Float64Array(t)}w&&(D=u.buffer);var N=u.INITIAL_MEMORY||16777216;if(w)E=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)E=u.wasmMemory;else if(!((E=new WebAssembly.Memory({initial:N/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");E&&(D=E.buffer),N=D.byteLength,z(D);var V,L=[],X=[],Z=[],$=[];function J(){return R||!1}function Q(){var t=u.preRun.shift();L.unshift(t)}var K,tt=0,nt=null,et=null;function rt(t){throw w?postMessage({cmd:\"onAbort\",arg:t}):u.onAbort&&u.onAbort(t),x(t=\"Aborted(\"+t+\")\"),W=!0,t=new WebAssembly.RuntimeError(t+\". Build with -sASSERTIONS for more info.\"),c(t),t}function it(){return K.startsWith(\"data:application/octet-stream;base64,\")}function at(){var t=K;try{if(t==K&&M)return new Uint8Array(M);if(l)return l(t);throw\"both async and sync fetching of the wasm failed\"}catch(t){rt(t)}}K=\"ort-wasm-threaded.wasm\",it()||(K=O(K));var ut={};function ot(t){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+t+\")\",this.status=t}function ct(t){(t=pt.Vb[t])||rt(),pt.mc(t)}function ft(t){var n=pt.Cc();if(!n)return 6;pt.ac.push(n),pt.Vb[t.Ub]=n,n.Ub=t.Ub;var e={cmd:\"run\",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return n.$b=()=>{e.time=performance.now(),n.postMessage(e,t.Nc)},n.loaded&&(n.$b(),delete n.$b),0}function st(t){if(w)return Vt(1,1,t);J()||(pt.oc(),u.onExit&&u.onExit(t),W=!0),b(t,new ot(t))}function lt(t,n){if(!n&&w)throw dt(t),\"unwind\";J()||w||(bn(),ht(Z),yn(0),en[1].length&&rn(1,10),en[2].length&&rn(2,10),pt.oc()),st(t)}var pt={Yb:[],ac:[],qc:[],Vb:{},fc:function(){w&&pt.Ec()},Pc:function(){},Ec:function(){pt.receiveObjectTransfer=pt.Gc,pt.threadInitTLS=pt.pc,pt.setExitStatus=pt.nc,R=!1},nc:function(){},oc:function(){for(var t of Object.values(pt.Vb))pt.mc(t);for(t of pt.Yb)t.terminate();pt.Yb=[]},mc:function(t){var n=t.Ub;delete pt.Vb[n],pt.Yb.push(t),pt.ac.splice(pt.ac.indexOf(t),1),t.Ub=0,Tn(n)},Gc:function(){},pc:function(){pt.qc.forEach((t=>t()))},Fc:function(t,n){t.onmessage=e=>{var r=(e=e.data).cmd;if(t.Ub&&(pt.Bc=t.Ub),e.targetThread&&e.targetThread!=hn()){var i=pt.Vb[e.Qc];i?i.postMessage(e,e.transferList):x('Internal error! Worker sent a message \"'+r+'\" to target pthread '+e.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?Ht(e.queue):\"spawnThread\"===r?ft(e):\"cleanupThread\"===r?ct(e.thread):\"killThread\"===r?(e=e.thread,r=pt.Vb[e],delete pt.Vb[e],r.terminate(),Tn(e),pt.ac.splice(pt.ac.indexOf(r),1),r.Ub=0):\"cancelThread\"===r?pt.Vb[e.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(t.loaded=!0,n&&n(t),t.$b&&(t.$b(),delete t.$b)):\"print\"===r?C(\"Thread \"+e.threadId+\": \"+e.text):\"printErr\"===r?x(\"Thread \"+e.threadId+\": \"+e.text):\"alert\"===r?alert(\"Thread \"+e.threadId+\": \"+e.text):\"setimmediate\"===e.target?t.postMessage(e):\"onAbort\"===r?u.onAbort&&u.onAbort(e.arg):r&&x(\"worker sent an unknown command \"+r);pt.Bc=void 0},t.onerror=t=>{throw x(\"worker sent an error! \"+t.filename+\":\"+t.lineno+\": \"+t.message),t},v&&(t.on(\"message\",(function(n){t.onmessage({data:n})})),t.on(\"error\",(function(n){t.onerror(n)})),t.on(\"detachedExit\",(function(){}))),t.postMessage({cmd:\"load\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:E,wasmModule:k})},yc:function(){var t=O(\"ort-wasm-threaded.worker.js\");pt.Yb.push(new Worker(t))},Cc:function(){return 0==pt.Yb.length&&(pt.yc(),pt.Fc(pt.Yb[0])),pt.Yb.pop()}};function ht(t){for(;0<t.length;)t.shift()(u)}function mt(t){var n=Mn();return t=t(),Cn(n),t}function dt(t){if(w)return Vt(2,0,t);try{lt(t)}catch(t){t instanceof ot||\"unwind\"==t||b(1,t)}}u.PThread=pt,u.establishStackSpace=function(){var t=hn(),n=r()[t+44>>2>>>0];t=r()[t+48>>2>>>0],An(n,n-t),Cn(n)};var yt=[];function bt(t){var n=yt[t];return n||(t>=yt.length&&(yt.length=t+1),yt[t]=n=V.get(t)),n}u.invokeEntryPoint=function(t,n){t=bt(t)(n),J()?pt.nc(t):On(t)};var gt,_t,vt=[],wt=0,Tt=0;function Ot(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){i()[this.Sb+4>>2>>>0]=t},this.bc=function(){return i()[this.Sb+4>>2>>>0]},this.wc=function(t){i()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return i()[this.Sb+8>>2>>>0]},this.rc=function(){r()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,n()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=n()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,n()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=n()[this.Sb+13>>0>>>0]},this.fc=function(t,n){this.cc(0),this.xc(t),this.wc(n),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(r(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(r(),this.Sb>>2,1)},this.cc=function(t){i()[this.Sb+16>>2>>>0]=t},this.tc=function(){return i()[this.Sb+16>>2>>>0]},this.vc=function(){if(En(this.bc()))return i()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function St(t){return dn(new Ot(t).Sb)}function At(t,n,e,r){return w?Vt(3,1,t,n,e,r):Mt(t,n,e,r)}function Mt(t,n,e,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var i=[];return w&&0===i.length?At(t,n,e,r):(t={Ic:e,Ub:t,zc:r,Nc:i},w?(t.Oc=\"spawnThread\",postMessage(t,i),0):ft(t))}function Ct(t,n,e){return w?Vt(4,1,t,n,e):0}function xt(t,n){if(w)return Vt(5,1,t,n)}function Rt(t,n){if(w)return Vt(6,1,t,n)}function Et(t,n,e){if(w)return Vt(7,1,t,n,e)}function kt(t,n,e){return w?Vt(8,1,t,n,e):0}function Dt(t,n){if(w)return Vt(9,1,t,n)}function jt(t,n,e){if(w)return Vt(10,1,t,n,e)}function Ft(t,n,e,r){if(w)return Vt(11,1,t,n,e,r)}function Ut(t,n,e,r){if(w)return Vt(12,1,t,n,e,r)}function Yt(t,n,e,r){if(w)return Vt(13,1,t,n,e,r)}function It(t){if(w)return Vt(14,1,t)}function Wt(t,n){if(w)return Vt(15,1,t,n)}function Pt(t,n,e){if(w)return Vt(16,1,t,n,e)}function Ht(t){Atomics.store(r(),t>>2,1),hn()&&wn(t),Atomics.compareExchange(r(),t>>2,1,0)}function qt(t){return i()[t>>>2]+4294967296*r()[t+4>>>2]}function Bt(t,n,e,r,i,a){return w?Vt(17,1,t,n,e,r,i,a):-52}function Gt(t,n,e,r,i,a){if(w)return Vt(18,1,t,n,e,r,i,a)}function zt(t){var e=G(t)+1,r=mn(e);return r&&B(t,n(),r,e),r}function Nt(t,n,e){function a(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:\"GMT\"}if(w)return Vt(19,1,t,n,e);var u=(new Date).getFullYear(),o=new Date(u,0,1),c=new Date(u,6,1);u=o.getTimezoneOffset();var f=c.getTimezoneOffset(),s=Math.max(u,f);r()[t>>2>>>0]=60*s,r()[n>>2>>>0]=Number(u!=f),t=a(o),n=a(c),t=zt(t),n=zt(n),f<u?(i()[e>>2>>>0]=t,i()[e+4>>2>>>0]=n):(i()[e>>2>>>0]=n,i()[e+4>>2>>>0]=t)}function Vt(t,n){var e=arguments.length-2,r=arguments;return mt((()=>{for(var i=xn(8*e),u=i>>3,o=0;o<e;o++){var c=r[2+o];a()[u+o>>>0]=c}return vn(t,e,i,n)}))}u.executeNotifiedProxyingQueue=Ht,_t=v?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:w?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var Lt,Xt=[],Zt={};function $t(){if(!Lt){var t,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:y||\"./this.program\"};for(t in Zt)void 0===Zt[t]?delete n[t]:n[t]=Zt[t];var e=[];for(t in n)e.push(t+\"=\"+n[t]);Lt=e}return Lt}function Jt(t,e){if(w)return Vt(20,1,t,e);var r=0;return $t().forEach((function(a,u){var o=e+r;for(u=i()[t+4*u>>2>>>0]=o,o=0;o<a.length;++o)n()[u++>>0>>>0]=a.charCodeAt(o);n()[u>>0>>>0]=0,r+=a.length+1})),0}function Qt(t,n){if(w)return Vt(21,1,t,n);var e=$t();i()[t>>2>>>0]=e.length;var r=0;return e.forEach((function(t){r+=t.length+1})),i()[n>>2>>>0]=r,0}function Kt(t){return w?Vt(22,1,t):52}function tn(t,n,e,r){return w?Vt(23,1,t,n,e,r):52}function nn(t,n,e,r,i){return w?Vt(24,1,t,n,e,r,i):70}var en=[null,[],[]];function rn(t,n){var e=en[t];0===n||10===n?((1===t?C:x)(H(e,0)),e.length=0):e.push(n)}function an(t,n,r,a){if(w)return Vt(25,1,t,n,r,a);for(var u=0,o=0;o<r;o++){var c=i()[n>>2>>>0],f=i()[n+4>>2>>>0];n+=8;for(var s=0;s<f;s++)rn(t,e()[c+s>>>0]);u+=f}return i()[a>>2>>>0]=u,0}var un=0;function on(t){return 0==t%4&&(0!=t%100||0==t%400)}var cn=[31,29,31,30,31,30,31,31,30,31,30,31],fn=[31,28,31,30,31,30,31,31,30,31,30,31];function sn(t,e,i,a){function u(t,n,e){for(t=\"number\"==typeof t?t.toString():t||\"\";t.length<n;)t=e[0]+t;return t}function o(t,n){return u(t,n,\"0\")}function c(t,n){function e(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=e(t.getFullYear()-n.getFullYear()))&&0===(r=e(t.getMonth()-n.getMonth()))&&(r=e(t.getDate()-n.getDate())),r}function f(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function s(t){var n=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<n;){var e=t.getMonth(),r=(on(t.getFullYear())?cn:fn)[e];if(!(n>r-t.getDate())){t.setDate(t.getDate()+n);break}n-=r-t.getDate()+1,t.setDate(1),11>e?t.setMonth(e+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return e=new Date(t.getFullYear()+1,0,4),n=f(new Date(t.getFullYear(),0,4)),e=f(e),0>=c(n,t)?0>=c(e,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var l=r()[a+40>>2>>>0];for(var p in a={Lc:r()[a>>2>>>0],Kc:r()[a+4>>2>>>0],dc:r()[a+8>>2>>>0],jc:r()[a+12>>2>>>0],ec:r()[a+16>>2>>>0],Xb:r()[a+20>>2>>>0],Tb:r()[a+24>>2>>>0],Wb:r()[a+28>>2>>>0],Rc:r()[a+32>>2>>>0],Jc:r()[a+36>>2>>>0],Mc:l?q(l):\"\"},i=q(i),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})i=i.replace(new RegExp(p,\"g\"),l[p]);var h=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),m=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(t){return h[t.Tb].substring(0,3)},\"%A\":function(t){return h[t.Tb]},\"%b\":function(t){return m[t.ec].substring(0,3)},\"%B\":function(t){return m[t.ec]},\"%C\":function(t){return o((t.Xb+1900)/100|0,2)},\"%d\":function(t){return o(t.jc,2)},\"%e\":function(t){return u(t.jc,2,\" \")},\"%g\":function(t){return s(t).toString().substring(2)},\"%G\":function(t){return s(t)},\"%H\":function(t){return o(t.dc,2)},\"%I\":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),o(t,2)},\"%j\":function(t){for(var n=0,e=0;e<=t.ec-1;n+=(on(t.Xb+1900)?cn:fn)[e++]);return o(t.jc+n,3)},\"%m\":function(t){return o(t.ec+1,2)},\"%M\":function(t){return o(t.Kc,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(t){return 0<=t.dc&&12>t.dc?\"AM\":\"PM\"},\"%S\":function(t){return o(t.Lc,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(t){return t.Tb||7},\"%U\":function(t){return o(Math.floor((t.Wb+7-t.Tb)/7),2)},\"%V\":function(t){var n=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&n++,n)53==n&&(4==(e=(t.Tb+371-t.Wb)%7)||3==e&&on(t.Xb)||(n=1));else{n=52;var e=(t.Tb+7-t.Wb-1)%7;(4==e||5==e&&on(t.Xb%400-1))&&n++}return o(n,2)},\"%w\":function(t){return t.Tb},\"%W\":function(t){return o(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},\"%y\":function(t){return(t.Xb+1900).toString().substring(2)},\"%Y\":function(t){return t.Xb+1900},\"%z\":function(t){var n=0<=(t=t.Jc);return t=Math.abs(t)/60,(n?\"+\":\"-\")+String(\"0000\"+(t/60*100+t%60)).slice(-4)},\"%Z\":function(t){return t.Mc},\"%%\":function(){return\"%\"}},i=i.replace(/%%/g,\"\\0\\0\"),l)i.includes(p)&&(i=i.replace(new RegExp(p,\"g\"),l[p](a)));return p=function(t){var n=Array(G(t)+1);return B(t,n,0,n.length),n}(i=i.replace(/\\0\\0/g,\"%\")),p.length>e?0:(function(t,e){n().set(t,e>>>0)}(p,t),p.length-1)}pt.fc();var ln=[null,st,dt,At,Ct,xt,Rt,Et,kt,Dt,jt,Ft,Ut,Yt,It,Wt,Pt,Bt,Gt,Nt,Jt,Qt,Kt,tn,nn,an],pn={b:function(t){return mn(t+24)+24},n:function(t){return(t=new Ot(t)).uc()||(t.hc(!0),wt--),t.ic(!1),vt.push(t),t.sc(),t.vc()},ma:function(t){throw x(\"Unexpected exception thrown, this is not properly supported - aborting\"),W=!0,t},x:function(){Sn(0);var t=vt.pop();if(t.Hc()&&!t.kc()){var n=t.Dc();n&&bt(n)(t.Zb),St(t.Zb)}Tt=0},e:function(){var t=Tt;if(!t)return un=0;var n=new Ot(t);n.cc(t);var e=n.bc();if(!e)return un=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var a=r[i];if(0===a||a===e)break;if(Rn(a,e,n.Sb+16))return un=a,t}return un=e,t},l:function(){var t=Tt;if(!t)return un=0;var n=new Ot(t);n.cc(t);var e=n.bc();if(!e)return un=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var a=r[i];if(0===a||a===e)break;if(Rn(a,e,n.Sb+16))return un=a,t}return un=e,t},h:function(){var t=Tt;if(!t)return un=0;var n=new Ot(t);n.cc(t);var e=n.bc();if(!e)return un=0,t;for(var r=Array.prototype.slice.call(arguments),i=0;i<r.length;i++){var a=r[i];if(0===a||a===e)break;if(Rn(a,e,n.Sb+16))return un=a,t}return un=e,t},t:St,M:function(){var t=vt.pop();t||rt(\"no exception to throw\");var n=t.Zb;throw t.kc()||(vt.push(t),t.ic(!0),t.hc(!1),wt++),Tt=n,n},c:function(t,n,e){throw new Ot(t).fc(n,e),Tt=t,wt++,t},pa:function(){return wt},Fa:function(t){gn(t,!_,1,!g),pt.pc()},T:function(t){w?postMessage({cmd:\"cleanupThread\",thread:t}):ct(t)},xa:Mt,j:function(t){throw Tt||(Tt=t),t},H:Ct,Ma:xt,ua:Rt,wa:Et,oa:kt,Ka:Dt,Ca:jt,Ja:Ft,V:Ut,va:Yt,sa:It,La:Wt,ta:Pt,Ta:function(){},X:function(){rt(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Ua:function(){rt(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,n,e,r){if(t==n)setTimeout((()=>Ht(r)));else if(w)postMessage({targetThread:t,cmd:\"processProxyingQueue\",queue:r});else{if(!(t=pt.Vb[t]))return;t.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,n){t=new Date(1e3*qt(t)),r()[n>>2>>>0]=t.getUTCSeconds(),r()[n+4>>2>>>0]=t.getUTCMinutes(),r()[n+8>>2>>>0]=t.getUTCHours(),r()[n+12>>2>>>0]=t.getUTCDate(),r()[n+16>>2>>>0]=t.getUTCMonth(),r()[n+20>>2>>>0]=t.getUTCFullYear()-1900,r()[n+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=t},Qa:function(t,n){t=new Date(1e3*qt(t)),r()[n>>2>>>0]=t.getSeconds(),r()[n+4>>2>>>0]=t.getMinutes(),r()[n+8>>2>>>0]=t.getHours(),r()[n+12>>2>>>0]=t.getDate(),r()[n+16>>2>>>0]=t.getMonth(),r()[n+20>>2>>>0]=t.getFullYear()-1900,r()[n+24>>2>>>0]=t.getDay();var e=new Date(t.getFullYear(),0,1),i=(t.getTime()-e.getTime())/864e5|0;r()[n+28>>2>>>0]=i,r()[n+36>>2>>>0]=-60*t.getTimezoneOffset(),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(i!=(e=e.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(e,i)),r()[n+32>>2>>>0]=t},Ra:function(t){var n=new Date(r()[t+20>>2>>>0]+1900,r()[t+16>>2>>>0],r()[t+12>>2>>>0],r()[t+8>>2>>>0],r()[t+4>>2>>>0],r()[t>>2>>>0],0),e=r()[t+32>>2>>>0],i=n.getTimezoneOffset(),a=new Date(n.getFullYear(),0,1),u=new Date(n.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),c=Math.min(o,u);return 0>e?r()[t+32>>2>>>0]=Number(u!=o&&c==i):0<e!=(c==i)&&(u=Math.max(o,u),n.setTime(n.getTime()+6e4*((0<e?c:u)-i))),r()[t+24>>2>>>0]=n.getDay(),e=(n.getTime()-a.getTime())/864e5|0,r()[t+28>>2>>>0]=e,r()[t>>2>>>0]=n.getSeconds(),r()[t+4>>2>>>0]=n.getMinutes(),r()[t+8>>2>>>0]=n.getHours(),r()[t+12>>2>>>0]=n.getDate(),r()[t+16>>2>>>0]=n.getMonth(),n.getTime()/1e3|0},Aa:Bt,Ba:Gt,Sa:function t(n,e,r){t.Ac||(t.Ac=!0,Nt(n,e,r))},y:function(){rt(\"\")},U:function(){if(!v&&!_){var t=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";gt||(gt={}),gt[t]||(gt[t]=1,v&&(t=\"warning: \"+t),x(t))}},ra:function(){return 4294901760},B:_t,Ia:function(t,n,r){e().copyWithin(t>>>0,n>>>0,n+r>>>0)},F:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},Da:function(t,n,e){Xt.length=n,e>>=3;for(var r=0;r<n;r++)Xt[r]=a()[e+r>>>0];return(0>t?ut[-t-1]:ln[t]).apply(null,Xt)},qa:function(t){var n=e().length;if((t>>>=0)<=n||4294901760<t)return!1;for(var r=1;4>=r;r*=2){var i=n*(1+.2/r);i=Math.min(i,t+100663296);var a=Math;i=Math.max(t,i),a=a.min.call(a,4294901760,i+(65536-i%65536)%65536);t:{try{E.grow(a-D.byteLength+65535>>>16),z(E.buffer);var u=1;break t}catch(t){}u=void 0}if(u)return!0}return!1},Na:function(){throw\"unwind\"},Ga:Jt,Ha:Qt,J:lt,I:Kt,S:tn,ga:nn,R:an,d:function(){return un},na:function t(e,r){t.lc||(t.lc=function(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(v)try{var n=require(\"crypto\");return()=>n.randomBytes(1)[0]}catch(t){}return()=>rt(\"randomDevice\")}());for(var i=0;i<r;i++)n()[e+i>>0>>>0]=t.lc();return 0},ia:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},ja:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},K:function(t){var n=Mn();try{return bt(t)()}catch(t){if(Cn(n),t!==t+0)throw t;Sn(1,0)}},f:function(t,n){var e=Mn();try{return bt(t)(n)}catch(t){if(Cn(e),t!==t+0)throw t;Sn(1,0)}},P:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},Q:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},k:function(t,n,e){var r=Mn();try{return bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},p:function(t,n,e,r){var i=Mn();try{return bt(t)(n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},q:function(t,n,e,r,i){var a=Mn();try{return bt(t)(n,e,r,i)}catch(t){if(Cn(a),t!==t+0)throw t;Sn(1,0)}},N:function(t,n,e,r,i,a){var u=Mn();try{return bt(t)(n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},s:function(t,n,e,r,i,a){var u=Mn();try{return bt(t)(n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},w:function(t,n,e,r,i,a,u){var o=Mn();try{return bt(t)(n,e,r,i,a,u)}catch(t){if(Cn(o),t!==t+0)throw t;Sn(1,0)}},L:function(t,n,e,r,i,a,u,o){var c=Mn();try{return bt(t)(n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},E:function(t,n,e,r,i,a,u,o,c,f,s,l){var p=Mn();try{return bt(t)(n,e,r,i,a,u,o,c,f,s,l)}catch(t){if(Cn(p),t!==t+0)throw t;Sn(1,0)}},aa:function(t,n,e,r,i,a,u,o){var c=Mn();try{return Pn(t,n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},_:function(t,n,e,r,i,a,u){var o=Mn();try{return Dn(t,n,e,r,i,a,u)}catch(t){if(Cn(o),t!==t+0)throw t;Sn(1,0)}},Z:function(t,n,e,r,i){var a=Mn();try{return Hn(t,n,e,r,i)}catch(t){if(Cn(a),t!==t+0)throw t;Sn(1,0)}},ca:function(t,n,e,r){var i=Mn();try{return In(t,n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},$:function(t){var n=Mn();try{return kn(t)}catch(t){if(Cn(n),t!==t+0)throw t;Sn(1,0)}},ba:function(t,n){var e=Mn();try{return Wn(t,n)}catch(t){if(Cn(e),t!==t+0)throw t;Sn(1,0)}},Y:function(t,n,e){var r=Mn();try{return jn(t,n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},g:function(t){var n=Mn();try{bt(t)()}catch(t){if(Cn(n),t!==t+0)throw t;Sn(1,0)}},r:function(t,n){var e=Mn();try{bt(t)(n)}catch(t){if(Cn(e),t!==t+0)throw t;Sn(1,0)}},i:function(t,n,e){var r=Mn();try{bt(t)(n,e)}catch(t){if(Cn(r),t!==t+0)throw t;Sn(1,0)}},ha:function(t,n,e,r){var i=Mn();try{bt(t)(n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},m:function(t,n,e,r){var i=Mn();try{bt(t)(n,e,r)}catch(t){if(Cn(i),t!==t+0)throw t;Sn(1,0)}},v:function(t,n,e,r,i){var a=Mn();try{bt(t)(n,e,r,i)}catch(t){if(Cn(a),t!==t+0)throw t;Sn(1,0)}},u:function(t,n,e,r,i,a){var u=Mn();try{bt(t)(n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},O:function(t,n,e,r,i,a,u){var o=Mn();try{bt(t)(n,e,r,i,a,u)}catch(t){if(Cn(o),t!==t+0)throw t;Sn(1,0)}},A:function(t,n,e,r,i,a,u,o){var c=Mn();try{bt(t)(n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},ka:function(t,n,e,r,i,a,u,o,c){var f=Mn();try{bt(t)(n,e,r,i,a,u,o,c)}catch(t){if(Cn(f),t!==t+0)throw t;Sn(1,0)}},C:function(t,n,e,r,i,a,u,o,c,f,s){var l=Mn();try{bt(t)(n,e,r,i,a,u,o,c,f,s)}catch(t){if(Cn(l),t!==t+0)throw t;Sn(1,0)}},D:function(t,n,e,r,i,a,u,o,c,f,s,l,p,h,m,d){var y=Mn();try{bt(t)(n,e,r,i,a,u,o,c,f,s,l,p,h,m,d)}catch(t){if(Cn(y),t!==t+0)throw t;Sn(1,0)}},fa:function(t,n,e,r,i,a,u,o){var c=Mn();try{Fn(t,n,e,r,i,a,u,o)}catch(t){if(Cn(c),t!==t+0)throw t;Sn(1,0)}},da:function(t,n,e,r,i,a,u,o,c,f,s,l){var p=Mn();try{Yn(t,n,e,r,i,a,u,o,c,f,s,l)}catch(t){if(Cn(p),t!==t+0)throw t;Sn(1,0)}},ea:function(t,n,e,r,i,a){var u=Mn();try{Un(t,n,e,r,i,a)}catch(t){if(Cn(u),t!==t+0)throw t;Sn(1,0)}},o:function(t){return t},a:E||u.wasmMemory,G:function(t){un=t},la:sn,z:function(t,n,e,r){return sn(t,n,e,r)}};!function(){function t(t,n){u.asm=t.exports,pt.qc.push(u.asm.sb),V=u.asm.ub,X.unshift(u.asm.Va),k=n,w||(tt--,u.monitorRunDependencies&&u.monitorRunDependencies(tt),0==tt&&(null!==nt&&(clearInterval(nt),nt=null),et&&(t=et,et=null,t())))}function n(n){t(n.instance,n.module)}function e(t){return function(){if(!M&&(g||_)){if(\"function\"==typeof fetch&&!K.startsWith(\"file://\"))return fetch(K,{credentials:\"same-origin\"}).then((function(t){if(!t.ok)throw\"failed to load wasm binary file at '\"+K+\"'\";return t.arrayBuffer()})).catch((function(){return at()}));if(s)return new Promise((function(t,n){s(K,(function(n){t(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return at()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){x(\"failed to asynchronously prepare wasm: \"+t),rt(t)}))}var r={a:pn};if(w||(tt++,u.monitorRunDependencies&&u.monitorRunDependencies(tt)),u.instantiateWasm)try{return u.instantiateWasm(r,t)}catch(t){return x(\"Module.instantiateWasm callback failed with error: \"+t),!1}(M||\"function\"!=typeof WebAssembly.instantiateStreaming||it()||K.startsWith(\"file://\")||v||\"function\"!=typeof fetch?e(n):fetch(K,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(n,(function(t){return x(\"wasm streaming compile failed: \"+t),x(\"falling back to ArrayBuffer instantiation\"),e(n)}))}))).catch(c)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Va).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Wa).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Xa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.Ya).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.Za).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm._a).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.$a).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ab).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.bb).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.cb).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.db).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.eb).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.fb).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.gb).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.hb).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ib).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.jb).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.kb).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.lb).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.mb).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.nb).apply(null,arguments)};var hn=u._pthread_self=function(){return(hn=u._pthread_self=u.asm.ob).apply(null,arguments)},mn=u._malloc=function(){return(mn=u._malloc=u.asm.pb).apply(null,arguments)},dn=u._free=function(){return(dn=u._free=u.asm.qb).apply(null,arguments)},yn=u._fflush=function(){return(yn=u._fflush=u.asm.rb).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.sb).apply(null,arguments)};var bn=u.___funcs_on_exit=function(){return(bn=u.___funcs_on_exit=u.asm.tb).apply(null,arguments)},gn=u.__emscripten_thread_init=function(){return(gn=u.__emscripten_thread_init=u.asm.vb).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wb).apply(null,arguments)};var _n,vn=u._emscripten_run_in_main_runtime_thread_js=function(){return(vn=u._emscripten_run_in_main_runtime_thread_js=u.asm.xb).apply(null,arguments)},wn=u.__emscripten_proxy_execute_task_queue=function(){return(wn=u.__emscripten_proxy_execute_task_queue=u.asm.yb).apply(null,arguments)},Tn=u.__emscripten_thread_free_data=function(){return(Tn=u.__emscripten_thread_free_data=u.asm.zb).apply(null,arguments)},On=u.__emscripten_thread_exit=function(){return(On=u.__emscripten_thread_exit=u.asm.Ab).apply(null,arguments)},Sn=u._setThrew=function(){return(Sn=u._setThrew=u.asm.Bb).apply(null,arguments)},An=u._emscripten_stack_set_limits=function(){return(An=u._emscripten_stack_set_limits=u.asm.Cb).apply(null,arguments)},Mn=u.stackSave=function(){return(Mn=u.stackSave=u.asm.Db).apply(null,arguments)},Cn=u.stackRestore=function(){return(Cn=u.stackRestore=u.asm.Eb).apply(null,arguments)},xn=u.stackAlloc=function(){return(xn=u.stackAlloc=u.asm.Fb).apply(null,arguments)},Rn=u.___cxa_can_catch=function(){return(Rn=u.___cxa_can_catch=u.asm.Gb).apply(null,arguments)},En=u.___cxa_is_pointer_type=function(){return(En=u.___cxa_is_pointer_type=u.asm.Hb).apply(null,arguments)},kn=u.dynCall_j=function(){return(kn=u.dynCall_j=u.asm.Ib).apply(null,arguments)},Dn=u.dynCall_iiiiij=function(){return(Dn=u.dynCall_iiiiij=u.asm.Jb).apply(null,arguments)},jn=u.dynCall_jii=function(){return(jn=u.dynCall_jii=u.asm.Kb).apply(null,arguments)},Fn=u.dynCall_viiiiij=function(){return(Fn=u.dynCall_viiiiij=u.asm.Lb).apply(null,arguments)},Un=u.dynCall_vjji=function(){return(Un=u.dynCall_vjji=u.asm.Mb).apply(null,arguments)},Yn=u.dynCall_viiijjjii=function(){return(Yn=u.dynCall_viiijjjii=u.asm.Nb).apply(null,arguments)},In=u.dynCall_iij=function(){return(In=u.dynCall_iij=u.asm.Ob).apply(null,arguments)},Wn=u.dynCall_ji=function(){return(Wn=u.dynCall_ji=u.asm.Pb).apply(null,arguments)},Pn=u.dynCall_iiiiiij=function(){return(Pn=u.dynCall_iiiiiij=u.asm.Qb).apply(null,arguments)},Hn=u.dynCall_iiij=function(){return(Hn=u.dynCall_iiij=u.asm.Rb).apply(null,arguments)};function qn(){function t(){if(!_n&&(_n=!0,u.calledRun=!0,!W)&&(w||ht(X),o(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!w)){if(u.postRun)for(\"function\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var t=u.postRun.shift();$.unshift(t)}ht($)}}if(!(0<tt))if(w)o(u),w||ht(X),postMessage({cmd:\"loaded\"});else{if(u.preRun)for(\"function\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)Q();ht(L),0<tt||(u.setStatus?(u.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){u.setStatus(\"\")}),1),t()}),1)):t())}}if(u.UTF8ToString=q,u.stringToUTF8=function(t,n,r){return B(t,e(),n,r)},u.lengthBytesUTF8=G,u.keepRuntimeAlive=J,u.wasmMemory=E,u.stackSave=Mn,u.stackRestore=Cn,u.stackAlloc=xn,u.ExitStatus=ot,u.PThread=pt,et=function t(){_n||qn(),_n||(et=t)},u.preInit)for(\"function\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return qn(),t.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t:\"function\"==typeof define&&define.amd?define([],(function(){return t})):\"object\"==typeof exports&&(exports.ortWasmThreaded=t);\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar d;d||(d=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,ba;d.ready=new Promise(function(a,b){aa=a;ba=b});var ca=Object.assign({},d),da=\"./this.program\",ea=(a,b)=>{throw b;},fa=\"object\"==typeof window,m=\"function\"==typeof importScripts,p=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,q=\"\",ha,r,v,fs,y,ia;\r\nif(p)q=m?require(\"path\").dirname(q)+\"/\":__dirname+\"/\",ia=()=>{y||(fs=require(\"fs\"),y=require(\"path\"))},ha=function(a,b){ia();a=y.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")},v=a=>{a=ha(a,!0);a.buffer||(a=new Uint8Array(a));return a},r=(a,b,c)=>{ia();a=y.normalize(a);fs.readFile(a,function(e,f){e?c(e):b(f.buffer)})},1<process.argv.length&&(da=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){if(!(a instanceof ja))throw a;}),process.on(\"unhandledRejection\",\r\nfunction(a){throw a;}),ea=(a,b)=>{if(noExitRuntime||0<ka)throw process.exitCode=a,b;b instanceof ja||z(\"exiting due to exception: \"+b);process.exit(a)},d.inspect=function(){return\"[Emscripten Module object]\"};else if(fa||m)m?q=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(q=document.currentScript.src),_scriptDir&&(q=_scriptDir),0!==q.indexOf(\"blob:\")?q=q.substr(0,q.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):q=\"\",ha=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);\r\nreturn b.responseText},m&&(v=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),r=(a,b,c)=>{var e=new XMLHttpRequest;e.open(\"GET\",a,!0);e.responseType=\"arraybuffer\";e.onload=()=>{200==e.status||0==e.status&&e.response?b(e.response):c()};e.onerror=c;e.send(null)};var la=d.print||console.log.bind(console),z=d.printErr||console.warn.bind(console);Object.assign(d,ca);ca=null;d.thisProgram&&(da=d.thisProgram);d.quit&&(ea=d.quit);\r\nvar A;d.wasmBinary&&(A=d.wasmBinary);var noExitRuntime=d.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&B(\"no native wasm support detected\");var ma,D=!1,na=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction oa(a,b,c){b>>>=0;var e=b+c;for(c=b;a[c]&&!(c>=e);)++c;if(16<c-b&&a.buffer&&na)return na.decode(a.subarray(b,c));for(e=\"\";b<c;){var f=a[b++];if(f&128){var h=a[b++]&63;if(192==(f&224))e+=String.fromCharCode((f&31)<<6|h);else{var k=a[b++]&63;f=224==(f&240)?(f&15)<<12|h<<6|k:(f&7)<<18|h<<12|k<<6|a[b++]&63;65536>f?e+=String.fromCharCode(f):(f-=65536,e+=String.fromCharCode(55296|f>>10,56320|f&1023))}}else e+=String.fromCharCode(f)}return e}function pa(a,b){return(a>>>=0)?oa(G,a,b):\"\"}\r\nfunction qa(a,b,c,e){c>>>=0;if(!(0<e))return 0;var f=c;e=c+e-1;for(var h=0;h<a.length;++h){var k=a.charCodeAt(h);if(55296<=k&&57343>=k){var l=a.charCodeAt(++h);k=65536+((k&1023)<<10)|l&1023}if(127>=k){if(c>=e)break;b[c++>>>0]=k}else{if(2047>=k){if(c+1>=e)break;b[c++>>>0]=192|k>>6}else{if(65535>=k){if(c+2>=e)break;b[c++>>>0]=224|k>>12}else{if(c+3>=e)break;b[c++>>>0]=240|k>>18;b[c++>>>0]=128|k>>12&63}b[c++>>>0]=128|k>>6&63}b[c++>>>0]=128|k&63}}b[c>>>0]=0;return c-f}\r\nfunction ra(a){for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);127>=e?b++:2047>=e?b+=2:55296<=e&&57343>=e?(b+=4,++c):b+=3}return b}var sa,H,G,I,J;function ta(){var a=ma.buffer;sa=a;d.HEAP8=H=new Int8Array(a);d.HEAP16=new Int16Array(a);d.HEAP32=I=new Int32Array(a);d.HEAPU8=G=new Uint8Array(a);d.HEAPU16=new Uint16Array(a);d.HEAPU32=J=new Uint32Array(a);d.HEAPF32=new Float32Array(a);d.HEAPF64=new Float64Array(a)}var ua,va=[],wa=[],xa=[],ya=[],ka=0;\r\nfunction za(){var a=d.preRun.shift();va.unshift(a)}var K=0,Aa=null,L=null;function B(a){if(d.onAbort)d.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);D=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");ba(a);throw a;}function Ba(){return N.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"ort-wasm.wasm\";if(!Ba()){var Ca=N;N=d.locateFile?d.locateFile(Ca,q):q+Ca}\r\nfunction Da(){var a=N;try{if(a==N&&A)return new Uint8Array(A);if(v)return v(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){B(b)}}\r\nfunction Ea(){if(!A&&(fa||m)){if(\"function\"==typeof fetch&&!N.startsWith(\"file://\"))return fetch(N,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+N+\"'\";return a.arrayBuffer()}).catch(function(){return Da()});if(r)return new Promise(function(a,b){r(N,function(c){a(new Uint8Array(c))},b)})}return Promise.resolve().then(function(){return Da()})}function ja(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}\r\nfunction O(a){for(;0<a.length;)a.shift()(d)}var P=[],Q=0,R=0;\r\nfunction S(a){this.Db=a;this.zb=a-24;this.Ub=function(b){J[this.zb+4>>2>>>0]=b};this.Eb=function(){return J[this.zb+4>>2>>>0]};this.Sb=function(b){J[this.zb+8>>2>>>0]=b};this.Wb=function(){return J[this.zb+8>>2>>>0]};this.Tb=function(){I[this.zb>>2>>>0]=0};this.Ib=function(b){H[this.zb+12>>0>>>0]=b?1:0};this.Pb=function(){return 0!=H[this.zb+12>>0>>>0]};this.Jb=function(b){H[this.zb+13>>0>>>0]=b?1:0};this.Lb=function(){return 0!=H[this.zb+13>>0>>>0]};this.Rb=function(b,c){this.Fb(0);this.Ub(b);this.Sb(c);\r\nthis.Tb();this.Ib(!1);this.Jb(!1)};this.Nb=function(){I[this.zb>>2>>>0]+=1};this.Xb=function(){var b=I[this.zb>>2>>>0];I[this.zb>>2>>>0]=b-1;return 1===b};this.Fb=function(b){J[this.zb+16>>2>>>0]=b};this.Ob=function(){return J[this.zb+16>>2>>>0]};this.Qb=function(){if(Fa(this.Eb()))return J[this.Db>>2>>>0];var b=this.Ob();return 0!==b?b:this.Db}}function Ga(a){return Ha((new S(a)).zb)}var T=[];function U(a){var b=T[a];b||(a>=T.length&&(T.length=a+1),T[a]=b=ua.get(a));return b}\r\nfunction Ia(a){var b=ra(a)+1,c=Ja(b);c&&qa(a,H,c,b);return c}function Ka(a,b,c){function e(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}var f=(new Date).getFullYear(),h=new Date(f,0,1),k=new Date(f,6,1);f=h.getTimezoneOffset();var l=k.getTimezoneOffset();I[a>>2>>>0]=60*Math.max(f,l);I[b>>2>>>0]=Number(f!=l);a=e(h);b=e(k);a=Ia(a);b=Ia(b);l<f?(J[c>>2>>>0]=a,J[c+4>>2>>>0]=b):(J[c>>2>>>0]=b,J[c+4>>2>>>0]=a)}function La(a,b,c){La.Vb||(La.Vb=!0,Ka(a,b,c))}var Ma={};\r\nfunction Na(){if(!Oa){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:da||\"./this.program\"},b;for(b in Ma)void 0===Ma[b]?delete a[b]:a[b]=Ma[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);Oa=c}return Oa}var Oa,Pa=[null,[],[]];function Qa(a,b){var c=Pa[a];0===b||10===b?((1===a?la:z)(oa(c,0)),c.length=0):c.push(b)}var V=0;\r\nfunction Ra(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var a=new Uint8Array(1);return()=>{crypto.getRandomValues(a);return a[0]}}if(p)try{var b=require(\"crypto\");return()=>b.randomBytes(1)[0]}catch(c){}return()=>B(\"randomDevice\")}function W(a,b){W.Mb||(W.Mb=Ra());for(var c=0;c<b;c++)H[a+c>>0>>>0]=W.Mb();return 0}function Sa(a){return 0===a%4&&(0!==a%100||0===a%400)}var Ta=[31,29,31,30,31,30,31,31,30,31,30,31],Ua=[31,28,31,30,31,30,31,31,30,31,30,31];\r\nfunction Va(a){var b=Array(ra(a)+1);qa(a,b,0,b.length);return b}\r\nfunction Wa(a,b,c,e){function f(g,u,w){for(g=\"number\"==typeof g?g.toString():g||\"\";g.length<u;)g=w[0]+g;return g}function h(g,u){return f(g,u,\"0\")}function k(g,u){function w(M){return 0>M?-1:0<M?1:0}var F;0===(F=w(g.getFullYear()-u.getFullYear()))&&0===(F=w(g.getMonth()-u.getMonth()))&&(F=w(g.getDate()-u.getDate()));return F}function l(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),\r\n0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function n(g){var u=g.Bb;for(g=new Date((new Date(g.Cb+1900,0,1)).getTime());0<u;){var w=g.getMonth(),F=(Sa(g.getFullYear())?Ta:Ua)[w];if(u>F-g.getDate())u-=F-g.getDate()+1,g.setDate(1),11>w?g.setMonth(w+1):(g.setMonth(0),g.setFullYear(g.getFullYear()+1));else{g.setDate(g.getDate()+u);break}}w=new Date(g.getFullYear()+1,0,4);u=l(new Date(g.getFullYear(),\r\n0,4));w=l(w);return 0>=k(u,g)?0>=k(w,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}var t=I[e+40>>2>>>0];e={$b:I[e>>2>>>0],Zb:I[e+4>>2>>>0],Gb:I[e+8>>2>>>0],Kb:I[e+12>>2>>>0],Hb:I[e+16>>2>>>0],Cb:I[e+20>>2>>>0],Ab:I[e+24>>2>>>0],Bb:I[e+28>>2>>>0],bc:I[e+32>>2>>>0],Yb:I[e+36>>2>>>0],ac:t?pa(t):\"\"};c=pa(c);t={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\r\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var x in t)c=c.replace(new RegExp(x,\"g\"),t[x]);var E=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),C=\"January February March April May June July August September October November December\".split(\" \");t={\"%a\":function(g){return E[g.Ab].substring(0,3)},\"%A\":function(g){return E[g.Ab]},\"%b\":function(g){return C[g.Hb].substring(0,\r\n3)},\"%B\":function(g){return C[g.Hb]},\"%C\":function(g){return h((g.Cb+1900)/100|0,2)},\"%d\":function(g){return h(g.Kb,2)},\"%e\":function(g){return f(g.Kb,2,\" \")},\"%g\":function(g){return n(g).toString().substring(2)},\"%G\":function(g){return n(g)},\"%H\":function(g){return h(g.Gb,2)},\"%I\":function(g){g=g.Gb;0==g?g=12:12<g&&(g-=12);return h(g,2)},\"%j\":function(g){for(var u=0,w=0;w<=g.Hb-1;u+=(Sa(g.Cb+1900)?Ta:Ua)[w++]);return h(g.Kb+u,3)},\"%m\":function(g){return h(g.Hb+1,2)},\"%M\":function(g){return h(g.Zb,\r\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(g){return 0<=g.Gb&&12>g.Gb?\"AM\":\"PM\"},\"%S\":function(g){return h(g.$b,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(g){return g.Ab||7},\"%U\":function(g){return h(Math.floor((g.Bb+7-g.Ab)/7),2)},\"%V\":function(g){var u=Math.floor((g.Bb+7-(g.Ab+6)%7)/7);2>=(g.Ab+371-g.Bb-2)%7&&u++;if(u)53==u&&(w=(g.Ab+371-g.Bb)%7,4==w||3==w&&Sa(g.Cb)||(u=1));else{u=52;var w=(g.Ab+7-g.Bb-1)%7;(4==w||5==w&&Sa(g.Cb%400-1))&&u++}return h(u,2)},\"%w\":function(g){return g.Ab},\"%W\":function(g){return h(Math.floor((g.Bb+\r\n7-(g.Ab+6)%7)/7),2)},\"%y\":function(g){return(g.Cb+1900).toString().substring(2)},\"%Y\":function(g){return g.Cb+1900},\"%z\":function(g){g=g.Yb;var u=0<=g;g=Math.abs(g)/60;return(u?\"+\":\"-\")+String(\"0000\"+(g/60*100+g%60)).slice(-4)},\"%Z\":function(g){return g.ac},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(x in t)c.includes(x)&&(c=c.replace(new RegExp(x,\"g\"),t[x](e)));c=c.replace(/\\0\\0/g,\"%\");x=Va(c);if(x.length>b)return 0;H.set(x,a>>>0);return x.length-1}\r\nvar Jb={a:function(a){return Ja(a+24)+24},m:function(a){a=new S(a);a.Pb()||(a.Ib(!0),Q--);a.Jb(!1);P.push(a);a.Nb();return a.Qb()},ia:function(a){z(\"Unexpected exception thrown, this is not properly supported - aborting\");D=!0;throw a;},w:function(){X(0);var a=P.pop();if(a.Xb()&&!a.Lb()){var b=a.Wb();b&&U(b)(a.Db);Ga(a.Db)}R=0},d:function(){var a=R;if(!a)return V=0;var b=new S(a);b.Fb(a);var c=b.Eb();if(!c)return V=0,a;for(var e=Array.prototype.slice.call(arguments),f=0;f<e.length;f++){var h=e[f];\r\nif(0===h||h===c)break;if(Xa(h,c,b.zb+16))return V=h,a}V=c;return a},k:function(){var a=R;if(!a)return V=0;var b=new S(a);b.Fb(a);var c=b.Eb();if(!c)return V=0,a;for(var e=Array.prototype.slice.call(arguments),f=0;f<e.length;f++){var h=e[f];if(0===h||h===c)break;if(Xa(h,c,b.zb+16))return V=h,a}V=c;return a},g:function(){var a=R;if(!a)return V=0;var b=new S(a);b.Fb(a);var c=b.Eb();if(!c)return V=0,a;for(var e=Array.prototype.slice.call(arguments),f=0;f<e.length;f++){var h=e[f];if(0===h||h===c)break;\r\nif(Xa(h,c,b.zb+16))return V=h,a}V=c;return a},s:Ga,L:function(){var a=P.pop();a||B(\"no exception to throw\");var b=a.Db;a.Lb()||(P.push(a),a.Jb(!0),a.Ib(!1),Q++);R=b;throw b;},b:function(a,b,c){(new S(a)).Rb(b,c);R=a;Q++;throw a;},la:function(){return Q},i:function(a){R||(R=a);throw a;},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},\r\nHa:function(){},Ja:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Ia:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(a,b){a=new Date(1E3*(J[a>>>2]+4294967296*I[a+4>>>2]));I[b>>2>>>0]=a.getUTCSeconds();I[b+4>>2>>>0]=a.getUTCMinutes();I[b+8>>2>>>0]=a.getUTCHours();I[b+12>>2>>>\r\n0]=a.getUTCDate();I[b+16>>2>>>0]=a.getUTCMonth();I[b+20>>2>>>0]=a.getUTCFullYear()-1900;I[b+24>>2>>>0]=a.getUTCDay();I[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},Ea:function(a,b){a=new Date(1E3*(J[a>>>2]+4294967296*I[a+4>>>2]));I[b>>2>>>0]=a.getSeconds();I[b+4>>2>>>0]=a.getMinutes();I[b+8>>2>>>0]=a.getHours();I[b+12>>2>>>0]=a.getDate();I[b+16>>2>>>0]=a.getMonth();I[b+20>>2>>>0]=a.getFullYear()-1900;I[b+24>>2>>>0]=a.getDay();var c=new Date(a.getFullYear(),0,1);I[b+\r\n28>>2>>>0]=(a.getTime()-c.getTime())/864E5|0;I[b+36>>2>>>0]=-(60*a.getTimezoneOffset());var e=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();c=c.getTimezoneOffset();I[b+32>>2>>>0]=(e!=c&&a.getTimezoneOffset()==Math.min(c,e))|0},Fa:function(a){var b=new Date(I[a+20>>2>>>0]+1900,I[a+16>>2>>>0],I[a+12>>2>>>0],I[a+8>>2>>>0],I[a+4>>2>>>0],I[a>>2>>>0],0),c=I[a+32>>2>>>0],e=b.getTimezoneOffset(),f=new Date(b.getFullYear(),0,1),h=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),k=f.getTimezoneOffset(),\r\nl=Math.min(k,h);0>c?I[a+32>>2>>>0]=Number(h!=k&&l==e):0<c!=(l==e)&&(h=Math.max(k,h),b.setTime(b.getTime()+6E4*((0<c?l:h)-e)));I[a+24>>2>>>0]=b.getDay();I[a+28>>2>>>0]=(b.getTime()-f.getTime())/864E5|0;I[a>>2>>>0]=b.getSeconds();I[a+4>>2>>>0]=b.getMinutes();I[a+8>>2>>>0]=b.getHours();I[a+12>>2>>>0]=b.getDate();I[a+16>>2>>>0]=b.getMonth();return b.getTime()/1E3|0},sa:function(){return-52},ta:function(){},Ga:La,B:function(){B(\"\")},ma:function(){return 4294901760},I:p?()=>{var a=process.hrtime();return 1E3*\r\na[0]+a[1]/1E6}:()=>performance.now(),xa:function(a,b,c){G.copyWithin(a>>>0,b>>>0,b+c>>>0)},G:function(a){var b=G.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var e=b*(1+.2/c);e=Math.min(e,a+100663296);var f=Math;e=Math.max(a,e);f=f.min.call(f,4294901760,e+(65536-e%65536)%65536);a:{try{ma.grow(f-sa.byteLength+65535>>>16);ta();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},va:function(a,b){var c=0;Na().forEach(function(e,f){var h=b+c;f=J[a+4*f>>2>>>0]=h;for(h=0;h<e.length;++h)H[f++>>\r\n0>>>0]=e.charCodeAt(h);H[f>>0>>>0]=0;c+=e.length+1});return 0},wa:function(a,b){var c=Na();J[a>>2>>>0]=c.length;var e=0;c.forEach(function(f){e+=f.length+1});J[b>>2>>>0]=e;return 0},ba:function(a){noExitRuntime||0<ka||(Ya(),O(xa),Za(0),Pa[1].length&&Qa(1,10),Pa[2].length&&Qa(2,10));if(!(noExitRuntime||0<ka)){if(d.onExit)d.onExit(a);D=!0}ea(a,new ja(a))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(a,b,c,e){for(var f=0,h=0;h<c;h++){var k=J[b>>2>>>0],l=J[b+4>>\r\n2>>>0];b+=8;for(var n=0;n<l;n++)Qa(a,G[k+n>>>0]);f+=l}J[e>>2>>>0]=f;return 0},c:function(){return V},ja:W,ea:$a,fa:ab,J:bb,e:cb,N:db,O:eb,j:fb,o:gb,p:hb,M:ib,r:jb,v:kb,K:lb,D:mb,X:nb,V:ob,U:pb,Z:qb,W:rb,Y:sb,T:tb,f:ub,q:vb,h:wb,da:xb,l:yb,t:zb,u:Ab,x:Bb,z:Cb,ga:Db,A:Eb,C:Fb,aa:Gb,_:Hb,$:Ib,n:function(a){return a},F:function(a){V=a},ha:Wa,y:function(a,b,c,e){return Wa(a,b,c,e)}};\r\n(function(){function a(f){d.asm=f.exports;ma=d.asm.Ka;ta();ua=d.asm.ib;wa.unshift(d.asm.La);K--;d.monitorRunDependencies&&d.monitorRunDependencies(K);0==K&&(null!==Aa&&(clearInterval(Aa),Aa=null),L&&(f=L,L=null,f()))}function b(f){a(f.instance)}function c(f){return Ea().then(function(h){return WebAssembly.instantiate(h,e)}).then(function(h){return h}).then(f,function(h){z(\"failed to asynchronously prepare wasm: \"+h);B(h)})}var e={a:Jb};K++;d.monitorRunDependencies&&d.monitorRunDependencies(K);if(d.instantiateWasm)try{return d.instantiateWasm(e,\r\na)}catch(f){return z(\"Module.instantiateWasm callback failed with error: \"+f),!1}(function(){return A||\"function\"!=typeof WebAssembly.instantiateStreaming||Ba()||N.startsWith(\"file://\")||p||\"function\"!=typeof fetch?c(b):fetch(N,{credentials:\"same-origin\"}).then(function(f){return WebAssembly.instantiateStreaming(f,e).then(b,function(h){z(\"wasm streaming compile failed: \"+h);z(\"falling back to ArrayBuffer instantiation\");return c(b)})})})().catch(ba);return{}})();\r\nd.___wasm_call_ctors=function(){return(d.___wasm_call_ctors=d.asm.La).apply(null,arguments)};d._OrtInit=function(){return(d._OrtInit=d.asm.Ma).apply(null,arguments)};d._OrtCreateSessionOptions=function(){return(d._OrtCreateSessionOptions=d.asm.Na).apply(null,arguments)};d._OrtAppendExecutionProvider=function(){return(d._OrtAppendExecutionProvider=d.asm.Oa).apply(null,arguments)};d._OrtAddSessionConfigEntry=function(){return(d._OrtAddSessionConfigEntry=d.asm.Pa).apply(null,arguments)};\r\nd._OrtReleaseSessionOptions=function(){return(d._OrtReleaseSessionOptions=d.asm.Qa).apply(null,arguments)};d._OrtCreateSession=function(){return(d._OrtCreateSession=d.asm.Ra).apply(null,arguments)};d._OrtReleaseSession=function(){return(d._OrtReleaseSession=d.asm.Sa).apply(null,arguments)};d._OrtGetInputCount=function(){return(d._OrtGetInputCount=d.asm.Ta).apply(null,arguments)};d._OrtGetOutputCount=function(){return(d._OrtGetOutputCount=d.asm.Ua).apply(null,arguments)};\r\nd._OrtGetInputName=function(){return(d._OrtGetInputName=d.asm.Va).apply(null,arguments)};d._OrtGetOutputName=function(){return(d._OrtGetOutputName=d.asm.Wa).apply(null,arguments)};d._OrtFree=function(){return(d._OrtFree=d.asm.Xa).apply(null,arguments)};d._OrtCreateTensor=function(){return(d._OrtCreateTensor=d.asm.Ya).apply(null,arguments)};d._OrtGetTensorData=function(){return(d._OrtGetTensorData=d.asm.Za).apply(null,arguments)};\r\nd._OrtReleaseTensor=function(){return(d._OrtReleaseTensor=d.asm._a).apply(null,arguments)};d._OrtCreateRunOptions=function(){return(d._OrtCreateRunOptions=d.asm.$a).apply(null,arguments)};d._OrtAddRunConfigEntry=function(){return(d._OrtAddRunConfigEntry=d.asm.ab).apply(null,arguments)};d._OrtReleaseRunOptions=function(){return(d._OrtReleaseRunOptions=d.asm.bb).apply(null,arguments)};d._OrtRun=function(){return(d._OrtRun=d.asm.cb).apply(null,arguments)};\r\nd._OrtEndProfiling=function(){return(d._OrtEndProfiling=d.asm.db).apply(null,arguments)};\r\nvar Ja=d._malloc=function(){return(Ja=d._malloc=d.asm.eb).apply(null,arguments)},Ha=d._free=function(){return(Ha=d._free=d.asm.fb).apply(null,arguments)},Za=d._fflush=function(){return(Za=d._fflush=d.asm.gb).apply(null,arguments)},Ya=d.___funcs_on_exit=function(){return(Ya=d.___funcs_on_exit=d.asm.hb).apply(null,arguments)},X=d._setThrew=function(){return(X=d._setThrew=d.asm.jb).apply(null,arguments)},Y=d.stackSave=function(){return(Y=d.stackSave=d.asm.kb).apply(null,arguments)},Z=d.stackRestore=\r\nfunction(){return(Z=d.stackRestore=d.asm.lb).apply(null,arguments)},Kb=d.stackAlloc=function(){return(Kb=d.stackAlloc=d.asm.mb).apply(null,arguments)},Xa=d.___cxa_can_catch=function(){return(Xa=d.___cxa_can_catch=d.asm.nb).apply(null,arguments)},Fa=d.___cxa_is_pointer_type=function(){return(Fa=d.___cxa_is_pointer_type=d.asm.ob).apply(null,arguments)},Lb=d.dynCall_j=function(){return(Lb=d.dynCall_j=d.asm.pb).apply(null,arguments)},Mb=d.dynCall_iiiiij=function(){return(Mb=d.dynCall_iiiiij=d.asm.qb).apply(null,\r\narguments)},Nb=d.dynCall_jii=function(){return(Nb=d.dynCall_jii=d.asm.rb).apply(null,arguments)},Ob=d.dynCall_viiiiij=function(){return(Ob=d.dynCall_viiiiij=d.asm.sb).apply(null,arguments)},Pb=d.dynCall_vjji=function(){return(Pb=d.dynCall_vjji=d.asm.tb).apply(null,arguments)},Qb=d.dynCall_viiijjjii=function(){return(Qb=d.dynCall_viiijjjii=d.asm.ub).apply(null,arguments)},Rb=d.dynCall_iij=function(){return(Rb=d.dynCall_iij=d.asm.vb).apply(null,arguments)},Sb=d.dynCall_ji=function(){return(Sb=d.dynCall_ji=\r\nd.asm.wb).apply(null,arguments)},Tb=d.dynCall_iiiiiij=function(){return(Tb=d.dynCall_iiiiiij=d.asm.xb).apply(null,arguments)},Ub=d.dynCall_iiij=function(){return(Ub=d.dynCall_iiij=d.asm.yb).apply(null,arguments)};function cb(a,b){var c=Y();try{return U(a)(b)}catch(e){Z(c);if(e!==e+0)throw e;X(1,0)}}function vb(a,b){var c=Y();try{U(a)(b)}catch(e){Z(c);if(e!==e+0)throw e;X(1,0)}}function wb(a,b,c){var e=Y();try{U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}\r\nfunction fb(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function gb(a,b,c,e){var f=Y();try{return U(a)(b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function kb(a,b,c,e,f,h,k){var l=Y();try{return U(a)(b,c,e,f,h,k)}catch(n){Z(l);if(n!==n+0)throw n;X(1,0)}}function ub(a){var b=Y();try{U(a)()}catch(c){Z(b);if(c!==c+0)throw c;X(1,0)}}function jb(a,b,c,e,f,h){var k=Y();try{return U(a)(b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}\r\nfunction hb(a,b,c,e,f){var h=Y();try{return U(a)(b,c,e,f)}catch(k){Z(h);if(k!==k+0)throw k;X(1,0)}}function yb(a,b,c,e){var f=Y();try{U(a)(b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function Ab(a,b,c,e,f,h){var k=Y();try{U(a)(b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}function zb(a,b,c,e,f){var h=Y();try{U(a)(b,c,e,f)}catch(k){Z(h);if(k!==k+0)throw k;X(1,0)}}function Bb(a,b,c,e,f,h,k){var l=Y();try{U(a)(b,c,e,f,h,k)}catch(n){Z(l);if(n!==n+0)throw n;X(1,0)}}\r\nfunction Cb(a,b,c,e,f,h,k,l){var n=Y();try{U(a)(b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}function eb(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function db(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function Db(a,b,c,e,f,h,k,l,n){var t=Y();try{U(a)(b,c,e,f,h,k,l,n)}catch(x){Z(t);if(x!==x+0)throw x;X(1,0)}}function ib(a,b,c,e,f,h){var k=Y();try{return U(a)(b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}\r\nfunction lb(a,b,c,e,f,h,k,l){var n=Y();try{return U(a)(b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}function mb(a,b,c,e,f,h,k,l,n,t,x,E){var C=Y();try{return U(a)(b,c,e,f,h,k,l,n,t,x,E)}catch(g){Z(C);if(g!==g+0)throw g;X(1,0)}}function Eb(a,b,c,e,f,h,k,l,n,t,x){var E=Y();try{U(a)(b,c,e,f,h,k,l,n,t,x)}catch(C){Z(E);if(C!==C+0)throw C;X(1,0)}}function Fb(a,b,c,e,f,h,k,l,n,t,x,E,C,g,u,w){var F=Y();try{U(a)(b,c,e,f,h,k,l,n,t,x,E,C,g,u,w)}catch(M){Z(F);if(M!==M+0)throw M;X(1,0)}}\r\nfunction bb(a){var b=Y();try{return U(a)()}catch(c){Z(b);if(c!==c+0)throw c;X(1,0)}}function ab(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function $a(a,b,c){var e=Y();try{return U(a)(b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}function xb(a,b,c,e){var f=Y();try{U(a)(b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function Gb(a,b,c,e,f,h,k,l){var n=Y();try{Ob(a,b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}\r\nfunction Ib(a,b,c,e,f,h){var k=Y();try{Pb(a,b,c,e,f,h)}catch(l){Z(k);if(l!==l+0)throw l;X(1,0)}}function Hb(a,b,c,e,f,h,k,l,n,t,x,E){var C=Y();try{Qb(a,b,c,e,f,h,k,l,n,t,x,E)}catch(g){Z(C);if(g!==g+0)throw g;X(1,0)}}function qb(a,b,c,e){var f=Y();try{return Rb(a,b,c,e)}catch(h){Z(f);if(h!==h+0)throw h;X(1,0)}}function sb(a,b){var c=Y();try{return Sb(a,b)}catch(e){Z(c);if(e!==e+0)throw e;X(1,0)}}\r\nfunction nb(a,b,c,e,f,h,k,l){var n=Y();try{return Tb(a,b,c,e,f,h,k,l)}catch(t){Z(n);if(t!==t+0)throw t;X(1,0)}}function rb(a){var b=Y();try{return Lb(a)}catch(c){Z(b);if(c!==c+0)throw c;X(1,0)}}function ob(a,b,c,e,f,h,k){var l=Y();try{return Mb(a,b,c,e,f,h,k)}catch(n){Z(l);if(n!==n+0)throw n;X(1,0)}}function pb(a,b,c,e,f){var h=Y();try{return Ub(a,b,c,e,f)}catch(k){Z(h);if(k!==k+0)throw k;X(1,0)}}function tb(a,b,c){var e=Y();try{return Nb(a,b,c)}catch(f){Z(e);if(f!==f+0)throw f;X(1,0)}}\r\nd.UTF8ToString=pa;d.stringToUTF8=function(a,b,c){return qa(a,G,b,c)};d.lengthBytesUTF8=ra;d.stackSave=Y;d.stackRestore=Z;d.stackAlloc=Kb;var Vb;L=function Wb(){Vb||Xb();Vb||(L=Wb)};\r\nfunction Xb(){function a(){if(!Vb&&(Vb=!0,d.calledRun=!0,!D)){O(wa);aa(d);if(d.onRuntimeInitialized)d.onRuntimeInitialized();if(d.postRun)for(\"function\"==typeof d.postRun&&(d.postRun=[d.postRun]);d.postRun.length;){var b=d.postRun.shift();ya.unshift(b)}O(ya)}}if(!(0<K)){if(d.preRun)for(\"function\"==typeof d.preRun&&(d.preRun=[d.preRun]);d.preRun.length;)za();O(va);0<K||(d.setStatus?(d.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){d.setStatus(\"\")},1);a()},1)):a())}}\r\nif(d.preInit)for(\"function\"==typeof d.preInit&&(d.preInit=[d.preInit]);0<d.preInit.length;)d.preInit.pop()();Xb();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\n\nlet ortInit: boolean;\n\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      ortInit = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.enableProfiling === undefined) {\n      sessionOptions.enableProfiling = false;\n    }\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, options.executionProviders, allocs);\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nconst enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run =\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\n      const wasm = getInstance();\n      const session = activeSessions.get(sessionId);\n      if (!session) {\n        throw new Error('invalid session id');\n      }\n      const sessionHandle = session[0];\n      const inputNamesUTF8Encoded = session[1];\n      const outputNamesUTF8Encoded = session[2];\n\n      const inputCount = inputIndices.length;\n      const outputCount = outputIndices.length;\n\n      let runOptionsHandle = 0;\n      let runOptionsAllocs: number[] = [];\n\n      const inputValues: number[] = [];\n      const inputAllocs: number[] = [];\n\n      try {\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n        // create input tensors\n        for (let i = 0; i < inputCount; i++) {\n          const dataType = inputs[i][0];\n          const dims = inputs[i][1];\n          const data = inputs[i][2];\n\n          let dataOffset: number;\n          let dataByteLength: number;\n\n          if (Array.isArray(data)) {\n            // string tensor\n            dataByteLength = 4 * data.length;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < data.length; i++) {\n              if (typeof data[i] !== 'string') {\n                throw new TypeError(`tensor data at index ${i} is not a string`);\n              }\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n            }\n          } else {\n            dataByteLength = data.byteLength;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n            if (tensor === 0) {\n              throw new Error('Can\\'t create a tensor');\n            }\n            inputValues.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        }\n\n        const beforeRunStack = wasm.stackSave();\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n        try {\n          let inputValuesIndex = inputValuesOffset / 4;\n          let inputNamesIndex = inputNamesOffset / 4;\n          let outputValuesIndex = outputValuesOffset / 4;\n          let outputNamesIndex = outputNamesOffset / 4;\n          for (let i = 0; i < inputCount; i++) {\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n          }\n          for (let i = 0; i < outputCount; i++) {\n            wasm.HEAPU32[outputValuesIndex++] = 0;\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n          }\n\n          // support RunOptions\n          let errorCode = wasm._OrtRun(\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n              outputValuesOffset, runOptionsHandle);\n\n          const output: SerializableTensor[] = [];\n\n          if (errorCode === 0) {\n            for (let i = 0; i < outputCount; i++) {\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n              const beforeGetTensorDataStack = wasm.stackSave();\n              // stack allocate 4 pointer value\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n              let type: Tensor.Type|undefined, dataOffset = 0;\n              try {\n                errorCode = wasm._OrtGetTensorData(\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n                if (errorCode !== 0) {\n                  throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n                }\n                let tensorDataIndex = tensorDataOffset / 4;\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n                const dims = [];\n                for (let i = 0; i < dimsLength; i++) {\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n                }\n                wasm._OrtFree(dimsOffset);\n\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n                type = tensorDataTypeEnumToString(dataType);\n                if (type === 'string') {\n                  const stringData: string[] = [];\n                  let dataIndex = dataOffset / 4;\n                  for (let i = 0; i < size; i++) {\n                    const offset = wasm.HEAPU32[dataIndex++];\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                  }\n                  output.push([type, dims, stringData]);\n                } else {\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\n                  const data = new typedArrayConstructor(size);\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n                  output.push([type, dims, data]);\n                }\n              } finally {\n                wasm.stackRestore(beforeGetTensorDataStack);\n                if (type === 'string' && dataOffset) {\n                  wasm._free(dataOffset);\n                }\n                wasm._OrtReleaseTensor(tensor);\n              }\n            }\n          }\n\n          if (errorCode === 0) {\n            return output;\n          } else {\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n          }\n        } finally {\n          wasm.stackRestore(beforeRunStack);\n        }\n      } finally {\n        inputValues.forEach(wasm._OrtReleaseTensor);\n        inputAllocs.forEach(wasm._free);\n\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\n        runOptionsAllocs.forEach(wasm._free);\n      }\n    };\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.14.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var t={474:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(t){function e(){return j.buffer!=D&&N(j.buffer),P}function r(){return j.buffer!=D&&N(j.buffer),U}function a(){return j.buffer!=D&&N(j.buffer),F}function i(){return j.buffer!=D&&N(j.buffer),I}function o(){return j.buffer!=D&&N(j.buffer),W}var u,c,s;t=t||{},u||(u=void 0!==t?t:{}),u.ready=new Promise((function(t,e){c=t,s=e}));var l,f,p,h,d,y,b=Object.assign({},u),m=\\\"./this.program\\\",g=(t,e)=>{throw e},v=\\\"object\\\"==typeof window,w=\\\"function\\\"==typeof importScripts,_=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,A=\\\"\\\";function S(t){return u.locateFile?u.locateFile(t,A):A+t}if(_){let e;A=w?n(908).dirname(A)+\\\"/\\\":\\\"//\\\",y=()=>{d||(h=n(384),d=n(908))},l=function(t,e){return y(),t=d.normalize(t),h.readFileSync(t,e?void 0:\\\"utf8\\\")},p=t=>((t=l(t,!0)).buffer||(t=new Uint8Array(t)),t),f=(t,e,n)=>{y(),t=d.normalize(t),h.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(t){if(!(t instanceof ct))throw t})),process.on(\\\"unhandledRejection\\\",(function(t){throw t})),g=(t,e)=>{if(Q())throw process.exitCode=t,e;e instanceof ct||x(\\\"exiting due to exception: \\\"+e),process.exit(t)},u.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{e=n(925)}catch(t){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),t}n.g.Worker=e.Worker}else(v||w)&&(w?A=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\\\"blob:\\\")?A.substr(0,A.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",_||(l=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.send(null),e.responseText},w&&(p=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.responseType=\\\"arraybuffer\\\",e.send(null),new Uint8Array(e.response)}),f=(t,e,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",t,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)}));_&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),E=console.warn.bind(console);_&&(y(),T=t=>h.writeSync(1,t+\\\"\\\\n\\\"),E=t=>h.writeSync(2,t+\\\"\\\\n\\\"));var M,C=u.print||T,x=u.printErr||E;Object.assign(u,b),b=null,u.thisProgram&&(m=u.thisProgram),u.quit&&(g=u.quit),u.wasmBinary&&(M=u.wasmBinary);var R=u.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&at(\\\"no native wasm support detected\\\");var j,k,D,P,U,F,I,W,H=!1,L=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function z(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&L)return L.decode(t.buffer instanceof SharedArrayBuffer?t.slice(e,n):t.subarray(e,n));for(r=\\\"\\\";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function Y(t,e){return(t>>>=0)?z(r(),t,e):\\\"\\\"}function B(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function G(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function N(t){D=t,u.HEAP8=P=new Int8Array(t),u.HEAP16=new Int16Array(t),u.HEAP32=F=new Int32Array(t),u.HEAPU8=U=new Uint8Array(t),u.HEAPU16=new Uint16Array(t),u.HEAPU32=I=new Uint32Array(t),u.HEAPF32=new Float32Array(t),u.HEAPF64=W=new Float64Array(t)}O&&(D=u.buffer);var V=u.INITIAL_MEMORY||16777216;if(O)j=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)j=u.wasmMemory;else if(!((j=new WebAssembly.Memory({initial:V/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),_&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");j&&(D=j.buffer),V=D.byteLength,N(D);var $,q=[],X=[],J=[],Z=[];function Q(){return R||!1}function K(){var t=u.preRun.shift();q.unshift(t)}var tt,et=0,nt=null,rt=null;function at(t){throw O?postMessage({cmd:\\\"onAbort\\\",arg:t}):u.onAbort&&u.onAbort(t),x(t=\\\"Aborted(\\\"+t+\\\")\\\"),H=!0,t=new WebAssembly.RuntimeError(t+\\\". Build with -sASSERTIONS for more info.\\\"),s(t),t}function it(){return tt.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ot(){var t=tt;try{if(t==tt&&M)return new Uint8Array(M);if(p)return p(t);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(t){at(t)}}tt=\\\"ort-wasm-threaded.wasm\\\",it()||(tt=S(tt));var ut={};function ct(t){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+t+\\\")\\\",this.status=t}function st(t){(t=ht.Vb[t])||at(),ht.mc(t)}function lt(t){var e=ht.Cc();if(!e)return 6;ht.ac.push(e),ht.Vb[t.Ub]=e,e.Ub=t.Ub;var n={cmd:\\\"run\\\",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return e.$b=()=>{n.time=performance.now(),e.postMessage(n,t.Nc)},e.loaded&&(e.$b(),delete e.$b),0}function ft(t){if(O)return $t(1,1,t);Q()||(ht.oc(),u.onExit&&u.onExit(t),H=!0),g(t,new ct(t))}function pt(t,e){if(!e&&O)throw bt(t),\\\"unwind\\\";Q()||O||(me(),dt(J),be(0),re[1].length&&ae(1,10),re[2].length&&ae(2,10),ht.oc()),ft(t)}var ht={Yb:[],ac:[],qc:[],Vb:{},fc:function(){O&&ht.Ec()},Pc:function(){},Ec:function(){ht.receiveObjectTransfer=ht.Gc,ht.threadInitTLS=ht.pc,ht.setExitStatus=ht.nc,R=!1},nc:function(){},oc:function(){for(var t of Object.values(ht.Vb))ht.mc(t);for(t of ht.Yb)t.terminate();ht.Yb=[]},mc:function(t){var e=t.Ub;delete ht.Vb[e],ht.Yb.push(t),ht.ac.splice(ht.ac.indexOf(t),1),t.Ub=0,Oe(e)},Gc:function(){},pc:function(){ht.qc.forEach((t=>t()))},Fc:function(t,e){t.onmessage=n=>{var r=(n=n.data).cmd;if(t.Ub&&(ht.Bc=t.Ub),n.targetThread&&n.targetThread!=he()){var a=ht.Vb[n.Qc];a?a.postMessage(n,n.transferList):x('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===r?zt(n.queue):\\\"spawnThread\\\"===r?lt(n):\\\"cleanupThread\\\"===r?st(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=ht.Vb[n],delete ht.Vb[n],r.terminate(),Oe(n),ht.ac.splice(ht.ac.indexOf(r),1),r.Ub=0):\\\"cancelThread\\\"===r?ht.Vb[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(t.loaded=!0,e&&e(t),t.$b&&(t.$b(),delete t.$b)):\\\"print\\\"===r?C(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?t.postMessage(n):\\\"onAbort\\\"===r?u.onAbort&&u.onAbort(n.arg):r&&x(\\\"worker sent an unknown command \\\"+r);ht.Bc=void 0},t.onerror=t=>{throw x(\\\"worker sent an error! \\\"+t.filename+\\\":\\\"+t.lineno+\\\": \\\"+t.message),t},_&&(t.on(\\\"message\\\",(function(e){t.onmessage({data:e})})),t.on(\\\"error\\\",(function(e){t.onerror(e)})),t.on(\\\"detachedExit\\\",(function(){}))),t.postMessage({cmd:\\\"load\\\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:j,wasmModule:k})},yc:function(){var t=S(\\\"ort-wasm-threaded.worker.js\\\");ht.Yb.push(new Worker(t))},Cc:function(){return 0==ht.Yb.length&&(ht.yc(),ht.Fc(ht.Yb[0])),ht.Yb.pop()}};function dt(t){for(;0<t.length;)t.shift()(u)}function yt(t){var e=Ee();return t=t(),Me(e),t}function bt(t){if(O)return $t(2,0,t);try{pt(t)}catch(t){t instanceof ct||\\\"unwind\\\"==t||g(1,t)}}u.PThread=ht,u.establishStackSpace=function(){var t=he(),e=a()[t+44>>2>>>0];t=a()[t+48>>2>>>0],Te(e,e-t),Me(e)};var mt=[];function gt(t){var e=mt[t];return e||(t>=mt.length&&(mt.length=t+1),mt[t]=e=$.get(t)),e}u.invokeEntryPoint=function(t,e){t=gt(t)(e),Q()?ht.nc(t):Ae(t)};var vt,wt,_t=[],Ot=0,At=0;function St(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){i()[this.Sb+4>>2>>>0]=t},this.bc=function(){return i()[this.Sb+4>>2>>>0]},this.wc=function(t){i()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return i()[this.Sb+8>>2>>>0]},this.rc=function(){a()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,e()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=e()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,e()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=e()[this.Sb+13>>0>>>0]},this.fc=function(t,e){this.cc(0),this.xc(t),this.wc(e),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(a(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(a(),this.Sb>>2,1)},this.cc=function(t){i()[this.Sb+16>>2>>>0]=t},this.tc=function(){return i()[this.Sb+16>>2>>>0]},this.vc=function(){if(Re(this.bc()))return i()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function Tt(t){return ye(new St(t).Sb)}function Et(t,e,n,r){return O?$t(3,1,t,e,n,r):Mt(t,e,n,r)}function Mt(t,e,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return x(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?Et(t,e,n,r):(t={Ic:n,Ub:t,zc:r,Nc:a},O?(t.Oc=\\\"spawnThread\\\",postMessage(t,a),0):lt(t))}function Ct(t,e,n){return O?$t(4,1,t,e,n):0}function xt(t,e){if(O)return $t(5,1,t,e)}function Rt(t,e){if(O)return $t(6,1,t,e)}function jt(t,e,n){if(O)return $t(7,1,t,e,n)}function kt(t,e,n){return O?$t(8,1,t,e,n):0}function Dt(t,e){if(O)return $t(9,1,t,e)}function Pt(t,e,n){if(O)return $t(10,1,t,e,n)}function Ut(t,e,n,r){if(O)return $t(11,1,t,e,n,r)}function Ft(t,e,n,r){if(O)return $t(12,1,t,e,n,r)}function It(t,e,n,r){if(O)return $t(13,1,t,e,n,r)}function Wt(t){if(O)return $t(14,1,t)}function Ht(t,e){if(O)return $t(15,1,t,e)}function Lt(t,e,n){if(O)return $t(16,1,t,e,n)}function zt(t){Atomics.store(a(),t>>2,1),he()&&_e(t),Atomics.compareExchange(a(),t>>2,1,0)}function Yt(t){return i()[t>>>2]+4294967296*a()[t+4>>>2]}function Bt(t,e,n,r,a,i){return O?$t(17,1,t,e,n,r,a,i):-52}function Gt(t,e,n,r,a,i){if(O)return $t(18,1,t,e,n,r,a,i)}function Nt(t){var n=G(t)+1,r=de(n);return r&&B(t,e(),r,n),r}function Vt(t,e,n){function r(t){return(t=t.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?t[1]:\\\"GMT\\\"}if(O)return $t(19,1,t,e,n);var o=(new Date).getFullYear(),u=new Date(o,0,1),c=new Date(o,6,1);o=u.getTimezoneOffset();var s=c.getTimezoneOffset(),l=Math.max(o,s);a()[t>>2>>>0]=60*l,a()[e>>2>>>0]=Number(o!=s),t=r(u),e=r(c),t=Nt(t),e=Nt(e),s<o?(i()[n>>2>>>0]=t,i()[n+4>>2>>>0]=e):(i()[n>>2>>>0]=e,i()[n+4>>2>>>0]=t)}function $t(t,e){var n=arguments.length-2,r=arguments;return yt((()=>{for(var a=Ce(8*n),i=a>>3,u=0;u<n;u++){var c=r[2+u];o()[i+u>>>0]=c}return we(t,n,a,e)}))}u.executeNotifiedProxyingQueue=zt,wt=_?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:O?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var qt,Xt=[],Jt={};function Zt(){if(!qt){var t,e={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:m||\\\"./this.program\\\"};for(t in Jt)void 0===Jt[t]?delete e[t]:e[t]=Jt[t];var n=[];for(t in e)n.push(t+\\\"=\\\"+e[t]);qt=n}return qt}function Qt(t,n){if(O)return $t(20,1,t,n);var r=0;return Zt().forEach((function(a,o){var u=n+r;for(o=i()[t+4*o>>2>>>0]=u,u=0;u<a.length;++u)e()[o++>>0>>>0]=a.charCodeAt(u);e()[o>>0>>>0]=0,r+=a.length+1})),0}function Kt(t,e){if(O)return $t(21,1,t,e);var n=Zt();i()[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),i()[e>>2>>>0]=r,0}function te(t){return O?$t(22,1,t):52}function ee(t,e,n,r){return O?$t(23,1,t,e,n,r):52}function ne(t,e,n,r,a){return O?$t(24,1,t,e,n,r,a):70}var re=[null,[],[]];function ae(t,e){var n=re[t];0===e||10===e?((1===t?C:x)(z(n,0)),n.length=0):n.push(e)}function ie(t,e,n,a){if(O)return $t(25,1,t,e,n,a);for(var o=0,u=0;u<n;u++){var c=i()[e>>2>>>0],s=i()[e+4>>2>>>0];e+=8;for(var l=0;l<s;l++)ae(t,r()[c+l>>>0]);o+=s}return i()[a>>2>>>0]=o,0}var oe=0;function ue(t){return 0==t%4&&(0!=t%100||0==t%400)}var ce=[31,29,31,30,31,30,31,31,30,31,30,31],se=[31,28,31,30,31,30,31,31,30,31,30,31];function le(t,n,r,i){function o(t,e,n){for(t=\\\"number\\\"==typeof t?t.toString():t||\\\"\\\";t.length<e;)t=n[0]+t;return t}function u(t,e){return o(t,e,\\\"0\\\")}function c(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function s(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function l(t){var e=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(ue(t.getFullYear())?ce:se)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=s(new Date(t.getFullYear(),0,4)),n=s(n),0>=c(e,t)?0>=c(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var f=a()[i+40>>2>>>0];for(var p in i={Lc:a()[i>>2>>>0],Kc:a()[i+4>>2>>>0],dc:a()[i+8>>2>>>0],jc:a()[i+12>>2>>>0],ec:a()[i+16>>2>>>0],Xb:a()[i+20>>2>>>0],Tb:a()[i+24>>2>>>0],Wb:a()[i+28>>2>>>0],Rc:a()[i+32>>2>>>0],Jc:a()[i+36>>2>>>0],Mc:f?Y(f):\\\"\\\"},r=Y(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var h=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(t){return h[t.Tb].substring(0,3)},\\\"%A\\\":function(t){return h[t.Tb]},\\\"%b\\\":function(t){return d[t.ec].substring(0,3)},\\\"%B\\\":function(t){return d[t.ec]},\\\"%C\\\":function(t){return u((t.Xb+1900)/100|0,2)},\\\"%d\\\":function(t){return u(t.jc,2)},\\\"%e\\\":function(t){return o(t.jc,2,\\\" \\\")},\\\"%g\\\":function(t){return l(t).toString().substring(2)},\\\"%G\\\":function(t){return l(t)},\\\"%H\\\":function(t){return u(t.dc,2)},\\\"%I\\\":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),u(t,2)},\\\"%j\\\":function(t){for(var e=0,n=0;n<=t.ec-1;e+=(ue(t.Xb+1900)?ce:se)[n++]);return u(t.jc+e,3)},\\\"%m\\\":function(t){return u(t.ec+1,2)},\\\"%M\\\":function(t){return u(t.Kc,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(t){return 0<=t.dc&&12>t.dc?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(t){return u(t.Lc,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(t){return t.Tb||7},\\\"%U\\\":function(t){return u(Math.floor((t.Wb+7-t.Tb)/7),2)},\\\"%V\\\":function(t){var e=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&e++,e)53==e&&(4==(n=(t.Tb+371-t.Wb)%7)||3==n&&ue(t.Xb)||(e=1));else{e=52;var n=(t.Tb+7-t.Wb-1)%7;(4==n||5==n&&ue(t.Xb%400-1))&&e++}return u(e,2)},\\\"%w\\\":function(t){return t.Tb},\\\"%W\\\":function(t){return u(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},\\\"%y\\\":function(t){return(t.Xb+1900).toString().substring(2)},\\\"%Y\\\":function(t){return t.Xb+1900},\\\"%z\\\":function(t){var e=0<=(t=t.Jc);return t=Math.abs(t)/60,(e?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(t/60*100+t%60)).slice(-4)},\\\"%Z\\\":function(t){return t.Mc},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](i)));return p=function(t){var e=Array(G(t)+1);return B(t,e,0,e.length),e}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(t,n){e().set(t,n>>>0)}(p,t),p.length-1)}ht.fc();var fe=[null,ft,bt,Et,Ct,xt,Rt,jt,kt,Dt,Pt,Ut,Ft,It,Wt,Ht,Lt,Bt,Gt,Vt,Qt,Kt,te,ee,ne,ie],pe={b:function(t){return de(t+24)+24},n:function(t){return(t=new St(t)).uc()||(t.hc(!0),Ot--),t.ic(!1),_t.push(t),t.sc(),t.vc()},ma:function(t){throw x(\\\"Unexpected exception thrown, this is not properly supported - aborting\\\"),H=!0,t},x:function(){Se(0);var t=_t.pop();if(t.Hc()&&!t.kc()){var e=t.Dc();e&&gt(e)(t.Zb),Tt(t.Zb)}At=0},e:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},l:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},h:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},t:Tt,M:function(){var t=_t.pop();t||at(\\\"no exception to throw\\\");var e=t.Zb;throw t.kc()||(_t.push(t),t.ic(!0),t.hc(!1),Ot++),At=e,e},c:function(t,e,n){throw new St(t).fc(e,n),At=t,Ot++,t},pa:function(){return Ot},Fa:function(t){ge(t,!w,1,!v),ht.pc()},T:function(t){O?postMessage({cmd:\\\"cleanupThread\\\",thread:t}):st(t)},xa:Mt,j:function(t){throw At||(At=t),t},H:Ct,Ma:xt,ua:Rt,wa:jt,oa:kt,Ka:Dt,Ca:Pt,Ja:Ut,V:Ft,va:It,sa:Wt,La:Ht,ta:Lt,Ta:function(){},X:function(){at(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},Ua:function(){at(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,e,n,r){if(t==e)setTimeout((()=>zt(r)));else if(O)postMessage({targetThread:t,cmd:\\\"processProxyingQueue\\\",queue:r});else{if(!(t=ht.Vb[t]))return;t.postMessage({cmd:\\\"processProxyingQueue\\\",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getUTCSeconds(),a()[e+4>>2>>>0]=t.getUTCMinutes(),a()[e+8>>2>>>0]=t.getUTCHours(),a()[e+12>>2>>>0]=t.getUTCDate(),a()[e+16>>2>>>0]=t.getUTCMonth(),a()[e+20>>2>>>0]=t.getUTCFullYear()-1900,a()[e+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[e+28>>2>>>0]=t},Qa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getFullYear()-1900,a()[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1),r=(t.getTime()-n.getTime())/864e5|0;a()[e+28>>2>>>0]=r,a()[e+36>>2>>>0]=-60*t.getTimezoneOffset(),r=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(r!=(n=n.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(n,r)),a()[e+32>>2>>>0]=t},Ra:function(t){var e=new Date(a()[t+20>>2>>>0]+1900,a()[t+16>>2>>>0],a()[t+12>>2>>>0],a()[t+8>>2>>>0],a()[t+4>>2>>>0],a()[t>>2>>>0],0),n=a()[t+32>>2>>>0],r=e.getTimezoneOffset(),i=new Date(e.getFullYear(),0,1),o=new Date(e.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),c=Math.min(u,o);return 0>n?a()[t+32>>2>>>0]=Number(o!=u&&c==r):0<n!=(c==r)&&(o=Math.max(u,o),e.setTime(e.getTime()+6e4*((0<n?c:o)-r))),a()[t+24>>2>>>0]=e.getDay(),n=(e.getTime()-i.getTime())/864e5|0,a()[t+28>>2>>>0]=n,a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},Aa:Bt,Ba:Gt,Sa:function t(e,n,r){t.Ac||(t.Ac=!0,Vt(e,n,r))},y:function(){at(\\\"\\\")},U:function(){if(!_&&!w){var t=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";vt||(vt={}),vt[t]||(vt[t]=1,_&&(t=\\\"warning: \\\"+t),x(t))}},ra:function(){return 4294901760},B:wt,Ia:function(t,e,n){r().copyWithin(t>>>0,e>>>0,e+n>>>0)},F:function(){return _?n(993).cpus().length:navigator.hardwareConcurrency},Da:function(t,e,n){Xt.length=e,n>>=3;for(var r=0;r<e;r++)Xt[r]=o()[n+r>>>0];return(0>t?ut[-t-1]:fe[t]).apply(null,Xt)},qa:function(t){var e=r().length;if((t>>>=0)<=e||4294901760<t)return!1;for(var n=1;4>=n;n*=2){var a=e*(1+.2/n);a=Math.min(a,t+100663296);var i=Math;a=Math.max(t,a),i=i.min.call(i,4294901760,a+(65536-a%65536)%65536);t:{try{j.grow(i-D.byteLength+65535>>>16),N(j.buffer);var o=1;break t}catch(t){}o=void 0}if(o)return!0}return!1},Na:function(){throw\\\"unwind\\\"},Ga:Qt,Ha:Kt,J:pt,I:te,S:ee,ga:ne,R:ie,d:function(){return oe},na:function t(r,a){t.lc||(t.lc=function(){if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(_)try{var e=n(Object(function(){var t=new Error(\\\"Cannot find module 'crypto'\\\");throw t.code=\\\"MODULE_NOT_FOUND\\\",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>at(\\\"randomDevice\\\")}());for(var i=0;i<a;i++)e()[r+i>>0>>>0]=t.lc();return 0},ia:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ja:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},K:function(t){var e=Ee();try{return gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},f:function(t,e){var n=Ee();try{return gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},P:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},Q:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},k:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},p:function(t,e,n,r){var a=Ee();try{return gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},q:function(t,e,n,r,a){var i=Ee();try{return gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},N:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},s:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},w:function(t,e,n,r,a,i,o){var u=Ee();try{return gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},L:function(t,e,n,r,a,i,o,u){var c=Ee();try{return gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},E:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{return gt(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=Ee();try{return He(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},_:function(t,e,n,r,a,i,o){var u=Ee();try{return ke(t,e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},Z:function(t,e,n,r,a){var i=Ee();try{return Le(t,e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},ca:function(t,e,n,r){var a=Ee();try{return Ie(t,e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},$:function(t){var e=Ee();try{return je(t)}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},ba:function(t,e){var n=Ee();try{return We(t,e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},Y:function(t,e,n){var r=Ee();try{return De(t,e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},g:function(t){var e=Ee();try{gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},r:function(t,e){var n=Ee();try{gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},i:function(t,e,n){var r=Ee();try{gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ha:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},m:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},v:function(t,e,n,r,a){var i=Ee();try{gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},u:function(t,e,n,r,a,i){var o=Ee();try{gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},O:function(t,e,n,r,a,i,o){var u=Ee();try{gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},A:function(t,e,n,r,a,i,o,u){var c=Ee();try{gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},ka:function(t,e,n,r,a,i,o,u,c){var s=Ee();try{gt(t)(e,n,r,a,i,o,u,c)}catch(t){if(Me(s),t!==t+0)throw t;Se(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l){var f=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(Me(f),t!==t+0)throw t;Se(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(Me(b),t!==t+0)throw t;Se(1,0)}},fa:function(t,e,n,r,a,i,o,u){var c=Ee();try{Pe(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},da:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{Fe(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},ea:function(t,e,n,r,a,i){var o=Ee();try{Ue(t,e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},o:function(t){return t},a:j||u.wasmMemory,G:function(t){oe=t},la:le,z:function(t,e,n,r){return le(t,e,n,r)}};!function(){function t(t,e){u.asm=t.exports,ht.qc.push(u.asm.sb),$=u.asm.ub,X.unshift(u.asm.Va),k=e,O||(et--,u.monitorRunDependencies&&u.monitorRunDependencies(et),0==et&&(null!==nt&&(clearInterval(nt),nt=null),rt&&(t=rt,rt=null,t())))}function e(e){t(e.instance,e.module)}function n(t){return function(){if(!M&&(v||w)){if(\\\"function\\\"==typeof fetch&&!tt.startsWith(\\\"file://\\\"))return fetch(tt,{credentials:\\\"same-origin\\\"}).then((function(t){if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+tt+\\\"'\\\";return t.arrayBuffer()})).catch((function(){return ot()}));if(f)return new Promise((function(t,e){f(tt,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return ot()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){x(\\\"failed to asynchronously prepare wasm: \\\"+t),at(t)}))}var r={a:pe};if(O||(et++,u.monitorRunDependencies&&u.monitorRunDependencies(et)),u.instantiateWasm)try{return u.instantiateWasm(r,t)}catch(t){return x(\\\"Module.instantiateWasm callback failed with error: \\\"+t),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||it()||tt.startsWith(\\\"file://\\\")||_||\\\"function\\\"!=typeof fetch?n(e):fetch(tt,{credentials:\\\"same-origin\\\"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(e,(function(t){return x(\\\"wasm streaming compile failed: \\\"+t),x(\\\"falling back to ArrayBuffer instantiation\\\"),n(e)}))}))).catch(s)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Va).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Wa).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Xa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.Ya).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.Za).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm._a).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.$a).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ab).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.bb).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.cb).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.db).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.eb).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.fb).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.gb).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.hb).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ib).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.jb).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.kb).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.lb).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.mb).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.nb).apply(null,arguments)};var he=u._pthread_self=function(){return(he=u._pthread_self=u.asm.ob).apply(null,arguments)},de=u._malloc=function(){return(de=u._malloc=u.asm.pb).apply(null,arguments)},ye=u._free=function(){return(ye=u._free=u.asm.qb).apply(null,arguments)},be=u._fflush=function(){return(be=u._fflush=u.asm.rb).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.sb).apply(null,arguments)};var me=u.___funcs_on_exit=function(){return(me=u.___funcs_on_exit=u.asm.tb).apply(null,arguments)},ge=u.__emscripten_thread_init=function(){return(ge=u.__emscripten_thread_init=u.asm.vb).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wb).apply(null,arguments)};var ve,we=u._emscripten_run_in_main_runtime_thread_js=function(){return(we=u._emscripten_run_in_main_runtime_thread_js=u.asm.xb).apply(null,arguments)},_e=u.__emscripten_proxy_execute_task_queue=function(){return(_e=u.__emscripten_proxy_execute_task_queue=u.asm.yb).apply(null,arguments)},Oe=u.__emscripten_thread_free_data=function(){return(Oe=u.__emscripten_thread_free_data=u.asm.zb).apply(null,arguments)},Ae=u.__emscripten_thread_exit=function(){return(Ae=u.__emscripten_thread_exit=u.asm.Ab).apply(null,arguments)},Se=u._setThrew=function(){return(Se=u._setThrew=u.asm.Bb).apply(null,arguments)},Te=u._emscripten_stack_set_limits=function(){return(Te=u._emscripten_stack_set_limits=u.asm.Cb).apply(null,arguments)},Ee=u.stackSave=function(){return(Ee=u.stackSave=u.asm.Db).apply(null,arguments)},Me=u.stackRestore=function(){return(Me=u.stackRestore=u.asm.Eb).apply(null,arguments)},Ce=u.stackAlloc=function(){return(Ce=u.stackAlloc=u.asm.Fb).apply(null,arguments)},xe=u.___cxa_can_catch=function(){return(xe=u.___cxa_can_catch=u.asm.Gb).apply(null,arguments)},Re=u.___cxa_is_pointer_type=function(){return(Re=u.___cxa_is_pointer_type=u.asm.Hb).apply(null,arguments)},je=u.dynCall_j=function(){return(je=u.dynCall_j=u.asm.Ib).apply(null,arguments)},ke=u.dynCall_iiiiij=function(){return(ke=u.dynCall_iiiiij=u.asm.Jb).apply(null,arguments)},De=u.dynCall_jii=function(){return(De=u.dynCall_jii=u.asm.Kb).apply(null,arguments)},Pe=u.dynCall_viiiiij=function(){return(Pe=u.dynCall_viiiiij=u.asm.Lb).apply(null,arguments)},Ue=u.dynCall_vjji=function(){return(Ue=u.dynCall_vjji=u.asm.Mb).apply(null,arguments)},Fe=u.dynCall_viiijjjii=function(){return(Fe=u.dynCall_viiijjjii=u.asm.Nb).apply(null,arguments)},Ie=u.dynCall_iij=function(){return(Ie=u.dynCall_iij=u.asm.Ob).apply(null,arguments)},We=u.dynCall_ji=function(){return(We=u.dynCall_ji=u.asm.Pb).apply(null,arguments)},He=u.dynCall_iiiiiij=function(){return(He=u.dynCall_iiiiiij=u.asm.Qb).apply(null,arguments)},Le=u.dynCall_iiij=function(){return(Le=u.dynCall_iiij=u.asm.Rb).apply(null,arguments)};function ze(){function t(){if(!ve&&(ve=!0,u.calledRun=!0,!H)&&(O||dt(X),c(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for(\\\"function\\\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var t=u.postRun.shift();Z.unshift(t)}dt(Z)}}if(!(0<et))if(O)c(u),O||dt(X),postMessage({cmd:\\\"loaded\\\"});else{if(u.preRun)for(\\\"function\\\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)K();dt(q),0<et||(u.setStatus?(u.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){u.setStatus(\\\"\\\")}),1),t()}),1)):t())}}if(u.UTF8ToString=Y,u.stringToUTF8=function(t,e,n){return B(t,r(),e,n)},u.lengthBytesUTF8=G,u.keepRuntimeAlive=Q,u.wasmMemory=j,u.stackSave=Ee,u.stackRestore=Me,u.stackAlloc=Ce,u.ExitStatus=ct,u.PThread=ht,rt=function t(){ve||ze(),ve||(rt=t)},u.preInit)for(\\\"function\\\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return ze(),t.ready});t.exports=r},932:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(t){var e,r,a;t=t||{},e||(e=void 0!==t?t:{}),e.ready=new Promise((function(t,e){r=t,a=e}));var i,o,u,c,s,l,f=Object.assign({},e),p=\\\"./this.program\\\",h=(t,e)=>{throw e},d=\\\"object\\\"==typeof window,y=\\\"function\\\"==typeof importScripts,b=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,m=\\\"\\\";b?(m=y?n(908).dirname(m)+\\\"/\\\":\\\"//\\\",l=()=>{s||(c=n(384),s=n(908))},i=function(t,e){return l(),t=s.normalize(t),c.readFileSync(t,e?void 0:\\\"utf8\\\")},u=t=>((t=i(t,!0)).buffer||(t=new Uint8Array(t)),t),o=(t,e,n)=>{l(),t=s.normalize(t),c.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(t){if(!(t instanceof J))throw t})),process.on(\\\"unhandledRejection\\\",(function(t){throw t})),h=(t,e)=>{if(_||0<L)throw process.exitCode=t,e;e instanceof J||w(\\\"exiting due to exception: \\\"+e),process.exit(t)},e.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||y)&&(y?m=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(m=document.currentScript.src),_scriptDir&&(m=_scriptDir),m=0!==m.indexOf(\\\"blob:\\\")?m.substr(0,m.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",i=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.send(null),e.responseText},y&&(u=t=>{var e=new XMLHttpRequest;return e.open(\\\"GET\\\",t,!1),e.responseType=\\\"arraybuffer\\\",e.send(null),new Uint8Array(e.response)}),o=(t,e,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",t,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)});var g,v=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);Object.assign(e,f),f=null,e.thisProgram&&(p=e.thisProgram),e.quit&&(h=e.quit),e.wasmBinary&&(g=e.wasmBinary);var _=e.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&V(\\\"no native wasm support detected\\\");var O,A,S,T,E,M,C=!1,x=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function R(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&x)return x.decode(t.subarray(e,n));for(r=\\\"\\\";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(t,e){return(t>>>=0)?R(T,t,e):\\\"\\\"}function k(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function D(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function P(){var t=O.buffer;A=t,e.HEAP8=S=new Int8Array(t),e.HEAP16=new Int16Array(t),e.HEAP32=E=new Int32Array(t),e.HEAPU8=T=new Uint8Array(t),e.HEAPU16=new Uint16Array(t),e.HEAPU32=M=new Uint32Array(t),e.HEAPF32=new Float32Array(t),e.HEAPF64=new Float64Array(t)}var U,F=[],I=[],W=[],H=[],L=0;function z(){var t=e.preRun.shift();F.unshift(t)}var Y,B=0,G=null,N=null;function V(t){throw e.onAbort&&e.onAbort(t),w(t=\\\"Aborted(\\\"+t+\\\")\\\"),C=!0,t=new WebAssembly.RuntimeError(t+\\\". Build with -sASSERTIONS for more info.\\\"),a(t),t}function $(){return Y.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(Y=\\\"ort-wasm.wasm\\\",!$()){var q=Y;Y=e.locateFile?e.locateFile(q,m):m+q}function X(){var t=Y;try{if(t==Y&&g)return new Uint8Array(g);if(u)return u(t);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(t){V(t)}}function J(t){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+t+\\\")\\\",this.status=t}function Z(t){for(;0<t.length;)t.shift()(e)}var Q=[],K=0,tt=0;function et(t){this.Db=t,this.zb=t-24,this.Ub=function(t){M[this.zb+4>>2>>>0]=t},this.Eb=function(){return M[this.zb+4>>2>>>0]},this.Sb=function(t){M[this.zb+8>>2>>>0]=t},this.Wb=function(){return M[this.zb+8>>2>>>0]},this.Tb=function(){E[this.zb>>2>>>0]=0},this.Ib=function(t){S[this.zb+12>>0>>>0]=t?1:0},this.Pb=function(){return 0!=S[this.zb+12>>0>>>0]},this.Jb=function(t){S[this.zb+13>>0>>>0]=t?1:0},this.Lb=function(){return 0!=S[this.zb+13>>0>>>0]},this.Rb=function(t,e){this.Fb(0),this.Ub(t),this.Sb(e),this.Tb(),this.Ib(!1),this.Jb(!1)},this.Nb=function(){E[this.zb>>2>>>0]+=1},this.Xb=function(){var t=E[this.zb>>2>>>0];return E[this.zb>>2>>>0]=t-1,1===t},this.Fb=function(t){M[this.zb+16>>2>>>0]=t},this.Ob=function(){return M[this.zb+16>>2>>>0]},this.Qb=function(){if(Mt(this.Eb()))return M[this.Db>>2>>>0];var t=this.Ob();return 0!==t?t:this.Db}}function nt(t){return vt(new et(t).zb)}var rt=[];function at(t){var e=rt[t];return e||(t>=rt.length&&(rt.length=t+1),rt[t]=e=U.get(t)),e}function it(t){var e=D(t)+1,n=gt(e);return n&&k(t,S,n,e),n}var ot={};function ut(){if(!ct){var t,e={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(t in ot)void 0===ot[t]?delete e[t]:e[t]=ot[t];var n=[];for(t in e)n.push(t+\\\"=\\\"+e[t]);ct=n}return ct}var ct,st=[null,[],[]];function lt(t,e){var n=st[t];0===e||10===e?((1===t?v:w)(R(n,0)),n.length=0):n.push(e)}var ft=0;function pt(t){return 0==t%4&&(0!=t%100||0==t%400)}var ht=[31,29,31,30,31,30,31,31,30,31,30,31],dt=[31,28,31,30,31,30,31,31,30,31,30,31];function yt(t,e,n,r){function a(t,e,n){for(t=\\\"number\\\"==typeof t?t.toString():t||\\\"\\\";t.length<e;)t=n[0]+t;return t}function i(t,e){return a(t,e,\\\"0\\\")}function o(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function u(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function c(t){var e=t.Bb;for(t=new Date(new Date(t.Cb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(pt(t.getFullYear())?ht:dt)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=u(new Date(t.getFullYear(),0,4)),n=u(n),0>=o(e,t)?0>=o(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var s=E[r+40>>2>>>0];for(var l in r={$b:E[r>>2>>>0],Zb:E[r+4>>2>>>0],Gb:E[r+8>>2>>>0],Kb:E[r+12>>2>>>0],Hb:E[r+16>>2>>>0],Cb:E[r+20>>2>>>0],Ab:E[r+24>>2>>>0],Bb:E[r+28>>2>>>0],bc:E[r+32>>2>>>0],Yb:E[r+36>>2>>>0],ac:s?j(s):\\\"\\\"},n=j(n),s={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),s[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in s={\\\"%a\\\":function(t){return f[t.Ab].substring(0,3)},\\\"%A\\\":function(t){return f[t.Ab]},\\\"%b\\\":function(t){return p[t.Hb].substring(0,3)},\\\"%B\\\":function(t){return p[t.Hb]},\\\"%C\\\":function(t){return i((t.Cb+1900)/100|0,2)},\\\"%d\\\":function(t){return i(t.Kb,2)},\\\"%e\\\":function(t){return a(t.Kb,2,\\\" \\\")},\\\"%g\\\":function(t){return c(t).toString().substring(2)},\\\"%G\\\":function(t){return c(t)},\\\"%H\\\":function(t){return i(t.Gb,2)},\\\"%I\\\":function(t){return 0==(t=t.Gb)?t=12:12<t&&(t-=12),i(t,2)},\\\"%j\\\":function(t){for(var e=0,n=0;n<=t.Hb-1;e+=(pt(t.Cb+1900)?ht:dt)[n++]);return i(t.Kb+e,3)},\\\"%m\\\":function(t){return i(t.Hb+1,2)},\\\"%M\\\":function(t){return i(t.Zb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(t){return 0<=t.Gb&&12>t.Gb?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(t){return i(t.$b,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(t){return t.Ab||7},\\\"%U\\\":function(t){return i(Math.floor((t.Bb+7-t.Ab)/7),2)},\\\"%V\\\":function(t){var e=Math.floor((t.Bb+7-(t.Ab+6)%7)/7);if(2>=(t.Ab+371-t.Bb-2)%7&&e++,e)53==e&&(4==(n=(t.Ab+371-t.Bb)%7)||3==n&&pt(t.Cb)||(e=1));else{e=52;var n=(t.Ab+7-t.Bb-1)%7;(4==n||5==n&&pt(t.Cb%400-1))&&e++}return i(e,2)},\\\"%w\\\":function(t){return t.Ab},\\\"%W\\\":function(t){return i(Math.floor((t.Bb+7-(t.Ab+6)%7)/7),2)},\\\"%y\\\":function(t){return(t.Cb+1900).toString().substring(2)},\\\"%Y\\\":function(t){return t.Cb+1900},\\\"%z\\\":function(t){var e=0<=(t=t.Yb);return t=Math.abs(t)/60,(e?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(t/60*100+t%60)).slice(-4)},\\\"%Z\\\":function(t){return t.ac},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),s)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),s[l](r)));return l=function(t){var e=Array(D(t)+1);return k(t,e,0,e.length),e}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>e?0:(S.set(l,t>>>0),l.length-1)}var bt={a:function(t){return gt(t+24)+24},m:function(t){return(t=new et(t)).Pb()||(t.Ib(!0),K--),t.Jb(!1),Q.push(t),t.Nb(),t.Qb()},ia:function(t){throw w(\\\"Unexpected exception thrown, this is not properly supported - aborting\\\"),C=!0,t},w:function(){Ot(0);var t=Q.pop();if(t.Xb()&&!t.Lb()){var e=t.Wb();e&&at(e)(t.Db),nt(t.Db)}tt=0},d:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},k:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},g:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},s:nt,L:function(){var t=Q.pop();t||V(\\\"no exception to throw\\\");var e=t.Db;throw t.Lb()||(Q.push(t),t.Jb(!0),t.Ib(!1),K++),tt=e,e},b:function(t,e,n){throw new et(t).Rb(e,n),tt=t,K++,t},la:function(){return K},i:function(t){throw tt||(tt=t),t},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},Ha:function(){},Ja:function(){V(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},Ia:function(){V(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getUTCSeconds(),E[e+4>>2>>>0]=t.getUTCMinutes(),E[e+8>>2>>>0]=t.getUTCHours(),E[e+12>>2>>>0]=t.getUTCDate(),E[e+16>>2>>>0]=t.getUTCMonth(),E[e+20>>2>>>0]=t.getUTCFullYear()-1900,E[e+24>>2>>>0]=t.getUTCDay(),E[e+28>>2>>>0]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},Ea:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getSeconds(),E[e+4>>2>>>0]=t.getMinutes(),E[e+8>>2>>>0]=t.getHours(),E[e+12>>2>>>0]=t.getDate(),E[e+16>>2>>>0]=t.getMonth(),E[e+20>>2>>>0]=t.getFullYear()-1900,E[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1);E[e+28>>2>>>0]=(t.getTime()-n.getTime())/864e5|0,E[e+36>>2>>>0]=-60*t.getTimezoneOffset();var r=new Date(t.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[e+32>>2>>>0]=0|(r!=n&&t.getTimezoneOffset()==Math.min(n,r))},Fa:function(t){var e=new Date(E[t+20>>2>>>0]+1900,E[t+16>>2>>>0],E[t+12>>2>>>0],E[t+8>>2>>>0],E[t+4>>2>>>0],E[t>>2>>>0],0),n=E[t+32>>2>>>0],r=e.getTimezoneOffset(),a=new Date(e.getFullYear(),0,1),i=new Date(e.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),u=Math.min(o,i);return 0>n?E[t+32>>2>>>0]=Number(i!=o&&u==r):0<n!=(u==r)&&(i=Math.max(o,i),e.setTime(e.getTime()+6e4*((0<n?u:i)-r))),E[t+24>>2>>>0]=e.getDay(),E[t+28>>2>>>0]=(e.getTime()-a.getTime())/864e5|0,E[t>>2>>>0]=e.getSeconds(),E[t+4>>2>>>0]=e.getMinutes(),E[t+8>>2>>>0]=e.getHours(),E[t+12>>2>>>0]=e.getDate(),E[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},sa:function(){return-52},ta:function(){},Ga:function t(e,n,r){t.Vb||(t.Vb=!0,function(t,e,n){function r(t){return(t=t.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?t[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var u=o.getTimezoneOffset();E[t>>2>>>0]=60*Math.max(a,u),E[e>>2>>>0]=Number(a!=u),t=r(i),e=r(o),t=it(t),e=it(e),u<a?(M[n>>2>>>0]=t,M[n+4>>2>>>0]=e):(M[n>>2>>>0]=e,M[n+4>>2>>>0]=t)}(e,n,r))},B:function(){V(\\\"\\\")},ma:function(){return 4294901760},I:b?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:()=>performance.now(),xa:function(t,e,n){T.copyWithin(t>>>0,e>>>0,e+n>>>0)},G:function(t){var e=T.length;if(4294901760<(t>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=e*(1+.2/n);r=Math.min(r,t+100663296);var a=Math;r=Math.max(t,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);t:{try{O.grow(a-A.byteLength+65535>>>16),P();var i=1;break t}catch(t){}i=void 0}if(i)return!0}return!1},va:function(t,e){var n=0;return ut().forEach((function(r,a){var i=e+n;for(a=M[t+4*a>>2>>>0]=i,i=0;i<r.length;++i)S[a++>>0>>>0]=r.charCodeAt(i);S[a>>0>>>0]=0,n+=r.length+1})),0},wa:function(t,e){var n=ut();M[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),M[e>>2>>>0]=r,0},ba:function(t){_||0<L||(_t(),Z(W),wt(0),st[1].length&&lt(1,10),st[2].length&&lt(2,10)),_||0<L||(e.onExit&&e.onExit(t),C=!0),h(t,new J(t))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(t,e,n,r){for(var a=0,i=0;i<n;i++){var o=M[e>>2>>>0],u=M[e+4>>2>>>0];e+=8;for(var c=0;c<u;c++)lt(t,T[o+c>>>0]);a+=u}return M[r>>2>>>0]=a,0},c:function(){return ft},ja:function t(e,r){t.Mb||(t.Mb=function(){if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(b)try{var e=n(Object(function(){var t=new Error(\\\"Cannot find module 'crypto'\\\");throw t.code=\\\"MODULE_NOT_FOUND\\\",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>V(\\\"randomDevice\\\")}());for(var a=0;a<r;a++)S[e+a>>0>>>0]=t.Mb();return 0},ea:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},fa:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},J:function(t){var e=At();try{return at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},e:function(t,e){var n=At();try{return at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},N:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},O:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},j:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},o:function(t,e,n,r){var a=At();try{return at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},p:function(t,e,n,r,a){var i=At();try{return at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},M:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},r:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},v:function(t,e,n,r,a,i,o){var u=At();try{return at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},K:function(t,e,n,r,a,i,o,u){var c=At();try{return at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{return at(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},X:function(t,e,n,r,a,i,o,u){var c=At();try{return Ft(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},V:function(t,e,n,r,a,i,o){var u=At();try{return xt(t,e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},U:function(t,e,n,r,a){var i=At();try{return It(t,e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},Z:function(t,e,n,r){var a=At();try{return Pt(t,e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},W:function(t){var e=At();try{return Ct(t)}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},Y:function(t,e){var n=At();try{return Ut(t,e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},T:function(t,e,n){var r=At();try{return Rt(t,e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},f:function(t){var e=At();try{at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},q:function(t,e){var n=At();try{at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},h:function(t,e,n){var r=At();try{at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},da:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},l:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},t:function(t,e,n,r,a){var i=At();try{at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},u:function(t,e,n,r,a,i){var o=At();try{at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},x:function(t,e,n,r,a,i,o){var u=At();try{at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},z:function(t,e,n,r,a,i,o,u){var c=At();try{at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},ga:function(t,e,n,r,a,i,o,u,c){var s=At();try{at(t)(e,n,r,a,i,o,u,c)}catch(t){if(St(s),t!==t+0)throw t;Ot(1,0)}},A:function(t,e,n,r,a,i,o,u,c,s,l){var f=At();try{at(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(St(f),t!==t+0)throw t;Ot(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=At();try{at(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(St(b),t!==t+0)throw t;Ot(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=At();try{jt(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},_:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{Dt(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},$:function(t,e,n,r,a,i){var o=At();try{kt(t,e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},n:function(t){return t},F:function(t){ft=t},ha:yt,y:function(t,e,n,r){return yt(t,e,n,r)}};!function(){function t(t){e.asm=t.exports,O=e.asm.Ka,P(),U=e.asm.ib,I.unshift(e.asm.La),B--,e.monitorRunDependencies&&e.monitorRunDependencies(B),0==B&&(null!==G&&(clearInterval(G),G=null),N&&(t=N,N=null,t()))}function n(e){t(e.instance)}function r(t){return function(){if(!g&&(d||y)){if(\\\"function\\\"==typeof fetch&&!Y.startsWith(\\\"file://\\\"))return fetch(Y,{credentials:\\\"same-origin\\\"}).then((function(t){if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+Y+\\\"'\\\";return t.arrayBuffer()})).catch((function(){return X()}));if(o)return new Promise((function(t,e){o(Y,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return X()}))}().then((function(t){return WebAssembly.instantiate(t,i)})).then((function(t){return t})).then(t,(function(t){w(\\\"failed to asynchronously prepare wasm: \\\"+t),V(t)}))}var i={a:bt};if(B++,e.monitorRunDependencies&&e.monitorRunDependencies(B),e.instantiateWasm)try{return e.instantiateWasm(i,t)}catch(t){return w(\\\"Module.instantiateWasm callback failed with error: \\\"+t),!1}(g||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||$()||Y.startsWith(\\\"file://\\\")||b||\\\"function\\\"!=typeof fetch?r(n):fetch(Y,{credentials:\\\"same-origin\\\"}).then((function(t){return WebAssembly.instantiateStreaming(t,i).then(n,(function(t){return w(\\\"wasm streaming compile failed: \\\"+t),w(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.La).apply(null,arguments)},e._OrtInit=function(){return(e._OrtInit=e.asm.Ma).apply(null,arguments)},e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.Na).apply(null,arguments)},e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.Oa).apply(null,arguments)},e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.Pa).apply(null,arguments)},e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.Qa).apply(null,arguments)},e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.Ra).apply(null,arguments)},e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.Sa).apply(null,arguments)},e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.Ta).apply(null,arguments)},e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.Ua).apply(null,arguments)},e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.Va).apply(null,arguments)},e._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.Wa).apply(null,arguments)},e._OrtFree=function(){return(e._OrtFree=e.asm.Xa).apply(null,arguments)},e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.Ya).apply(null,arguments)},e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.Za).apply(null,arguments)},e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm._a).apply(null,arguments)},e._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.$a).apply(null,arguments)},e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.ab).apply(null,arguments)},e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.bb).apply(null,arguments)},e._OrtRun=function(){return(e._OrtRun=e.asm.cb).apply(null,arguments)},e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.db).apply(null,arguments)};var mt,gt=e._malloc=function(){return(gt=e._malloc=e.asm.eb).apply(null,arguments)},vt=e._free=function(){return(vt=e._free=e.asm.fb).apply(null,arguments)},wt=e._fflush=function(){return(wt=e._fflush=e.asm.gb).apply(null,arguments)},_t=e.___funcs_on_exit=function(){return(_t=e.___funcs_on_exit=e.asm.hb).apply(null,arguments)},Ot=e._setThrew=function(){return(Ot=e._setThrew=e.asm.jb).apply(null,arguments)},At=e.stackSave=function(){return(At=e.stackSave=e.asm.kb).apply(null,arguments)},St=e.stackRestore=function(){return(St=e.stackRestore=e.asm.lb).apply(null,arguments)},Tt=e.stackAlloc=function(){return(Tt=e.stackAlloc=e.asm.mb).apply(null,arguments)},Et=e.___cxa_can_catch=function(){return(Et=e.___cxa_can_catch=e.asm.nb).apply(null,arguments)},Mt=e.___cxa_is_pointer_type=function(){return(Mt=e.___cxa_is_pointer_type=e.asm.ob).apply(null,arguments)},Ct=e.dynCall_j=function(){return(Ct=e.dynCall_j=e.asm.pb).apply(null,arguments)},xt=e.dynCall_iiiiij=function(){return(xt=e.dynCall_iiiiij=e.asm.qb).apply(null,arguments)},Rt=e.dynCall_jii=function(){return(Rt=e.dynCall_jii=e.asm.rb).apply(null,arguments)},jt=e.dynCall_viiiiij=function(){return(jt=e.dynCall_viiiiij=e.asm.sb).apply(null,arguments)},kt=e.dynCall_vjji=function(){return(kt=e.dynCall_vjji=e.asm.tb).apply(null,arguments)},Dt=e.dynCall_viiijjjii=function(){return(Dt=e.dynCall_viiijjjii=e.asm.ub).apply(null,arguments)},Pt=e.dynCall_iij=function(){return(Pt=e.dynCall_iij=e.asm.vb).apply(null,arguments)},Ut=e.dynCall_ji=function(){return(Ut=e.dynCall_ji=e.asm.wb).apply(null,arguments)},Ft=e.dynCall_iiiiiij=function(){return(Ft=e.dynCall_iiiiiij=e.asm.xb).apply(null,arguments)},It=e.dynCall_iiij=function(){return(It=e.dynCall_iiij=e.asm.yb).apply(null,arguments)};function Wt(){function t(){if(!mt&&(mt=!0,e.calledRun=!0,!C)){if(Z(I),r(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),e.postRun)for(\\\"function\\\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var t=e.postRun.shift();H.unshift(t)}Z(H)}}if(!(0<B)){if(e.preRun)for(\\\"function\\\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)z();Z(F),0<B||(e.setStatus?(e.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){e.setStatus(\\\"\\\")}),1),t()}),1)):t())}}if(e.UTF8ToString=j,e.stringToUTF8=function(t,e,n){return k(t,T,e,n)},e.lengthBytesUTF8=D,e.stackSave=At,e.stackRestore=St,e.stackAlloc=Tt,N=function t(){mt||Wt(),mt||(N=t)},e.preInit)for(\\\"function\\\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();return Wt(),t.ready});t.exports=r},967:(t,e)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.iterateExtraOptions=void 0,e.iterateExtraOptions=(t,n,r,a)=>{if(\\\"object\\\"==typeof t&&null!==t){if(r.has(t))throw new Error(\\\"Circular reference in options\\\");r.add(t)}Object.entries(t).forEach((([t,i])=>{const o=n?n+t:t;if(\\\"object\\\"==typeof i)(0,e.iterateExtraOptions)(i,o+\\\".\\\",r,a);else if(\\\"string\\\"==typeof i||\\\"number\\\"==typeof i)a(o,i.toString());else{if(\\\"boolean\\\"!=typeof i)throw new Error(\\\"Can't handle extra config type: \\\"+typeof i);a(o,i?\\\"1\\\":\\\"0\\\")}}))}},586:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.setRunOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setRunOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};try{if(void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);void 0===(null==t?void 0:t.terminate)&&(u.terminate=!1);let i=0;if(void 0!==(null==t?void 0:t.tag)&&(i=(0,a.allocWasmString)(t.tag,o)),n=e._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,i),0===n)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,\\\"\\\",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddRunConfigEntry(n,i,u))throw new Error(`Can't set a run config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseRunOptions(n),o.forEach(e._free),t}}},919:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.setSessionOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setSessionOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};(t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});const e=t.extra.session;e.use_ort_model_bytes_directly||(e.use_ort_model_bytes_directly=\\\"1\\\")})(u);try{void 0===(null==t?void 0:t.graphOptimizationLevel)&&(u.graphOptimizationLevel=\\\"all\\\");const c=(t=>{switch(t){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}})(u.graphOptimizationLevel);void 0===(null==t?void 0:t.enableCpuMemArena)&&(u.enableCpuMemArena=!0),void 0===(null==t?void 0:t.enableMemPattern)&&(u.enableMemPattern=!0),void 0===(null==t?void 0:t.executionMode)&&(u.executionMode=\\\"sequential\\\");const s=(t=>{switch(t){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}})(u.executionMode);let l=0;if(void 0!==(null==t?void 0:t.logId)&&(l=(0,a.allocWasmString)(t.logId,o)),void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);if(void 0===(null==t?void 0:t.enableProfiling)&&(u.enableProfiling=!1),n=e._OrtCreateSessionOptions(c,!!u.enableCpuMemArena,!!u.enableMemPattern,s,!!u.enableProfiling,0,l,u.logSeverityLevel,u.logVerbosityLevel),0===n)throw new Error(\\\"Can't create session options\\\");return(null==t?void 0:t.executionProviders)&&((t,e,n)=>{for(const r of e){let e=\\\"string\\\"==typeof r?r:r.name;switch(e){case\\\"xnnpack\\\":e=\\\"XNNPACK\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported EP: ${e}`)}const o=(0,a.allocWasmString)(e,n);if(0!==(0,i.getInstance)()._OrtAppendExecutionProvider(t,o))throw new Error(`Can't append execution provider: ${e}`)}})(n,t.executionProviders,o),void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,\\\"\\\",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddSessionConfigEntry(n,i,u))throw new Error(`Can't set a session config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseSessionOptions(n),o.forEach(e._free),t}}},983:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.allocWasmString=void 0;const r=n(361);e.allocWasmString=(t,e)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(t)+1,i=n._malloc(a);return n.stringToUTF8(t,i,a),e.push(i),i}},349:(t,e,n)=>{\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.extractTransferableBuffers=e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initOrt=void 0;const r=n(586),a=n(919),i=n(983),o=n(361);e.initOrt=(t,e)=>{const n=(0,o.getInstance)()._OrtInit(t,e);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)};const u=new Map;e.createSessionAllocate=t=>{const e=(0,o.getInstance)(),n=e._malloc(t.byteLength);return e.HEAPU8.set(t,n),[n,t.byteLength]},e.createSessionFinalize=(t,e)=>{const n=(0,o.getInstance)();let r=0,i=0,c=[];try{if([i,c]=(0,a.setSessionOptions)(e),r=n._OrtCreateSession(t[0],t[1],i),0===r)throw new Error(\\\"Can't create a session\\\")}finally{n._free(t[0]),n._OrtReleaseSessionOptions(i),c.forEach(n._free)}const s=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],h=[],d=[];for(let t=0;t<s;t++){const e=n._OrtGetInputName(r,t);if(0===e)throw new Error(\\\"Can't get an input name\\\");p.push(e),f.push(n.UTF8ToString(e))}for(let t=0;t<l;t++){const e=n._OrtGetOutputName(r,t);if(0===e)throw new Error(\\\"Can't get an output name\\\");d.push(e),h.push(n.UTF8ToString(e))}return u.set(r,[r,p,d]),[r,f,h]},e.createSession=(t,n)=>{const r=(0,e.createSessionAllocate)(t);return(0,e.createSessionFinalize)(r,n)},e.releaseSession=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=n[1],i=n[2];a.forEach(e._OrtFree),i.forEach(e._OrtFree),e._OrtReleaseSession(r),u.delete(t)};const c=t=>{switch(t){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${t}`)}},s=t=>{switch(t){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${t}`)}},l=t=>{switch(t){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}};e.run=(t,e,n,a,f)=>{const p=(0,o.getInstance)(),h=u.get(t);if(!h)throw new Error(\\\"invalid session id\\\");const d=h[0],y=h[1],b=h[2],m=e.length,g=a.length;let v=0,w=[];const _=[],O=[];try{[v,w]=(0,r.setRunOptions)(f);for(let t=0;t<m;t++){const e=n[t][0],r=n[t][1],a=n[t][2];let o,u;if(Array.isArray(a)){u=4*a.length,o=p._malloc(u),O.push(o);let t=o/4;for(let e=0;e<a.length;e++){if(\\\"string\\\"!=typeof a[e])throw new TypeError(`tensor data at index ${e} is not a string`);p.HEAPU32[t++]=(0,i.allocWasmString)(a[e],O)}}else u=a.byteLength,o=p._malloc(u),O.push(o),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),o);const s=p.stackSave(),l=p.stackAlloc(4*r.length);try{let t=l/4;r.forEach((e=>p.HEAP32[t++]=e));const n=p._OrtCreateTensor(c(e),o,u,l,r.length);if(0===n)throw new Error(\\\"Can't create a tensor\\\");_.push(n)}finally{p.stackRestore(s)}}const t=p.stackSave(),o=p.stackAlloc(4*m),u=p.stackAlloc(4*m),h=p.stackAlloc(4*g),A=p.stackAlloc(4*g);try{let n=o/4,r=u/4,i=h/4,c=A/4;for(let t=0;t<m;t++)p.HEAPU32[n++]=_[t],p.HEAPU32[r++]=y[e[t]];for(let t=0;t<g;t++)p.HEAPU32[i++]=0,p.HEAPU32[c++]=b[a[t]];let f=p._OrtRun(d,u,o,m,A,g,h,v);const w=[];if(0===f)for(let t=0;t<g;t++){const e=p.HEAPU32[h/4+t],n=p.stackSave(),r=p.stackAlloc(16);let a,i=0;try{if(f=p._OrtGetTensorData(e,r,r+4,r+8,r+12),0!==f)throw new Error(`Can't access output tensor data. error code = ${f}`);let t=r/4;const o=p.HEAPU32[t++];i=p.HEAPU32[t++];const u=p.HEAPU32[t++],c=p.HEAPU32[t++],h=[];for(let t=0;t<c;t++)h.push(p.HEAPU32[u/4+t]);p._OrtFree(u);const d=0===h.length?1:h.reduce(((t,e)=>t*e));if(a=s(o),\\\"string\\\"===a){const t=[];let e=i/4;for(let n=0;n<d;n++){const r=p.HEAPU32[e++],a=n===d-1?void 0:p.HEAPU32[e]-r;t.push(p.UTF8ToString(r,a))}w.push([a,h,t])}else{const t=new(l(a))(d);new Uint8Array(t.buffer,t.byteOffset,t.byteLength).set(p.HEAPU8.subarray(i,i+t.byteLength)),w.push([a,h,t])}}finally{p.stackRestore(n),\\\"string\\\"===a&&i&&p._free(i),p._OrtReleaseTensor(e)}}if(0===f)return w;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(t)}}finally{_.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(v),w.forEach(p._free)}},e.endProfiling=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=e._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");e._OrtFree(a)},e.extractTransferableBuffers=t=>{const e=[];for(const n of t){const t=n[2];!Array.isArray(t)&&t.buffer&&e.push(t.buffer)}return e}},361:function(t,e,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(e,n);a&&!(\\\"get\\\"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,a)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,\\\"default\\\",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return a(e,t),e},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0}),e.dispose=e.getInstance=e.initializeWebAssembly=void 0;const u=i(n(449)),c=o(n(932)),s=n(474);let l,f=!1,p=!1,h=!1;const d=(t,e)=>e?t?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":t?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\";e.initializeWebAssembly=async t=>{if(f)return Promise.resolve();if(p)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(h)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");p=!0;const e=t.initTimeout,r=t.numThreads,a=t.simd,i=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(t){return!1}})(),o=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(t){return!1}})(),y=\\\"string\\\"==typeof t.wasmPaths?t.wasmPaths:void 0,b=d(!1,i),m=d(o,i),g=\\\"object\\\"==typeof t.wasmPaths?t.wasmPaths[m]:void 0;let v=!1;const w=[];if(e>0&&w.push(new Promise((t=>{setTimeout((()=>{v=!0,t()}),e)}))),w.push(new Promise(((t,e)=>{const r=i?s:c.default,a={locateFile:(t,e)=>i&&t.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:\\\"text/javascript\\\"})):t===b?null!=g?g:(null!=y?y:e)+m:e+t};if(i)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=u.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{const t=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([t],{type:\\\"text/javascript\\\"})}r(a).then((e=>{p=!1,f=!0,l=e,t()}),(t=>{p=!1,h=!0,e(t)}))}))),await Promise.race(w),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`)},e.getInstance=()=>{if(f&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},e.dispose=()=>{var t;!f||p||h||(p=!0,null===(t=l.PThread)||void 0===t||t.terminateAllThreads(),l=void 0,p=!1,f=!1,h=!0)}},154:t=>{\\\"use strict\\\";t.exports='\\\"use strict\\\";var e={},t=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(t){var r=require(\\\"worker_threads\\\"),a=r.parentPort;a.on(\\\"message\\\",(e=>onmessage({data:e})));var o=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");t?o.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processProxyingQueue\\\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\\\"worker.js received unknown command \\\"+t.data.cmd),i(t.data)))}catch(t){throw i(\\\"worker.js onmessage() captured an uncaught exception: \\\"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(t){if(\\\"object\\\"==typeof window)return window}}(),(()=>{\\\"use strict\\\";const t=n(349),e=n(361);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":(0,e.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(t=>postMessage({type:\\\"init-wasm\\\",err:t})));break;case\\\"init-ort\\\":try{const{numThreads:e,loggingLevel:r}=n.data.in;(0,t.initOrt)(e,r),postMessage({type:\\\"init-ort\\\"})}catch(t){postMessage({type:\\\"init-ort\\\",err:t})}break;case\\\"create_allocate\\\":try{const{model:e}=n.data.in,r=(0,t.createSessionAllocate)(e);postMessage({type:\\\"create_allocate\\\",out:r})}catch(t){postMessage({type:\\\"create_allocate\\\",err:t})}break;case\\\"create_finalize\\\":try{const{modeldata:e,options:r}=n.data.in,a=(0,t.createSessionFinalize)(e,r);postMessage({type:\\\"create_finalize\\\",out:a})}catch(t){postMessage({type:\\\"create_finalize\\\",err:t})}break;case\\\"create\\\":try{const{model:e,options:r}=n.data.in,a=(0,t.createSession)(e,r);postMessage({type:\\\"create\\\",out:a})}catch(t){postMessage({type:\\\"create\\\",err:t})}break;case\\\"release\\\":try{const e=n.data.in;(0,t.releaseSession)(e),postMessage({type:\\\"release\\\"})}catch(t){postMessage({type:\\\"release\\\",err:t})}break;case\\\"run\\\":try{const{sessionId:e,inputIndices:r,inputs:a,outputIndices:i,options:o}=n.data.in,u=(0,t.run)(e,r,a,i,o);postMessage({type:\\\"run\\\",out:u},(0,t.extractTransferableBuffers)(u))}catch(t){postMessage({type:\\\"run\\\",err:t})}break;case\\\"end-profiling\\\":try{const e=n.data.in;(0,t.endProfiling)(e),postMessage({type:\\\"end-profiling\\\"})}catch(t){postMessage({type:\\\"end-profiling\\\",err:t})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","module.exports = __WEBPACK_EXTERNAL_MODULE__1670__;","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript.html)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\nexport * from './backend';\nexport * from './env';\nexport * from './inference-session';\nexport * from './tensor';\nexport * from './onnx-value';\n//# sourceMappingURL=index.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript.html)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n\nexport * from './backend';\nexport * from './env';\nexport * from './inference-session';\nexport * from './tensor';\nexport * from './onnx-value';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport { registerBackend } from './backend-impl';\n//# sourceMappingURL=backend.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from './inference-session';\nimport {OnnxValue} from './onnx-value';\n\n/**\n * @internal\n */\nexport declare namespace SessionHandler {\n  type FeedsType = {[name: string]: OnnxValue};\n  type FetchesType = {[name: string]: OnnxValue | null};\n  type ReturnType = {[name: string]: OnnxValue};\n}\n\n/**\n * Represent a handler instance of an inference session.\n *\n * @internal\n */\nexport interface SessionHandler {\n  dispose(): Promise<void>;\n\n  readonly inputNames: readonly string[];\n  readonly outputNames: readonly string[];\n\n  startProfiling(): void;\n  endProfiling(): void;\n\n  run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType,\n      options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType>;\n}\n\n/**\n * Represent a backend that provides implementation of model inferencing.\n *\n * @internal\n */\nexport interface Backend {\n  /**\n   * Initialize the backend asynchronously. Should throw when failed.\n   */\n  init(): Promise<void>;\n\n  createSessionHandler(uriOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler>;\n}\n\nexport {registerBackend} from './backend-impl';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend} from './backend';\n\ninterface BackendInfo {\n  backend: Backend;\n  priority: number;\n\n  initPromise?: Promise<void>;\n  initialized?: boolean;\n  aborted?: boolean;\n}\n\nconst backends: {[name: string]: BackendInfo} = {};\nconst backendsSortedByPriority: string[] = [];\n\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name: string, backend: Backend, priority: number): void => {\n  if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n    const currentBackend = backends[name];\n    if (currentBackend === undefined) {\n      backends[name] = {backend, priority};\n    } else if (currentBackend.priority > priority) {\n      // same name is already registered with a higher priority. skip registeration.\n      return;\n    } else if (currentBackend.priority === priority) {\n      if (currentBackend.backend !== backend) {\n        throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n      }\n    }\n\n    if (priority >= 0) {\n      const i = backendsSortedByPriority.indexOf(name);\n      if (i !== -1) {\n        backendsSortedByPriority.splice(i, 1);\n      }\n\n      for (let i = 0; i < backendsSortedByPriority.length; i++) {\n        if (backends[backendsSortedByPriority[i]].priority <= priority) {\n          backendsSortedByPriority.splice(i, 0, name);\n          return;\n        }\n      }\n      backendsSortedByPriority.push(name);\n    }\n    return;\n  }\n\n  throw new TypeError('not a valid backend');\n};\n\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async(backendHints: readonly string[]): Promise<Backend> => {\n  const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n  const errors = [];\n  for (const backendName of backendNames) {\n    const backendInfo = backends[backendName];\n    if (backendInfo) {\n      if (backendInfo.initialized) {\n        return backendInfo.backend;\n      } else if (backendInfo.aborted) {\n        continue;  // current backend is unavailable; try next\n      }\n\n      const isInitializing = !!backendInfo.initPromise;\n      try {\n        if (!isInitializing) {\n          backendInfo.initPromise = backendInfo.backend.init();\n        }\n        await backendInfo.initPromise;\n        backendInfo.initialized = true;\n        return backendInfo.backend;\n      } catch (e) {\n        if (!isInitializing) {\n          errors.push({name: backendName, err: e});\n        }\n        backendInfo.aborted = true;\n      } finally {\n        delete backendInfo.initPromise;\n      }\n    }\n  }\n\n  throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {EnvImpl} from './env-impl';\nexport declare namespace Env {\n  export type WasmPrefixOrFilePaths = string|{\n    'ort-wasm.wasm'?: string;\n    'ort-wasm-threaded.wasm'?: string;\n    'ort-wasm-simd.wasm'?: string;\n    'ort-wasm-simd-threaded.wasm'?: string;\n  };\n  export interface WebAssemblyFlags {\n    /**\n     * set or get number of thread(s). If omitted or set to 0, number of thread(s) will be determined by system. If set\n     * to 1, no worker thread will be spawned.\n     *\n     * This setting is available only when WebAssembly multithread feature is available in current context.\n     *\n     * @defaultValue `0`\n     */\n    numThreads?: number;\n\n    /**\n     * set or get a boolean value indicating whether to enable SIMD. If set to false, SIMD will be forcely disabled.\n     *\n     * This setting is available only when WebAssembly SIMD feature is available in current context.\n     *\n     * @defaultValue `true`\n     */\n    simd?: boolean;\n\n    /**\n     * Set or get a number specifying the timeout for initialization of WebAssembly backend, in milliseconds. A zero\n     * value indicates no timeout is set.\n     *\n     * @defaultValue `0`\n     */\n    initTimeout?: number;\n\n    /**\n     * Set a custom URL prefix to the .wasm files or a set of overrides for each .wasm file. The override path should be\n     * an absolute path.\n     */\n    wasmPaths?: WasmPrefixOrFilePaths;\n\n    /**\n     * Set or get a boolean value indicating whether to proxy the execution of main thread to a worker thread.\n     *\n     * @defaultValue `false`\n     */\n    proxy?: boolean;\n  }\n\n  export interface WebGLFlags {\n    /**\n     * Set or get the WebGL Context ID (webgl or webgl2).\n     *\n     * @defaultValue `'webgl2'`\n     */\n    contextId?: 'webgl'|'webgl2';\n    /**\n     * Set or get the maximum batch size for matmul. 0 means to disable batching.\n     *\n     * @deprecated\n     */\n    matmulMaxBatchSize?: number;\n    /**\n     * Set or get the texture cache mode.\n     *\n     * @defaultValue `'full'`\n     */\n    textureCacheMode?: 'initializerOnly'|'full';\n    /**\n     * Set or get the packed texture mode\n     *\n     * @defaultValue `false`\n     */\n    pack?: boolean;\n    /**\n     * Set or get whether enable async download.\n     *\n     * @defaultValue `false`\n     */\n    async?: boolean;\n  }\n}\n\nexport interface Env {\n  /**\n   * set the severity level for logging.\n   *\n   * @defaultValue `'warning'`\n   */\n  logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal';\n  /**\n   * Indicate whether run in debug mode.\n   *\n   * @defaultValue `false`\n   */\n  debug?: boolean;\n\n  /**\n   * Represent a set of flags for WebAssembly\n   */\n  wasm: Env.WebAssemblyFlags;\n\n  /**\n   * Represent a set of flags for WebGL\n   */\n  webgl: Env.WebGLFlags;\n\n  [name: string]: unknown;\n}\n\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env: Env = new EnvImpl();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from './env';\n\ntype LogLevelType = Env['logLevel'];\nexport class EnvImpl implements Env {\n  constructor() {\n    this.wasm = {};\n    this.webgl = {};\n    this.logLevelInternal = 'warning';\n  }\n\n  // TODO standadize the getter and setter convention in env for other fields.\n  set logLevel(value: LogLevelType) {\n    if (value === undefined) {\n      return;\n    }\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n      throw new Error(`Unsupported logging level: ${value}`);\n    }\n    this.logLevelInternal = value;\n  }\n  get logLevel(): LogLevelType {\n    return this.logLevelInternal;\n  }\n\n  debug?: boolean;\n\n  wasm: Env.WebAssemblyFlags;\n\n  webgl: Env.WebGLFlags;\n\n  [name: string]: unknown;\n\n  private logLevelInternal: Required<LogLevelType>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession as InferenceSessionImpl} from './inference-session-impl';\nimport {OnnxValue} from './onnx-value';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace InferenceSession {\n  // #region input/output types\n\n  type OnnxValueMapType = {readonly [name: string]: OnnxValue};\n  type NullableOnnxValueMapType = {readonly [name: string]: OnnxValue | null};\n\n  /**\n   * A feeds (model inputs) is an object that uses input names as keys and OnnxValue as corresponding values.\n   */\n  type FeedsType = OnnxValueMapType;\n\n  /**\n   * A fetches (model outputs) could be one of the following:\n   *\n   * - Omitted. Use model's output names definition.\n   * - An array of string indicating the output names.\n   * - An object that use output names as keys and OnnxValue or null as corresponding values.\n   *\n   * @remark\n   * different from input argument, in output, OnnxValue is optional. If an OnnxValue is present it will be\n   * used as a pre-allocated value by the inference engine; if omitted, inference engine will allocate buffer\n   * internally.\n   */\n  type FetchesType = readonly string[]|NullableOnnxValueMapType;\n\n  /**\n   * A inferencing return type is an object that uses output names as keys and OnnxValue as corresponding values.\n   */\n  type ReturnType = OnnxValueMapType;\n\n  // #endregion\n\n  // #region session options\n\n  /**\n   * A set of configurations for session behavior.\n   */\n  export interface SessionOptions {\n    /**\n     * An array of execution provider options.\n     *\n     * An execution provider option can be a string indicating the name of the execution provider,\n     * or an object of corresponding type.\n     */\n    executionProviders?: readonly ExecutionProviderConfig[];\n\n    /**\n     * The intra OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    intraOpNumThreads?: number;\n\n    /**\n     * The inter OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    interOpNumThreads?: number;\n\n    /**\n     * The optimization level.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    graphOptimizationLevel?: 'disabled'|'basic'|'extended'|'all';\n\n    /**\n     * Whether enable CPU memory arena.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableCpuMemArena?: boolean;\n\n    /**\n     * Whether enable memory pattern.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableMemPattern?: boolean;\n\n    /**\n     * Execution mode.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    executionMode?: 'sequential'|'parallel';\n\n    /**\n     * Wether enable profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    enableProfiling?: boolean;\n\n    /**\n     * File prefix for profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    profileFilePrefix?: string;\n\n    /**\n     * Log ID.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logId?: string;\n\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0|1|2|3|4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Store configurations for a session. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_session_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     * ```js\n     * extra: {\n     *   session: {\n     *     set_denormal_as_zero: \"1\",\n     *     disable_prepacking: \"1\"\n     *   },\n     *   optimization: {\n     *     enable_gelu_approximation: \"1\"\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #region execution providers\n\n  // Currently, we have the following backends to support execution providers:\n  // Backend Node.js binding: supports 'cpu' and 'cuda'.\n  // Backend WebAssembly: supports 'cpu', 'wasm' and 'xnnpack'.\n  // Backend ONNX.js: supports 'webgl'.\n  interface ExecutionProviderOptionMap {\n    cpu: CpuExecutionProviderOption;\n    cuda: CudaExecutionProviderOption;\n    wasm: WebAssemblyExecutionProviderOption;\n    webgl: WebGLExecutionProviderOption;\n    xnnpack: XnnpackExecutionProviderOption;\n  }\n\n  type ExecutionProviderName = keyof ExecutionProviderOptionMap;\n  type ExecutionProviderConfig =\n      ExecutionProviderOptionMap[ExecutionProviderName]|ExecutionProviderOption|ExecutionProviderName|string;\n\n  export interface ExecutionProviderOption {\n    readonly name: string;\n  }\n  export interface CpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cpu';\n    useArena?: boolean;\n  }\n  export interface CudaExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cuda';\n    deviceId?: number;\n  }\n  export interface WebAssemblyExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'wasm';\n  }\n  export interface WebGLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgl';\n    // TODO: add flags\n  }\n  export interface XnnpackExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'xnnpack';\n  }\n  // #endregion\n\n  // #endregion\n\n  // #region run options\n\n  /**\n   * A set of configurations for inference run behavior\n   */\n  export interface RunOptions {\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0|1|2|3|4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Terminate all incomplete OrtRun calls as soon as possible if true\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    terminate?: boolean;\n\n    /**\n     * A tag for the Run() calls using this\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    tag?: string;\n\n    /**\n     * Set a single run configuration entry. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_run_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     *\n     * ```js\n     * extra: {\n     *   memory: {\n     *     enable_memory_arena_shrinkage: \"1\",\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #endregion\n\n  // #region value metadata\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface ValueMetadata {\n    // TBD\n  }\n\n  // #endregion\n}\n\n/**\n * Represent a runtime instance of an ONNX model.\n */\nexport interface InferenceSession {\n  // #region run()\n\n  /**\n   * Execute the model asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Execute the model asynchronously with the given feeds, fetches and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param fetches - Representation of the model output. See type description of `InferenceSession.OutputType` for\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, fetches: InferenceSession.FetchesType,\n      options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region profiling\n\n  /**\n   * Start profiling.\n   */\n  startProfiling(): void;\n\n  /**\n   * End profiling.\n   */\n  endProfiling(): void;\n\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded model.\n   */\n  readonly inputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded model.\n   */\n  readonly outputNames: readonly string[];\n\n  // /**\n  //  * Get input metadata of the loaded model.\n  //  */\n  // readonly inputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // /**\n  //  * Get output metadata of the loaded model.\n  //  */\n  // readonly outputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // #endregion\n}\n\nexport interface InferenceSessionFactory {\n  // #region create()\n\n  /**\n   * Create a new inference session and load model asynchronously from an ONNX model file.\n   *\n   * @param uri - The URI or file path of the model to load.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(uri: string, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from segment of an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param byteOffset - The beginning of the specified portion of the array buffer.\n   * @param byteLength - The length in bytes of the array buffer.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from a Uint8Array.\n   *\n   * @param buffer - A Uint8Array representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession: InferenceSessionFactory = InferenceSessionImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {resolveBackend} from './backend-impl';\nimport {InferenceSession as InferenceSessionInterface} from './inference-session';\nimport {OnnxValue} from './onnx-value';\nimport {Tensor} from './tensor';\n\ntype SessionOptions = InferenceSessionInterface.SessionOptions;\ntype RunOptions = InferenceSessionInterface.RunOptions;\ntype FeedsType = InferenceSessionInterface.FeedsType;\ntype FetchesType = InferenceSessionInterface.FetchesType;\ntype ReturnType = InferenceSessionInterface.ReturnType;\n\nexport class InferenceSession implements InferenceSessionInterface {\n  private constructor(handler: SessionHandler) {\n    this.handler = handler;\n  }\n  run(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  run(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async run(feeds: FeedsType, arg1?: FetchesType|RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    const fetches: {[name: string]: OnnxValue|null} = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n          '\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError('\\'fetches\\' cannot be a Tensor');\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError('\\'fetches\\' cannot be an empty array.');\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError('\\'fetches\\' must be a string array or an object.');\n          }\n          if (this.outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'options\\' must be an object.');\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of this.outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSessionInterface.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n    }\n\n    // check if all inputs are in feed\n    for (const name of this.inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of this.outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    // feeds, fetches and options are prepared\n\n    const results = await this.handler.run(feeds, fetches, options);\n    const returnValue: {[name: string]: OnnxValue} = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n      }\n    }\n    return returnValue;\n  }\n\n  static create(path: string, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: SessionOptions):\n      Promise<InferenceSessionInterface>;\n  static create(buffer: Uint8Array, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static async create(\n      arg0: string|ArrayBufferLike|Uint8Array, arg1?: SessionOptions|number, arg2?: number,\n      arg3?: SessionOptions): Promise<InferenceSessionInterface> {\n    // either load from a file or buffer\n    let filePathOrUint8Array: string|Uint8Array;\n    let options: SessionOptions = {};\n\n    if (typeof arg0 === 'string') {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n    } else if (arg0 instanceof Uint8Array) {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n    } else if (\n        arg0 instanceof ArrayBuffer ||\n        (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n      const buffer = arg0;\n      let byteOffset = 0;\n      let byteLength = arg0.byteLength;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 === 'number') {\n        byteOffset = arg1;\n        if (!Number.isSafeInteger(byteOffset)) {\n          throw new RangeError('\\'byteOffset\\' must be an integer.');\n        }\n        if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n          throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n        }\n        byteLength = arg0.byteLength - byteOffset;\n        if (typeof arg2 === 'number') {\n          byteLength = arg2;\n          if (!Number.isSafeInteger(byteLength)) {\n            throw new RangeError('\\'byteLength\\' must be an integer.');\n          }\n          if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n            throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n          }\n          if (typeof arg3 === 'object' && arg3 !== null) {\n            options = arg3;\n          } else if (typeof arg3 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'byteLength\\' must be a number.');\n        }\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n      filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n    } else {\n      throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n    }\n\n    // get backend hints\n    const eps = options.executionProviders || [];\n    const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n    const backend = await resolveBackend(backendHints);\n    const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n    return new InferenceSession(handler);\n  }\n\n  startProfiling(): void {\n    this.handler.startProfiling();\n  }\n  endProfiling(): void {\n    this.handler.endProfiling();\n  }\n\n  get inputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get outputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  private handler: SessionHandler;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor as TensorImpl} from './tensor-impl';\nimport {TypedTensorUtils} from './tensor-utils';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\n/**\n * represent a basic tensor with specified dimensions and data type.\n */\ninterface TypedTensorBase<T extends Tensor.Type> {\n  /**\n   * Get the dimensions of the tensor.\n   */\n  readonly dims: readonly number[];\n  /**\n   * Get the data type of the tensor.\n   */\n  readonly type: T;\n  /**\n   * Get the buffer data of the tensor.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n}\n\nexport declare namespace Tensor {\n  interface DataTypeMap {\n    float32: Float32Array;\n    uint8: Uint8Array;\n    int8: Int8Array;\n    uint16: Uint16Array;\n    int16: Int16Array;\n    int32: Int32Array;\n    int64: BigInt64Array;\n    string: string[];\n    bool: Uint8Array;\n    float16: never;  // hold on using Uint16Array before we have a concrete solution for float 16\n    float64: Float64Array;\n    uint32: Uint32Array;\n    uint64: BigUint64Array;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n  }\n\n  interface ElementTypeMap {\n    float32: number;\n    uint8: number;\n    int8: number;\n    uint16: number;\n    int16: number;\n    int32: number;\n    int64: bigint;\n    string: string;\n    bool: boolean;\n    float16: never;  // hold on before we have a concret solution for float 16\n    float64: number;\n    uint32: number;\n    uint64: bigint;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n  }\n\n  type DataType = DataTypeMap[Type];\n  type ElementType = ElementTypeMap[Type];\n\n  /**\n   * represent the data type of a tensor\n   */\n  export type Type = keyof DataTypeMap;\n}\n\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface TypedTensor<T extends Tensor.Type> extends TypedTensorBase<T>, TypedTensorUtils<T> {}\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface Tensor extends TypedTensorBase<Tensor.Type>, TypedTensorUtils<Tensor.Type> {}\n\nexport interface TensorConstructor {\n  // #region specify element type\n  /**\n   * Construct a new string tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: 'string', data: Tensor.DataTypeMap['string']|readonly string[],\n      dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: 'bool', data: Tensor.DataTypeMap['bool']|readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new numeric tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new<T extends Exclude<Tensor.Type, 'string'|'bool'>>(\n      type: T, data: Tensor.DataTypeMap[T]|readonly number[], dims?: readonly number[]): TypedTensor<T>;\n  // #endregion\n\n  // #region infer element types\n\n  /**\n   * Construct a new float32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Float32Array, dims?: readonly number[]): TypedTensor<'float32'>;\n\n  /**\n   * Construct a new int8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int8Array, dims?: readonly number[]): TypedTensor<'int8'>;\n\n  /**\n   * Construct a new uint8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint8Array, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new uint16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint16Array, dims?: readonly number[]): TypedTensor<'uint16'>;\n\n  /**\n   * Construct a new int16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int16Array, dims?: readonly number[]): TypedTensor<'int16'>;\n\n  /**\n   * Construct a new int32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int32Array, dims?: readonly number[]): TypedTensor<'int32'>;\n\n  /**\n   * Construct a new int64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: BigInt64Array, dims?: readonly number[]): TypedTensor<'int64'>;\n\n  /**\n   * Construct a new string tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: readonly string[], dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new float64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Float64Array, dims?: readonly number[]): TypedTensor<'float64'>;\n\n  /**\n   * Construct a new uint32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint32Array, dims?: readonly number[]): TypedTensor<'uint32'>;\n\n  /**\n   * Construct a new uint64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: BigUint64Array, dims?: readonly number[]): TypedTensor<'uint64'>;\n\n  // #endregion\n\n  // #region fall back to non-generic tensor type declaration\n\n  /**\n   * Construct a new tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: Tensor.Type, data: Tensor.DataType|readonly number[]|readonly boolean[], dims?: readonly number[]): Tensor;\n\n  /**\n   * Construct a new tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Tensor.DataType, dims?: readonly number[]): Tensor;\n  // #endregion\n}\n\n/**\n * Specify the image format. Assume 'RGBA' if omitted.\n */\nexport type ImageFormat = 'RGB'|'RGBA'|'BGR'|'RBG';\n\n/**\n * Describes Tensor configuration to an image data.\n */\nexport interface TensorToImageDataOptions {\n  /**\n   * Describes Tensor channels order.\n   */\n  format?: ImageFormat;\n  /**\n   * Tensor channel layout - default is 'NHWC'\n   */\n  tensorLayout?: 'NHWC'|'NCHW';\n  /**\n   * Describes Tensor Height - can be accessed via tensor dimensions as well\n   */\n  height?: number;\n  /**\n   * Describes Tensor Width - can be accessed via tensor dimensions as well\n   */\n  width?: number;\n  /**\n   * Describes normalization parameters to ImageData conversion from tensor - default values - Bias: 0, Mean: 255\n   */\n  norm?: {\n    bias?: number;  // Todo add support - |[number,number,number]|[number,number,number,number];\n    mean?: number;  // Todo add support - |[number,number,number]|[number,number,number,number];\n  };\n}\n/**\n * Describes Tensor and Image configuration to an image data.\n */\nexport interface TensorFromImageOptions {\n  /**\n   * Describes image data format - will be used only in the case of ImageBitMap\n   */\n  bitmapFormat?: ImageFormat;\n  /**\n   * Describes Tensor channels order - can differ from original image\n   */\n  tensorFormat?: ImageFormat;\n  /**\n   * Tensor data type - default is 'float32'\n   */\n  dataType?: 'float32'|'uint8';\n  /**\n   * Tensor channel layout - default is 'NHWC'\n   */\n  tensorLayout?: 'NHWC'|'NCHW';\n  /**\n   * Describes Image Height - Required only in the case of ImageBitMap\n   */\n  height?: number;\n  /**\n   * Describes Image Width - Required only in the case of ImageBitMap\n   */\n  width?: number;\n  /**\n   * Describes resized height - can be accessed via tensor dimensions as well\n   */\n  resizedHeight?: number;\n  /**\n   * Describes resized width - can be accessed via tensor dimensions as well\n   */\n  resizedWidth?: number;\n  /**\n   * Describes normalization parameters to tensor conversion from image data - default values - Bias: 0, Mean: 255\n   */\n  norm?: {\n    bias?: number;  // Todo add support - |[number,number,number]|[number,number,number,number];\n    mean?: number;  // Todo add support - |[number,number,number]|[number,number,number,number];\n  };\n}\nexport interface TensorFactory {\n  /**\n   * create a tensor from image object - HTMLImageElement, ImageData, ImageBitmap, URL\n   *\n   * @param imageData - {ImageData} - composed of: Uint8ClampedArray, width. height - uses known pixel format RGBA\n   * @param options - Optional - Interface describing input image & output tensor -\n   * Input Defaults: RGBA, 3 channels, 0-255, NHWC - Output Defaults: same as input parameters\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(imageData: ImageData, options?: TensorFromImageOptions): Promise<Tensor>;\n\n  /**\n   * create a tensor from image object - HTMLImageElement, ImageData, ImageBitmap, URL\n   *\n   * @param imageElement - {HTMLImageElement} - since the data is stored as ImageData no need for format parameter\n   * @param options - Optional - Interface describing input image & output tensor -\n   * Input Defaults: RGBA, 3 channels, 0-255, NHWC - Output Defaults: same as input parameters\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(imageElement: HTMLImageElement, options?: TensorFromImageOptions): Promise<Tensor>;\n\n  /**\n   * create a tensor from image object - HTMLImageElement, ImageData, ImageBitmap, URL\n   *\n   * @param url - {string} - Assuming the string is a URL to an image\n   * @param options - Optional - Interface describing input image & output tensor -\n   * Input Defaults: RGBA, 3 channels, 0-255, NHWC - Output Defaults: same as input parameters\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(url: string, options?: TensorFromImageOptions): Promise<Tensor>;\n\n  /**\n   * create a tensor from image object - HTMLImageElement, ImageData, ImageBitmap, URL\n   *\n   * @param bitMap - {ImageBitmap} - since the data is stored as ImageData no need for format parameter\n   * @param options - NOT Optional - Interface describing input image & output tensor -\n   * Output Defaults: same as input parameters\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(bitmap: ImageBitmap, options: TensorFromImageOptions): Promise<Tensor>;\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl as TensorConstructor;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\nif (isBigInt64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n}\nif (isBigUint64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n}\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    /**\n     * Create a new tensor object from image object\n     *\n     * @param buffer - Extracted image buffer data - assuming RGBA format\n     * @param imageFormat - input image configuration - required configurations height, width, format\n     * @param tensorFormat - output tensor configuration - Default is RGB format\n     */\n    static bufferToTensor(buffer, options) {\n        if (buffer === undefined) {\n            throw new Error('Image buffer must be defined');\n        }\n        if (options.height === undefined || options.width === undefined) {\n            throw new Error('Image height and width must be defined');\n        }\n        const { height, width } = options;\n        const norm = options.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = 255;\n        }\n        else {\n            normMean = norm.mean;\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = 0;\n        }\n        else {\n            normBias = norm.bias;\n        }\n        const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n        // default value is RGBA since imagedata and HTMLImageElement uses it\n        const outputformat = options.tensorFormat !== undefined ?\n            (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n            'RGB';\n        const offset = height * width;\n        const float32Data = outputformat === 'RGBA' ? new Float32Array(offset * 4) : new Float32Array(offset * 3);\n        // Default pointer assignments\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGB') {\n            step = 3;\n            rImagePointer = 0;\n            gImagePointer = 1;\n            bImagePointer = 2;\n            aImagePointer = -1;\n        }\n        // Updating the pointer assignments based on the output tensor format\n        if (outputformat === 'RGBA') {\n            aTensorPointer = offset * 3;\n        }\n        else if (outputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = offset;\n            gTensorPointer = offset * 2;\n        }\n        else if (outputformat === 'BGR') {\n            bTensorPointer = 0;\n            gTensorPointer = offset;\n            rTensorPointer = offset * 2;\n        }\n        for (let i = 0; i < offset; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n            float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias) / normMean;\n            float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias) / normMean;\n            float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias) / normMean;\n            if (aTensorPointer !== -1 && aImagePointer !== -1) {\n                float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias) / normMean;\n            }\n        }\n        // Float32Array -> ort.Tensor\n        const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n            new Tensor('float32', float32Data, [1, 3, height, width]);\n        return outputTensor;\n    }\n    static async fromImage(image, options) {\n        // checking the type of image object\n        const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n        const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n        const isURL = typeof (String) !== 'undefined' && (image instanceof String || typeof image === 'string');\n        let data;\n        let tensorConfig = {};\n        // filling and checking image configuration options\n        if (isHTMLImageEle) {\n            // HTMLImageElement - image object - format is RGBA by default\n            const canvas = document.createElement('canvas');\n            const pixels2DContext = canvas.getContext('2d');\n            if (pixels2DContext != null) {\n                let height = image.naturalHeight;\n                let width = image.naturalWidth;\n                if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                    height = options.resizedHeight;\n                    width = options.resizedWidth;\n                }\n                if (options !== undefined) {\n                    tensorConfig = options;\n                    if (options.tensorFormat !== undefined) {\n                        throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                    }\n                    else {\n                        tensorConfig.tensorFormat = 'RGBA';\n                    }\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.tensorFormat = 'RGBA';\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                canvas.width = width;\n                canvas.height = height;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isImageDataEle) {\n            // ImageData - image object - format is RGBA by default\n            const format = 'RGBA';\n            let height;\n            let width;\n            if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            else {\n                height = image.height;\n                width = image.width;\n            }\n            if (options !== undefined) {\n                tensorConfig = options;\n                if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n                    throw new Error('Image input config format must be RGBA for ImageData');\n                }\n                else {\n                    tensorConfig.bitmapFormat = 'RGBA';\n                }\n            }\n            else {\n                tensorConfig.bitmapFormat = 'RGBA';\n            }\n            tensorConfig.height = height;\n            tensorConfig.width = width;\n            if (options !== undefined) {\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                const pixels2DContext = tempCanvas.getContext('2d');\n                if (pixels2DContext != null) {\n                    pixels2DContext.putImageData(image, 0, 0);\n                    data = pixels2DContext.getImageData(0, 0, width, height).data;\n                }\n                else {\n                    throw new Error('Can not access image data');\n                }\n            }\n            else {\n                data = image.data;\n            }\n        }\n        else if (isImageBitmap) {\n            // ImageBitmap - image object - format must be provided by user\n            if (options === undefined) {\n                throw new Error('Please provide image config with format for Imagebitmap');\n            }\n            if (options.bitmapFormat !== undefined) {\n                throw new Error('Image input config format must be defined for ImageBitmap');\n            }\n            const pixels2DContext = document.createElement('canvas').getContext('2d');\n            if (pixels2DContext != null) {\n                const height = image.height;\n                const width = image.width;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n                if (options !== undefined) {\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                return Tensor.bufferToTensor(data, tensorConfig);\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isURL) {\n            return new Promise((resolve, reject) => {\n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                if (!image || !context) {\n                    return reject();\n                }\n                const newImage = new Image();\n                newImage.crossOrigin = 'Anonymous';\n                newImage.src = image;\n                newImage.onload = () => {\n                    canvas.width = newImage.width;\n                    canvas.height = newImage.height;\n                    context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                    const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                    if (options !== undefined) {\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.height !== undefined && options.height !== canvas.height) {\n                            throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                        }\n                        else {\n                            tensorConfig.height = canvas.height;\n                        }\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.width !== undefined && options.width !== canvas.width) {\n                            throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                        }\n                        else {\n                            tensorConfig.width = canvas.width;\n                        }\n                    }\n                    else {\n                        tensorConfig.height = canvas.height;\n                        tensorConfig.width = canvas.width;\n                    }\n                    resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n                };\n            });\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n        if (data !== undefined) {\n            return Tensor.bufferToTensor(data, tensorConfig);\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n    }\n    toImageData(options) {\n        var _a, _b;\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        let image;\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            const width = this.dims[3];\n            const height = this.dims[2];\n            const channels = this.dims[1];\n            const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n            const normMean = options !== undefined ? (((_a = options.norm) === null || _a === void 0 ? void 0 : _a.mean) !== undefined ? options.norm.mean : 255) : 255;\n            const normBias = options !== undefined ? (((_b = options.norm) === null || _b === void 0 ? void 0 : _b.bias) !== undefined ? options.norm.bias : 0) : 0;\n            const offset = height * width;\n            if (options !== undefined) {\n                if (options.height !== undefined && options.height !== height) {\n                    throw new Error('Image output config height doesn\\'t match tensor height');\n                }\n                if (options.width !== undefined && options.width !== width) {\n                    throw new Error('Image output config width doesn\\'t match tensor width');\n                }\n                if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                    (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                    throw new Error('Tensor format doesn\\'t match input tensor dims');\n                }\n            }\n            // Default pointer assignments\n            const step = 4;\n            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n            let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n                aTensorPointer = offset * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = offset;\n                gTensorPointer = offset * 2;\n            }\n            image = pixels2DContext.createImageData(width, height);\n            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n                image.data[rImagePointer] = (this.data[rTensorPointer++] - normBias) * normMean; // R value\n                image.data[gImagePointer] = (this.data[gTensorPointer++] - normBias) * normMean; // G value\n                image.data[bImagePointer] = (this.data[bTensorPointer++] - normBias) * normMean; // B value\n                image.data[aImagePointer] =\n                    aTensorPointer === -1 ? 255 : (this.data[aTensorPointer++] - normBias) * normMean; // A value\n            }\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n        return image;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor as TensorInterface, TensorFromImageOptions, TensorToImageDataOptions} from './tensor';\n\ntype TensorType = TensorInterface.Type;\ntype TensorDataType = TensorInterface.DataType;\n\ntype SupportedTypedArrayConstructors = Float32ArrayConstructor|Uint8ArrayConstructor|Int8ArrayConstructor|\n    Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|Uint8ArrayConstructor|\n    Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor;\ntype SupportedTypedArray = InstanceType<SupportedTypedArrayConstructors>;\n\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map<string, SupportedTypedArrayConstructors>([\n  ['float32', Float32Array],\n  ['uint8', Uint8Array],\n  ['int8', Int8Array],\n  ['uint16', Uint16Array],\n  ['int16', Int16Array],\n  ['int32', Int32Array],\n  ['bool', Uint8Array],\n  ['float64', Float64Array],\n  ['uint32', Uint32Array],\n]);\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map<SupportedTypedArrayConstructors, TensorType>([\n  [Float32Array, 'float32'],\n  [Uint8Array, 'uint8'],\n  [Int8Array, 'int8'],\n  [Uint16Array, 'uint16'],\n  [Int16Array, 'int16'],\n  [Int32Array, 'int32'],\n  [Float64Array, 'float64'],\n  [Uint32Array, 'uint32'],\n]);\n\nif (isBigInt64ArrayAvailable) {\n  NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n  NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n}\nif (isBigUint64ArrayAvailable) {\n  NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n  NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n}\n\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims: readonly unknown[]): number => {\n  let size = 1;\n  for (let i = 0; i < dims.length; i++) {\n    const dim = dims[i];\n    if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n      throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n    }\n    if (dim < 0) {\n      throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n    }\n    size *= dim;\n  }\n  return size;\n};\n\nexport class Tensor implements TensorInterface {\n  // #region constructors\n  constructor(type: TensorType, data: TensorDataType|readonly number[]|readonly boolean[], dims?: readonly number[]);\n  constructor(data: TensorDataType|readonly boolean[], dims?: readonly number[]);\n  constructor(\n      arg0: TensorType|TensorDataType|readonly boolean[], arg1?: TensorDataType|readonly number[]|readonly boolean[],\n      arg2?: readonly number[]) {\n    let type: TensorType;\n    let data: TensorDataType;\n    let dims: typeof arg1|typeof arg2;\n    // check whether arg0 is type or data\n    if (typeof arg0 === 'string') {\n      //\n      // Override: constructor(type, data, ...)\n      //\n      type = arg0;\n      dims = arg2;\n      if (arg0 === 'string') {\n        // string tensor\n        if (!Array.isArray(arg1)) {\n          throw new TypeError('A string tensor\\'s data must be a string array.');\n        }\n        // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n        // error will be populated at inference\n        data = arg1;\n      } else {\n        // numeric tensor\n        const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n        if (typedArrayConstructor === undefined) {\n          throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n        }\n        if (Array.isArray(arg1)) {\n          // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n          // incorrect results.\n          // 'typedArrayConstructor' should be one of the typed array prototype objects.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          data = (typedArrayConstructor as any).from(arg1);\n        } else if (arg1 instanceof typedArrayConstructor) {\n          data = arg1;\n        } else {\n          throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n        }\n      }\n    } else {\n      //\n      // Override: constructor(data, ...)\n      //\n      dims = arg1;\n      if (Array.isArray(arg0)) {\n        // only boolean[] and string[] is supported\n        if (arg0.length === 0) {\n          throw new TypeError('Tensor type cannot be inferred from an empty array.');\n        }\n        const firstElementType = typeof arg0[0];\n        if (firstElementType === 'string') {\n          type = 'string';\n          data = arg0;\n        } else if (firstElementType === 'boolean') {\n          type = 'bool';\n          // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n          // wrong type. We use 'as any' to make it happy.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          data = Uint8Array.from(arg0 as any[]);\n        } else {\n          throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n        }\n      } else {\n        // get tensor type from TypedArray\n        const mappedType =\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor as SupportedTypedArrayConstructors);\n        if (mappedType === undefined) {\n          throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n        }\n        type = mappedType;\n        data = arg0 as SupportedTypedArray;\n      }\n    }\n\n    // type and data is processed, now processing dims\n    if (dims === undefined) {\n      // assume 1-D tensor if dims omitted\n      dims = [data.length];\n    } else if (!Array.isArray(dims)) {\n      throw new TypeError('A tensor\\'s dims must be a number array');\n    }\n\n    // perform check\n    const size = calculateSize(dims);\n    if (size !== data.length) {\n      throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n    }\n\n    this.dims = dims as readonly number[];\n    this.type = type;\n    this.data = data;\n    this.size = size;\n  }\n  // #endregion\n  /**\n   * Create a new tensor object from image object\n   *\n   * @param buffer - Extracted image buffer data - assuming RGBA format\n   * @param imageFormat - input image configuration - required configurations height, width, format\n   * @param tensorFormat - output tensor configuration - Default is RGB format\n   */\n  private static bufferToTensor(buffer: Uint8ClampedArray|undefined, options: TensorFromImageOptions): Tensor {\n    if (buffer === undefined) {\n      throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n      throw new Error('Image height and width must be defined');\n    }\n\n    const {height, width} = options;\n\n    const norm = options.norm;\n    let normMean: number;\n    let normBias: number;\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = 255;\n    } else {\n      normMean = norm.mean;\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = 0;\n    } else {\n      normBias = norm.bias;\n    }\n\n    const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n\n    const outputformat = options.tensorFormat !== undefined ?\n        (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n        'RGB';\n    const offset = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(offset * 4) : new Float32Array(offset * 3);\n\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n      step = 3;\n      rImagePointer = 0;\n      gImagePointer = 1;\n      bImagePointer = 2;\n      aImagePointer = -1;\n    }\n\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n      aTensorPointer = offset * 3;\n    } else if (outputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = offset;\n      gTensorPointer = offset * 2;\n    } else if (outputformat === 'BGR') {\n      bTensorPointer = 0;\n      gTensorPointer = offset;\n      rTensorPointer = offset * 2;\n    }\n\n    for (let i = 0; i < offset;\n         i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n      float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias) / normMean;\n      float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias) / normMean;\n      float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias) / normMean;\n      if (aTensorPointer !== -1 && aImagePointer !== -1) {\n        float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias) / normMean;\n      }\n    }\n\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n                                                   new Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n  }\n\n  // #region factory\n  static async fromImage(imageData: ImageData, options?: TensorFromImageOptions): Promise<Tensor>;\n  static async fromImage(imageElement: HTMLImageElement, options?: TensorFromImageOptions): Promise<Tensor>;\n  static async fromImage(bitmap: ImageBitmap, options: TensorFromImageOptions): Promise<Tensor>;\n  static async fromImage(url: string, options?: TensorFromImageOptions): Promise<Tensor>;\n\n  static async fromImage(image: ImageData|HTMLImageElement|ImageBitmap|string, options?: TensorFromImageOptions):\n      Promise<Tensor> {\n    // checking the type of image object\n    const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n    const isURL = typeof (String) !== 'undefined' && (image instanceof String || typeof image === 'string');\n\n    let data: Uint8ClampedArray|undefined;\n    let tensorConfig: TensorFromImageOptions = {};\n\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n      // HTMLImageElement - image object - format is RGBA by default\n      const canvas = document.createElement('canvas');\n      const pixels2DContext = canvas.getContext('2d');\n\n      if (pixels2DContext != null) {\n        let height = image.naturalHeight;\n        let width = image.naturalWidth;\n\n        if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n          height = options.resizedHeight;\n          width = options.resizedWidth;\n        }\n\n        if (options !== undefined) {\n          tensorConfig = options;\n          if (options.tensorFormat !== undefined) {\n            throw new Error('Image input config format must be RGBA for HTMLImageElement');\n          } else {\n            tensorConfig.tensorFormat = 'RGBA';\n          }\n          if (options.height !== undefined && options.height !== height) {\n            throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n          } else {\n            tensorConfig.height = height;\n          }\n          if (options.width !== undefined && options.width !== width) {\n            throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n          } else {\n            tensorConfig.width = width;\n          }\n        } else {\n          tensorConfig.tensorFormat = 'RGBA';\n          tensorConfig.height = height;\n          tensorConfig.width = width;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        pixels2DContext.drawImage(image, 0, 0, width, height);\n        data = pixels2DContext.getImageData(0, 0, width, height).data;\n      } else {\n        throw new Error('Can not access image data');\n      }\n\n    } else if (isImageDataEle) {\n      // ImageData - image object - format is RGBA by default\n      const format = 'RGBA';\n      let height: number;\n      let width: number;\n\n      if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n        height = options.resizedHeight;\n        width = options.resizedWidth;\n      } else {\n        height = image.height;\n        width = image.width;\n      }\n\n      if (options !== undefined) {\n        tensorConfig = options;\n        if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n          throw new Error('Image input config format must be RGBA for ImageData');\n        } else {\n          tensorConfig.bitmapFormat = 'RGBA';\n        }\n      } else {\n        tensorConfig.bitmapFormat = 'RGBA';\n      }\n\n      tensorConfig.height = height;\n      tensorConfig.width = width;\n\n      if (options !== undefined) {\n        const tempCanvas = document.createElement('canvas');\n\n        tempCanvas.width = width;\n        tempCanvas.height = height;\n\n        const pixels2DContext = tempCanvas.getContext('2d');\n\n        if (pixels2DContext != null) {\n          pixels2DContext.putImageData(image, 0, 0);\n          data = pixels2DContext.getImageData(0, 0, width, height).data;\n        } else {\n          throw new Error('Can not access image data');\n        }\n      } else {\n        data = image.data;\n      }\n\n    } else if (isImageBitmap) {\n      // ImageBitmap - image object - format must be provided by user\n      if (options === undefined) {\n        throw new Error('Please provide image config with format for Imagebitmap');\n      }\n      if (options.bitmapFormat !== undefined) {\n        throw new Error('Image input config format must be defined for ImageBitmap');\n      }\n\n      const pixels2DContext = document.createElement('canvas').getContext('2d');\n\n      if (pixels2DContext != null) {\n        const height = image.height;\n        const width = image.width;\n        pixels2DContext.drawImage(image, 0, 0, width, height);\n        data = pixels2DContext.getImageData(0, 0, width, height).data;\n        if (options !== undefined) {\n          // using square brackets to avoid TS error - type 'never'\n          if (options.height !== undefined && options.height !== height) {\n            throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n          } else {\n            tensorConfig.height = height;\n          }\n          // using square brackets to avoid TS error - type 'never'\n          if (options.width !== undefined && options.width !== width) {\n            throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n          } else {\n            tensorConfig.width = width;\n          }\n        } else {\n          tensorConfig.height = height;\n          tensorConfig.width = width;\n        }\n        return Tensor.bufferToTensor(data, tensorConfig);\n      } else {\n        throw new Error('Can not access image data');\n      }\n\n    } else if (isURL) {\n      return new Promise((resolve, reject) => {\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        if (!image || !context) {\n          return reject();\n        }\n        const newImage = new Image();\n        newImage.crossOrigin = 'Anonymous';\n        newImage.src = image as string;\n        newImage.onload = () => {\n          canvas.width = newImage.width;\n          canvas.height = newImage.height;\n          context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n          const img = context.getImageData(0, 0, canvas.width, canvas.height);\n          if (options !== undefined) {\n            // using square brackets to avoid TS error - type 'never'\n            if (options.height !== undefined && options.height !== canvas.height) {\n              throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n            } else {\n              tensorConfig.height = canvas.height;\n            }\n            // using square brackets to avoid TS error - type 'never'\n            if (options.width !== undefined && options.width !== canvas.width) {\n              throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n            } else {\n              tensorConfig.width = canvas.width;\n            }\n          } else {\n            tensorConfig.height = canvas.height;\n            tensorConfig.width = canvas.width;\n          }\n          resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n        };\n      });\n    } else {\n      throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n\n    if (data !== undefined) {\n      return Tensor.bufferToTensor(data, tensorConfig);\n    } else {\n      throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n  }\n\n  toImageData(options?: TensorToImageDataOptions): ImageData {\n    const pixels2DContext = document.createElement('canvas').getContext('2d');\n    let image: ImageData;\n    if (pixels2DContext != null) {\n      // Default values for height and width & format\n      const width = this.dims[3];\n      const height = this.dims[2];\n      const channels = this.dims[1];\n\n      const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n      const normMean = options !== undefined ? (options.norm?.mean !== undefined ? options.norm.mean : 255) : 255;\n      const normBias = options !== undefined ? (options.norm?.bias !== undefined ? options.norm.bias : 0) : 0;\n      const offset = height * width;\n\n      if (options !== undefined) {\n        if (options.height !== undefined && options.height !== height) {\n          throw new Error('Image output config height doesn\\'t match tensor height');\n        }\n        if (options.width !== undefined && options.width !== width) {\n          throw new Error('Image output config width doesn\\'t match tensor width');\n        }\n        if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n            (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n          throw new Error('Tensor format doesn\\'t match input tensor dims');\n        }\n      }\n\n      // Default pointer assignments\n      const step = 4;\n      let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n      let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n\n      // Updating the pointer assignments based on the input image format\n      if (inputformat === 'RGBA') {\n        rTensorPointer = 0;\n        gTensorPointer = offset;\n        bTensorPointer = offset * 2;\n        aTensorPointer = offset * 3;\n      } else if (inputformat === 'RGB') {\n        rTensorPointer = 0;\n        gTensorPointer = offset;\n        bTensorPointer = offset * 2;\n      } else if (inputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = offset;\n        gTensorPointer = offset * 2;\n      }\n\n      image = pixels2DContext.createImageData(width, height);\n\n      for (let i = 0; i < height * width;\n           rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n        image.data[rImagePointer] = ((this.data[rTensorPointer++] as number) - normBias) * normMean;  // R value\n        image.data[gImagePointer] = ((this.data[gTensorPointer++] as number) - normBias) * normMean;  // G value\n        image.data[bImagePointer] = ((this.data[bTensorPointer++] as number) - normBias) * normMean;  // B value\n        image.data[aImagePointer] =\n            aTensorPointer === -1 ? 255 : ((this.data[aTensorPointer++] as number) - normBias) * normMean;  // A value\n      }\n\n    } else {\n      throw new Error('Can not access image data');\n    }\n    return image;\n  }\n\n  // #region fields\n  readonly dims: readonly number[];\n  readonly type: TensorType;\n  readonly data: TensorDataType;\n  readonly size: number;\n  // #endregion\n\n  // #region tensor utilities\n  reshape(dims: readonly number[]): Tensor {\n    return new Tensor(this.type, this.data, dims);\n  }\n  // #endregion\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport {};\n//# sourceMappingURL=onnx-value.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from './tensor';\n\ntype NonTensorType = never;\n\n/**\n * Type OnnxValue Represents both tensors and non-tensors value for model's inputs/outputs.\n *\n * NOTE: currently not support non-tensor\n */\nexport type OnnxValue = Tensor|NonTensorType;\n","import { decode, encode } from 'gpt-3-encoder'\r\nimport { pipeline, Pipeline, env, RawImage } from '@xenova/transformers'\r\nimport {\r\n  EmbedDocument,\r\n  RequestChatEmbed,\r\n  RequestDocEmbed,\r\n  WorkerRequest,\r\n  WorkerResponse,\r\n} from './types'\r\nimport { docCache } from './cache'\r\n\r\n// @ts-ignore\r\nenv.allowLocalModels = false\r\n\r\ntype TextEmbed = { msg: string; entityId: string; embed: Tensor; meta: any }\r\ntype RankedMsg = { msg: string; entityId: string; similarity: number; meta: any }\r\ntype Tensor = { data: number[]; dims: number[]; size: number; type: string }\r\n\r\ntype Embeddings = {\r\n  [chatId: string]: { [msgId: string]: TextEmbed }\r\n}\r\n\r\n// let Tokenizer: PreTrainedTokenizer\r\nlet Embedder: Pipeline\r\nlet Captioner: Pipeline\r\n\r\nconst embeddings: Embeddings = {}\r\nconst documents: Record<string, Array<EmbedDocument & { embed: Tensor }>> = {}\r\n\r\nconst handlers: {\r\n  [key in WorkerRequest['type']]: (msg: Extract<WorkerRequest, { type: key }>) => Promise<void>\r\n} = {\r\n  encode: async (msg) => {\r\n    const result = encode(msg.text)\r\n    post('encoding', { id: msg.id, tokens: result })\r\n  },\r\n  decode: async (msg) => {\r\n    const result = decode(msg.tokens)\r\n    post('decoding', { id: msg.id, text: result })\r\n  },\r\n  initSimilarity: async (msg) => {\r\n    Embedder = await pipeline('feature-extraction', msg.model, {\r\n      // quantized: true,\r\n      progress_callback: (data: { status: string; file: string; progress: number }) => {\r\n        post('progress', data)\r\n      },\r\n    })\r\n    console.log(`[embed] ready`)\r\n    post('embedLoaded', {})\r\n  },\r\n  initCaptioning: async (msg) => {\r\n    console.log(`[caption] loading`)\r\n    Captioner = await pipeline('image-to-text', msg.model, {\r\n      // quantized: true,\r\n      progress_callback: (data: { status: string; file: string; progress: number }) => {\r\n        post('progress', data)\r\n      },\r\n    })\r\n    console.log(`[caption] ready`)\r\n    post('captionLoaded', {})\r\n  },\r\n  captionImage: async (msg) => {\r\n    if (!Captioner) return\r\n    const base64 = msg.image.includes(',') ? msg.image.split(',')[1] : msg.image\r\n\r\n    const buffer = Buffer.from(base64, 'base64')\r\n    const blob = new Blob([new Uint8Array(buffer)])\r\n    const image = await RawImage.fromBlob(blob)\r\n\r\n    console.log(`[caption] starting`)\r\n    try {\r\n      const result = await Captioner(image)\r\n      const text = result[0].generated_text\r\n      console.log(`[caption] done: ${text}`)\r\n      post('caption', { requestId: msg.requestId, caption: text })\r\n    } catch (ex) {\r\n      console.log(`[caption] caption failed`)\r\n      console.error(ex)\r\n    }\r\n  },\r\n  embedChat: async (msg) => {\r\n    if (!Embedder) return\r\n    if (!embeddings[msg.chatId]) {\r\n      embeddings[msg.chatId] = {}\r\n    }\r\n\r\n    embed(msg)\r\n  },\r\n  embedDocument: async (msg) => {\r\n    if (!Embedder) return\r\n    if (!documents[msg.documentId]) {\r\n      documents[msg.documentId] = []\r\n    }\r\n\r\n    await docCache.saveDoc(msg.documentId, msg)\r\n    embed(msg)\r\n  },\r\n  query: async (query) => {\r\n    if (!Embedder) {\r\n      post('result', { messages: [], requestId: query.requestId })\r\n      return\r\n    }\r\n\r\n    const embed = await Embedder(query.text, { pooling: 'mean', normalize: true })\r\n    const start = Date.now()\r\n    if (embeddings[query.chatId]) {\r\n      const embeds = Object.values(embeddings[query.chatId])\r\n        .filter((msg) => {\r\n          const isBefore = !query.beforeDate ? true : msg.meta.created <= query.beforeDate\r\n          return msg.msg !== query.text && isBefore\r\n        })\r\n        .map((msg) => {\r\n          const similarity = calculateCosineSimilarity(embed.data, msg.embed.data)\r\n          return { msg: msg.msg, entityId: msg.entityId, similarity, meta: msg.meta }\r\n        })\r\n        .sort(rank)\r\n      post('result', { messages: embeds, requestId: query.requestId })\r\n    }\r\n\r\n    if (documents[query.chatId]) {\r\n      const embeds = documents[query.chatId]\r\n        .filter((msg) => msg.msg !== query.text)\r\n        .map((msg) => {\r\n          const similarity = calculateCosineSimilarity(embed.data, msg.embed.data)\r\n          return { msg: msg.msg, entityId: '', similarity, meta: msg.meta }\r\n        })\r\n        .sort(rank)\r\n      post('result', { messages: embeds, requestId: query.requestId })\r\n    }\r\n    console.log(`[embed] ${Date.now() - start}ms`)\r\n  },\r\n}\r\n\r\nonmessage = (event) => {\r\n  const msg = event.data as WorkerRequest\r\n  const handler = handlers[msg.type]\r\n  if (handler) {\r\n    handler(msg as any)\r\n  }\r\n}\r\n\r\nfunction post<T extends WorkerResponse['type']>(\r\n  type: T,\r\n  payload: Omit<Extract<WorkerResponse, { type: T }>, 'type'>\r\n) {\r\n  self.postMessage({ type, ...payload })\r\n}\r\n\r\nfunction calculateCosineSimilarity(input: number[], compare: number[]) {\r\n  let dotProduct = 0\r\n  let queryMagnitude = 0\r\n  let embeddingMagnitude = 0\r\n\r\n  for (let i = 0; i < compare.length; i++) {\r\n    dotProduct += compare[i] * input[i]\r\n    queryMagnitude += compare[i] ** 2\r\n    embeddingMagnitude += input[i] ** 2\r\n  }\r\n  return dotProduct / (Math.sqrt(queryMagnitude) * Math.sqrt(embeddingMagnitude))\r\n}\r\n\r\nfunction rank(left: RankedMsg, right: RankedMsg) {\r\n  return right.similarity - left.similarity\r\n}\r\n\r\npost('init', {})\r\n\r\nconst embedQueue: Array<RequestChatEmbed | RequestDocEmbed> = []\r\n\r\nlet EMBEDDING = false\r\nasync function embed(msg: RequestChatEmbed | RequestDocEmbed) {\r\n  const type = msg.type === 'embedChat' ? 'chat' : 'document'\r\n  const id = msg.type === 'embedChat' ? msg.chatId : msg.documentId\r\n  if (EMBEDDING) {\r\n    embedQueue.push(msg)\r\n    post('status', { id, kind: type, status: 'queued' })\r\n    console.log(`[${type}] ${id} queued`)\r\n    return\r\n  }\r\n\r\n  EMBEDDING = true\r\n  post('status', { id, kind: type, status: 'loading' })\r\n  console.log(`[${type}] ${id} started`)\r\n  if (msg.type === 'embedChat') {\r\n    const seen = new Set<string>()\r\n    const cache = embeddings[msg.chatId]\r\n\r\n    const filtered = msg.messages.filter((msg) => {\r\n      seen.add(msg._id)\r\n      const prev = embeddings[msg.chatId][msg._id]\r\n      if (!prev) return true\r\n      if (prev.msg !== msg.msg) return true\r\n      return false\r\n    })\r\n\r\n    for (const msg of filtered) {\r\n      if (msg.adapter === 'image' || msg.ooc) continue\r\n      const embedding = await Embedder(msg.msg, { pooling: 'mean', normalize: true })\r\n      cache[msg._id] = {\r\n        entityId: msg.characterId || msg.userId || '',\r\n        msg: msg.msg,\r\n        embed: embedding,\r\n        meta: { created: msg.createdAt },\r\n      }\r\n    }\r\n\r\n    let deleted = 0\r\n    for (const cachedId of Object.keys(cache)) {\r\n      if (seen.has(cachedId)) continue\r\n      delete cache[cachedId]\r\n      deleted++\r\n    }\r\n\r\n    const pre = deleted > 0 ? '+' : ''\r\n    console.log(`[chat] ${msg.chatId} embedded (${pre}${deleted})`)\r\n  }\r\n\r\n  if (msg.type === 'embedDocument') {\r\n    let embedded = 0\r\n    documents[msg.documentId] = []\r\n    for (const item of msg.documents) {\r\n      const embed = await Embedder(item.msg, { pooling: 'mean', normalize: true })\r\n      embedded++\r\n      const percent = ((embedded / msg.documents.length) * 100).toFixed(1)\r\n      post('status', { id, kind: type, status: `loading (${percent}%)` })\r\n      documents[msg.documentId].push({ msg: item.msg, embed, meta: item.meta })\r\n    }\r\n    console.log(`[document] ${msg.documentId} embedded`)\r\n  }\r\n\r\n  post('status', { id, kind: type, status: 'loaded' })\r\n  EMBEDDING = false\r\n\r\n  const next = embedQueue.shift()\r\n  if (next) {\r\n    embed(next)\r\n  }\r\n}\r\n","const { encode, decode } = require(\"./Encoder\");\n\nmodule.exports = {\n  encode,\n  decode,\n};\n","// This file includes code which was modified from https://github.com/openai/gpt-2\nconst fs = require('fs')\nconst path = require('path');\n\nconst encoder = JSON.parse(fs.readFileSync(path.join(__dirname, './encoder.json')));\nconst bpe_file = fs.readFileSync(path.join(__dirname, './vocab.bpe'), 'utf-8');\n\nconst range = (x, y) => {\n  const res = Array.from(Array(y).keys()).slice(x)\n  return res\n}\n\nconst ord = x => {\n  return x.charCodeAt(0)\n}\n\nconst chr = x => {\n  return String.fromCharCode(x)\n}\n\nconst textEncoder = new TextEncoder(\"utf-8\")\nconst encodeStr = str => {\n  return Array.from(textEncoder.encode(str)).map(x => x.toString())\n}\n\nconst textDecoder = new TextDecoder(\"utf-8\")\nconst decodeStr = arr => {\n  return textDecoder.decode(new Uint8Array(arr));\n}\n\nconst dictZip = (x, y) => {\n  const result = {}\n  x.map((_, i) => { result[x[i]] = y[i] })\n  return result\n}\n\nfunction bytes_to_unicode() {\n  const bs = range(ord('!'), ord('~') + 1).concat(range(ord('¡'), ord('¬') + 1), range(ord('®'), ord('ÿ') + 1))\n\n  let cs = bs.slice()\n  let n = 0\n  for (let b = 0; b < 2 ** 8; b++) {\n    if (!bs.includes(b)) {\n      bs.push(b)\n      cs.push(2 ** 8 + n)\n      n = n + 1\n    }\n  }\n\n  cs = cs.map(x => chr(x))\n\n  const result = {}\n  bs.map((_, i) => { result[bs[i]] = cs[i] })\n  return result\n}\n\nfunction get_pairs(word) {\n  const pairs = new Set()\n  let prev_char = word[0]\n  for (let i = 1; i < word.length; i++) {\n    const char = word[i]\n    pairs.add([prev_char, char])\n    prev_char = char\n  }\n  return pairs\n}\n\nconst pat = /'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+/gu\n\nconst decoder = {}\nObject.keys(encoder).map(x => { decoder[encoder[x]] = x })\n\nconst lines = bpe_file.split('\\n')\n\n// bpe_merges = [tuple(merge_str.split()) for merge_str in bpe_data.split(\"\\n\")[1:-1]]\nconst bpe_merges = lines.slice(1, lines.length - 1).map(x => {\n  return x.split(/(\\s+)/).filter(function(e) { return e.trim().length > 0 })\n})\n\nconst byte_encoder = bytes_to_unicode()\nconst byte_decoder = {}\nObject.keys(byte_encoder).map(x => { byte_decoder[byte_encoder[x]] = x })\n\nconst bpe_ranks = dictZip(bpe_merges, range(0, bpe_merges.length))\nconst cache = new Map;\n\nfunction bpe(token) {\n  if (cache.has(token)) {\n    return cache.get(token)\n  }``\n\n  let word = token.split('')\n\n  let pairs = get_pairs(word)\n\n  if (!pairs) {\n    return token\n  }\n\n  while (true) {\n    const minPairs = {}\n    Array.from(pairs).map(pair => {\n      const rank = bpe_ranks[pair]\n      minPairs[(isNaN(rank) ? 10e10 : rank)] = pair\n    })\n\n\n\n    const bigram = minPairs[Math.min(...Object.keys(minPairs).map(x => {\n      return parseInt(x)\n    }\n    ))]\n\n    if (!(bigram in bpe_ranks)) {\n      break\n    }\n\n    const first = bigram[0]\n    const second = bigram[1]\n    let new_word = []\n    let i = 0\n\n    while (i < word.length) {\n      const j = word.indexOf(first, i)\n      if (j === -1) {\n        new_word = new_word.concat(word.slice(i))\n        break\n      }\n      new_word = new_word.concat(word.slice(i, j))\n      i = j\n\n      if (word[i] === first && i < word.length - 1 && word[i + 1] === second) {\n        new_word.push(first + second)\n        i = i + 2\n      } else {\n        new_word.push(word[i])\n        i = i + 1\n      }\n    }\n\n    word = new_word\n    if (word.length === 1) {\n      break\n    } else {\n      pairs = get_pairs(word)\n    }\n  }\n\n  word = word.join(' ')\n  cache.set(token, word)\n\n  return word\n}\n\nfunction encode(text) {\n  let bpe_tokens = []\n  const matches = Array.from(text.matchAll(pat)).map(x => x[0])\n  for (let token of matches) {\n    token = encodeStr(token).map(x => {\n      return byte_encoder[x]\n    }).join('')\n    \n    const new_tokens = bpe(token).split(' ').map(x => encoder[x])\n    bpe_tokens = bpe_tokens.concat(new_tokens)\n  }\n  return bpe_tokens\n}\n\nfunction decode(tokens) {\n  let text = tokens.map(x => decoder[x]).join('')\n  text = decodeStr(text.split('').map(x => byte_decoder[x]))\n  return text\n}\n\nmodule.exports = {\n  encode,\n  decode\n};","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('nodejs.util.inspect.custom')\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","\"use strict\";","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","/**\n * @file Entry point for the Transformers.js library. Only the exports from this file\n * are available to the end user, and are grouped as follows:\n * \n * 1. [Pipelines](./pipelines)\n * 2. [Environment variables](./env)\n * 3. [Models](./models)\n * 4. [Tokenizers](./tokenizers)\n * 5. [Processors](./processors)\n * \n * @module transformers\n */\n\nexport * from './pipelines.js';\nexport * from './env.js';\nexport * from './models.js';\nexport * from './tokenizers.js';\nexport * from './processors.js';\nexport * from './configs.js';\n\nexport * from './utils/audio.js';\nexport * from './utils/image.js';\nexport * from './utils/tensor.js';\nexport * from './utils/maths.js';\n","/**\n * @file Pipelines provide a high-level, easy to use, API for running machine learning models.\n * \n * **Example:** Instantiate pipeline using the `pipeline` function.\n * ```javascript\n * import { pipeline } from '@xenova/transformers';\n * \n * let classifier = await pipeline('sentiment-analysis');\n * let output = await classifier('I love transformers!');\n * // [{'label': 'POSITIVE', 'score': 0.999817686}]\n * ```\n * \n * @module pipelines\n */\n\nimport {\n    AutoTokenizer,\n    PreTrainedTokenizer,\n} from './tokenizers.js';\nimport {\n    AutoModel,\n    AutoModelForSequenceClassification,\n    AutoModelForAudioClassification,\n    AutoModelForTokenClassification,\n    AutoModelForQuestionAnswering,\n    AutoModelForMaskedLM,\n    AutoModelForSeq2SeqLM,\n    AutoModelForSpeechSeq2Seq,\n    AutoModelForTextToSpectrogram,\n    AutoModelForCTC,\n    AutoModelForCausalLM,\n    AutoModelForVision2Seq,\n    AutoModelForImageClassification,\n    AutoModelForImageSegmentation,\n    AutoModelForObjectDetection,\n    AutoModelForDocumentQuestionAnswering,\n    // AutoModelForTextToWaveform,\n    PreTrainedModel,\n} from './models.js';\nimport {\n    AutoProcessor,\n    Processor\n} from './processors.js';\n\n\nimport {\n    Callable,\n    isString,\n    dispatchCallback,\n    pop,\n    product,\n} from './utils/core.js';\nimport {\n    softmax,\n    max,\n    getTopItems,\n    round,\n} from './utils/maths.js';\nimport {\n    read_audio\n} from './utils/audio.js';\nimport {\n    Tensor,\n    mean_pooling,\n} from './utils/tensor.js';\nimport { RawImage } from './utils/image.js';\n\n/**\n * Prepare images for further tasks.\n * @param {any[]} images images to prepare.\n * @returns {Promise<any[]>} returns processed images.\n * @private\n */\nasync function prepareImages(images) {\n    if (!Array.isArray(images)) {\n        images = [images];\n    }\n\n    // Possibly convert any non-images to images\n    images = await Promise.all(images.map(x => RawImage.read(x)));\n    return images;\n}\n\n/**\n * The Pipeline class is the class from which all pipelines inherit.\n * Refer to this class for methods shared across different pipelines.\n * @extends Callable\n */\nexport class Pipeline extends Callable {\n    /**\n     * Create a new Pipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {PreTrainedTokenizer} [options.tokenizer=null] The tokenizer to use (if any).\n     * @param {Processor} [options.processor=null] The processor to use (if any).\n     */\n    constructor({ task, model, tokenizer = null, processor = null }) {\n        super();\n        this.task = task;\n        this.model = model;\n        this.tokenizer = tokenizer;\n        this.processor = processor;\n    }\n\n    /**\n     * Disposes the model.\n     * @returns {Promise<void>} A promise that resolves when the model has been disposed.\n     */\n    async dispose() {\n        await this.model.dispose();\n    }\n\n    /**\n     * Executes the task associated with the pipeline.\n     * @param {any} texts The input texts to be processed.\n     * @param {...any} args Additional arguments.\n     * @returns {Promise<any>} A promise that resolves to an array containing the inputs and outputs of the task.\n     */\n    async _call(texts, ...args) {\n        // Run tokenization\n        let model_inputs = this.tokenizer(texts, {\n            padding: true,\n            truncation: true\n        });\n\n        // Run model\n        let outputs = await this.model(model_inputs)\n\n        return [model_inputs, outputs];\n    }\n}\n\n/**\n * Text classification pipeline using any `ModelForSequenceClassification`.\n *\n * **Example:** Sentiment-analysis w/ `Xenova/distilbert-base-uncased-finetuned-sst-2-english`.\n * ```javascript\n * let classifier = await pipeline('sentiment-analysis', 'Xenova/distilbert-base-uncased-finetuned-sst-2-english');\n * let output = await classifier('I love transformers!');\n * // [{ label: 'POSITIVE', score: 0.999788761138916 }]\n * ```\n * \n * **Example:** Multilingual sentiment-analysis w/ `Xenova/bert-base-multilingual-uncased-sentiment` (and return top 5 classes).\n * ```javascript\n * let classifier = await pipeline('sentiment-analysis', 'Xenova/bert-base-multilingual-uncased-sentiment');\n * let output = await classifier('Le meilleur film de tous les temps.', { topk: 5 });\n * // [\n * //   { label: '5 stars', score: 0.9610759615898132 },\n * //   { label: '4 stars', score: 0.03323351591825485 },\n * //   { label: '3 stars', score: 0.0036155181005597115 },\n * //   { label: '1 star', score: 0.0011325967498123646 },\n * //   { label: '2 stars', score: 0.0009423971059732139 }\n * // ]\n * ```\n * \n * **Example:** Toxic comment classification w/ `Xenova/toxic-bert` (and return all classes).\n * ```javascript\n * let classifier = await pipeline('text-classification', 'Xenova/toxic-bert');\n * let output = await classifier('I hate you!', { topk: null });\n * // [\n * //   { label: 'toxic', score: 0.9593140482902527 },\n * //   { label: 'insult', score: 0.16187334060668945 },\n * //   { label: 'obscene', score: 0.03452680632472038 },\n * //   { label: 'identity_hate', score: 0.0223250575363636 },\n * //   { label: 'threat', score: 0.019197041168808937 },\n * //   { label: 'severe_toxic', score: 0.005651099607348442 }\n * // ]\n * ```\n */\nexport class TextClassificationPipeline extends Pipeline {\n    /**\n     * Executes the text classification task.\n     * @param {any} texts The input texts to be classified.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {number} [options.topk=1] The number of top predictions to be returned.\n     * @returns {Promise<Object[]|Object>} A promise that resolves to an array or object containing the predicted labels and scores.\n     */\n    async _call(texts, {\n        topk = 1\n    } = {}) {\n\n        // TODO: Use softmax tensor function\n        let function_to_apply =\n            this.model.config.problem_type === 'multi_label_classification'\n                ? batch => batch.sigmoid().data\n                : batch => softmax(batch.data); // single_label_classification (default)\n\n        let [inputs, outputs] = await super._call(texts);\n\n        let id2label = this.model.config.id2label;\n        let toReturn = [];\n        for (let batch of outputs.logits) {\n            let output = function_to_apply(batch);\n            let scores = getTopItems(output, topk);\n\n            let vals = scores.map(function (x) {\n                return {\n                    label: id2label[x[0]],\n                    score: x[1],\n                }\n            });\n            if (topk === 1) {\n                toReturn.push(...vals);\n            } else {\n                toReturn.push(vals);\n            }\n        }\n\n        return Array.isArray(texts) || topk === 1 ? toReturn : toReturn[0];\n    }\n}\n\n\n/**\n * Named Entity Recognition pipeline using any `ModelForTokenClassification`.\n * \n * **Example:** Perform named entity recognition with `Xenova/bert-base-NER`.\n * ```javascript\n * let classifier = await pipeline('token-classification', 'Xenova/bert-base-NER');\n * let output = await classifier('My name is Sarah and I live in London');\n * // [\n * //   { entity: 'B-PER', score: 0.9980202913284302, index: 4, word: 'Sarah' },\n * //   { entity: 'B-LOC', score: 0.9994474053382874, index: 9, word: 'London' }\n * // ]\n * ```\n * \n * **Example:** Perform named entity recognition with `Xenova/bert-base-NER` (and return all labels).\n * ```javascript\n * let classifier = await pipeline('token-classification', 'Xenova/bert-base-NER');\n * let output = await classifier('Sarah lives in the United States of America', { ignore_labels: [] });\n * // [\n * //   { entity: 'B-PER', score: 0.9966587424278259, index: 1, word: 'Sarah' },\n * //   { entity: 'O', score: 0.9987385869026184, index: 2, word: 'lives' },\n * //   { entity: 'O', score: 0.9990072846412659, index: 3, word: 'in' },\n * //   { entity: 'O', score: 0.9988298416137695, index: 4, word: 'the' },\n * //   { entity: 'B-LOC', score: 0.9995510578155518, index: 5, word: 'United' },\n * //   { entity: 'I-LOC', score: 0.9990395307540894, index: 6, word: 'States' },\n * //   { entity: 'I-LOC', score: 0.9986724853515625, index: 7, word: 'of' },\n * //   { entity: 'I-LOC', score: 0.9975294470787048, index: 8, word: 'America' }\n * // ]\n * ```\n */\nexport class TokenClassificationPipeline extends Pipeline {\n    /**\n     * Executes the token classification task.\n     * @param {any} texts The input texts to be classified.\n     * @param {Object} options An optional object containing the following properties:\n     * @returns {Promise<Object[]|Object>} A promise that resolves to an array or object containing the predicted labels and scores.\n     */\n    async _call(texts, {\n        ignore_labels = ['O'], // TODO init param?\n    } = {}) {\n\n        let isBatched = Array.isArray(texts);\n\n        if (!isBatched) {\n            texts = [texts];\n        }\n\n        let tokenizer = this.tokenizer;\n        let [inputs, outputs] = await super._call(texts);\n\n        let logits = outputs.logits;\n        let id2label = this.model.config.id2label;\n\n        let toReturn = [];\n        for (let i = 0; i < logits.dims[0]; ++i) {\n            let ids = inputs.input_ids[i];\n            let batch = logits[i];\n\n            // List of tokens that aren't ignored\n            let tokens = [];\n            for (let j = 0; j < batch.dims[0]; ++j) {\n                let tokenData = batch[j];\n                let topScoreIndex = max(tokenData.data)[1];\n\n                let entity = id2label[topScoreIndex];\n                if (ignore_labels.includes(entity)) {\n                    // We predicted a token that should be ignored. So, we skip it.\n                    continue;\n                }\n\n                // TODO add option to keep special tokens?\n                let word = tokenizer.decode([ids[j].item()], { skip_special_tokens: true });\n                if (word === '') {\n                    // Was a special token. So, we skip it.\n                    continue;\n                }\n\n                let scores = softmax(tokenData.data);\n\n                tokens.push({\n                    entity: entity,\n                    score: scores[topScoreIndex],\n                    index: j,\n                    word: word,\n\n                    // TODO: null for now, but will add\n                    start: null,\n                    end: null,\n                });\n            }\n            toReturn.push(tokens);\n        }\n        return isBatched ? toReturn : toReturn[0];\n    }\n}\n\n/**\n * @typedef {object} QuestionAnsweringResult\n * @property {string} answer - The answer.\n * @property {number} score - The score.\n */\n\n/**\n * @typedef {Promise<QuestionAnsweringResult|QuestionAnsweringResult[]>} QuestionAnsweringReturnType\n */\n\n/**\n * Question Answering pipeline using any `ModelForQuestionAnswering`.\n * \n * **Example:** Run question answering with `Xenova/distilbert-base-uncased-distilled-squad`.\n * ```javascript\n * let question = 'Who was Jim Henson?';\n * let context = 'Jim Henson was a nice puppet.';\n * \n * let answerer = await pipeline('question-answering', 'Xenova/distilbert-base-uncased-distilled-squad');\n * let output = await answerer(question, context);\n * // {\n * //   \"answer\": \"a nice puppet\",\n * //   \"score\": 0.5768911502526741\n * // }\n * ```\n */\nexport class QuestionAnsweringPipeline extends Pipeline {\n    /**\n     * Executes the question answering task.\n     * @param {string|string[]} question The question(s) to be answered.\n     * @param {string|string[]} context The context(s) where the answer(s) can be found.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {number} [options.topk=1] The number of top answer predictions to be returned.\n     * @returns {QuestionAnsweringReturnType} A promise that resolves to an array or object\n     * containing the predicted answers and scores.\n     */\n    async _call(question, context, {\n        topk = 1\n    } = {}) {\n\n        // Run tokenization\n        let inputs = this.tokenizer(question, {\n            text_pair: context,\n            padding: true,\n            truncation: true\n        });\n\n        let output = await this.model(inputs);\n\n        let toReturn = [];\n        for (let j = 0; j < output.start_logits.dims[0]; ++j) {\n            let ids = inputs.input_ids[j];\n            let sepIndex = ids.indexOf(this.tokenizer.sep_token_id);\n\n            let s1 = Array.from(softmax(output.start_logits[j].data))\n                .map((x, i) => [x, i])\n                .filter(x => x[1] > sepIndex);\n            let e1 = Array.from(softmax(output.end_logits[j].data))\n                .map((x, i) => [x, i])\n                .filter(x => x[1] > sepIndex);\n\n            let options = product(s1, e1)\n                .filter(x => x[0][1] <= x[1][1])\n                .map(x => [x[0][1], x[1][1], x[0][0] * x[1][0]])\n                .sort((a, b) => b[2] - a[2]);\n\n            for (let k = 0; k < Math.min(options.length, topk); ++k) {\n                let [start, end, score] = options[k];\n\n                let answer_tokens = [...ids].slice(start, end + 1)\n\n                let answer = this.tokenizer.decode(answer_tokens, {\n                    skip_special_tokens: true,\n                });\n\n                // TODO add start and end?\n                // NOTE: HF returns character index\n                toReturn.push({\n                    answer, score\n                });\n            }\n        }\n\n        // Mimic HF's return type based on topk\n        return (topk === 1) ? toReturn[0] : toReturn;\n\n    }\n}\n\n/**\n * Masked language modeling prediction pipeline using any `ModelWithLMHead`.\n * \n * **Example:** Perform masked language modelling (a.k.a. \"fill-mask\") with `Xenova/bert-base-uncased`.\n * ```javascript\n * let unmasker = await pipeline('fill-mask', 'Xenova/bert-base-cased');\n * let output = await unmasker('The goal of life is [MASK].');\n * // [\n * //   { token_str: 'survival', score: 0.06137419492006302, token: 8115, sequence: 'The goal of life is survival.' },\n * //   { token_str: 'love', score: 0.03902450203895569, token: 1567, sequence: 'The goal of life is love.' },\n * //   { token_str: 'happiness', score: 0.03253183513879776, token: 9266, sequence: 'The goal of life is happiness.' },\n * //   { token_str: 'freedom', score: 0.018736306577920914, token: 4438, sequence: 'The goal of life is freedom.' },\n * //   { token_str: 'life', score: 0.01859794743359089, token: 1297, sequence: 'The goal of life is life.' }\n * // ]\n * ```\n * \n * **Example:** Perform masked language modelling (a.k.a. \"fill-mask\") with `Xenova/bert-base-cased` (and return top result).\n * ```javascript\n * let unmasker = await pipeline('fill-mask', 'Xenova/bert-base-cased');\n * let output = await unmasker('The Milky Way is a [MASK] galaxy.', { topk: 1 });\n * // [{ token_str: 'spiral', score: 0.6299987435340881, token: 14061, sequence: 'The Milky Way is a spiral galaxy.' }]\n * ```\n */\nexport class FillMaskPipeline extends Pipeline {\n    /**\n     * Fill the masked token in the text(s) given as inputs.\n     * @param {any} texts The masked input texts.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {number} [options.topk=5] The number of top predictions to be returned.\n     * @returns {Promise<Object[]|Object>} A promise that resolves to an array or object containing the predicted tokens and scores.\n     */\n    async _call(texts, {\n        topk = 5\n    } = {}) {\n        // Run tokenization\n        let [inputs, outputs] = await super._call(texts);\n\n        // Determine indices of mask tokens\n        // let mask_token_indices = inputs.input_ids.data.map(x => )\n\n        // let logits = reshape(outputs.logits.data, outputs.logits.dims);\n\n        let tokenizer = this.tokenizer;\n\n        let toReturn = [];\n\n        for (let i = 0; i < inputs.input_ids.dims[0]; ++i) {\n            let ids = inputs.input_ids[i];\n            let mask_token_index = ids.indexOf(this.tokenizer.mask_token_id)\n\n            if (mask_token_index === -1) {\n                throw Error(`Mask token (${tokenizer.mask_token}) not found in text.`)\n            }\n            let logits = outputs.logits[i];\n            let itemLogits = logits[mask_token_index];\n\n            let scores = getTopItems(softmax(itemLogits.data), topk);\n\n            toReturn.push(scores.map(x => {\n                let sequence = [...ids];\n                sequence[mask_token_index] = x[0];\n\n                return {\n                    score: x[1],\n                    token: x[0],\n                    token_str: tokenizer.model.vocab[x[0]],\n                    sequence: tokenizer.decode(sequence, { skip_special_tokens: true }),\n                }\n            }));\n        }\n        return Array.isArray(texts) ? toReturn : toReturn[0];\n    }\n}\n\n/**\n * Text2TextGenerationPipeline class for generating text using a model that performs text-to-text generation tasks.\n * \n * **Example:** Text-to-text generation w/ `Xenova/LaMini-Flan-T5-783M`.\n * ```javascript\n * let generator = await pipeline('text2text-generation', 'Xenova/LaMini-Flan-T5-783M');\n * let output = await generator('how can I become more healthy?', {\n *   max_new_tokens: 100,\n * });\n * // [ 'To become more healthy, you can: 1. Eat a balanced diet with plenty of fruits, vegetables, whole grains, lean proteins, and healthy fats. 2. Stay hydrated by drinking plenty of water. 3. Get enough sleep and manage stress levels. 4. Avoid smoking and excessive alcohol consumption. 5. Regularly exercise and maintain a healthy weight. 6. Practice good hygiene and sanitation. 7. Seek medical attention if you experience any health issues.' ]\n * ```\n */\nexport class Text2TextGenerationPipeline extends Pipeline {\n    _key = null;\n\n    /**\n     * Fill the masked token in the text(s) given as inputs.\n     * @param {string|string[]} texts The text or array of texts to be processed.\n     * @param {Object} [options={}] Options for the fill-mask pipeline.\n     * @param {number} [options.topk=5] The number of top-k predictions to return.\n     * @returns {Promise<any>} An array of objects containing the score, predicted token, predicted token string,\n     * and the sequence with the predicted token filled in, or an array of such arrays (one for each input text).\n     * If only one input text is given, the output will be an array of objects.\n     * @throws {Error} When the mask token is not found in the input text.\n     */\n    async _call(texts, generate_kwargs = {}) {\n        if (!Array.isArray(texts)) {\n            texts = [texts];\n        }\n\n        // Add global prefix, if present\n        if (this.model.config.prefix) {\n            texts = texts.map(x => this.model.config.prefix + x)\n        }\n\n        // Handle task specific params:\n        let task_specific_params = this.model.config.task_specific_params\n        if (task_specific_params && task_specific_params[this.task]) {\n            // Add prefixes, if present\n            if (task_specific_params[this.task].prefix) {\n                texts = texts.map(x => task_specific_params[this.task].prefix + x)\n            }\n\n            // TODO update generation config\n        }\n\n        let tokenizer_options = {\n            padding: true,\n            truncation: true,\n        }\n        let input_ids;\n        if (this instanceof TranslationPipeline && '_build_translation_inputs' in this.tokenizer) {\n            // TODO: move to Translation pipeline?\n            // Currently put here to avoid code duplication\n            // @ts-ignore\n            input_ids = this.tokenizer._build_translation_inputs(texts, tokenizer_options, generate_kwargs).input_ids;\n\n        } else {\n            input_ids = this.tokenizer(texts, tokenizer_options).input_ids;\n        }\n\n        let outputTokenIds = await this.model.generate(input_ids, generate_kwargs);\n\n        /**\n         * @type {any[]}\n         */\n        let toReturn = this.tokenizer.batch_decode(outputTokenIds, {\n            skip_special_tokens: true,\n        });\n        if (this._key !== null) {\n            toReturn = toReturn.map(text => {\n                return (this._key === null) ? text : { [this._key]: text }\n            })\n        }\n        return toReturn\n    }\n}\n\n\n/**\n * A pipeline for summarization tasks, inheriting from Text2TextGenerationPipeline.\n * \n * **Example:** Summarization w/ `Xenova/distilbart-cnn-6-6`.\n * ```javascript\n * let text = 'The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, ' +\n *   'and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. ' +\n *   'During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest ' +\n *   'man-made structure in the world, a title it held for 41 years until the Chrysler Building in New ' +\n *   'York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to ' +\n *   'the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the ' +\n *   'Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second ' +\n *   'tallest free-standing structure in France after the Millau Viaduct.';\n * \n * let generator = await pipeline('summarization', 'Xenova/distilbart-cnn-6-6');\n * let output = await generator(text, {\n *   max_new_tokens: 100,\n * });\n * // [{ summary_text: ' The Eiffel Tower is about the same height as an 81-storey building and the tallest structure in Paris. It is the second tallest free-standing structure in France after the Millau Viaduct.' }]\n * ```\n */\nexport class SummarizationPipeline extends Text2TextGenerationPipeline {\n    _key = 'summary_text';\n}\n\n/**\n * Translates text from one language to another.\n * \n * **Example:** Multilingual translation w/ `Xenova/nllb-200-distilled-600M`.\n * \n * See [here](https://github.com/facebookresearch/flores/blob/main/flores200/README.md#languages-in-flores-200)\n * for the full list of languages and their corresponding codes.\n * \n * ```javascript\n * let translator = await pipeline('translation', 'Xenova/nllb-200-distilled-600M');\n * let output = await translator('जीवन एक चॉकलेट बॉक्स की तरह है।', {\n *   src_lang: 'hin_Deva', // Hindi\n *   tgt_lang: 'fra_Latn', // French\n * });\n * // [{ translation_text: 'La vie est comme une boîte à chocolat.' }]\n * ```\n * \n * **Example:** Multilingual translation w/ `Xenova/m2m100_418M`.\n * \n * See [here](https://huggingface.co/facebook/m2m100_418M#languages-covered)\n * for the full list of languages and their corresponding codes.\n * \n * ```javascript\n * let translator = await pipeline('translation', 'Xenova/m2m100_418M');\n * let output = await translator('生活就像一盒巧克力。', {\n *   src_lang: 'zh', // Chinese\n *   tgt_lang: 'en', // English\n * });\n * // [{ translation_text: 'Life is like a box of chocolate.' }]\n * ```\n * \n * **Example:** Multilingual translation w/ `Xenova/mbart-large-50-many-to-many-mmt`.\n * \n * See [here](https://huggingface.co/facebook/mbart-large-50-many-to-many-mmt#languages-covered)\n * for the full list of languages and their corresponding codes.\n * \n * ```javascript\n * let translator = await pipeline('translation', 'Xenova/mbart-large-50-many-to-many-mmt');\n * let output = await translator('संयुक्त राष्ट्र के प्रमुख का कहना है कि सीरिया में कोई सैन्य समाधान नहीं है', {\n *   src_lang: 'hi_IN', // Hindi\n *   tgt_lang: 'fr_XX', // French\n * });\n * // [{ translation_text: 'Le chef des Nations affirme qu 'il n 'y a military solution in Syria.' }]\n * ```\n */\nexport class TranslationPipeline extends Text2TextGenerationPipeline {\n    _key = 'translation_text';\n}\n\n/**\n * Language generation pipeline using any `ModelWithLMHead` or `ModelForCausalLM`.\n * This pipeline predicts the words that will follow a specified text prompt.\n * NOTE: For the full list of generation parameters, see [`GenerationConfig`](./utils/generation#module_utils/generation.GenerationConfig).\n * \n * **Example:** Text generation with `Xenova/distilgpt2` (default settings).\n * ```javascript\n * let text = 'I enjoy walking with my cute dog,';\n * let classifier = await pipeline('text-generation', 'Xenova/distilgpt2');\n * let output = await classifier(text);\n * // [{ generated_text: \"I enjoy walking with my cute dog, and I love to play with the other dogs.\" }]\n * ```\n * \n * **Example:** Text generation with `Xenova/distilgpt2` (custom settings).\n * ```javascript\n * let text = 'Once upon a time, there was';\n * let classifier = await pipeline('text-generation', 'Xenova/distilgpt2');\n * let output = await classifier(text, {\n *   temperature: 2,\n *   max_new_tokens: 10,\n *   repetition_penalty: 1.5,\n *   no_repeat_ngram_size: 2,\n *   num_beams: 2,\n *   num_return_sequences: 2,\n * });\n * // [{\n * //   \"generated_text\": \"Once upon a time, there was an abundance of information about the history and activities that\"\n * // }, {\n * //   \"generated_text\": \"Once upon a time, there was an abundance of information about the most important and influential\"\n * // }]\n * ```\n * \n * **Example:** Run code generation with `Xenova/codegen-350M-mono`.\n * ```javascript\n * let text = 'def fib(n):';\n * let classifier = await pipeline('text-generation', 'Xenova/codegen-350M-mono');\n * let output = await classifier(text, {\n *   max_new_tokens: 44,\n * });\n * // [{\n * //   generated_text: 'def fib(n):\\n' +\n * //     '    if n == 0:\\n' +\n * //     '        return 0\\n' +\n * //     '    elif n == 1:\\n' +\n * //     '        return 1\\n' +\n * //     '    else:\\n' +\n * //     '        return fib(n-1) + fib(n-2)\\n'\n * // }]\n * ```\n */\nexport class TextGenerationPipeline extends Pipeline {\n    /**\n     * Generates text based on an input prompt.\n     * @param {any} texts The input prompt or prompts to generate text from.\n     * @param {Object} [generate_kwargs={}] Additional arguments for text generation.\n     * @returns {Promise<any>} The generated text or texts.\n     */\n    async _call(texts, generate_kwargs = {}) {\n        let stringInput = typeof texts === 'string' || texts instanceof String;\n        if (stringInput) {\n            texts = [texts];\n        }\n\n        this.tokenizer.padding_side = 'left';\n        let inputs = this.tokenizer(texts, {\n            padding: true,\n            truncation: true,\n        });\n\n        let input_ids = inputs.input_ids;\n        let attention_mask = inputs.attention_mask;\n\n        let outputTokenIds = await this.model.generate(input_ids, generate_kwargs, null, {\n            inputs_attention_mask: attention_mask\n        });\n\n        const decoded = this.tokenizer.batch_decode(outputTokenIds, {\n            skip_special_tokens: true,\n        });\n        const toReturn = Array.from({ length: texts.length }, _ => []);\n        for (let i = 0; i < decoded.length; ++i) {\n            const textIndex = Math.floor(i / outputTokenIds.length * texts.length);\n\n            toReturn[textIndex].push({\n                generated_text: decoded[i]\n            });\n        }\n        return (stringInput && toReturn.length === 1) ? toReturn[0] : toReturn;\n    }\n}\n\n/**\n * NLI-based zero-shot classification pipeline using a `ModelForSequenceClassification`\n * trained on NLI (natural language inference) tasks. Equivalent of `text-classification`\n * pipelines, but these models don't require a hardcoded number of potential classes, they\n * can be chosen at runtime. It usually means it's slower but it is **much** more flexible.\n * \n * **Example:** Zero shot classification with `Xenova/mobilebert-uncased-mnli`.\n * ```javascript\n * let text = 'Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.';\n * let labels = [ 'mobile', 'billing', 'website', 'account access' ];\n * let classifier = await pipeline('zero-shot-classification', 'Xenova/mobilebert-uncased-mnli');\n * let output = await classifier(text, labels);\n * // {\n * //   sequence: 'Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.',\n * //   labels: [ 'mobile', 'website', 'billing', 'account access' ],\n * //   scores: [ 0.5562091040482018, 0.1843621307860853, 0.13942646639336376, 0.12000229877234923 ]\n * // }\n * ```\n * \n * **Example:** Zero shot classification with `Xenova/nli-deberta-v3-xsmall` (multi-label).\n * ```javascript\n * let text = 'I have a problem with my iphone that needs to be resolved asap!';\n * let labels = [ 'urgent', 'not urgent', 'phone', 'tablet', 'computer' ];\n * let classifier = await pipeline('zero-shot-classification', 'Xenova/nli-deberta-v3-xsmall');\n * let output = await classifier(text, labels, { multi_label: true });\n * // {\n * //   sequence: 'I have a problem with my iphone that needs to be resolved asap!',\n * //   labels: [ 'urgent', 'phone', 'computer', 'tablet', 'not urgent' ],\n * //   scores: [ 0.9958870956360275, 0.9923963400697035, 0.002333537946160235, 0.0015134138567598765, 0.0010699384208377163 ]\n * // }\n * ```\n */\nexport class ZeroShotClassificationPipeline extends Pipeline {\n\n    /**\n     * Create a new ZeroShotClassificationPipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {PreTrainedTokenizer} [options.tokenizer] The tokenizer to use.\n     */\n    constructor(options) {\n        super(options);\n\n        // Use model config to get label2id mapping\n        this.label2id = Object.fromEntries(\n            Object.entries(this.model.config.label2id).map(\n                ([k, v]) => [k.toLowerCase(), v]\n            )\n        );\n\n        this.entailment_id = this.label2id['entailment'];\n        if (this.entailment_id === undefined) {\n            console.warn(\"Could not find 'entailment' in label2id mapping. Using 2 as entailment_id.\");\n            this.entailment_id = 2;\n        }\n\n        this.contradiction_id = this.label2id['contradiction'] ?? this.label2id['not_entailment'];\n        if (this.contradiction_id === undefined) {\n            console.warn(\"Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id.\");\n            this.contradiction_id = 0;\n        }\n    }\n    /**\n     * @param {any[]} texts\n     * @param {string[]} candidate_labels\n     * @param {Object} options Additional options:\n     * @param {string} [options.hypothesis_template=\"This example is {}.\"] The template used to turn each\n     * candidate label into an NLI-style hypothesis. The candidate label will replace the {} placeholder.\n     * @param {boolean} [options.multi_label=false] Whether or not multiple candidate labels can be true.\n     * If `false`, the scores are normalized such that the sum of the label likelihoods for each sequence\n     * is 1. If `true`, the labels are considered independent and probabilities are normalized for each\n     * candidate by doing a softmax of the entailment score vs. the contradiction score.\n     * @return {Promise<Object|Object[]>} The prediction(s), as a map (or list of maps) from label to score.\n     */\n    async _call(texts, candidate_labels, {\n        hypothesis_template = \"This example is {}.\",\n        multi_label = false,\n    } = {}) {\n\n        let isBatched = Array.isArray(texts);\n\n        if (!isBatched) {\n            texts = [texts];\n        }\n        if (!Array.isArray(candidate_labels)) {\n            candidate_labels = [candidate_labels];\n        }\n\n        // Insert labels into hypothesis template\n        let hypotheses = candidate_labels.map(\n            x => hypothesis_template.replace('{}', x)\n        );\n\n        // How to perform the softmax over the logits:\n        //  - true:  softmax over the entailment vs. contradiction dim for each label independently\n        //  - false: softmax the \"entailment\" logits over all candidate labels\n        let softmaxEach = multi_label || candidate_labels.length === 1;\n\n        let toReturn = [];\n        for (let premise of texts) {\n            let entails_logits = [];\n\n            for (let hypothesis of hypotheses) {\n                let inputs = this.tokenizer(premise, {\n                    text_pair: hypothesis,\n                    padding: true,\n                    truncation: true,\n                })\n                let outputs = await this.model(inputs)\n\n                if (softmaxEach) {\n                    entails_logits.push([\n                        outputs.logits.data[this.contradiction_id],\n                        outputs.logits.data[this.entailment_id]\n                    ])\n                } else {\n                    entails_logits.push(outputs.logits.data[this.entailment_id])\n                }\n            }\n\n            let scores;\n            if (softmaxEach) {\n                scores = entails_logits.map(x => softmax(x)[1]);\n            } else {\n                scores = softmax(entails_logits);\n            }\n\n            // Sort by scores (desc) and return scores with indices\n            let scores_sorted = scores\n                .map((x, i) => [x, i])\n                .sort((a, b) => {\n                    return b[0] - a[0];\n                });\n\n            toReturn.push({\n                sequence: premise,\n                labels: scores_sorted.map(x => candidate_labels[x[1]]),\n                scores: scores_sorted.map(x => x[0]),\n            });\n        }\n        return isBatched ? toReturn : toReturn[0];\n    }\n}\n\n\n/**\n * Feature extraction pipeline using no model head. This pipeline extracts the hidden\n * states from the base transformer, which can be used as features in downstream tasks.\n * \n * **Example:** Run feature extraction with `bert-base-uncased` (without pooling/normalization).\n * ```javascript\n * let extractor = await pipeline('feature-extraction', 'Xenova/bert-base-uncased', { revision: 'default' });\n * let output = await extractor('This is a simple test.');\n * // Tensor {\n * //   type: 'float32',\n * //   data: Float32Array [0.05939924716949463, 0.021655935794115067, ...],\n * //   dims: [1, 8, 768]\n * // }\n * ```\n * \n * **Example:** Run feature extraction with `bert-base-uncased` (with pooling/normalization).\n * ```javascript\n * let extractor = await pipeline('feature-extraction', 'Xenova/bert-base-uncased', { revision: 'default' });\n * let output = await extractor('This is a simple test.', { pooling: 'mean', normalize: true });\n * // Tensor {\n * //   type: 'float32',\n * //   data: Float32Array [0.03373778983950615, -0.010106077417731285, ...],\n * //   dims: [1, 768]\n * // }\n * ```\n * \n * **Example:** Calculating embeddings with `sentence-transformers` models.\n * ```javascript\n * let extractor = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');\n * let output = await extractor('This is a simple test.', { pooling: 'mean', normalize: true });\n * // Tensor {\n * //   type: 'float32',\n * //   data: Float32Array [0.09094982594251633, -0.014774246141314507, ...],\n * //   dims: [1, 384]\n * // }\n * ```\n */\nexport class FeatureExtractionPipeline extends Pipeline {\n\n    /**\n     * Extract the features of the input(s).\n     * \n     * @param {string|string[]} texts The input texts\n     * @param {Object} options Additional options:\n     * @param {string} [options.pooling=\"none\"] The pooling method to use. Can be one of: \"none\", \"mean\".\n     * @param {boolean} [options.normalize=false] Whether or not to normalize the embeddings in the last dimension.\n     * @returns The features computed by the model.\n     */\n    async _call(texts, {\n        pooling = 'none',\n        normalize = false,\n    } = {}) {\n        let [inputs, outputs] = await super._call(texts);\n\n        // TODO: Provide warning to the user that they might be using model which was not exported\n        // specifically for feature extraction\n        // console.log(this.model.config)\n        // console.log(outputs)\n\n        let result = outputs.last_hidden_state ?? outputs.logits;\n        if (pooling === 'none') {\n            // Skip pooling\n        } else if (pooling === 'mean') {\n            result = mean_pooling(result, inputs.attention_mask);\n        } else {\n            throw Error(`Pooling method '${pooling}' not supported.`);\n        }\n\n        if (normalize) {\n            result = result.normalize(2, -1);\n        }\n\n        return result;\n    }\n}\n\n// TODO\n// export class SentenceSimilarityPipeline extends Pipeline {\n// }\n\n\n/**\n * Audio classification pipeline using any `AutoModelForAudioClassification`.\n * This pipeline predicts the class of a raw waveform or an audio file.\n * \n * **Example:** Perform audio classification.\n * ```javascript\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\n * let classifier = await pipeline('audio-classification', 'Xenova/wav2vec2-large-xlsr-53-gender-recognition-librispeech');\n * let output = await classifier(url);\n * // [\n * //   { label: 'male', score: 0.9981542229652405 },\n * //   { label: 'female', score: 0.001845747814513743 }\n * // ]\n * ```\n */\nexport class AudioClassificationPipeline extends Pipeline {\n\n    /**\n     * Create a new AudioClassificationPipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {Processor} [options.processor] The processor to use.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Preprocesses the input audio for the AutomaticSpeechRecognitionPipeline.\n     * @param {any} audio The audio to be preprocessed.\n     * @param {number} sampling_rate The sampling rate of the audio.\n     * @returns {Promise<Float32Array>} A promise that resolves to the preprocessed audio data.\n     * @private\n     */\n    async _preprocess(audio, sampling_rate) {\n        if (isString(audio)) {\n            audio = await read_audio(audio, sampling_rate);\n        }\n\n        return audio;\n    }\n\n    /**\n     * Executes the audio classification task.\n     * @param {any} audio The input audio files to be classified.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {number} [options.topk=5] The number of top predictions to be returned.\n     * @returns {Promise<Object[]|Object>} A promise that resolves to an array or object containing the predicted labels and scores.\n     */\n    async _call(audio, {\n        topk = 5\n    } = {}) {\n\n        let single = !Array.isArray(audio);\n        if (single) {\n            // @ts-ignore\n            audio = [audio];\n        }\n\n        const id2label = this.model.config.id2label;\n        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n\n        let toReturn = [];\n        for (let aud of audio) {\n            aud = await this._preprocess(aud, sampling_rate)\n\n            const inputs = await this.processor(aud);\n            const output = await this.model(inputs);\n            const logits = output.logits[0];\n\n            let scores = getTopItems(softmax(logits.data), topk);\n\n            let vals = scores.map(function (x) {\n                return {\n                    label: id2label[x[0]],\n                    score: x[1],\n                }\n            });\n            if (topk === 1) {\n                toReturn.push(...vals);\n            } else {\n                toReturn.push(vals);\n            }\n        }\n        return !single || topk === 1 ? toReturn : toReturn[0];\n    }\n}\n\n\n/**\n * Pipeline that aims at extracting spoken text contained within some audio.\n *\n * **Example:** Transcribe English.\n * ```javascript\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\n * let transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\n * let output = await transcriber(url);\n * // { text: \" And so my fellow Americans ask not what your country can do for you, ask what you can do for your country.\" }\n * ```\n * \n * **Example:** Transcribe English w/ timestamps.\n * ```javascript\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\n * let transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\n * let output = await transcriber(url, { return_timestamps: true });\n * // {\n * //   text: \" And so my fellow Americans ask not what your country can do for you, ask what you can do for your country.\"\n * //   chunks: [\n * //     { timestamp: [0, 8],  text: \" And so my fellow Americans ask not what your country can do for you\" }\n * //     { timestamp: [8, 11], text: \" ask what you can do for your country.\" }\n * //   ]\n * // }\n * ```\n * \n * **Example:** Transcribe English w/ word-level timestamps.\n * ```javascript\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\n * let transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en', {\n *     revision: 'output_attentions',\n * });\n * let output = await transcriber(url, { return_timestamps: 'word' });\n * // {\n * //   \"text\": \" And so my fellow Americans ask not what your country can do for you ask what you can do for your country.\",\n * //   \"chunks\": [\n * //     { \"text\": \" And\", \"timestamp\": [0, 0.78] },\n * //     { \"text\": \" so\", \"timestamp\": [0.78, 1.06] },\n * //     { \"text\": \" my\", \"timestamp\": [1.06, 1.46] },\n * //     ...\n * //     { \"text\": \" for\", \"timestamp\": [9.72, 9.92] },\n * //     { \"text\": \" your\", \"timestamp\": [9.92, 10.22] },\n * //     { \"text\": \" country.\", \"timestamp\": [10.22, 13.5] }\n * //   ]\n * // }\n * ```\n * \n * **Example:** Transcribe French.\n * ```javascript\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/french-audio.mp3';\n * let transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small');\n * let output = await transcriber(url, { language: 'french', task: 'transcribe' });\n * // { text: \" J'adore, j'aime, je n'aime pas, je déteste.\" }\n * ```\n * \n * **Example:** Translate French to English.\n * ```javascript\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/french-audio.mp3';\n * let transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small');\n * let output = await transcriber(url, { language: 'french', task: 'translate' });\n * // { text: \" I love, I like, I don't like, I hate.\" }\n * ```\n * \n * **Example:** Transcribe/translate audio longer than 30 seconds.\n * ```javascript\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/ted_60.wav';\n * let transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\n * let output = await transcriber(url, { chunk_length_s: 30, stride_length_s: 5 });\n * // { text: \" So in college, I was a government major, which means [...] So I'd start off light and I'd bump it up\" }\n * ```\n */\nexport class AutomaticSpeechRecognitionPipeline extends Pipeline {\n\n    /**\n     * Create a new AutomaticSpeechRecognitionPipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {PreTrainedTokenizer} [options.tokenizer] The tokenizer to use.\n     * @param {Processor} [options.processor] The processor to use.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Preprocesses the input audio for the AutomaticSpeechRecognitionPipeline.\n     * @param {any} audio The audio to be preprocessed.\n     * @param {number} sampling_rate The sampling rate of the audio.\n     * @returns {Promise<Float32Array>} A promise that resolves to the preprocessed audio data.\n     * @private\n     */\n    async _preprocess(audio, sampling_rate) {\n        if (isString(audio)) {\n            audio = await read_audio(audio, sampling_rate);\n        }\n\n        return audio;\n    }\n\n    /**\n     * @typedef {{stride: number[], input_features: import('./utils/tensor.js').Tensor, is_last: boolean, tokens?: number[], token_timestamps?: number[]}} Chunk\n     * \n     * @callback ChunkCallback\n     * @param {Chunk} chunk The chunk to process.\n     */\n\n    /**\n     * Asynchronously processes audio and generates text transcription using the model.\n     * @param {Float32Array|Float32Array[]} audio The audio to be transcribed. Can be a single Float32Array or an array of Float32Arrays.\n     * @param {Object} [kwargs={}] Optional arguments.\n     * @param {boolean|'word'} [kwargs.return_timestamps] Whether to return timestamps or not. Default is `false`.\n     * @param {number} [kwargs.chunk_length_s] The length of audio chunks to process in seconds. Default is 0 (no chunking).\n     * @param {number} [kwargs.stride_length_s] The length of overlap between consecutive audio chunks in seconds. If not provided, defaults to `chunk_length_s / 6`.\n     * @param {ChunkCallback} [kwargs.chunk_callback] Callback function to be called with each chunk processed.\n     * @param {boolean} [kwargs.force_full_sequences] Whether to force outputting full sequences or not. Default is `false`.\n     * @param {string} [kwargs.language] The source language. Default is `null`, meaning it should be auto-detected. Use this to potentially improve performance if the source language is known.\n     * @param {string} [kwargs.task] The task to perform. Default is `null`, meaning it should be auto-detected.\n     * @param {number[][]} [kwargs.forced_decoder_ids] A list of pairs of integers which indicates a mapping from generation indices to token indices\n     * that will be forced before sampling. For example, [[1, 123]] means the second generated token will always be a token of index 123.\n     * @returns {Promise<Object>} A Promise that resolves to an object containing the transcription text and optionally timestamps if `return_timestamps` is `true`.\n     */\n    async _call(audio, kwargs = {}) {\n        switch (this.model.config.model_type) {\n            case 'whisper':\n                return this._call_whisper(audio, kwargs)\n            case 'wav2vec2':\n                return this._call_wav2vec2(audio, kwargs)\n            default:\n                throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)\n        }\n    }\n\n    /** @private */\n    async _call_wav2vec2(audio, kwargs = {}) {\n        // TODO use kwargs\n\n        if (kwargs.language) {\n            console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to \"English\".');\n        }\n        if (kwargs.task) {\n            console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to \"transcribe\".');\n        }\n\n        let single = !Array.isArray(audio);\n        if (single) {\n            // @ts-ignore\n            audio = [audio];\n        }\n\n        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n\n        let toReturn = [];\n        for (let aud of audio) {\n            aud = await this._preprocess(aud, sampling_rate)\n\n            const inputs = await this.processor(aud);\n            const output = await this.model(inputs);\n            const logits = output.logits[0];\n\n            const predicted_ids = [];\n            for (let item of logits) {\n                predicted_ids.push(max(item.data)[1])\n            }\n            const predicted_sentences = this.tokenizer.decode(predicted_ids)\n            toReturn.push({ text: predicted_sentences })\n        }\n        return single ? toReturn[0] : toReturn;\n    }\n\n    /** @private */\n    async _call_whisper(audio, kwargs = {}) {\n        let return_timestamps = kwargs.return_timestamps ?? false;\n        let chunk_length_s = kwargs.chunk_length_s ?? 0;\n        let stride_length_s = kwargs.stride_length_s ?? null;\n        let chunk_callback = kwargs.chunk_callback ?? null;\n        let force_full_sequences = kwargs.force_full_sequences ?? false;\n\n        if (return_timestamps === 'word') {\n            kwargs['return_token_timestamps'] = true;\n        }\n\n        let language = pop(kwargs, 'language', null);\n        let task = pop(kwargs, 'task', null);\n\n        if (language || task || return_timestamps) {\n            if (kwargs.forced_decoder_ids) {\n                throw new Error(\"Cannot specify `language`/`task`/`return_timestamps` and `forced_decoder_ids` at the same time.\")\n            }\n            // @ts-ignore\n            let decoder_prompt_ids = this.tokenizer.get_decoder_prompt_ids({ language, task, no_timestamps: !return_timestamps })\n            if (decoder_prompt_ids.length > 0) {\n                kwargs.forced_decoder_ids = decoder_prompt_ids;\n            }\n        }\n\n        let single = !Array.isArray(audio);\n        if (single) {\n            // @ts-ignore\n            audio = [audio];\n        }\n\n        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n        const time_precision = this.processor.feature_extractor.config.chunk_length / this.model.config.max_source_positions;\n        const hop_length = this.processor.feature_extractor.config.hop_length;\n\n        let toReturn = [];\n        for (let aud of audio) {\n            aud = await this._preprocess(aud, sampling_rate)\n\n            /** @type {Chunk[]} */\n            let chunks = [];\n            if (chunk_length_s > 0) {\n                if (stride_length_s === null) {\n                    stride_length_s = chunk_length_s / 6;\n                } else if (chunk_length_s <= stride_length_s) {\n                    throw Error(\"`chunk_length_s` must be larger than `stride_length_s`.\")\n                }\n\n                // TODO support different stride_length_s (for left and right)\n\n                const window = sampling_rate * chunk_length_s;\n                const stride = sampling_rate * stride_length_s;\n                const jump = window - 2 * stride;\n                let offset = 0;\n\n                // Create subarrays of audio with overlaps\n\n                while (offset < aud.length) {\n                    let subarr = aud.subarray(offset, offset + window);\n                    let feature = await this.processor(subarr);\n\n                    let isFirst = offset === 0;\n                    let isLast = offset + jump >= aud.length;\n                    chunks.push({\n                        stride: [\n                            subarr.length,\n                            isFirst ? 0 : stride,\n                            isLast ? 0 : stride\n                        ],\n                        input_features: feature.input_features,\n                        is_last: isLast\n                    })\n                    offset += jump;\n                }\n\n            } else {\n                chunks = [{\n                    stride: [aud.length, 0, 0],\n                    input_features: (await this.processor(aud)).input_features,\n                    is_last: true\n                }]\n            }\n\n            // Generate for each set of input features\n            for (let chunk of chunks) {\n                kwargs.num_frames = Math.floor(chunk.stride[0] / hop_length);\n\n                // NOTE: doing sequentially for now\n                let data = await this.model.generate(chunk.input_features, kwargs);\n\n                // TODO: Right now we only get top beam\n                if (return_timestamps === 'word') {\n                    chunk.tokens = data.sequences[0];\n                    chunk.token_timestamps = data.token_timestamps.tolist()[0].map(\n                        x => round(x, 2)\n                    );\n\n                } else {\n                    chunk.tokens = data[0];\n                }\n\n                // convert stride to seconds\n                chunk.stride = chunk.stride.map(x => x / sampling_rate);\n\n                if (chunk_callback !== null) {\n                    chunk_callback(chunk)\n                }\n            }\n\n            // Merge text chunks\n            // @ts-ignore\n            let [full_text, optional] = this.tokenizer._decode_asr(chunks, {\n                time_precision, return_timestamps, force_full_sequences\n            });\n\n            toReturn.push({ text: full_text, ...optional })\n        }\n        return single ? toReturn[0] : toReturn;\n    }\n}\n\n/**\n * Image To Text pipeline using a `AutoModelForVision2Seq`. This pipeline predicts a caption for a given image.\n * \n * **Example:** Generate a caption for an image w/ `Xenova/vit-gpt2-image-captioning`.\n * ```javascript\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\n * let captioner = await pipeline('image-to-text', 'Xenova/vit-gpt2-image-captioning');\n * let output = await captioner(url);\n * // [{ generated_text: 'a cat laying on a couch with another cat' }]\n * ```\n */\nexport class ImageToTextPipeline extends Pipeline {\n    /**\n     * Create a new ImageToTextPipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {PreTrainedTokenizer} [options.tokenizer] The tokenizer to use.\n     * @param {Processor} [options.processor] The processor to use.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Assign labels to the image(s) passed as inputs.\n     * @param {any[]} images The images to be captioned.\n     * @param {Object} [generate_kwargs={}] Optional generation arguments.\n     * @returns {Promise<Object|Object[]>} A Promise that resolves to an object (or array of objects) containing the generated text(s).\n     */\n    async _call(images, generate_kwargs = {}) {\n        let isBatched = Array.isArray(images);\n\n        images = await prepareImages(images);\n\n        let { pixel_values } = await this.processor(images);\n\n        let toReturn = [];\n        for (let batch of pixel_values) {\n            batch.dims = [1, ...batch.dims]\n            let output = await this.model.generate(batch, generate_kwargs);\n            let decoded = this.tokenizer.batch_decode(output, {\n                skip_special_tokens: true,\n            }).map(x => {\n                return { generated_text: x.trim() }\n            })\n            toReturn.push(decoded);\n        }\n\n        return isBatched ? toReturn : toReturn[0];\n    }\n}\n\n/**\n * Image classification pipeline using any `AutoModelForImageClassification`.\n * This pipeline predicts the class of an image.\n * \n * **Example:** Classify an image.\n * ```javascript\n * let classifier = await pipeline('image-classification', 'Xenova/vit-base-patch16-224');\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\n * let output = await classifier(url);\n * // [\n * //   {label: 'tiger, Panthera tigris', score: 0.632695734500885},\n * // ]\n * ```\n * \n * **Example:** Classify an image and return top `n` classes.\n * ```javascript\n * let classifier = await pipeline('image-classification', 'Xenova/vit-base-patch16-224');\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\n * let output = await classifier(url, { topk: 3 });\n * // [\n * //   { label: 'tiger, Panthera tigris', score: 0.632695734500885 },\n * //   { label: 'tiger cat', score: 0.3634825646877289 },\n * //   { label: 'lion, king of beasts, Panthera leo', score: 0.00045060308184474707 },\n * // ]\n * ```\n * \n * **Example:** Classify an image and return all classes.\n * ```javascript\n * let classifier = await pipeline('image-classification', 'Xenova/vit-base-patch16-224');\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\n * let output = await classifier(url, { topk: 0 });\n * // [\n * //   {label: 'tiger, Panthera tigris', score: 0.632695734500885},\n * //   {label: 'tiger cat', score: 0.3634825646877289},\n * //   {label: 'lion, king of beasts, Panthera leo', score: 0.00045060308184474707},\n * //   {label: 'jaguar, panther, Panthera onca, Felis onca', score: 0.00035465499968267977},\n * //   ...\n * // ]\n * ```\n */\nexport class ImageClassificationPipeline extends Pipeline {\n    /**\n     * Create a new ImageClassificationPipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {Processor} [options.processor] The processor to use.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Classify the given images.\n     * @param {any} images The images to classify.\n     * @param {Object} options The options to use for classification.\n     * @param {number} [options.topk=1] The number of top results to return.\n     * @returns {Promise<any>} The top classification results for the images.\n     */\n    async _call(images, {\n        topk = 1\n    } = {}) {\n        let isBatched = Array.isArray(images);\n        images = await prepareImages(images);\n\n        let { pixel_values } = await this.processor(images);\n        let output = await this.model({ pixel_values });\n\n        let id2label = this.model.config.id2label;\n        let toReturn = [];\n        for (let batch of output.logits) {\n            let scores = getTopItems(softmax(batch.data), topk);\n\n            let vals = scores.map(function (x) {\n                return {\n                    label: id2label[x[0]],\n                    score: x[1],\n                }\n            });\n            if (topk === 1) {\n                toReturn.push(...vals);\n            } else {\n                toReturn.push(vals);\n            }\n        }\n\n        return isBatched || topk === 1 ? toReturn : toReturn[0];\n    }\n\n}\n\n/**\n * Image segmentation pipeline using any `AutoModelForXXXSegmentation`.\n * This pipeline predicts masks of objects and their classes.\n * \n * **Example:** Perform image segmentation with `Xenova/detr-resnet-50-panoptic`.\n * ```javascript\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\n * let segmenter = await pipeline('image-segmentation', 'Xenova/detr-resnet-50-panoptic');\n * let output = await segmenter(url);\n * // [\n * //   { label: 'remote', score: 0.9984649419784546, mask: RawImage { ... } },\n * //   { label: 'cat', score: 0.9994316101074219, mask: RawImage { ... } }\n * // ]\n * ```\n */\nexport class ImageSegmentationPipeline extends Pipeline {\n    /**\n     * Create a new ImageSegmentationPipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {Processor} [options.processor] The processor to use.\n     */\n    constructor(options) {\n        super(options);\n\n        this.subtasks_mapping = {\n            // Mapping of subtasks to their corresponding post-processing function names.\n            panoptic: 'post_process_panoptic_segmentation',\n            instance: 'post_process_instance_segmentation',\n            semantic: 'post_process_semantic_segmentation'\n        }\n    }\n\n    /**\n     * Segment the input images.\n     * @param {Array} images The input images.\n     * @param {Object} options The options to use for segmentation.\n     * @param {number} [options.threshold=0.5] Probability threshold to filter out predicted masks.\n     * @param {number} [options.mask_threshold=0.5] Threshold to use when turning the predicted masks into binary values.\n     * @param {number} [options.overlap_mask_area_threshold=0.8] Mask overlap threshold to eliminate small, disconnected segments.\n     * @param {null|string} [options.subtask=null] Segmentation task to be performed. One of [`panoptic`, `instance`, and `semantic`], depending on model capabilities. If not set, the pipeline will attempt to resolve (in that order).\n     * @param {Array} [options.label_ids_to_fuse=null] List of label ids to fuse. If not set, do not fuse any labels.\n     * @param {Array} [options.target_sizes=null] List of target sizes for the input images. If not set, use the original image sizes.\n     * @returns {Promise<Array>} The annotated segments.\n     */\n    async _call(images, {\n        threshold = 0.5,\n        mask_threshold = 0.5,\n        overlap_mask_area_threshold = 0.8,\n        label_ids_to_fuse = null,\n        target_sizes = null,\n        subtask = null, // TODO use\n    } = {}) {\n        let isBatched = Array.isArray(images);\n\n        if (isBatched && images.length !== 1) {\n            throw Error(\"Image segmentation pipeline currently only supports a batch size of 1.\");\n        }\n\n        images = await prepareImages(images);\n        let imageSizes = images.map(x => [x.height, x.width]);\n\n        let { pixel_values, pixel_mask } = await this.processor(images);\n        let output = await this.model({ pixel_values, pixel_mask });\n\n        let fn = null;\n        if (subtask !== null) {\n            fn = this.subtasks_mapping[subtask];\n        } else {\n            for (let [task, func] of Object.entries(this.subtasks_mapping)) {\n                if (func in this.processor.feature_extractor) {\n                    fn = this.processor.feature_extractor[func].bind(this.processor.feature_extractor);\n                    subtask = task;\n                    break;\n                }\n            }\n        }\n\n        // add annotations\n        let annotation = [];\n\n        if (subtask === 'panoptic' || subtask === 'instance') {\n\n            let processed = fn(\n                output,\n                threshold,\n                mask_threshold,\n                overlap_mask_area_threshold,\n                label_ids_to_fuse,\n                target_sizes ?? imageSizes, // TODO FIX?\n            )[0];\n\n            let segmentation = processed.segmentation;\n            let id2label = this.model.config.id2label;\n\n            for (let segment of processed.segments_info) {\n                let maskData = new Uint8ClampedArray(segmentation.data.length);\n                for (let i = 0; i < segmentation.data.length; ++i) {\n                    if (segmentation.data[i] === segment.id) {\n                        maskData[i] = 255;\n                    }\n                }\n\n                let mask = new RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1)\n\n                annotation.push({\n                    score: segment.score,\n                    label: id2label[segment.label_id],\n                    mask: mask\n                })\n            }\n\n        } else if (subtask === 'semantic') {\n            throw Error(`semantic segmentation not yet supported.`);\n\n        } else {\n            throw Error(`Subtask ${subtask} not supported.`);\n        }\n\n        return annotation;\n    }\n}\n\n\n/**\n * Zero shot image classification pipeline. This pipeline predicts the class of\n * an image when you provide an image and a set of `candidate_labels`.\n * \n * **Example:** Zero shot image classification w/ `Xenova/clip-vit-base-patch32`.\n * ```javascript\n * let classifier = await pipeline('zero-shot-image-classification', 'Xenova/clip-vit-base-patch32');\n * let url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\n * let output = await classifier(url, ['tiger', 'horse', 'dog']);\n * // [\n * //   { score: 0.9993917942047119, label: 'tiger' },\n * //   { score: 0.0003519294841680676, label: 'horse' },\n * //   { score: 0.0002562698791734874, label: 'dog' }\n * // ]\n * ```\n */\nexport class ZeroShotImageClassificationPipeline extends Pipeline {\n\n    /**\n     * Create a new ZeroShotImageClassificationPipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {PreTrainedTokenizer} [options.tokenizer] The tokenizer to use.\n     * @param {Processor} [options.processor] The processor to use.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Classify the input images with candidate labels using a zero-shot approach.\n     * @param {Array} images The input images.\n     * @param {string[]} candidate_labels The candidate labels.\n     * @param {Object} options The options for the classification.\n     * @param {string} [options.hypothesis_template] The hypothesis template to use for zero-shot classification. Default: \"This is a photo of {}\".\n     * @returns {Promise<any>} An array of classifications for each input image or a single classification object if only one input image is provided.\n     */\n    async _call(images, candidate_labels, {\n        hypothesis_template = \"This is a photo of {}\"\n    } = {}) {\n        let isBatched = Array.isArray(images);\n        images = await prepareImages(images);\n\n        // Insert label into hypothesis template \n        let texts = candidate_labels.map(\n            x => hypothesis_template.replace('{}', x)\n        );\n\n        // Run tokenization\n        let text_inputs = this.tokenizer(texts, {\n            padding: true,\n            truncation: true\n        });\n\n        // Run processor\n        let { pixel_values } = await this.processor(images);\n\n        // Run model with both text and pixel inputs\n        let output = await this.model({ ...text_inputs, pixel_values });\n\n        // Compare each image with each candidate label\n        let toReturn = [];\n        for (let batch of output.logits_per_image) {\n            // Compute softmax per image\n            let probs = softmax(batch.data);\n\n            toReturn.push([...probs].map((x, i) => {\n                return {\n                    score: x,\n                    label: candidate_labels[i]\n                }\n            }));\n        }\n\n        return isBatched ? toReturn : toReturn[0];\n    }\n}\n\n/**\n * Object detection pipeline using any `AutoModelForObjectDetection`.\n * This pipeline predicts bounding boxes of objects and their classes.\n * \n * **Example:** Run object-detection with `facebook/detr-resnet-50`.\n * ```javascript\n * let img = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\n * \n * let detector = await pipeline('object-detection', 'Xenova/detr-resnet-50');\n * let output = await detector(img, { threshold: 0.9 });\n * // [{\n * //   \"score\": 0.9976370930671692,\n * //   \"label\": \"remote\",\n * //   \"box\": { \"xmin\": 31, \"ymin\": 68, \"xmax\": 190, \"ymax\": 118 }\n * // },\n * // ...\n * // {\n * //   \"score\": 0.9984092116355896,\n * //   \"label\": \"cat\",\n * //   \"box\": { \"xmin\": 331, \"ymin\": 19, \"xmax\": 649, \"ymax\": 371 }\n * // }]\n * ```\n */\nexport class ObjectDetectionPipeline extends Pipeline {\n    /**\n     * Create a new ObjectDetectionPipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {Processor} [options.processor] The processor to use.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Detect objects (bounding boxes & classes) in the image(s) passed as inputs.\n     * @param {any[]} images The input images.\n     * @param {Object} options The options for the object detection.\n     * @param {number} [options.threshold=0.9] The threshold used to filter boxes by score.\n     * @param {boolean} [options.percentage=false] Whether to return the boxes coordinates in percentage (true) or in pixels (false).\n     */\n    async _call(images, {\n        threshold = 0.9,\n        percentage = false,\n    } = {}) {\n        let isBatched = Array.isArray(images);\n\n        if (isBatched && images.length !== 1) {\n            throw Error(\"Object detection pipeline currently only supports a batch size of 1.\");\n        }\n        images = await prepareImages(images);\n\n        let imageSizes = percentage ? null : images.map(x => [x.height, x.width]);\n\n        let { pixel_values, pixel_mask } = await this.processor(images);\n        let output = await this.model({ pixel_values, pixel_mask });\n\n        // @ts-ignore\n        let processed = this.processor.feature_extractor.post_process_object_detection(output, threshold, imageSizes);\n\n        // Add labels\n        let id2label = this.model.config.id2label;\n\n        // Format output\n        const result = processed.map(batch => {\n            return batch.boxes.map((box, i) => {\n                return {\n                    score: batch.scores[i],\n                    label: id2label[batch.classes[i]],\n                    box: this._get_bounding_box(box, !percentage),\n                }\n            })\n        })\n\n        return isBatched ? result : result[0];\n    }\n\n    /**\n     * Helper function to convert list [xmin, xmax, ymin, ymax] into object { \"xmin\": xmin, ... }\n     * @param {number[]} box The bounding box as a list.\n     * @param {boolean} asInteger Whether to cast to integers.\n     * @returns {Object} The bounding box as an object.\n     * @private\n     */\n    _get_bounding_box(box, asInteger) {\n        if (asInteger) {\n            box = box.map(x => x | 0);\n        }\n        const [xmin, ymin, xmax, ymax] = box;\n\n        return { xmin, ymin, xmax, ymax };\n    }\n}\n\n/**\n * Document Question Answering pipeline using any `AutoModelForDocumentQuestionAnswering`.\n * The inputs/outputs are similar to the (extractive) question answering pipeline; however,\n * the pipeline takes an image (and optional OCR'd words/boxes) as input instead of text context.\n * \n * **Example:** Answer questions about a document with `Xenova/donut-base-finetuned-docvqa`.\n * ```javascript\n * let image = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/invoice.png';\n * let question = 'What is the invoice number?';\n * \n * let qa_pipeline = await pipeline('document-question-answering', 'Xenova/donut-base-finetuned-docvqa');\n * let output = await qa_pipeline(image, question);\n * // [{ answer: 'us-001' }]\n * ```\n */\nexport class DocumentQuestionAnsweringPipeline extends Pipeline {\n    /**\n     * Create a new DocumentQuestionAnsweringPipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {PreTrainedTokenizer} [options.tokenizer] The tokenizer to use.\n     * @param {Processor} [options.processor] The processor to use.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Answer the question given as input by using the document.\n     * @param {any} image The image of the document to use.\n     * @param {string} question A question to ask of the document.\n     * @param {Object} [generate_kwargs={}] Optional generation arguments.\n     * @returns {Promise<Object|Object[]>} A Promise that resolves to an object (or array of objects) containing the generated text(s).\n     */\n    async _call(image, question, generate_kwargs = {}) {\n        // NOTE: For now, we only support a batch size of 1\n\n        // Preprocess image\n        image = (await prepareImages(image))[0];\n        const { pixel_values } = await this.processor(image);\n\n        // Run tokenization\n        const task_prompt = `<s_docvqa><s_question>${question}</s_question><s_answer>`;\n        const decoder_input_ids = this.tokenizer(task_prompt, {\n            add_special_tokens: false,\n            padding: true,\n            truncation: true\n        }).input_ids;\n\n        // Run model\n        const output = await this.model.generate(\n            pixel_values,\n            {\n                ...generate_kwargs,\n                decoder_input_ids,\n                max_length: this.model.config.decoder.max_position_embeddings,\n            }\n        );\n\n        // Decode output\n        const decoded = this.tokenizer.batch_decode(output)[0];\n\n        // Parse answer\n        const match = decoded.match(/<s_answer>(.*?)<\\/s_answer>/);\n        let answer = null;\n        if (match && match.length >= 2) {\n            answer = match[1].trim();\n        }\n        return [{ answer }];\n    }\n}\n\n/**\n * Text-to-audio generation pipeline using any `AutoModelForTextToWaveform` or `AutoModelForTextToSpectrogram`.\n * This pipeline generates an audio file from an input text and optional other conditional inputs.\n * \n * **Example:** Generate audio from text with `Xenova/speecht5_tts`.\n * ```js\n * let speaker_embeddings = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/speaker_embeddings.bin';\n * let synthesizer = await pipeline('text-to-speech', 'Xenova/speecht5_tts', { quantized: false });\n * let out = await synthesizer('Hello, my dog is cute', { speaker_embeddings });\n * // {\n * //   audio: Float32Array(26112) [-0.00005657337896991521, 0.00020583874720614403, ...],\n * //   sampling_rate: 16000\n * // }\n * ```\n * \n * You can then save the audio to a .wav file with the `wavefile` package:\n * ```js\n * import wavefile from 'wavefile';\n * import fs from 'fs';\n * \n * let wav = new wavefile.WaveFile();\n * wav.fromScratch(1, out.sampling_rate, '32f', out.audio);\n * fs.writeFileSync('out.wav', wav.toBuffer());\n * ```\n */\nexport class TextToAudioPipeline extends Pipeline {\n    DEFAULT_VOCODER_ID = \"Xenova/speecht5_hifigan\"\n\n    /**\n     * Create a new TextToAudioPipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model to use.\n     * @param {PreTrainedTokenizer} [options.tokenizer] The tokenizer to use.\n     * @param {Processor} [options.processor] The processor to use.\n     * @param {PreTrainedModel} [options.vocoder] The vocoder to use.\n     */\n    constructor(options) {\n        super(options);\n\n        // TODO: Find a better way for `pipeline` to set the default vocoder\n        this.vocoder = options.vocoder ?? null;\n    }\n\n    /**\n     * Generates speech/audio from the inputs.\n     * @param {string|string[]} text_inputs The text(s) to generate.\n     * @param {Object} options Parameters passed to the model generation/forward method.\n     * @param {PreTrainedModel} [options.vocoder=null] The vocoder to use (if the model uses one). If not provided, use the default HifiGan vocoder.\n     * @param {Tensor|Float32Array|string|URL} [options.speaker_embeddings=null]\n     * @returns {Promise<Object>} An object containing the generated audio and sampling rate.\n     */\n    async _call(text_inputs, {\n        speaker_embeddings = null,\n    } = {}) {\n        // Load vocoder, if not provided\n        if (!this.vocoder) {\n            console.log('No vocoder specified, using default HifiGan vocoder.');\n            this.vocoder = await AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID, { quantized: false });\n        }\n\n        // Load speaker embeddings as Float32Array from path/URL\n        if (typeof speaker_embeddings === 'string' || speaker_embeddings instanceof URL) {\n            // Load from URL with fetch\n            speaker_embeddings = new Float32Array(\n                await (await fetch(speaker_embeddings)).arrayBuffer()\n            );\n        }\n\n        if (speaker_embeddings instanceof Float32Array) {\n            speaker_embeddings = new Tensor(\n                'float32',\n                speaker_embeddings,\n                [1, speaker_embeddings.length]\n            )\n        } else if (!(speaker_embeddings instanceof Tensor)) {\n            throw new Error(\"Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.\")\n        }\n\n        // Run tokenization\n        const { input_ids } = this.tokenizer(text_inputs, {\n            padding: true,\n            truncation: true\n        });\n\n        // NOTE: At this point, we are guaranteed that `speaker_embeddings` is a `Tensor`\n        // @ts-ignore\n        const { waveform } = await this.model.generate_speech(input_ids, speaker_embeddings, { vocoder: this.vocoder });\n\n        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n        return {\n            audio: waveform.data,\n            sampling_rate,\n        }\n    }\n}\n\nconst SUPPORTED_TASKS = {\n    \"text-classification\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": TextClassificationPipeline,\n        \"model\": AutoModelForSequenceClassification,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"distilbert-base-uncased-finetuned-sst-2-english\",\n            \"model\": \"Xenova/distilbert-base-uncased-finetuned-sst-2-english\",\n        },\n        \"type\": \"text\",\n    },\n    \"token-classification\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": TokenClassificationPipeline,\n        \"model\": AutoModelForTokenClassification,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"Davlan/bert-base-multilingual-cased-ner-hrl\",\n            \"model\": \"Xenova/bert-base-multilingual-cased-ner-hrl\",\n        },\n        \"type\": \"text\",\n    },\n    \"question-answering\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": QuestionAnsweringPipeline,\n        \"model\": AutoModelForQuestionAnswering,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"distilbert-base-cased-distilled-squad\",\n            \"model\": \"Xenova/distilbert-base-cased-distilled-squad\",\n        },\n        \"type\": \"text\",\n    },\n\n    \"fill-mask\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": FillMaskPipeline,\n        \"model\": AutoModelForMaskedLM,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"bert-base-uncased\",\n            \"model\": \"Xenova/bert-base-uncased\",\n        },\n        \"type\": \"text\",\n    },\n    \"summarization\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": SummarizationPipeline,\n        \"model\": AutoModelForSeq2SeqLM,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"sshleifer/distilbart-cnn-6-6\",\n            \"model\": \"Xenova/distilbart-cnn-6-6\",\n        },\n        \"type\": \"text\",\n    },\n    \"translation\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": TranslationPipeline,\n        \"model\": AutoModelForSeq2SeqLM,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"t5-small\",\n            \"model\": \"Xenova/t5-small\",\n        },\n        \"type\": \"text\",\n    },\n    \"text2text-generation\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": Text2TextGenerationPipeline,\n        \"model\": AutoModelForSeq2SeqLM,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"google/flan-t5-small\",\n            \"model\": \"Xenova/flan-t5-small\",\n        },\n        \"type\": \"text\",\n    },\n    \"text-generation\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": TextGenerationPipeline,\n        \"model\": AutoModelForCausalLM,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"gpt2\",\n            \"model\": \"Xenova/gpt2\",\n        },\n        \"type\": \"text\",\n    },\n    \"zero-shot-classification\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": ZeroShotClassificationPipeline,\n        \"model\": AutoModelForSequenceClassification,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"typeform/distilbert-base-uncased-mnli\",\n            \"model\": \"Xenova/distilbert-base-uncased-mnli\",\n        },\n        \"type\": \"text\",\n    },\n    \"audio-classification\": {\n        \"pipeline\": AudioClassificationPipeline,\n        \"model\": AutoModelForAudioClassification,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"superb/wav2vec2-base-superb-ks\",\n            \"model\": \"Xenova/wav2vec2-base-superb-ks\",\n        },\n        \"type\": \"audio\",\n    },\n    \"automatic-speech-recognition\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": AutomaticSpeechRecognitionPipeline,\n        \"model\": [AutoModelForSpeechSeq2Seq, AutoModelForCTC],\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"openai/whisper-tiny.en\",\n            \"model\": \"Xenova/whisper-tiny.en\",\n        },\n        \"type\": \"multimodal\",\n    },\n    \"text-to-audio\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": TextToAudioPipeline,\n        \"model\": [ /* TODO: AutoModelForTextToWaveform, */ AutoModelForTextToSpectrogram],\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"microsoft/speecht5_tts\",\n            \"model\": \"Xenova/speecht5_tts\",\n        },\n        \"type\": \"text\",\n    },\n    \"image-to-text\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": ImageToTextPipeline,\n        \"model\": AutoModelForVision2Seq,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"nlpconnect/vit-gpt2-image-captioning\",\n            \"model\": \"Xenova/vit-gpt2-image-captioning\",\n        },\n        \"type\": \"multimodal\",\n    },\n\n    \"image-classification\": {\n        // no tokenizer\n        \"pipeline\": ImageClassificationPipeline,\n        \"model\": AutoModelForImageClassification,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"google/vit-base-patch16-224\",\n            \"model\": \"Xenova/vit-base-patch16-224\",\n        },\n        \"type\": \"multimodal\",\n    },\n\n    \"image-segmentation\": {\n        // no tokenizer\n        \"pipeline\": ImageSegmentationPipeline,\n        \"model\": AutoModelForImageSegmentation,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"facebook/detr-resnet-50-panoptic\",\n            \"model\": \"Xenova/detr-resnet-50-panoptic\",\n        },\n        \"type\": \"multimodal\",\n    },\n\n    \"zero-shot-image-classification\": {\n        // no tokenizer\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": ZeroShotImageClassificationPipeline,\n        \"model\": AutoModel,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"openai/clip-vit-base-patch32\",\n            \"model\": \"Xenova/clip-vit-base-patch32\",\n        },\n        \"type\": \"multimodal\",\n    },\n\n    \"object-detection\": {\n        // no tokenizer\n        \"pipeline\": ObjectDetectionPipeline,\n        \"model\": AutoModelForObjectDetection,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"facebook/detr-resnet-50\",\n            \"model\": \"Xenova/detr-resnet-50\",\n        },\n        \"type\": \"multimodal\",\n    },\n    \"document-question-answering\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": DocumentQuestionAnsweringPipeline,\n        \"model\": AutoModelForDocumentQuestionAnswering,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"naver-clova-ix/donut-base-finetuned-docvqa\",\n            \"model\": \"Xenova/donut-base-finetuned-docvqa\",\n        },\n        \"type\": \"multimodal\",\n    },\n\n    // This task serves as a useful interface for dealing with sentence-transformers (https://huggingface.co/sentence-transformers).\n    \"feature-extraction\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": FeatureExtractionPipeline,\n        \"model\": AutoModel,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"sentence-transformers/all-MiniLM-L6-v2\",\n            \"model\": \"Xenova/all-MiniLM-L6-v2\",\n        },\n        \"type\": \"text\",\n    },\n}\n\n\nconst TASK_ALIASES = {\n    \"sentiment-analysis\": \"text-classification\",\n    \"ner\": \"token-classification\",\n    \"vqa\": \"visual-question-answering\",\n    \"asr\": \"automatic-speech-recognition\",\n    \"text-to-speech\": \"text-to-audio\",\n\n    // Add for backwards compatibility\n    \"embeddings\": \"feature-extraction\",\n}\n\n/**\n * Utility factory method to build a [`Pipeline`] object.\n *\n * @param {string} task The task defining which pipeline will be returned. Currently accepted tasks are:\n *  - `\"audio-classification\"`: will return a `AudioClassificationPipeline`.\n *  - `\"automatic-speech-recognition\"`: will return a `AutomaticSpeechRecognitionPipeline`.\n *  - `\"document-question-answering\"`: will return a `DocumentQuestionAnsweringPipeline`.\n *  - `\"feature-extraction\"`: will return a `FeatureExtractionPipeline`.\n *  - `\"fill-mask\"`: will return a `FillMaskPipeline`.\n *  - `\"image-classification\"`: will return a `ImageClassificationPipeline`.\n *  - `\"image-segmentation\"`: will return a `ImageSegmentationPipeline`.\n *  - `\"image-to-text\"`: will return a `ImageToTextPipeline`.\n *  - `\"object-detection\"`: will return a `ObjectDetectionPipeline`.\n *  - `\"question-answering\"`: will return a `QuestionAnsweringPipeline`.\n *  - `\"summarization\"`: will return a `SummarizationPipeline`.\n *  - `\"text2text-generation\"`: will return a `Text2TextGenerationPipeline`.\n *  - `\"text-classification\"` (alias \"sentiment-analysis\" available): will return a `TextClassificationPipeline`.\n *  - `\"text-generation\"`: will return a `TextGenerationPipeline`.\n *  - `\"token-classification\"` (alias \"ner\" available): will return a `TokenClassificationPipeline`.\n *  - `\"translation\"`: will return a `TranslationPipeline`.\n *  - `\"translation_xx_to_yy\"`: will return a `TranslationPipeline`.\n *  - `\"zero-shot-classification\"`: will return a `ZeroShotClassificationPipeline`.\n *  - `\"zero-shot-image-classification\"`: will return a `ZeroShotImageClassificationPipeline`.\n * @param {string} [model=null] The name of the pre-trained model to use. If not specified, the default model for the task will be used.\n * @param {import('./utils/hub.js').PretrainedOptions} [options] Optional parameters for the pipeline.\n * @returns {Promise<Pipeline>} A Pipeline object for the specified task.\n * @throws {Error} If an unsupported pipeline is requested.\n */\nexport async function pipeline(\n    task,\n    model = null,\n    {\n        quantized = true,\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n    } = {}\n) {\n    // Helper method to construct pipeline\n\n    // Apply aliases\n    task = TASK_ALIASES[task] ?? task;\n\n    // Get pipeline info\n    let pipelineInfo = SUPPORTED_TASKS[task.split('_', 1)[0]];\n    if (!pipelineInfo) {\n        throw Error(`Unsupported pipeline: ${task}. Must be one of [${Object.keys(SUPPORTED_TASKS)}]`)\n    }\n\n    // Use model if specified, otherwise, use default\n    if (!model) {\n        model = pipelineInfo.default.model\n        console.log(`No model specified. Using default model: \"${model}\".`);\n    }\n\n    let pretrainedOptions = {\n        quantized,\n        progress_callback,\n        config,\n        cache_dir,\n        local_files_only,\n        revision,\n    }\n\n    const classes = new Map([\n        ['tokenizer', pipelineInfo.tokenizer],\n        ['model', pipelineInfo.model],\n        ['processor', pipelineInfo.processor],\n    ]);\n\n    // Load model, tokenizer, and processor (if they exist)\n    let results = await loadItems(classes, model, pretrainedOptions);\n    results.task = task;\n\n    dispatchCallback(progress_callback, {\n        'status': 'ready',\n        'task': task,\n        'model': model,\n    });\n\n    let pipelineClass = pipelineInfo.pipeline;\n    return new pipelineClass(results);\n}\n\n\n/**\n * Helper function to get applicable model, tokenizer, or processor classes for a given model.\n * @param {Map<string, any>} mapping The mapping of names to classes, arrays of classes, or null.\n * @param {string} model The name of the model to load.\n * @param {import('./utils/hub.js').PretrainedOptions} pretrainedOptions The options to pass to the `from_pretrained` method.\n * @private\n */\nasync function loadItems(mapping, model, pretrainedOptions) {\n\n    const result = Object.create(null);\n\n    /**@type {Promise[]} */\n    const promises = [];\n    for (let [name, cls] of mapping.entries()) {\n        if (!cls) continue;\n\n        /**@type {Promise} */\n        let promise;\n        if (Array.isArray(cls)) {\n            promise = new Promise(async (resolve, reject) => {\n                let e;\n                for (let c of cls) {\n                    try {\n                        resolve(await c.from_pretrained(model, pretrainedOptions));\n                        return;\n                    } catch (err) {\n                        e = err;\n                    }\n                }\n                reject(e);\n            })\n        } else {\n            promise = cls.from_pretrained(model, pretrainedOptions);\n        }\n\n        result[name] = promise;\n        promises.push(promise);\n    }\n\n    // Wait for all promises to resolve (in parallel)\n    await Promise.all(promises);\n\n    // Then assign to result\n    for (let [name, promise] of Object.entries(result)) {\n        result[name] = await promise;\n    }\n\n    return result;\n}","\n/**\n * @file Tokenizers are used to prepare textual inputs for a model.\n * \n * **Example:** Create an `AutoTokenizer` and use it to tokenize a sentence.\n * This will automatically detect the tokenizer type based on the tokenizer class defined in `tokenizer.json`.\n * ```javascript\n * import { AutoTokenizer } from '@xenova/transformers';\n * \n * let tokenizer = await AutoTokenizer.from_pretrained('Xenova/bert-base-uncased');\n * let { input_ids } = await tokenizer('I love transformers!');\n * // Tensor {\n * //   data: BigInt64Array(6) [101n, 1045n, 2293n, 19081n, 999n, 102n],\n * //   dims: [1, 6],\n * //   type: 'int64',\n * //   size: 6,\n * // }\n * ```\n * \n * @module tokenizers\n */\n\nimport {\n    Callable,\n    reverseDictionary,\n    escapeRegExp,\n    isIntegralNumber,\n    mergeArrays,\n} from './utils/core.js';\n\nimport {\n    getModelJSON,\n} from './utils/hub.js';\n\nimport { max, min, round } from './utils/maths.js';\nimport { Tensor } from './utils/tensor.js';\n\nimport {\n    PriorityQueue,\n    TokenLattice,\n    CharTrie,\n} from './utils/data-structures.js';\n\n/**\n * Loads a tokenizer from the specified path.\n * @param {string} pretrained_model_name_or_path The path to the tokenizer directory.\n * @param {import('./utils/hub.js').PretrainedOptions} options Additional options for loading the tokenizer.\n * @returns {Promise<any[]>} A promise that resolves with information about the loaded tokenizer.\n */\nasync function loadTokenizer(pretrained_model_name_or_path, options) {\n\n    let info = await Promise.all([\n        getModelJSON(pretrained_model_name_or_path, 'tokenizer.json', true, options),\n        getModelJSON(pretrained_model_name_or_path, 'tokenizer_config.json', true, options),\n    ])\n    return info;\n}\n\n/**\n * Helper method to construct a pattern from a config object.\n * @param {Object} pattern The pattern object.\n * @param {boolean} invert Whether to invert the pattern (only applicable for Regex patterns).\n * @returns {RegExp|string|null} The compiled pattern.\n */\nfunction createPattern(pattern, invert = true) {\n\n    if (pattern.Regex !== undefined) {\n        // NOTE: if invert is true, we wrap the pattern in a group so that it is kept when performing .split()\n        return new RegExp(invert ? pattern.Regex : `(${pattern.Regex})`, 'gu');\n\n    } else if (pattern.String !== undefined) {\n        return pattern.String;\n\n    } else {\n        console.warn('Unknown pattern type:', pattern)\n        return null;\n    }\n}\n\n/**\n * Helper function to convert an Object to a Map\n * @param {Object} obj The object to convert.\n * @returns {Map<string, any>} The map.\n */\nfunction objectToMap(obj) {\n    return new Map(Object.entries(obj));\n}\n\n/**\n * Clean up a list of simple English tokenization artifacts like spaces before punctuations and abbreviated forms\n * @param {string} text The text to clean up.\n * @returns {string} The cleaned up text.\n */\nfunction clean_up_tokenization(text) {\n    // Clean up a list of simple English tokenization artifacts\n    // like spaces before punctuations and abbreviated forms\n    return text.replace(/ \\./g, '.')\n        .replace(/ \\?/g, '?')\n        .replace(/ \\!/g, '!')\n        .replace(/ ,/g, ',')\n        .replace(/ \\' /g, \"'\")\n        .replace(/ n\\'t/g, \"n't\")\n        .replace(/ \\'m/g, \"'m\")\n        .replace(/ \\'s/g, \"'s\")\n        .replace(/ \\'ve/g, \"'ve\")\n        .replace(/ \\'re/g, \"'re\");\n}\n\n/**\n * Helper function to remove accents from a string.\n * @param {string} text The text to remove accents from.\n * @returns {string} The text with accents removed.\n */\nfunction remove_accents(text) {\n    return text.replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n * Helper function to lowercase a string and remove accents.\n * @param {string} text The text to lowercase and remove accents from.\n * @returns {string} The lowercased text with accents removed.\n */\nfunction lowercase_and_remove_accent(text) {\n    return remove_accents(text.toLowerCase());\n}\n\n/**\n * Helper function to fuse consecutive values in an array equal to the specified value.\n * @param {Array} arr The input array\n * @param {any} value The value to fuse on.\n */\nfunction fuse(arr, value) {\n    let fused = [];\n    let i = 0;\n    while (i < arr.length) {\n        fused.push(arr[i])\n        if (arr[i] !== value) {\n            ++i;\n            continue;\n        }\n\n        while (i < arr.length && arr[i] === value) {\n            ++i;\n        }\n    }\n\n    return fused;\n}\n\n/**\n * Split a string on whitespace.\n * @param {string} text The text to split.\n * @returns {string[]} The split string.\n */\nfunction whitespace_split(text) {\n    return text.match(/\\S+/g) || [];\n}\n\nconst PUNCTUATION_REGEX = '\\\\p{P}\\\\u0021-\\\\u002F\\\\u003A-\\\\u0040\\\\u005B-\\\\u0060\\\\u007B-\\\\u007E';\n\n/**\n * Abstract base class for tokenizer models.\n *\n * @extends Callable\n */\nexport class TokenizerModel extends Callable {\n    /**\n     * Creates a new instance of TokenizerModel.\n     * @param {Object} config The configuration object for the TokenizerModel.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n\n        /** @type {string[]} */\n        this.vocab = [];\n\n        /**\n         * A mapping of tokens to ids.\n         * @type {Map<string, number>}\n         */\n        this.tokens_to_ids = new Map();\n\n        this.unk_token_id = undefined;\n        this.unk_token = undefined;\n        this.end_of_word_suffix = undefined;\n\n        /** @type {boolean} Whether to fuse unknown tokens when encoding. Defaults to false. */\n        this.fuse_unk = this.config.fuse_unk ?? false;\n    }\n\n    /**\n     * Instantiates a new TokenizerModel instance based on the configuration object provided.\n     * @param {Object} config The configuration object for the TokenizerModel.\n     * @param {...*} args Optional arguments to pass to the specific TokenizerModel constructor.\n     * @returns {TokenizerModel} A new instance of a TokenizerModel.\n     * @throws Will throw an error if the TokenizerModel type in the config is not recognized.\n     */\n    static fromConfig(config, ...args) {\n        switch (config.type) {\n            case 'WordPiece':\n                return new WordPieceTokenizer(config);\n            case 'Unigram':\n                // @ts-ignore\n                return new Unigram(config, ...args);\n\n            case 'BPE':\n                return new BPE(config);\n\n            default:\n                if (config.vocab) {\n                    // @ts-ignore\n                    return new LegacyTokenizerModel(config, ...args);\n                }\n                throw new Error(`Unknown TokenizerModel type: ${config.type}`);\n        }\n    }\n\n    /**\n     * Internal function to call the TokenizerModel instance.\n     * @param {string[]} tokens The tokens to encode.\n     * @returns {string[]} The encoded token IDs.\n     */\n    _call(tokens) {\n        return this.encode(tokens);\n    }\n\n    /**\n     * Encodes a list of tokens into a list of token IDs.\n     * @param {string[]} tokens The tokens to encode.\n     * @returns {string[]} The encoded tokens.\n     * @throws Will throw an error if not implemented in a subclass.\n     */\n    encode(tokens) {\n        throw Error(\"encode should be implemented in subclass.\")\n    }\n\n    /**\n     * Converts a list of tokens into a list of token IDs.\n     * @param {string[]} tokens The tokens to convert.\n     * @returns {number[]} The converted token IDs.\n     */\n    convert_tokens_to_ids(tokens) {\n        let ids = tokens.map(t => this.tokens_to_ids.get(t) ?? this.unk_token_id);\n\n        if (this.fuse_unk) {\n            // Fuse unknown tokens\n            ids = fuse(ids, this.unk_token_id);\n        }\n        return ids;\n    }\n\n    /**\n     * Converts a list of token IDs into a list of tokens.\n     * @param {number[]} ids The token IDs to convert.\n     * @returns {string[]} The converted tokens.\n     */\n    convert_ids_to_tokens(ids) {\n        return ids.map(i => this.vocab[i] ?? this.unk_token);\n    }\n}\n\n/**\n * A subclass of TokenizerModel that uses WordPiece encoding to encode tokens.\n * @extends TokenizerModel\n */\nclass WordPieceTokenizer extends TokenizerModel {\n    /**\n     * @param {Object} config The configuration object.\n     * @param {Object} config.vocab A mapping of tokens to ids.\n     * @param {string} config.unk_token The unknown token string.\n     * @param {string} config.continuing_subword_prefix The prefix to use for continuing subwords.\n     */\n    constructor(config) {\n        super(config);\n        /**\n         * A mapping of tokens to ids.\n         * @type {Map<string, number>}\n         */\n        this.tokens_to_ids = objectToMap(config.vocab);\n\n        /**\n         * The id of the unknown token.\n         * @type {number}\n         */\n        this.unk_token_id = this.tokens_to_ids.get(config.unk_token);\n\n        /**\n         * The unknown token string.\n         * @type {string}\n         */\n        this.unk_token = config.unk_token;\n\n        /**\n         * An array of tokens.\n         * @type {string[]}\n         */\n        this.vocab = new Array(this.tokens_to_ids.size);\n        for (const [key, value] of this.tokens_to_ids) {\n            this.vocab[value] = key;\n        }\n    }\n\n    /**\n     * Encodes an array of tokens using WordPiece encoding.\n     * @param {string[]} tokens The tokens to encode.\n     * @returns {string[]} An array of encoded tokens.\n     */\n    encode(tokens) {\n        let outputTokens = [];\n        for (let token of tokens) {\n            let chars = [...token];\n            // TODO add\n            // if len(chars) > self.max_input_chars_per_word:\n            //     output_tokens.append(self.unk_token)\n            //     continue\n\n            let isUnknown = false;\n            let start = 0;\n            let subTokens = [];\n\n            while (start < chars.length) {\n                let end = chars.length;\n                let currentSubstring = null;\n                while (start < end) {\n                    let substr = chars.slice(start, end).join('');\n\n                    if (start > 0) {\n                        substr = this.config.continuing_subword_prefix + substr;\n                    }\n                    if (this.tokens_to_ids.has(substr)) {\n                        currentSubstring = substr;\n                        break;\n                    }\n\n                    --end;\n                }\n                if (currentSubstring === null) {\n                    isUnknown = true;\n                    break;\n                }\n                subTokens.push(currentSubstring);\n                start = end;\n            }\n            if (isUnknown) {\n                outputTokens.push(this.unk_token);\n            } else {\n                outputTokens.push(...subTokens);\n            }\n        }\n\n        return outputTokens;\n    }\n\n}\n\n/**\n * Class representing a Unigram tokenizer model.\n * @extends TokenizerModel\n */\nclass Unigram extends TokenizerModel {\n    /**\n     * Create a new Unigram tokenizer model.\n     * @param {Object} config The configuration object for the Unigram model.\n     * @param {number} config.unk_id The ID of the unknown token\n     * @param {any[][]} config.vocab A 2D array representing a mapping of tokens to scores.\n     * @param {Object} moreConfig Additional configuration object for the Unigram model.\n     */\n    constructor(config, moreConfig) {\n        super(config);\n\n        const vocabSize = config.vocab.length;\n        this.vocab = new Array(vocabSize);\n        this.scores = new Array(vocabSize);\n        for (let i = 0; i < vocabSize; ++i) {\n            const piece = config.vocab[i];\n            this.vocab[i] = piece[0];\n            this.scores[i] = piece[1];\n        }\n\n        this.unk_token_id = config.unk_id;\n        this.unk_token = this.vocab[config.unk_id];\n\n        this.tokens_to_ids = new Map(this.vocab.map((x, i) => [x, i]));\n        this.bosToken = ' '; // beginning of a sentence token\n\n        this.bosTokenId = this.tokens_to_ids.get(this.bosToken); // NOTE: may be undefined\n        this.eosToken = moreConfig.eos_token;\n\n        this.eosTokenId = this.tokens_to_ids.get(this.eosToken);\n        this.unkToken = this.vocab[this.unk_token_id];\n\n        this.minScore = min(this.scores)[0];\n\n        this.unkScore = this.minScore - 10.0;\n        this.scores[this.unk_token_id] = this.unkScore;\n\n        this.trie = new CharTrie();\n        this.trie.extend(this.vocab);\n\n        // NOTE: `fuse_unk` is hardcoded to true for Unigram models\n        // See: https://github.com/huggingface/tokenizers/blob/b58227c7f1ccf8b73ee2268354336da56d91e492/tokenizers/src/models/unigram/model.rs#L119\n        this.fuse_unk = true;\n    }\n\n    /**\n     * Populates lattice nodes.\n     * @param {TokenLattice} lattice The token lattice to populate with nodes.\n     */\n    populateNodes(lattice) {\n        const sentence = lattice.sentence;\n        const len = sentence.length;\n        let beginPos = 0;\n        while (beginPos < len) {\n            const mblen = 1;\n            let hasSingleNode = false;\n            const tokens = [];\n\n            for (let token of this.trie.commonPrefixSearch(sentence.slice(beginPos))) {\n                tokens.push(token);\n                const tokenId = this.tokens_to_ids.get(token);\n                const tokenScore = this.scores[tokenId];\n                const n = token.length;\n                lattice.insert(beginPos, n, tokenScore, tokenId);\n                if (!hasSingleNode && n === mblen) {\n                    hasSingleNode = true;\n                }\n            }\n            if (!hasSingleNode) {\n                lattice.insert(beginPos, mblen, this.unkScore, this.unk_token_id);\n            }\n            beginPos += mblen;\n        }\n    }\n\n    /**\n     * Encodes an array of tokens into an array of subtokens using the unigram model.\n     *\n     * @param {string} normalized The normalized string.\n     * @returns {string[]} An array of subtokens obtained by encoding the input tokens using the unigram model.\n     */\n    tokenize(normalized) {\n        const lattice = new TokenLattice(normalized, this.bosTokenId, this.eosTokenId);\n        this.populateNodes(lattice);\n        return lattice.tokens();\n    }\n\n    /**\n     * Encodes an array of tokens using Unigram encoding.\n     * @param {Array} tokens The tokens to encode.\n     * @returns {Array} An array of encoded tokens.\n     */\n    encode(tokens) {\n        let toReturn = [];\n        for (let token of tokens) {\n            const tokenized = this.tokenize(token);\n            toReturn.push(...tokenized);\n        }\n        return toReturn;\n    }\n\n}\n\n/**\n * Returns list of utf-8 byte and a mapping to unicode strings.\n * Specifically avoids mapping to whitespace/control characters the BPE code barfs on.\n * @returns {Object} Object with utf-8 byte keys and unicode string values.\n */\nconst BYTES_TO_UNICODE = (() => {\n    // Returns list of utf-8 byte and a mapping to unicode strings.\n    // We specifically avoids mapping to whitespace/control characters\n    // the bpe code barfs on.\n\n    const bs = [\n        ...Array.from({ length: \"~\".charCodeAt(0) - \"!\".charCodeAt(0) + 1 }, (_, i) => i + \"!\".charCodeAt(0)),\n        ...Array.from({ length: \"¬\".charCodeAt(0) - \"¡\".charCodeAt(0) + 1 }, (_, i) => i + \"¡\".charCodeAt(0)),\n        ...Array.from({ length: \"ÿ\".charCodeAt(0) - \"®\".charCodeAt(0) + 1 }, (_, i) => i + \"®\".charCodeAt(0)),\n    ];\n    let cs = bs.slice();\n    let n = 0;\n    for (let b = 0; b < 256; ++b) {\n        if (!bs.includes(b)) {\n            bs.push(b);\n            cs.push(256 + n);\n            n += 1;\n        }\n    }\n    let ccs = cs.map(n => String.fromCharCode(n));\n    return Object.fromEntries(bs.map((b, i) => [b, ccs[i]]));\n})();\n\nconst UNICODE_TO_BYTES = reverseDictionary(BYTES_TO_UNICODE);\n\n\n/**\n * @typedef {Object} BPENode\n * @property {string} token The token associated with the node\n * @property {number} bias A positional bias for the node.\n * @property {number} [score] The score of the node.\n * @property {BPENode} [prev] The previous node in the linked list.\n * @property {BPENode} [next] The next node in the linked list.\n */\n\n/**\n * BPE class for encoding text into Byte-Pair-Encoding (BPE) tokens.\n * @extends TokenizerModel\n */\nclass BPE extends TokenizerModel {\n    /**\n     * Create a BPE instance.\n     * @param {Object} config The configuration object for BPE.\n     * @param {Object} config.vocab A mapping of tokens to ids.\n     * @param {string} config.unk_token The unknown token used for out of vocabulary words.\n     * @param {string} config.end_of_word_suffix The suffix to place at the end of each word.\n     * @param {string} [config.continuing_subword_suffix] The suffix to insert between words.\n     * @param {Array} config.merges An array of BPE merges as strings.\n     */\n    constructor(config) {\n        super(config);\n\n        this.BPE_SPLIT_TOKEN = ' ';\n\n        /** @type {Map<string, number>} */\n        this.tokens_to_ids = objectToMap(config.vocab);\n\n        this.unk_token_id = this.tokens_to_ids.get(config.unk_token);\n        this.unk_token = config.unk_token;\n\n        this.vocab = new Array(this.tokens_to_ids.size);\n        for (const [key, value] of this.tokens_to_ids) {\n            this.vocab[value] = key;\n        }\n\n        this.bpe_ranks = new Map(config.merges.map((x, i) => [x, i]));\n        this.merges = config.merges.map(x => x.split(this.BPE_SPLIT_TOKEN));\n\n        this.end_of_word_suffix = config.end_of_word_suffix;\n\n        // NOTE: `continuing_subword_suffix` is custom (to support `BlenderbotSmallTokenizer`)\n        this.continuing_subword_suffix = config.continuing_subword_suffix ?? null;\n\n        this.byte_fallback = this.config.byte_fallback ?? false;\n\n        if (this.byte_fallback) {\n            this.text_encoder = new TextEncoder();\n        }\n\n        /** @type {Map<string, string[]>} */\n        this.cache = new Map();\n    }\n\n    /**\n     * Apply Byte-Pair-Encoding (BPE) to a given token. Efficient heap-based priority\n     * queue implementation adapted from https://github.com/belladoreai/llama-tokenizer-js.\n     * @param {string} token The token to encode.\n     * @returns {string[]} The BPE encoded tokens.\n     */\n    bpe(token) {\n        if (token.length === 0) {\n            return [];\n        }\n\n        const cached = this.cache.get(token);\n        if (cached !== undefined) {\n            return cached;\n        }\n\n        const word = Array.from(token);\n        if (this.end_of_word_suffix) {\n            word[word.length - 1] += this.end_of_word_suffix;\n        }\n\n        let result = [];\n        if (word.length > 1) {\n            // Create a priority queue to store the nodes that will be merged.\n            // The comparator function compares the scores of the nodes.\n            const queue = new PriorityQueue((a, b) => a.score < b.score);\n\n            // Construct a doubly-linked list of nodes that will be inserted into the priority queue,\n            // starting with the individual characters. We also populate each node with a positional\n            // bias to break ties in the priority queue.\n            let startingNode = {\n                token: word[0],\n                bias: 0,\n                prev: null,\n                next: null,\n            }\n\n            let previousNode = startingNode\n            for (let i = 1; i < word.length; ++i) {\n                const currentNode = {\n                    bias: i / word.length, // Add fractional component to break ties\n                    token: word[i],\n                    prev: previousNode,\n                    next: null,\n                }\n                previousNode.next = currentNode\n                this._add_node(queue, previousNode)\n                previousNode = currentNode\n            }\n\n            while (!queue.isEmpty()) {\n                // Get the next node with the highest priority\n                const node = queue.pop();\n\n                // Check that this merge is still possible\n                if (node.deleted || !node.next || node.next.deleted) continue;\n\n                // Here, we mark the current node (left side of the merge) and the next node (right side of the merge) as deleted.\n                // This is because they will both be replaced by a new node representing the merge result.\n                node.deleted = true;\n                node.next.deleted = true;\n\n                // Next, we fix the node that comes before the current node (i.e., left side of the merge).\n                if (node.prev) {\n\n                    // Make a shallow copy of the previous node\n                    const newPreviousNode = { ...node.prev };\n\n                    // Mark the old previous node as deleted. This avoids erroneous merges later,\n                    // because there may still be references to this node in the priority queue.\n                    node.prev.deleted = true;\n                    node.prev = newPreviousNode;\n\n                    // Update the reference of the previous node, by pointing its previous node to this new previous node.\n                    if (newPreviousNode.prev) {\n                        newPreviousNode.prev.next = newPreviousNode;\n                    } else {\n                        // If the previous of the previous node does not exist, it means that\n                        // `newPreviousNode` must be the new `startingNode`.\n                        startingNode = newPreviousNode;\n                    }\n                }\n\n                // Create a new node which represents the result of the merge.\n                const merged = {\n                    token: node.token + node.next.token,\n                    bias: node.bias,\n                    prev: node.prev,\n                    next: node.next.next,\n                }\n\n                // We now consider where we can add the new merged node to the priority queue:\n                // 1. prev <-> merged\n                if (merged.prev) {\n                    merged.prev.next = merged;\n                    this._add_node(queue, merged.prev);\n                } else {\n                    // If `merged.prev` does not exist, then `merged` must be the new `startingNode`.\n                    startingNode = merged;\n                }\n\n                // 2. merged <-> next\n                if (merged.next) {\n                    merged.next.prev = merged;\n                    this._add_node(queue, merged);\n                }\n            }\n\n            // Traverse the linked list, starting from the `startingNode`, and collect the tokens.\n            for (let currentNode = startingNode; currentNode !== null; currentNode = currentNode.next) {\n                result.push(currentNode.token);\n            }\n        } else {\n            result = word;\n        }\n\n        // Possibly append suffix\n        if (this.continuing_subword_suffix) {\n            // Do not append suffix to the last token\n            for (let i = 0; i < result.length - 1; ++i) {\n                result[i] += this.continuing_subword_suffix;\n            }\n        }\n\n        // Save the result to the cache\n        this.cache.set(token, result);\n\n        return result;\n    }\n\n\n    /**\n     * Helper function to add a node to the priority queue.\n     * @param {PriorityQueue} queue \n     * @param {BPENode} node\n     * @private\n     */\n    _add_node(queue, node) {\n        // `score` is a measure of the merge priority: lower means higher priority\n        // We use the BPE rank as a measure of priority (i.e., the local of the merge in the merges list)\n        // We also add a fractional component to the score to break ties (with the earlier character having higher priority)\n        const rank = this.bpe_ranks.get(node.token + this.BPE_SPLIT_TOKEN + node.next.token);\n        if (rank !== undefined) {\n            node.score = rank + node.bias;\n            queue.push(node);\n        }\n    }\n\n    /**\n     * Encodes the input sequence of tokens using the BPE algorithm and returns the resulting subword tokens.\n     * @param {string[]} tokens The input sequence of tokens to encode.\n     * @returns {string[]} The resulting subword tokens after applying the BPE algorithm to the input sequence of tokens.\n     */\n    encode(tokens) {\n        let outputTokens = [];\n\n        for (let token of tokens) {\n            let bpe_token_list = this.bpe(token);\n\n            for (let t of bpe_token_list) {\n                if (this.tokens_to_ids.has(t)) {\n                    outputTokens.push(t);\n                } else {\n                    if (this.byte_fallback) {\n                        outputTokens.push(\n                            ...Array.from(this.text_encoder.encode(t))\n                                .map(x => `<0x${x.toString(16).toUpperCase().padStart(2, '0')}>`)\n                        );\n                    } else {\n                        outputTokens.push(this.unk_token);\n                    }\n                }\n            }\n        }\n\n        return outputTokens;\n    }\n\n}\n\n/**\n * Legacy tokenizer class for tokenizers with only a vocabulary.\n */\nclass LegacyTokenizerModel extends TokenizerModel {\n    /**\n     * Create a LegacyTokenizerModel instance.\n     * @param {Object} config The configuration object for LegacyTokenizerModel.\n     * @param {Object} config.vocab A (possibly nested) mapping of tokens to ids.\n     * @param {Object} moreConfig Additional configuration object for the LegacyTokenizerModel model.\n     */\n    constructor(config, moreConfig) {\n        super(config);\n\n        /**@type {Map<string, number>} */\n        this.tokens_to_ids = objectToMap(\n            moreConfig.target_lang\n                ? config.vocab[moreConfig.target_lang]\n                : config.vocab\n        );\n\n        this.bos_token = moreConfig.bos_token;\n        this.bos_token_id = this.tokens_to_ids.get(this.bos_token);\n\n        this.eos_token = moreConfig.eos_token;\n        this.eos_token_id = this.tokens_to_ids.get(this.eos_token);\n\n        this.pad_token = moreConfig.pad_token;\n        this.pad_token_id = this.tokens_to_ids.get(this.pad_token);\n\n        this.unk_token = moreConfig.unk_token;\n        this.unk_token_id = this.tokens_to_ids.get(this.unk_token);\n\n        this.vocab = new Array(this.tokens_to_ids.size);\n        for (const [key, value] of this.tokens_to_ids) {\n            this.vocab[value] = key;\n        }\n    }\n\n    encode(tokens) {\n        return tokens;\n    }\n}\n\n\n/**\n * A base class for text normalization.\n * @abstract\n */\nclass Normalizer extends Callable {\n    /**\n     * @param {Object} config The configuration object for the normalizer.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n    }\n\n    /**\n     * Factory method for creating normalizers from config objects.\n     * @static\n     * @param {Object} config The configuration object for the normalizer.\n     * @returns {Normalizer} A Normalizer object.\n     * @throws {Error} If an unknown Normalizer type is specified in the config.\n     */\n    static fromConfig(config) {\n        if (config === null) return null;\n        switch (config.type) {\n            case 'BertNormalizer':\n                return new BertNormalizer(config);\n            case 'Precompiled':\n                return new Precompiled(config);\n            case 'Sequence':\n                return new NormalizerSequence(config);\n            case 'Replace':\n                return new Replace(config);\n            case 'NFC':\n                return new NFC(config);\n            case 'NFKD':\n                return new NFKD(config);\n            case 'Strip':\n                return new StripNormalizer(config);\n            case 'StripAccents':\n                return new StripAccents(config);\n            case 'Lowercase':\n                return new Lowercase(config);\n            case 'Prepend':\n                return new Prepend(config);\n            default:\n                throw new Error(`Unknown Normalizer type: ${config.type}`);\n        }\n    }\n\n    /**\n     * Normalize the input text.\n     * @abstract\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     * @throws {Error} If this method is not implemented in a subclass.\n     */\n    normalize(text) {\n        throw Error(\"normalize should be implemented in subclass.\")\n    }\n\n    /**\n     * Alias for {@link Normalizer#normalize}.\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     */\n    _call(text) {\n        return this.normalize(text);\n    }\n\n}\n\n/**\n * Replace normalizer that replaces occurrences of a pattern with a given string or regular expression.\n * @extends Normalizer\n */\nclass Replace extends Normalizer {\n    /**\n     * Normalize the input text by replacing the pattern with the content.\n     * @param {string} text The input text to be normalized.\n     * @returns {string} The normalized text after replacing the pattern with the content.\n     */\n    normalize(text) {\n        let pattern = createPattern(this.config.pattern);\n        if (pattern === null) {\n            return text;\n        }\n\n        text = text.replaceAll(pattern, this.config.content)\n\n        return text;\n    }\n}\n\n/**\n * A normalizer that applies Unicode normalization form C (NFC) to the input text.\n * @extends Normalizer\n */\nclass NFC extends Normalizer {\n    /**\n     * Normalize the input text by applying Unicode normalization form C (NFC).\n     * @param {string} text The input text to be normalized.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        text = text.normalize('NFC')\n        return text;\n    }\n}\n\n/**\n * NFKD Normalizer.\n * @extends Normalizer\n */\nclass NFKD extends Normalizer {\n    /**\n     * Normalize text using NFKD normalization.\n     * @param {string} text The text to be normalized.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        text = text.normalize('NFKD')\n        return text;\n    }\n}\n\n/**\n * A normalizer that strips leading and/or trailing whitespace from the input text.\n */\nclass StripNormalizer extends Normalizer {\n    /**\n     * Strip leading and/or trailing whitespace from the input text.\n     * @param {string} text The input text.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        if (this.config.strip_left && this.config.strip_right) {\n            // Fast path to avoid an extra trim call\n            text = text.trim();\n        } else {\n            if (this.config.strip_left) {\n                text = text.trimStart();\n            }\n            if (this.config.strip_right) {\n                text = text.trimEnd();\n            }\n        }\n        return text;\n    }\n}\n\n/**\n * StripAccents normalizer removes all accents from the text.\n * @extends Normalizer\n */\nclass StripAccents extends Normalizer {\n    /**\n     * Remove all accents from the text.\n     * @param {string} text The input text.\n     * @returns {string} The normalized text without accents.\n     */\n    normalize(text) {\n        text = remove_accents(text);\n        return text;\n    }\n}\n\n/**\n * A Normalizer that lowercases the input string.\n * @extends Normalizer\n */\nclass Lowercase extends Normalizer {\n    /**\n     * Lowercases the input string.\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        text = text.toLowerCase();\n        return text;\n    }\n}\n\n/**\n * A Normalizer that prepends a string to the input string.\n * @extends Normalizer\n */\nclass Prepend extends Normalizer {\n    /**\n     * Prepends the input string.\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        text = this.config.prepend + text;\n        return text;\n    }\n}\n\n/**\n * A Normalizer that applies a sequence of Normalizers.\n * @extends Normalizer\n */\nclass NormalizerSequence extends Normalizer {\n    /**\n   * Create a new instance of NormalizerSequence.\n   * @param {Object} config The configuration object.\n   * @param {Object[]} config.normalizers An array of Normalizer configuration objects.\n   */\n    constructor(config) {\n        super(config);\n        this.normalizers = config.normalizers.map(x => Normalizer.fromConfig(x));\n    }\n    /**\n    * Apply a sequence of Normalizers to the input text.\n    * @param {string} text The text to normalize.\n    * @returns {string} The normalized text.\n    */\n    normalize(text) {\n        return this.normalizers.reduce((t, normalizer) => {\n            return normalizer.normalize(t);\n        }, text);\n    }\n}\n\n/**\n * A class representing a normalizer used in BERT tokenization.\n * @extends Normalizer\n */\nclass BertNormalizer extends Normalizer {\n    /**\n     * Adds whitespace around any CJK (Chinese, Japanese, or Korean) character in the input text.\n     *\n     * @param {string} text The input text to tokenize.\n     * @returns {string} The tokenized text with whitespace added around CJK characters.\n     */\n    _tokenize_chinese_chars(text) {\n        /* Adds whitespace around any CJK character. */\n        let output = [];\n        for (let i = 0; i < text.length; ++i) {\n            let char = text[i];\n            let cp = char.charCodeAt(0);\n            if (this._is_chinese_char(cp)) {\n                output.push(\" \");\n                output.push(char);\n                output.push(\" \");\n            } else {\n                output.push(char);\n            }\n        }\n        return output.join(\"\");\n    }\n\n    /**\n     * Checks whether the given Unicode codepoint represents a CJK (Chinese, Japanese, or Korean) character.\n     *\n     * A \"chinese character\" is defined as anything in the CJK Unicode block:\n     * https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\n     *\n     * Note that the CJK Unicode block is NOT all Japanese and Korean characters, despite its name.\n     * The modern Korean Hangul alphabet is a different block, as is Japanese Hiragana and Katakana.\n     * Those alphabets are used to write space-separated words, so they are not treated specially\n     * and are handled like all other languages.\n     *\n     * @param {number} cp The Unicode codepoint to check.\n     * @returns {boolean} True if the codepoint represents a CJK character, false otherwise.\n     */\n    _is_chinese_char(cp) {\n        return (\n            (cp >= 0x4E00 && cp <= 0x9FFF)\n            || (cp >= 0x3400 && cp <= 0x4DBF)\n            || (cp >= 0x20000 && cp <= 0x2A6DF)\n            || (cp >= 0x2A700 && cp <= 0x2B73F)\n            || (cp >= 0x2B740 && cp <= 0x2B81F)\n            || (cp >= 0x2B820 && cp <= 0x2CEAF)\n            || (cp >= 0xF900 && cp <= 0xFAFF)\n            || (cp >= 0x2F800 && cp <= 0x2FA1F)\n        )\n    }\n    /**\n     * Strips accents from the given text.\n     * @param {string} text The text to strip accents from.\n     * @returns {string} The text with accents removed.\n     */\n    stripAccents(text) {\n        return text.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n    }\n\n    /**\n     * Normalizes the given text based on the configuration.\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        // TODO use rest of config\n        // config.clean_text,\n        // config.handle_chinese_chars,\n        // config.strip_accents,\n        // config.lowercase,\n\n        if (this.config.handle_chinese_chars) {\n            text = this._tokenize_chinese_chars(text);\n        }\n\n        if (this.config.lowercase) {\n            text = text.toLowerCase();\n\n            if (this.config.strip_accents !== false) {\n                text = this.stripAccents(text);\n            }\n        } else if (this.config.strip_accents) {\n            text = this.stripAccents(text);\n        }\n\n        return text;\n    }\n}\n\n/**\n * A callable class representing a pre-tokenizer used in tokenization. Subclasses\n * should implement the `pre_tokenize_text` method to define the specific pre-tokenization logic.\n * @extends Callable\n */\nclass PreTokenizer extends Callable {\n    /**\n   * Factory method that returns an instance of a subclass of `PreTokenizer` based on the provided configuration.\n   *\n   * @static\n   * @param {Object} config A configuration object for the pre-tokenizer.\n   * @returns {PreTokenizer} An instance of a subclass of `PreTokenizer`.\n   * @throws {Error} If the provided configuration object does not correspond to any known pre-tokenizer.\n   */\n    static fromConfig(config) {\n        if (config === null) return null;\n\n        switch (config.type) {\n            case 'BertPreTokenizer':\n                return new BertPreTokenizer(config);\n            case 'Sequence':\n                return new PreTokenizerSequence(config);\n            case 'WhitespaceSplit':\n                return new WhitespaceSplit(config);\n            case 'Metaspace':\n                return new MetaspacePreTokenizer(config);\n\n            case 'ByteLevel':\n                return new ByteLevelPreTokenizer(config);\n            case 'Split':\n                return new SplitPreTokenizer(config);\n            case 'Punctuation':\n                return new PunctuationPreTokenizer(config);\n            case 'Digits':\n                return new DigitsPreTokenizer(config);\n            case 'Replace':\n                return new ReplacePreTokenizer(config);\n            default:\n                throw new Error(`Unknown PreTokenizer type: ${config.type}`);\n        }\n    }\n\n    /**\n   * Method that should be implemented by subclasses to define the specific pre-tokenization logic.\n   *\n   * @abstract\n   * @param {string} text The text to pre-tokenize.\n   * @returns {string[]} The pre-tokenized text.\n   * @throws {Error} If the method is not implemented in the subclass.\n   */\n    pre_tokenize_text(text) {\n        throw Error(\"pre_tokenize_text should be implemented in subclass.\")\n    }\n\n    /**\n     * Tokenizes the given text into pre-tokens.\n     * @param {string|string[]} text The text or array of texts to pre-tokenize.\n     * @returns {string[]} An array of pre-tokens.\n     */\n    pre_tokenize(text) {\n        let result = [];\n        if (Array.isArray(text)) {\n            result = text.map(x => this.pre_tokenize_text(x))\n        } else {\n            result = this.pre_tokenize_text(text);\n        }\n        return result.flat();\n    }\n\n    /**\n     * Alias for {@link PreTokenizer#pre_tokenize}.\n     * @param {string|string[]} text The text or array of texts to pre-tokenize.\n     * @returns {string[]} An array of pre-tokens.\n     */\n    _call(text) {\n        return this.pre_tokenize(text);\n    }\n}\n\n/**\n * @extends PreTokenizer\n */\nclass BertPreTokenizer extends PreTokenizer {\n    /**\n     * A PreTokenizer that splits text into wordpieces using a basic tokenization scheme\n     * similar to that used in the original implementation of BERT.\n     * \n     * @param {Object} config The configuration object.\n     */\n    constructor(config) {\n        super();\n        // Construct a pattern which matches the rust implementation:\n        // https://github.com/huggingface/tokenizers/blob/b4fcc9ce6e4ad5806e82826f816acfdfdc4fcc67/tokenizers/src/pre_tokenizers/bert.rs#L11\n        // Equivalent to removing whitespace and splitting on punctuation (both \\p{P} and other ascii characters)\n        this.pattern = new RegExp(`[^\\\\s${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]`, 'gu');\n    }\n    /**\n     * Tokenizes a single text using the BERT pre-tokenization scheme.\n     * \n     * @param {string} text The text to tokenize.\n     * @returns {string[]} An array of tokens.\n     */\n    pre_tokenize_text(text) {\n        return text.trim().match(this.pattern) || [];\n    }\n}\n\n/**\n * A pre-tokenizer that splits text into Byte-Pair-Encoding (BPE) subwords.\n * @extends PreTokenizer\n */\nclass ByteLevelPreTokenizer extends PreTokenizer {\n    /**\n     * Creates a new instance of the `ByteLevelPreTokenizer` class.\n     * @param {Object} config The configuration object.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n\n        /**\n         * @type {boolean} Whether to add a leading space to the first word.\n         * This allows to treat the leading word just as any other word.\n         */\n        this.add_prefix_space = this.config.add_prefix_space;\n\n        /**\n         * @type {boolean} Whether the post processing step should trim offsets\n         * to avoid including whitespaces.\n         * @todo Use this in the pretokenization step.\n         */\n        this.trim_offsets = this.config.trim_offsets;\n\n        /**\n         * @type {boolean} Whether to use the standard GPT2 regex for whitespace splitting.\n         * Set it to False if you want to use your own splitting. Defaults to true.\n         */\n        this.use_regex = this.config.use_regex ?? true;\n        this.pattern = /'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+/gu;\n\n        this.byte_encoder = BYTES_TO_UNICODE;\n        this.text_encoder = new TextEncoder();\n    }\n\n    /**\n     * Tokenizes a single piece of text using byte-level tokenization.\n     * @param {string} text The text to tokenize.\n     * @returns {string[]} An array of tokens.\n     */\n    pre_tokenize_text(text) {\n        // Add a leading space if the option is enabled\n        if (this.add_prefix_space && !text.startsWith(' ')) {\n            text = ' ' + text;\n        }\n\n        // Split on whitespace and punctuation\n        let tokens = this.use_regex ? (text.match(this.pattern) || []) : [text];\n\n        // Maps all our bytes to unicode strings, avoiding control tokens of the BPE (spaces in our case)\n        return tokens.map(\n            token => Array.from(this.text_encoder.encode(token), byte => this.byte_encoder[byte]).join('')\n        );\n    }\n}\n\n/**\n * @typedef {'removed'|'isolated'|'mergedWithPrevious'|'mergedWithNext'|'contiguous'} SplitDelimiterBehavior\n */\n\n/**\n * Splits text using a given pattern.\n * @extends PreTokenizer\n */\nclass SplitPreTokenizer extends PreTokenizer {\n    /**\n     * @param {Object} config The configuration options for the pre-tokenizer.\n     * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.\n     * @param {string|undefined} config.pattern.String The string to use for splitting. Only defined if the pattern is a string.\n     * @param {string|undefined} config.pattern.Regex The regex to use for splitting. Only defined if the pattern is a regex.\n     * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.\n     * @param {boolean} config.invert Whether to split (invert=false) or match (invert=true) the pattern.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n        // TODO support all behaviours (config.behavior)\n\n        this.pattern = createPattern(this.config.pattern, this.config.invert);\n    }\n\n    /**\n     * Tokenizes text by splitting it using the given pattern.\n     * @param {string} text The text to tokenize.\n     * @returns {string[]} An array of tokens.\n     */\n    pre_tokenize_text(text) {\n        if (this.pattern === null) {\n            return [];\n        }\n\n        if (this.config.invert) {\n            return text.match(this.pattern) || [];\n        } else {\n            return text.split(this.pattern).filter(x => x);\n        }\n    }\n}\n\n/**\n * Splits text based on punctuation.\n * @extends PreTokenizer\n */\nclass PunctuationPreTokenizer extends PreTokenizer {\n    /**\n     * @param {Object} config The configuration options for the pre-tokenizer.\n     * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n        this.pattern = new RegExp(`[^${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]+`, 'gu');\n    }\n\n    /**\n     * Tokenizes text by splitting it using the given pattern.\n     * @param {string} text The text to tokenize.\n     * @returns {string[]} An array of tokens.\n     */\n    pre_tokenize_text(text) {\n        return text.match(this.pattern) || [];\n    }\n}\n\n\n/**\n * Splits text based on digits.\n * @extends PreTokenizer\n */\nclass DigitsPreTokenizer extends PreTokenizer {\n    /**\n     * @param {Object} config The configuration options for the pre-tokenizer.\n     * @param {boolean} config.individual_digits Whether to split on individual digits.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n\n        // Construct a pattern which matches the rust implementation:\n        const digit_pattern = `[^\\\\d]+|\\\\d${this.config.individual_digits ? '' : '+'}`;\n        this.pattern = new RegExp(digit_pattern, 'gu');\n    }\n\n    /**\n     * Tokenizes text by splitting it using the given pattern.\n     * @param {string} text The text to tokenize.\n     * @returns {string[]} An array of tokens.\n     */\n    pre_tokenize_text(text) {\n        return text.match(this.pattern) || [];\n    }\n}\n\n/**\n * @extends Callable\n */\nclass PostProcessor extends Callable {\n\n    /**\n     * @param {Object} config The configuration for the post-processor.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n    }\n\n    /**\n     * Factory method to create a PostProcessor object from a configuration object.\n     *\n     * @param {Object} config Configuration object representing a PostProcessor.\n     * @returns {PostProcessor} A PostProcessor object created from the given configuration.\n     * @throws {Error} If an unknown PostProcessor type is encountered.\n     */\n    static fromConfig(config) {\n        if (config === null) return null;\n        switch (config.type) {\n            case 'TemplateProcessing':\n                return new TemplateProcessing(config);\n\n            case 'ByteLevel':\n                return new ByteLevelPostProcessor(config);\n\n            case 'RobertaProcessing':\n                return new RobertaProcessing(config);\n            case 'BertProcessing':\n                return new BertProcessing(config);\n\n            default:\n                throw new Error(`Unknown PostProcessor type: ${config.type}`);\n        }\n    }\n\n    /**\n     * Method to be implemented in subclass to apply post-processing on the given tokens.\n     *\n     * @param {Array} tokens The input tokens to be post-processed.\n     * @param {...*} args Additional arguments required by the post-processing logic.\n     * @returns {Array} The post-processed tokens.\n     * @throws {Error} If the method is not implemented in subclass.\n     */\n    post_process(tokens, ...args) {\n        throw Error(\"post_process should be implemented in subclass.\")\n    }\n\n    /**\n     * Alias for {@link PostProcessor#post_process}.\n     * @param {Array} tokens The text or array of texts to post-process.\n     * @param {...*} args Additional arguments required by the post-processing logic.\n     * @returns {Array} An array of post-processed tokens.\n     */\n    _call(tokens, ...args) {\n        return this.post_process(tokens, ...args);\n    }\n}\n\n/**\n * A post-processor that adds special tokens to the beginning and end of the input.\n */\nclass BertProcessing extends PostProcessor {\n    /**\n     * @param {Object} config The configuration for the post-processor.\n     * @param {string[]} config.cls The special tokens to add to the beginning of the input.\n     * @param {string[]} config.sep The special tokens to add to the end of the input.\n     */\n    constructor(config) {\n        super(config);\n        // TODO use all of config: add_prefix_space, trim_offsets\n\n        this.cls = config.cls[0];\n        this.sep = config.sep[0];\n    }\n\n    /**\n     * Adds the special tokens to the beginning and end of the input.\n     * @param {string[]} tokens The input tokens.\n     * @param {string[]|null} tokens_pair An optional second set of input tokens.\n     * @returns {string[]} The input tokens with the special tokens added to the beginning and end.\n     */\n    post_process(tokens, tokens_pair = null) {\n        tokens = mergeArrays([this.cls], tokens, [this.sep]);\n\n        // NOTE: It is intended to add 2 EOS tokens after the first set of tokens\n        // https://github.com/huggingface/tokenizers/issues/983\n        if (tokens_pair !== null) {\n            tokens = mergeArrays(tokens, [this.sep], tokens_pair, [this.sep]);\n        }\n        return tokens;\n    }\n}\nclass RobertaProcessing extends BertProcessing { } // NOTE: extends BertProcessing\n\n/**\n * Post processor that replaces special tokens in a template with actual tokens.\n * @extends PostProcessor\n */\nclass TemplateProcessing extends PostProcessor {\n    /**\n     * Creates a new instance of `TemplateProcessing`.\n     * @param {Object} config The configuration options for the post processor.\n     * @param {Array} config.single The template for a single sequence of tokens.\n     * @param {Array} config.pair The template for a pair of sequences of tokens.\n     */\n    constructor(config) {\n        super(config);\n\n        this.single = config.single;\n        this.pair = config.pair;\n    }\n\n    /**\n     * Replaces special tokens in the template with actual tokens.\n     * @param {Array} tokens The list of tokens for the first sequence.\n     * @param {Array} [tokens_pair=null] The list of tokens for the second sequence (optional).\n     * @returns {Array} The list of tokens with the special tokens replaced with actual tokens.\n     */\n    post_process(tokens, tokens_pair = null) {\n        let type = tokens_pair === null ? this.single : this.pair\n\n        let toReturn = [];\n        for (let item of type) {\n            if ('SpecialToken' in item) {\n                toReturn.push(item.SpecialToken.id);\n\n            } else if ('Sequence' in item) {\n                if (item.Sequence.id === 'A') {\n                    toReturn = mergeArrays(toReturn, tokens);\n\n                } else if (item.Sequence.id === 'B') {\n                    toReturn = mergeArrays(toReturn, tokens_pair);\n                }\n            }\n        }\n        return toReturn;\n    }\n}\n\n/**\n * A PostProcessor that returns the given tokens as is.\n * @extends PostProcessor\n */\nclass ByteLevelPostProcessor extends PostProcessor {\n    /**\n     * Post process the given tokens.\n     * @param {string[]} tokens The tokens to be post processed.\n     * @returns {string[]} The post processed tokens.\n     */\n    post_process(tokens) {\n        return tokens;\n    }\n}\n\n/**\n * The base class for token decoders.\n * @extends Callable\n */\nclass Decoder extends Callable {\n\n    /**\n    * Creates an instance of `Decoder`.\n    *\n    * @param {Object} config The configuration object.\n    */\n    constructor(config) {\n        super();\n        this.config = config;\n\n        this.added_tokens = [];\n        this.end_of_word_suffix = null;\n        this.trim_offsets = config.trim_offsets;\n    }\n\n    /**\n   * Creates a decoder instance based on the provided configuration.\n   *\n   * @param {Object} config The configuration object.\n   * @returns {Decoder} A decoder instance.\n   * @throws {Error} If an unknown decoder type is provided.\n   */\n    static fromConfig(config) {\n        switch (config.type) {\n            case 'WordPiece':\n                return new WordPieceDecoder(config);\n            case 'Metaspace':\n                return new MetaspaceDecoder(config);\n            case 'ByteLevel':\n                return new ByteLevelDecoder(config);\n\n            case 'Replace':\n                return new ReplaceDecoder(config);\n            case 'ByteFallback':\n                return new ByteFallback(config);\n            case 'Fuse':\n                return new FuseDecoder(config);\n            case 'Strip':\n                return new StripDecoder(config);\n\n            case 'Sequence':\n                return new DecoderSequence(config);\n\n            case 'CTC':\n                return new CTCDecoder(config);\n            case 'BPEDecoder':\n                return new BPEDecoder(config);\n            default:\n                throw new Error(`Unknown Decoder type: ${config.type}`);\n        }\n    }\n\n    /**\n    * Calls the `decode` method.\n    *\n    * @param {string[]} tokens The list of tokens.\n    * @returns {string} The decoded string.\n    */\n    _call(tokens) {\n        return this.decode(tokens);\n    }\n\n    /**\n    * Decodes a list of tokens.\n    * @param {string[]} tokens The list of tokens.\n    * @returns {string} The decoded string.\n    */\n    decode(tokens) {\n        return this.decode_chain(tokens).join('');\n    }\n\n    /**\n     * Apply the decoder to a list of tokens.\n     * \n     * @param {string[]} tokens The list of tokens.\n     * @returns {string[]} The decoded list of tokens.\n     * @throws {Error} If the `decode_chain` method is not implemented in the subclass.\n     */\n    decode_chain(tokens) {\n        throw Error(\"`decode_chain` should be implemented in subclass.\")\n    }\n\n}\n\nclass ReplaceDecoder extends Decoder {\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        let pattern = createPattern(this.config.pattern);\n        if (pattern === null) {\n            return tokens;\n        }\n\n        return tokens.map(token => token.replaceAll(pattern, this.config.content))\n    }\n}\n\n\nclass ByteFallback extends Decoder {\n    constructor(config) {\n        super(config);\n\n        this.text_decoder = new TextDecoder();\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n\n        let new_tokens = [];\n        let previous_byte_tokens = [];\n\n        for (let token of tokens) {\n            let bytes = null;\n            if (token.length === 6 && token.startsWith('<0x') && token.endsWith('>')) {\n                let byte = parseInt(token.slice(3, 5), 16);\n                if (!isNaN(byte)) {\n                    bytes = byte;\n                }\n            }\n            if (bytes !== null) {\n                previous_byte_tokens.push(bytes);\n            } else {\n                if (previous_byte_tokens.length > 0) {\n                    let string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));\n                    new_tokens.push(string);\n                    previous_byte_tokens = [];\n                }\n                new_tokens.push(token);\n            }\n        }\n        if (previous_byte_tokens.length > 0) {\n            let string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));\n            new_tokens.push(string);\n            previous_byte_tokens = [];\n        }\n\n        return new_tokens;\n    }\n}\n\n/**\n * Fuse simply fuses all tokens into one big string.\n * It's usually the last decoding step anyway, but this decoder\n * exists incase some decoders need to happen after that step\n */\nclass FuseDecoder extends Decoder {\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        return [tokens.join('')];\n    }\n}\n\n\nclass StripDecoder extends Decoder {\n    constructor(config) {\n        super(config);\n\n        this.content = this.config.content;\n        this.start = this.config.start;\n        this.stop = this.config.stop;\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        return tokens.map(token => {\n            let start_cut = 0;\n            for (let i = 0; i < this.start; ++i) {\n                if (token[i] === this.content) {\n                    start_cut = i + 1;\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            let stop_cut = token.length;\n            for (let i = 0; i < this.stop; ++i) {\n                const index = token.length - i - 1;\n                if (token[index] === this.content) {\n                    stop_cut = index;\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            return token.slice(start_cut, stop_cut)\n        });\n    }\n}\n\n/**\n * A decoder that decodes a list of WordPiece tokens into a single string.\n * @extends Decoder\n */\nclass WordPieceDecoder extends Decoder {\n\n    /**\n     * Creates a new instance of WordPieceDecoder.\n     * @param {Object} config The configuration object.\n     * @param {string} config.prefix The prefix used for WordPiece encoding.\n     * @param {boolean} config.cleanup Whether to cleanup the decoded string.\n     */\n    constructor(config) {\n        super(config);\n        this.cleanup = config.cleanup;\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        return tokens.map((token, i) => {\n            if (i !== 0) {\n                if (token.startsWith(this.config.prefix)) {\n                    // NOTE: .replace() is intended; only replace first occurrence\n                    token = token.replace(this.config.prefix, '');\n                } else {\n                    token = ' ' + token;\n                }\n            }\n            if (this.cleanup) {\n                token = clean_up_tokenization(token)\n            }\n\n            return token;\n        });\n    }\n}\n\n/**\n * Byte-level decoder for tokenization output. Inherits from the `Decoder` class.\n * @extends Decoder\n */\nclass ByteLevelDecoder extends Decoder {\n\n    /**\n     * Create a `ByteLevelDecoder` object.\n     * @param {Object} config Configuration object.\n     */\n    constructor(config) {\n        super(config);\n\n        this.byte_decoder = UNICODE_TO_BYTES;\n        this.text_decoder = new TextDecoder(\"utf-8\", {\n            fatal: false,\n            ignoreBOM: true,\n        });\n\n        this.end_of_word_suffix = null;\n    }\n\n    /**\n     * Convert an array of tokens to string by decoding each byte.\n     * @param {string[]} tokens Array of tokens to be decoded.\n     * @returns {string} The decoded string.\n     */\n    convert_tokens_to_string(tokens) {\n        let text = tokens.join('');\n\n        let byteArray = new Uint8Array([...text].map(c => this.byte_decoder[c]));\n        let decoded_text = this.text_decoder.decode(byteArray);\n        return decoded_text;\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        // TODO move to base class (like HF)\n        // tokens === filtered_tokens\n\n        // To avoid mixing byte-level and unicode for byte-level BPT\n        // we need to build string separately for added tokens and byte-level tokens\n        // cf. https://github.com/huggingface/transformers/issues/1133\n        let sub_texts = [];\n        let current_sub_text = [];\n        for (let token of tokens) {\n            // tokens sent here are already filtered, so we don't need to do this\n            // if (skip_special_tokens && this.all_special_ids.includes(token)) {\n            //     continue;\n            // }\n\n            if (this.added_tokens.includes(token)) {\n                if (current_sub_text.length > 0) {\n                    sub_texts.push(this.convert_tokens_to_string(current_sub_text));\n                    current_sub_text = [];\n                }\n                sub_texts.push(token);\n            } else {\n                current_sub_text.push(token);\n            }\n        }\n        if (current_sub_text.length > 0) {\n            sub_texts.push(this.convert_tokens_to_string(current_sub_text));\n        }\n\n        // TODO add spaces_between_special_tokens and clean_up_tokenization_spaces options\n\n        return sub_texts;\n    }\n}\n\n/**\n * The CTC (Connectionist Temporal Classification) decoder.\n * See https://github.com/huggingface/tokenizers/blob/bb38f390a61883fc2f29d659af696f428d1cda6b/tokenizers/src/decoders/ctc.rs\n */\nclass CTCDecoder extends Decoder {\n\n    constructor(config) {\n        super(config);\n\n        this.pad_token = this.config.pad_token;\n        this.word_delimiter_token = this.config.word_delimiter_token;\n        this.cleanup = this.config.cleanup;\n    }\n    /**\n     * Converts a connectionist-temporal-classification (CTC) output tokens into a single string.\n     * @param {string[]} tokens Array of tokens to be decoded.\n     * @returns {string} The decoded string.\n     */\n    convert_tokens_to_string(tokens) {\n        if (tokens.length === 0) return '';\n\n        // group same tokens into non-repeating tokens in CTC style decoding\n        let grouped_tokens = [tokens[0]];\n        for (let i = 1; i < tokens.length; ++i) {\n            if (tokens[i] !== grouped_tokens.at(-1)) {\n                grouped_tokens.push(tokens[i]);\n            }\n        }\n\n        // filter self.pad_token which is used as CTC-blank token\n        let filtered_tokens = grouped_tokens.filter(token => token !== this.pad_token);\n\n        let text = filtered_tokens.join('');\n        if (this.cleanup) {\n            // cleanup and replace delimiter token\n            text = clean_up_tokenization(text)\n                .replaceAll(this.word_delimiter_token, ' ')\n                .trim();\n        }\n        return text;\n    }\n\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        return [this.convert_tokens_to_string(tokens)];\n    }\n}\n\n/**\n * Apply a sequence of decoders.\n * @extends Decoder\n */\nclass DecoderSequence extends Decoder {\n\n    /**\n     * Creates a new instance of DecoderSequence.\n     * @param {Object} config The configuration object.\n     * @param {Decoder[]} config.decoders The list of decoders to apply.\n     */\n    constructor(config) {\n        super(config);\n        this.decoders = config.decoders.map(x => Decoder.fromConfig(x));\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        // Use reduce to apply each decoder to the tokens\n        return this.decoders.reduce((toks, decoder) => {\n            return decoder.decode_chain(toks);\n        }, tokens);\n    }\n\n}\n\nclass BPEDecoder extends Decoder {\n    constructor(config) {\n        super(config);\n\n        this.suffix = this.config.suffix;\n    }\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        return tokens.map((token, i) => {\n            return token.replaceAll(this.suffix, (i === tokens.length - 1) ? '' : ' ')\n        });\n    }\n}\n\n\n/**\n * This PreTokenizer replaces spaces with the given replacement character, adds a prefix space if requested,\n * and returns a list of tokens.\n * @extends PreTokenizer\n */\nclass MetaspacePreTokenizer extends PreTokenizer {\n    /**\n     * @param {Object} config The configuration object for the MetaspacePreTokenizer.\n     * @param {boolean} config.add_prefix_space Whether to add a prefix space to the first token.\n     * @param {string} config.replacement The character to replace spaces with.\n     * @param {string} [config.str_rep=config.replacement] An optional string representation of the replacement character.\n     */\n    constructor(config) {\n        super();\n\n        this.addPrefixSpace = config.add_prefix_space;\n        this.replacement = config.replacement;\n        this.strRep = config.str_rep || this.replacement;\n    }\n\n    /**\n     * This method takes a list of normalized tokens, replaces spaces with the replacement character,\n     * adds a prefix space if requested, and returns a new list of tokens.\n     * @param {string[]|string} normalizedTokens The list of normalized tokens to pre-tokenize.\n     * @returns {string[]} A new list of pre-tokenized tokens.\n     */\n    pre_tokenize(normalizedTokens) {\n        if (typeof normalizedTokens === 'string') {\n            // Metaspace acts on a list of tokens. If passing in a string, first split on whitespace\n            // NOTE: For some reason, metaspace includes trailing whitespace, so we only trim leading whitespace.\n            // See: https://github.com/huggingface/tokenizers/issues/1250\n            normalizedTokens = normalizedTokens.trimStart().split(/\\s+/);\n        }\n\n        const result = [];\n        for (let token of normalizedTokens) {\n            let normalized = token.replaceAll(' ', this.strRep);\n            if (this.addPrefixSpace && !normalized.startsWith(this.replacement)) {\n                normalized = this.strRep + normalized;\n            }\n            result.push(normalized);\n        }\n        return result;\n    }\n}\n\n/**\n * MetaspaceDecoder class extends the Decoder class and decodes Metaspace tokenization.\n * @extends Decoder\n */\nclass MetaspaceDecoder extends Decoder {\n    /**\n     * Constructs a new MetaspaceDecoder object.\n     * @param {Object} config The configuration object for the MetaspaceDecoder.\n     * @param {boolean} config.add_prefix_space Whether to add a prefix space to the decoded string.\n     * @param {string} config.replacement The string to replace spaces with.\n     */\n    constructor(config) {\n        super(config);\n\n        this.addPrefixSpace = config.add_prefix_space;\n        this.replacement = config.replacement;\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        let result = [];\n        for (let i = 0; i < tokens.length; ++i) {\n            let normalized = tokens[i].replaceAll(this.replacement, ' ');\n            if (this.addPrefixSpace && i == 0 && normalized.startsWith(' ')) {\n                normalized = normalized.substring(1);\n            }\n            result.push(normalized);\n        }\n        return result;\n    }\n}\n\n/**\n * A normalizer that applies a precompiled charsmap.\n * This is useful for applying complex normalizations in C++ and exposing them to JavaScript.\n * @extends Normalizer\n * @param {Object} config The configuration object for the Precompiled normalizer.\n * @param {Object} config.precompiled_charsmap The precompiled charsmap object.\n */\nclass Precompiled extends Normalizer {\n    /**\n     * Create a new instance of Precompiled normalizer.\n     * @param {Object} config The configuration object.\n     * @param {any} config.precompiled_charsmap Precompiled chars mapping.\n     */\n    constructor(config) {\n        super(config);\n        this.charsmap = config.precompiled_charsmap;\n    }\n\n    /**\n     * Normalizes the given text by applying the precompiled charsmap.\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        // As stated in the sentencepiece normalization docs (https://github.com/google/sentencepiece/blob/master/doc/normalization.md#use-pre-defined-normalization-rule),\n        // there are 5 pre-defined normalization rules:\n        //  1. nmt_nfkc: NFKC normalization with some additional normalization around spaces. (default)\n        //  2. nfkc: original NFKC normalization.\n        //  3. nmt_nfkc_cf: nmt_nfkc + Unicode case folding (mostly lower casing)\n        //  4. nfkc_cf: nfkc + Unicode case folding.\n        //  5. identity: no normalization\n        // \n        // For now, we only implement the default (nmt_nfkc).\n        // See https://raw.githubusercontent.com/google/sentencepiece/master/data/nmt_nfkc.tsv for the full list of rules.\n        // TODO: detect when a different `this.charsmap` is used.\n\n        text = text.replace(/[\\u0001-\\u0008\\u000B\\u000E-\\u001F\\u007F\\u008F\\u009F]/gm, ''); // Remove control characters\n        text = text.replace(/[\\u0009\\u000A\\u000C\\u000D\\u1680\\u200B\\u200C\\u200E\\u200F\\u2028\\u2029\\u2581\\uFEFF\\uFFFD]/gm, '\\u0020'); // Replace certain characters with a space\n\n        if (text.includes('\\uFF5E')) {\n            // To match the sentencepiece implementation 100%, we must handle a very strange edge-case.\n            // For some reason, the \"Fullwidth Tilde\" character (\\uFF5E) should not be converted to the standard Tilde character (\\u007E).\n            // However, NFKC normalization does do this conversion. As a result, we split the string on the Fullwidth Tilde character,\n            // perform NFKC normalization on each substring, and then join them back together with the Fullwidth Tilde character.\n            const parts = text.split('\\uFF5E');\n            text = parts.map(part => part.normalize('NFKC')).join('\\uFF5E');\n        } else {\n            text = text.normalize('NFKC');\n        }\n\n        return text;\n    }\n}\n\n/**\n * A pre-tokenizer that applies a sequence of pre-tokenizers to the input text.\n * @extends PreTokenizer\n */\nclass PreTokenizerSequence extends PreTokenizer {\n    /**\n     * Creates an instance of PreTokenizerSequence.\n     * @param {Object} config The configuration object for the pre-tokenizer sequence.\n     * @param {Object[]} config.pretokenizers An array of pre-tokenizer configurations.\n     */\n    constructor(config) {\n        super();\n        this.tokenizers = config.pretokenizers.map(x => PreTokenizer.fromConfig(x));\n    }\n\n    /**\n     * Applies each pre-tokenizer in the sequence to the input text in turn.\n     * @param {string|string[]} text The text(s) to pre-tokenize.\n     * @returns {string[]} The pre-tokenized text.\n     */\n    pre_tokenize_text(text) {\n        if (typeof text === 'string') {\n            text = [text];\n        }\n        // Use reduce to apply each tokenizer to the text\n        return this.tokenizers.reduce((preTokenizedText, tokenizer) => {\n            return tokenizer.pre_tokenize(preTokenizedText);\n        }, text);\n    }\n}\n\n/**\n * Splits a string of text by whitespace characters into individual tokens.\n * @extends PreTokenizer\n */\nclass WhitespaceSplit extends PreTokenizer {\n    /**\n     * Creates an instance of WhitespaceSplit.\n     * @param {Object} config The configuration object for the pre-tokenizer sequence.\n     */\n    constructor(config) {\n        super();\n    }\n    /**\n     * Pre-tokenizes the input text by splitting it on whitespace characters.\n     * @param {string} text The text to be pre-tokenized.\n     * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.\n     */\n    pre_tokenize_text(text) {\n        return whitespace_split(text);\n    }\n}\n\n// NOTE: `ReplacePreTokenizer` is custom (to support `BlenderbotSmallTokenizer`)\nclass ReplacePreTokenizer extends PreTokenizer {\n    /**\n     * @param {Object} config The configuration options for the pre-tokenizer.\n     * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.\n     * @param {string} config.content What to replace the pattern with.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n        this.pattern = createPattern(this.config.pattern);\n        this.content = this.config.content;\n    }\n\n    /**\n     * Pre-tokenizes the input text by replacing certain characters.\n     * @param {string} text The text to be pre-tokenized.\n     * @returns {string[]} An array of tokens produced by replacing certain characters.\n     */\n    pre_tokenize_text(text) {\n        if (this.pattern === null) {\n            return [text];\n        }\n        return [text.replaceAll(this.pattern, this.config.content)];\n    }\n}\n\n\nexport class PreTrainedTokenizer extends Callable {\n    /**\n     * Create a new PreTrainedTokenizer instance.\n     * @param {Object} tokenizerJSON The JSON of the tokenizer.\n     * @param {Object} tokenizerConfig The config of the tokenizer.\n     */\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super();\n\n        // Construct parts of the tokenizer from the JSON\n        this.normalizer = Normalizer.fromConfig(tokenizerJSON.normalizer);\n        this.pre_tokenizer = PreTokenizer.fromConfig(tokenizerJSON.pre_tokenizer);\n\n        this.model = TokenizerModel.fromConfig(tokenizerJSON.model, tokenizerConfig);\n        this.post_processor = PostProcessor.fromConfig(tokenizerJSON.post_processor);\n\n        // TODO: maybe, allow this to be null; in which case, we use model as decoder too?\n        this.decoder = Decoder.fromConfig(tokenizerJSON.decoder);\n\n\n        // Another slight hack to add `end_of_word_suffix` (if present) to the decoder\n        // This is needed for cases where BPE model and ByteLevel decoder are used\n        // For more information, see https://github.com/xenova/transformers.js/issues/74\n        // TODO: save this to the decoder when exporting?\n        this.decoder.end_of_word_suffix = this.model.end_of_word_suffix;\n\n        // Add added_tokens to model\n        this.special_tokens = [];\n        this.all_special_ids = [];\n        this.added_tokens = [];\n        for (let addedToken of tokenizerJSON.added_tokens) {\n            let id = addedToken.id;\n            let content = addedToken.content;\n\n            this.added_tokens.push(content);\n\n            this.model.tokens_to_ids.set(content, id);\n            this.model.vocab[id] = content;\n\n            if (addedToken.special) {\n                this.special_tokens.push(content);\n                this.all_special_ids.push(id);\n            }\n        }\n\n        // Update additional_special_tokens\n        this.special_tokens.push(...(tokenizerConfig.additional_special_tokens ?? []));\n        this.special_tokens = [...new Set(this.special_tokens)]; // Remove duplicates\n\n        // Slight hack, but it prevents code duplication:\n        this.decoder.added_tokens = this.added_tokens;\n\n        this.added_tokens_regex = this.added_tokens.length > 0 ? new RegExp(\n            '(' + this.added_tokens.map(escapeRegExp).join('|') + ')'\n        ) : null;\n\n        // Set mask token if present (otherwise will be undefined, which is fine)\n        this.mask_token = this.getToken(tokenizerConfig, 'mask_token');\n        this.mask_token_id = this.model.tokens_to_ids.get(this.mask_token);\n\n        this.pad_token = this.getToken(tokenizerConfig, 'pad_token', 'eos_token');\n        this.pad_token_id = this.model.tokens_to_ids.get(this.pad_token);\n\n        this.sep_token = this.getToken(tokenizerConfig, 'sep_token');\n        this.sep_token_id = this.model.tokens_to_ids.get(this.sep_token);\n\n        this.model_max_length = tokenizerConfig.model_max_length;\n\n        /** @type {boolean} Whether or not to strip the text when tokenizing (removing excess spaces before and after the string). */\n        this.remove_space = tokenizerConfig.remove_space;\n\n        this.clean_up_tokenization_spaces = tokenizerConfig.clean_up_tokenization_spaces ?? true;\n        this.do_lowercase_and_remove_accent = tokenizerConfig.do_lowercase_and_remove_accent ?? false;\n\n        // TODO allow user to change this\n        this.padding_side = 'right';\n    }\n\n    /**\n     * Returns the value of the first matching key in the tokenizer config object.\n     * @param {...string} keys One or more keys to search for in the tokenizer config object.\n     * @returns {string|null} The value associated with the first matching key, or null if no match is found.\n     * @throws {Error} If an object is found for a matching key and its __type property is not \"AddedToken\".\n     */\n    getToken(tokenizerConfig, ...keys) {\n        for (let key of keys) {\n            let item = tokenizerConfig[key];\n\n            if (!item) continue;\n\n            if (typeof item === 'object') {\n                if (item.__type === 'AddedToken') {\n                    return item.content;\n                } else {\n                    throw Error(`Unknown token: ${item}`);\n                }\n            } else {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Loads a pre-trained tokenizer from the given `pretrained_model_name_or_path`. \n     * \n     * @param {string} pretrained_model_name_or_path The path to the pre-trained tokenizer.\n     * @param {import('./utils/hub.js').PretrainedOptions} options Additional options for loading the tokenizer.\n     * \n     * @throws {Error} Throws an error if the tokenizer.json or tokenizer_config.json files are not found in the `pretrained_model_name_or_path`.\n     * @returns {Promise<PreTrainedTokenizer>} A new instance of the `PreTrainedTokenizer` class.\n     */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n    } = {}) {\n\n        let info = await loadTokenizer(pretrained_model_name_or_path, {\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n        })\n\n        // @ts-ignore\n        return new this(...info);\n    }\n\n    /**\n     * This function can be overridden by a subclass to apply additional preprocessing\n     * to a model's input data.\n     * @param {Object} inputs An object containing input data as properties.\n     * @returns {Object} The modified inputs object.\n     */\n    prepare_model_inputs(inputs) {\n        return inputs;\n    }\n\n    /**\n     * Encode/tokenize the given text(s).\n     * @param {string|string[]} text The text to tokenize.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {string|string[]} [options.text_pair=null] Optional second sequence to be encoded. If set, must be the same type as text.\n     * @param {boolean} [options.padding=false] Whether to pad the input sequences.\n     * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.\n     * @param {boolean} [options.truncation=null] Whether to truncate the input sequences.\n     * @param {number} [options.max_length=null] Maximum length of the returned list and optionally padding length.\n     * @param {boolean} [options.return_tensor=true] Whether to return the results as Tensors or arrays.\n     * @returns {{ input_ids: number[]|number[][]|Tensor, attention_mask: any[]|Tensor }} Object to be passed to the model.\n     */\n    _call(\n        // Required positional arguments\n        text,\n\n        // Optional keyword arguments\n        {\n            text_pair = null,\n            add_special_tokens = true,\n            padding = false,\n            truncation = null,\n            max_length = null,\n            return_tensor = true, // Different to HF\n        } = {},\n    ) {\n\n        /** @type {number[]|number[][]|Tensor} */\n        let tokens;\n\n        if (Array.isArray(text)) {\n            if (text.length === 0) {\n                throw Error('text array must be non-empty')\n            }\n\n            if (text_pair !== null) {\n                if (!Array.isArray(text_pair)) {\n                    throw Error('text_pair must also be an array')\n\n                } else if (text.length !== text_pair.length) {\n                    throw Error('text and text_pair must have the same length')\n                }\n\n                tokens = text.map(\n                    (t, i) => this.encode(t, text_pair[i], { add_special_tokens })\n                )\n\n            } else {\n                tokens = text.map(x => this.encode(x, null, { add_special_tokens }));\n            }\n\n        } else {\n            if (text === null) {\n                throw Error('text may not be null')\n            }\n\n            if (Array.isArray(text_pair)) {\n                throw Error('When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).')\n            }\n\n            // For single input, we just wrap in an array, and then unwrap later.\n            tokens = [this.encode(text, text_pair, { add_special_tokens })];\n        }\n        // At this point, tokens is batched: [batch_size, tokens]\n        // However, array may be jagged. So, we pad to max_length\n\n        let maxLengthOfBatch = max(tokens.map(x => x.length))[0];\n\n        // If null, we calculate max length from sequences\n        if (max_length === null) {\n            max_length = maxLengthOfBatch;\n        }\n\n        // Ensure it is less than model max length\n        max_length = Math.min(max_length, this.model_max_length)\n\n        /** @type {any[]|Tensor} */\n        let attention_mask = [];\n        if (padding || truncation) {\n            // Perform padding and/or truncation\n            for (let i = 0; i < tokens.length; ++i) {\n                if (tokens[i].length === max_length) {\n                    attention_mask.push(new Array(tokens[i].length).fill(1))\n                    continue;\n\n                } else if (tokens[i].length > max_length) {\n                    // possibly truncate\n                    if (truncation) {\n                        tokens[i] = tokens[i].slice(0, max_length);\n                    }\n                    attention_mask.push(new Array(tokens[i].length).fill(1))\n\n                } else { // t.length < max_length\n                    if (padding) {\n                        let diff = max_length - tokens[i].length;\n\n                        if (this.padding_side === 'right') {\n                            attention_mask.push(\n                                (new Array(tokens[i].length).fill(1)).concat(new Array(diff).fill(0))\n                            )\n                            tokens[i].push(...new Array(diff).fill(this.pad_token_id))\n                        } else { // left\n                            attention_mask.push(\n                                (new Array(diff).fill(0)).concat(new Array(tokens[i].length).fill(1))\n                            )\n                            tokens[i].unshift(...new Array(diff).fill(this.pad_token_id))\n                        }\n\n                    } else {\n                        attention_mask.push(new Array(tokens[i].length).fill(1))\n                    }\n                }\n            }\n        } else {\n            attention_mask = tokens.map(x => new Array(x.length).fill(1))\n        }\n\n        if (return_tensor) {\n            if (!(padding && truncation)) {\n                // Not, guaranteed that all items have same length, so\n                // we perform additional check\n\n                if (tokens.some(x => x.length !== tokens[0].length)) {\n                    throw Error(\n                        \"Unable to create tensor, you should probably activate truncation and/or padding \" +\n                        \"with 'padding=true' and 'truncation=true' to have batched tensors with the same length.\"\n                    )\n                }\n            }\n\n            // Now we actually convert to tensor\n            // NOTE: In the same way as the python library, we return a batched tensor, regardless of\n            // whether we have a single input or multiple inputs.\n            let dims = [tokens.length, tokens[0].length];\n\n            tokens = new Tensor('int64',\n                BigInt64Array.from(tokens.flat().map(BigInt)),\n                dims\n            );\n\n            attention_mask = new Tensor(\n                'int64',\n                BigInt64Array.from(attention_mask.flat().map(BigInt)),\n                dims\n            )\n        } else {\n            // If not returning a tensor, we match the input type\n            if (!Array.isArray(text)) {\n                // Input was not batched, so we unwrap\n                tokens = tokens[0];\n                attention_mask = attention_mask[0];\n            }\n        }\n\n\n        // Finally, add attention mask, and possibly model-specific parameters\n        let modelInputs = {\n            input_ids: tokens,\n            attention_mask: attention_mask\n        }\n\n        // Optional post-processing\n        modelInputs = this.prepare_model_inputs(modelInputs);\n\n        return modelInputs\n    }\n\n    /**\n     * Encodes a single text using the preprocessor pipeline of the tokenizer.\n     *\n     * @param {string|null} text The text to encode.\n     * @returns {string[]|null} The encoded tokens.\n     */\n    _encode_text(text) {\n        if (text === null) return null;\n\n        // Actual function which does encoding, for a single text\n        // First, we take care of special tokens. Needed to avoid issues arising from\n        // normalization and/or pretokenization (which may not preserve special tokens)\n        const sections = this.added_tokens_regex ? text.split(this.added_tokens_regex).filter(x => x) : [text];\n        let tokens = sections.map(x => {\n            if (this.added_tokens.includes(x)) {\n                // Ignore added tokens\n                return x\n            } else {\n                if (this.remove_space === true) {\n                    x = x.trim().split(/\\s+/).join(' ');\n                }\n                if (this.do_lowercase_and_remove_accent) {\n                    x = lowercase_and_remove_accent(x);\n                }\n\n                if (this.normalizer !== null) {\n                    x = this.normalizer(x);\n                }\n\n                let sectionTokens = (this.pre_tokenizer !== null) ? this.pre_tokenizer(x) : [x];\n\n                let tokens = this.model(sectionTokens);\n\n                return tokens;\n            }\n        }).flat();\n\n        return tokens;\n    }\n\n    /**\n     * Encodes a single text or a pair of texts using the model's tokenizer.\n     *\n     * @param {string} text The text to encode.\n     * @param {string|null} text_pair The optional second text to encode.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.\n     * @returns {number[]} An array of token IDs representing the encoded text(s).\n     */\n    encode(text, text_pair = null, {\n        add_special_tokens = true,\n    } = {}) {\n        // Function called by users to encode possibly multiple texts\n        let tokens = this._encode_text(text);\n        let tokens2 = this._encode_text(text_pair);\n\n        // TODO improve `add_special_tokens` and ensure correctness\n        let combinedTokens = (this.post_processor !== null && add_special_tokens)\n            ? this.post_processor(tokens, tokens2)\n            : mergeArrays(tokens ?? [], tokens2 ?? []);\n\n        let ids = this.model.convert_tokens_to_ids(combinedTokens);\n        return ids;\n    }\n\n    /**\n     * Decode a batch of tokenized sequences.\n     * @param {number[][]} batch List of tokenized input sequences.\n     * @param {Object} decode_args (Optional) Object with decoding arguments.\n     * @returns {string[]} List of decoded sequences.\n     */\n    batch_decode(batch, decode_args = {}) {\n        return batch.map(x => this.decode(x, decode_args));\n    }\n\n    /**\n     * Decodes a sequence of token IDs back to a string.\n     *\n     * @param {number[]} token_ids List of token IDs to decode.\n     * @param {Object} [decode_args={}]\n     * @param {boolean} [decode_args.skip_special_tokens=false] If true, special tokens are removed from the output string.\n     * @param {boolean} [decode_args.clean_up_tokenization_spaces=true] If true, spaces before punctuations and abbreviated forms are removed.\n     *\n     * @returns {string} The decoded string.\n     * @throws {Error} If `token_ids` is not a non-empty array of integers.\n     */\n    decode(\n        token_ids,\n        decode_args = {},\n    ) {\n        if (!Array.isArray(token_ids) || token_ids.length === 0 || !isIntegralNumber(token_ids[0])) {\n            throw Error(\"token_ids must be a non-empty array of integers.\");\n        }\n\n        return this.decode_single(token_ids, decode_args)\n    }\n\n    /**\n     * Decode a single list of token ids to a string.\n     * @param {number[]} token_ids List of token ids to decode\n     * @param {Object} decode_args Optional arguments for decoding\n     * @param {boolean} [decode_args.skip_special_tokens=false] Whether to skip special tokens during decoding\n     * @param {boolean} [decode_args.clean_up_tokenization_spaces=null] Whether to clean up tokenization spaces during decoding.\n     * If null, the value is set to `this.decoder.cleanup` if it exists, falling back to `this.clean_up_tokenization_spaces` if it exists, falling back to `true`.\n     * @returns {string} The decoded string\n     */\n    decode_single(\n        token_ids,\n        {\n            skip_special_tokens = false,\n            clean_up_tokenization_spaces = null,\n        }\n    ) {\n        let tokens = this.model.convert_ids_to_tokens(token_ids);\n        if (skip_special_tokens) {\n            tokens = tokens.filter(x => !this.special_tokens.includes(x));\n        }\n\n        /** @type {string} */\n        let decoded = this.decoder(tokens);\n\n\n        // Slight hack, but prevents having to pass `skip_special_tokens` to\n        // each call to `decode`, which would lead to code duplication.\n        if (this.decoder.end_of_word_suffix) {\n            decoded = decoded.replaceAll(this.decoder.end_of_word_suffix, ' ');\n            if (skip_special_tokens) {\n                decoded = decoded.trim();\n            }\n        }\n\n        if (clean_up_tokenization_spaces ?? this.clean_up_tokenization_spaces) {\n            decoded = clean_up_tokenization(decoded);\n        }\n\n        return decoded;\n    }\n\n}\n\n/**\n* Helper method for adding `token_type_ids` to model inputs\n* @param {Object} inputs An object containing the input ids and attention mask.\n* @returns {Object} The prepared inputs object.\n*/\nfunction add_token_types(inputs) {\n    // TODO ensure correctness when token pair is present\n    if (inputs.input_ids instanceof Tensor) {\n        inputs.token_type_ids = new Tensor(\n            'int64',\n            new BigInt64Array(inputs.input_ids.data.length),\n            inputs.input_ids.dims\n        )\n    } else if (Array.isArray(inputs.input_ids)) {\n\n        if (Array.isArray(inputs.input_ids[0])) {\n            // This means input is batched, so we need to batch the token_type_ids as well\n            inputs.token_type_ids = inputs.input_ids.map(\n                x => new Array(x.length).fill(0)\n            )\n        } else {\n            inputs.token_type_ids = new Array(inputs.input_ids.length).fill(0);\n        }\n    } else {\n        throw new Error('Input ids must be a Tensor or an Array')\n    }\n\n    return inputs;\n}\n\n/**\n * BertTokenizer is a class used to tokenize text for BERT models.\n * @extends PreTrainedTokenizer\n */\nexport class BertTokenizer extends PreTrainedTokenizer {\n    /** @type {add_token_types} */\n    prepare_model_inputs(inputs) {\n        return add_token_types(inputs);\n    }\n}\n/**\n * Albert tokenizer\n * @extends PreTrainedTokenizer\n */\nexport class AlbertTokenizer extends PreTrainedTokenizer {\n    /** @type {add_token_types} */\n    prepare_model_inputs(inputs) {\n        return add_token_types(inputs);\n    }\n}\nexport class MobileBertTokenizer extends PreTrainedTokenizer {\n    /** @type {add_token_types} */\n    prepare_model_inputs(inputs) {\n        return add_token_types(inputs);\n    }\n}\nexport class SqueezeBertTokenizer extends PreTrainedTokenizer {\n    /** @type {add_token_types} */\n    prepare_model_inputs(inputs) {\n        return add_token_types(inputs);\n    }\n}\nexport class DebertaTokenizer extends PreTrainedTokenizer {\n    /** @type {add_token_types} */\n    prepare_model_inputs(inputs) {\n        return add_token_types(inputs);\n    }\n}\nexport class DebertaV2Tokenizer extends PreTrainedTokenizer {\n    /** @type {add_token_types} */\n    prepare_model_inputs(inputs) {\n        return add_token_types(inputs);\n    }\n}\nexport class HerbertTokenizer extends PreTrainedTokenizer {\n    /** @type {add_token_types} */\n    prepare_model_inputs(inputs) {\n        return add_token_types(inputs);\n    }\n}\nexport class DistilBertTokenizer extends PreTrainedTokenizer { }\nexport class CamembertTokenizer extends PreTrainedTokenizer { }\nexport class XLMTokenizer extends PreTrainedTokenizer {\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n        console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\\'s \"fast\" tokenizers library. Therefore, you may experience slightly inaccurate results.')\n    }\n\n    /** @type {add_token_types} */\n    prepare_model_inputs(inputs) {\n        return add_token_types(inputs);\n    }\n}\n\nexport class T5Tokenizer extends PreTrainedTokenizer { }\nexport class GPT2Tokenizer extends PreTrainedTokenizer { }\nexport class BartTokenizer extends PreTrainedTokenizer { }\nexport class MBartTokenizer extends PreTrainedTokenizer {\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n\n        this.languageRegex = /^[a-z]{2}_[A-Z]{2}$/;\n        this.language_codes = this.special_tokens.filter(x => this.languageRegex.test(x));\n        this.lang_to_token = x => x; // Identity function\n    }\n\n    /**\n     * Helper function to build translation inputs for an `MBartTokenizer`.\n     * @param {string|string[]} raw_inputs The text to tokenize.\n     * @param {Object} tokenizer_options Options to be sent to the tokenizer\n     * @param {Object} generate_kwargs Generation options.\n     * @returns {Object} Object to be passed to the model.\n     */\n    _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {\n        return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);\n    }\n}\nexport class MBart50Tokenizer extends MBartTokenizer { } // NOTE: extends MBartTokenizer\n\nexport class RobertaTokenizer extends PreTrainedTokenizer { }\n\nexport class BloomTokenizer extends PreTrainedTokenizer {\n    constructor(tokenizerJSON, tokenizerConfig) {\n        // Override the default (invalid) regex of the pretokenizer.\n        // For more information, see https://github.com/xenova/transformers.js/issues/94\n        const splitChars = '.,!?\\u2026\\u3002\\uff0c\\u3001\\u0964\\u06d4\\u060c';\n        const patternObject = tokenizerJSON.pre_tokenizer?.pretokenizers[0]?.pattern;\n        if (patternObject && patternObject.Regex === ` ?[^(\\\\s|[${splitChars}])]+`) {\n            patternObject.Regex = ` ?[^\\\\s${splitChars}]+`;\n        }\n        super(tokenizerJSON, tokenizerConfig);\n    }\n}\nexport class LlamaTokenizer extends PreTrainedTokenizer { }\nexport class CodeLlamaTokenizer extends PreTrainedTokenizer { }\n\nexport class XLMRobertaTokenizer extends PreTrainedTokenizer { }\nexport class MPNetTokenizer extends PreTrainedTokenizer { }\n\nexport class FalconTokenizer extends PreTrainedTokenizer { }\n\nexport class GPTNeoXTokenizer extends PreTrainedTokenizer { }\n\n\n/**\n * Helper function to build translation inputs for an `NllbTokenizer` or `M2M100Tokenizer`.\n * @param {PreTrainedTokenizer} self The tokenizer instance.\n * @param {string|string[]} raw_inputs The text to tokenize.\n * @param {Object} tokenizer_options Options to be sent to the tokenizer\n * @param {Object} generate_kwargs Generation options.\n * @returns {Object} Object to be passed to the model.\n * @private\n */\nfunction _build_translation_inputs(self, raw_inputs, tokenizer_options, generate_kwargs) {\n    if (!('language_codes' in self) || !Array.isArray(self.language_codes)) {\n        throw new Error('Tokenizer must have `language_codes` attribute set and it should be an array of language ids.')\n    }\n    if (!('languageRegex' in self) || !(self.languageRegex instanceof RegExp)) {\n        throw new Error('Tokenizer must have `languageRegex` attribute set and it should be a regular expression.')\n    }\n    if (!('lang_to_token' in self) || typeof self.lang_to_token !== 'function') {\n        throw new Error('Tokenizer must have `lang_to_token` attribute set and it should be a function.')\n    }\n    const src_lang_token = generate_kwargs.src_lang;\n    const tgt_lang_token = generate_kwargs.tgt_lang;\n\n    // Check that the target language is valid:\n    if (!self.language_codes.includes(tgt_lang_token)) {\n        throw new Error(`Target language code \"${tgt_lang_token}\" is not valid. Must be one of: {${self.language_codes.join(', ')}}`);\n    }\n\n    // Allow `src_lang` to be optional. If not set, we'll use the tokenizer's default.\n    if (src_lang_token !== undefined) {\n        // Check that the source language is valid:\n        if (!self.language_codes.includes(src_lang_token)) {\n            throw new Error(`Source language code \"${src_lang_token}\" is not valid. Must be one of: {${self.language_codes.join(', ')}}`);\n        }\n\n        // In the same way as the Python library, we override the post-processor\n        // to force the source language to be first:\n        for (let item of self.post_processor.config.single) {\n            if ('SpecialToken' in item && self.languageRegex.test(item.SpecialToken.id)) {\n                item.SpecialToken.id = self.lang_to_token(src_lang_token);\n                break;\n            }\n        }\n        // TODO: Do the same for pair?\n    }\n\n    // Override the `forced_bos_token_id` to force the correct language\n    generate_kwargs.forced_bos_token_id = self.model.convert_tokens_to_ids([self.lang_to_token(tgt_lang_token)])[0];\n\n    return self._call(raw_inputs, tokenizer_options);\n}\n\n/**\n * The NllbTokenizer class is used to tokenize text for NLLB (\"No Language Left Behind\") models.\n * \n * No Language Left Behind (NLLB) is a first-of-its-kind, AI breakthrough project\n * that open-sources models capable of delivering high-quality translations directly\n * between any pair of 200+ languages — including low-resource languages like Asturian,\n * Luganda, Urdu and more. It aims to help people communicate with anyone, anywhere,\n * regardless of their language preferences. For more information, check out their\n * [paper](https://arxiv.org/abs/2207.04672).\n * \n * For a list of supported languages (along with their language codes),\n * @see {@link https://github.com/facebookresearch/flores/blob/main/flores200/README.md#languages-in-flores-200}\n */\nexport class NllbTokenizer extends PreTrainedTokenizer {\n\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n\n        this.languageRegex = /^[a-z]{3}_[A-Z][a-z]{3}$/;\n        this.language_codes = this.special_tokens.filter(x => this.languageRegex.test(x));\n        this.lang_to_token = x => x; // Identity function\n    }\n\n    /**\n     * Helper function to build translation inputs for an `NllbTokenizer`.\n     * @param {string|string[]} raw_inputs The text to tokenize.\n     * @param {Object} tokenizer_options Options to be sent to the tokenizer\n     * @param {Object} generate_kwargs Generation options.\n     * @returns {Object} Object to be passed to the model.\n     */\n    _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {\n        return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);\n    }\n}\n\n/**\n * The M2M100Tokenizer class is used to tokenize text for M2M100 (\"Many-to-Many\") models.\n * \n * M2M100 is a multilingual encoder-decoder (seq-to-seq) model trained for Many-to-Many\n * multilingual translation. It was introduced in this [paper](https://arxiv.org/abs/2010.11125)\n * and first released in [this](https://github.com/pytorch/fairseq/tree/master/examples/m2m_100) repository.\n * \n * For a list of supported languages (along with their language codes),\n * @see {@link https://huggingface.co/facebook/m2m100_418M#languages-covered}\n */\nexport class M2M100Tokenizer extends PreTrainedTokenizer {\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n\n        this.languageRegex = /^__[a-z]{2,3}__$/;\n        this.language_codes = this.special_tokens\n            .filter(x => this.languageRegex.test(x))\n            .map(x => x.slice(2, -2));\n        this.lang_to_token = x => `__${x}__`;\n    }\n\n    /**\n     * Helper function to build translation inputs for an `M2M100Tokenizer`.\n     * @param {string|string[]} raw_inputs The text to tokenize.\n     * @param {Object} tokenizer_options Options to be sent to the tokenizer\n     * @param {Object} generate_kwargs Generation options.\n     * @returns {Object} Object to be passed to the model.\n     */\n    _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {\n        return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);\n    }\n}\n\n\nconst WHISPER_LANGUAGES = [\n    [\"en\", \"english\"],\n    [\"zh\", \"chinese\"],\n    [\"de\", \"german\"],\n    [\"es\", \"spanish\"],\n    [\"ru\", \"russian\"],\n    [\"ko\", \"korean\"],\n    [\"fr\", \"french\"],\n    [\"ja\", \"japanese\"],\n    [\"pt\", \"portuguese\"],\n    [\"tr\", \"turkish\"],\n    [\"pl\", \"polish\"],\n    [\"ca\", \"catalan\"],\n    [\"nl\", \"dutch\"],\n    [\"ar\", \"arabic\"],\n    [\"sv\", \"swedish\"],\n    [\"it\", \"italian\"],\n    [\"id\", \"indonesian\"],\n    [\"hi\", \"hindi\"],\n    [\"fi\", \"finnish\"],\n    [\"vi\", \"vietnamese\"],\n    [\"he\", \"hebrew\"],\n    [\"uk\", \"ukrainian\"],\n    [\"el\", \"greek\"],\n    [\"ms\", \"malay\"],\n    [\"cs\", \"czech\"],\n    [\"ro\", \"romanian\"],\n    [\"da\", \"danish\"],\n    [\"hu\", \"hungarian\"],\n    [\"ta\", \"tamil\"],\n    [\"no\", \"norwegian\"],\n    [\"th\", \"thai\"],\n    [\"ur\", \"urdu\"],\n    [\"hr\", \"croatian\"],\n    [\"bg\", \"bulgarian\"],\n    [\"lt\", \"lithuanian\"],\n    [\"la\", \"latin\"],\n    [\"mi\", \"maori\"],\n    [\"ml\", \"malayalam\"],\n    [\"cy\", \"welsh\"],\n    [\"sk\", \"slovak\"],\n    [\"te\", \"telugu\"],\n    [\"fa\", \"persian\"],\n    [\"lv\", \"latvian\"],\n    [\"bn\", \"bengali\"],\n    [\"sr\", \"serbian\"],\n    [\"az\", \"azerbaijani\"],\n    [\"sl\", \"slovenian\"],\n    [\"kn\", \"kannada\"],\n    [\"et\", \"estonian\"],\n    [\"mk\", \"macedonian\"],\n    [\"br\", \"breton\"],\n    [\"eu\", \"basque\"],\n    [\"is\", \"icelandic\"],\n    [\"hy\", \"armenian\"],\n    [\"ne\", \"nepali\"],\n    [\"mn\", \"mongolian\"],\n    [\"bs\", \"bosnian\"],\n    [\"kk\", \"kazakh\"],\n    [\"sq\", \"albanian\"],\n    [\"sw\", \"swahili\"],\n    [\"gl\", \"galician\"],\n    [\"mr\", \"marathi\"],\n    [\"pa\", \"punjabi\"],\n    [\"si\", \"sinhala\"],\n    [\"km\", \"khmer\"],\n    [\"sn\", \"shona\"],\n    [\"yo\", \"yoruba\"],\n    [\"so\", \"somali\"],\n    [\"af\", \"afrikaans\"],\n    [\"oc\", \"occitan\"],\n    [\"ka\", \"georgian\"],\n    [\"be\", \"belarusian\"],\n    [\"tg\", \"tajik\"],\n    [\"sd\", \"sindhi\"],\n    [\"gu\", \"gujarati\"],\n    [\"am\", \"amharic\"],\n    [\"yi\", \"yiddish\"],\n    [\"lo\", \"lao\"],\n    [\"uz\", \"uzbek\"],\n    [\"fo\", \"faroese\"],\n    [\"ht\", \"haitian creole\"],\n    [\"ps\", \"pashto\"],\n    [\"tk\", \"turkmen\"],\n    [\"nn\", \"nynorsk\"],\n    [\"mt\", \"maltese\"],\n    [\"sa\", \"sanskrit\"],\n    [\"lb\", \"luxembourgish\"],\n    [\"my\", \"myanmar\"],\n    [\"bo\", \"tibetan\"],\n    [\"tl\", \"tagalog\"],\n    [\"mg\", \"malagasy\"],\n    [\"as\", \"assamese\"],\n    [\"tt\", \"tatar\"],\n    [\"haw\", \"hawaiian\"],\n    [\"ln\", \"lingala\"],\n    [\"ha\", \"hausa\"],\n    [\"ba\", \"bashkir\"],\n    [\"jw\", \"javanese\"],\n    [\"su\", \"sundanese\"],\n]\n\n// @ts-ignore\nconst WHISPER_LANGUAGE_MAPPING = new Map(WHISPER_LANGUAGES);\n// @ts-ignore\nconst WHISPER_TO_LANGUAGE_CODE_MAPPING = new Map([\n    ...WHISPER_LANGUAGES.map(([k, v]) => [v, k]),\n    ...[\n        [\"burmese\", \"my\"],\n        [\"valencian\", \"ca\"],\n        [\"flemish\", \"nl\"],\n        [\"haitian\", \"ht\"],\n        [\"letzeburgesch\", \"lb\"],\n        [\"pushto\", \"ps\"],\n        [\"panjabi\", \"pa\"],\n        [\"moldavian\", \"ro\"],\n        [\"moldovan\", \"ro\"],\n        [\"sinhalese\", \"si\"],\n        [\"castilian\", \"es\"],\n    ]\n]);\n\n/**\n * WhisperTokenizer tokenizer\n * @extends PreTrainedTokenizer\n */\nexport class WhisperTokenizer extends PreTrainedTokenizer {\n\n    /**\n     * Decodes automatic speech recognition (ASR) sequences.\n     * @param {Array<{tokens: number[], token_timestamps?: number[], stride: number[]}>} sequences The sequences to decode.\n     * @param {Object} options The options to use for decoding.\n     * @returns {Array<string|{chunks?: undefined|Array<{language: string|null, timestamp: Array<number|null>, text: string}>}>} The decoded sequences.\n     */\n    _decode_asr(sequences, {\n        return_timestamps = false,\n        return_language = false,\n        time_precision = null,\n        force_full_sequences = true\n    } = {}) {\n        // Set force_full_sequences=false if you want streaming\n        // TODO add support for `return_language`\n\n        // Internal method meant to only be used by asr pipeline.\n        // Handles all the little quirks specific to whisper to handle\n        // the various options not allowed in other seq2seq models\n\n        // =========== Overview ============\n        // - iterate over all outputs\n        // - all tokens within output\n        // - Each token can be\n        //   - language token\n        //   - special token\n        //   - timestamp token\n        //   - text token\n        // - We accumulate the text tokens.\n        // - We split on end timestamps\n        // - Lots of complexity comes from stride and timestamps\n\n        if (time_precision === null) {\n            throw Error(\"Must specify time_precision\")\n        }\n        let last_language = null;\n\n        const returnWordTimestamps = return_timestamps === \"word\";\n\n        function new_chunk() {\n            return { \"language\": last_language, \"timestamp\": [null, null], \"text\": \"\" };\n        }\n\n        // Welcome to the state machine!\n        const chunks = [];\n        let chunk = new_chunk();\n        let time_offset = 0.0;\n        const timestamp_begin = this.model.convert_tokens_to_ids([\"<|notimestamps|>\"])[0] + 1;\n\n        let previous_tokens = [];\n        let previous_token_timestamps = [];\n\n        let skip = false;\n        let right_stride_start = null;\n\n\n        const all_special_ids = new Set(this.all_special_ids);\n\n        for (let output of sequences) {\n            // NOTE: python version has batches, so it uses [0]\n            const token_ids = output.tokens;\n            const token_timestamps = returnWordTimestamps ? output.token_timestamps : null;\n\n            // These keep track of timestamps within strides, which need\n            // to be skipped and resolve all tokens in a single chunk.\n            let last_timestamp = null;\n            let first_timestamp = timestamp_begin;\n\n            if (\"stride\" in output) {\n                const [chunk_len, stride_left, stride_right] = output.stride;\n\n                // Offset the timings to account for the other `model_outputs`.\n                time_offset -= stride_left;\n                right_stride_start = chunk_len - stride_right;\n\n                // Keeping track of timestamps within strides\n                // We're going to NOT split on those, and delay until we're\n                // out of BOTH stride. Otherwise lots of issues occur and\n                // corner cases\n                if (stride_left) {\n                    first_timestamp = stride_left / time_precision + timestamp_begin;\n                }\n\n                if (stride_right) {\n                    for (let i = token_ids.length - 1; i >= 0; --i) {\n                        const token = token_ids[i];\n                        if (token >= timestamp_begin) {\n                            // There can be several token in the right stride\n                            // But the last one is ALWAYS going to be skipped\n                            if (last_timestamp !== null && (token - timestamp_begin) * time_precision < right_stride_start) {\n                                break;\n                            }\n                            last_timestamp = token;\n                        }\n                    }\n                }\n            }\n\n            let current_tokens = [];\n            let current_token_timestamps = [];\n\n            // - all tokens within output\n            for (let i = 0; i < token_ids.length; ++i) {\n                const token = token_ids[i];\n                // 4 possible states for each token\n                // - 1/ Language code\n                // - 2/ all other special tokens (which we ignore)\n                // - 3/ Timestamp\n                // - 4/ Regular text\n\n                if (all_special_ids.has(token)) {\n                    const text = this.decode([token]);\n                    const language = WHISPER_LANGUAGE_MAPPING.get(text.slice(2, -2));\n\n                    if (language !== undefined) {\n                        // 1/ Indeed some language\n                        // TODO Handle when language is different from the previous\n                        // one, and we cannot use timestamped tokens to create chunks\n                        if (last_language !== null && language !== last_language && !return_timestamps) {\n                            previous_tokens.push(current_tokens);\n                            const resolved_tokens = this.findLongestCommonSequence(previous_tokens)[0];\n                            const resolved_text = this.decode(resolved_tokens);\n                            chunk.text = resolved_text;\n                            chunks.push(chunk);\n\n                            // Flush all our temporary context\n                            previous_tokens = [];\n                            current_tokens = [];\n                            chunk = new_chunk();\n                        }\n\n                        last_language = chunk.language = language;\n                    } else {\n                        // 2/ This is a regular special token, ignoring it\n                    }\n                } else if (token >= timestamp_begin) {\n                    // 3/ Timestamp token\n                    const time = (token - timestamp_begin) * time_precision + time_offset;\n                    const rounded_time = round(time, 2);\n\n                    if (last_timestamp !== null && token >= last_timestamp) {\n                        // Whisper outputted a timestamp token, but it falls within\n                        // our stride, so we're going to skip it for the time being\n                        // and resolve this later\n                        // Skip is necessary because timestamp tokens always come\n                        // by pair, so we need to skip the next one too (which would mark the start of another chunk).\n                        skip = true;\n                    } else if (skip || (previous_tokens.length > 0 && token < first_timestamp)) {\n                        skip = false;\n                    } else if (chunk.timestamp[0] === null) {\n                        chunk.timestamp[0] = rounded_time;\n                    } else {\n                        // This is the end of the timestamp chunk\n                        if (rounded_time === chunk.timestamp[0]) {\n                            // This is a bug in timestamp token output\n                            // where we're taking the duplicate token\n                            // as a stop where it should be a start.\n                            // This is an issue in the underlying model output\n                            // Let's just skip it so it becomes de-factor a start agin\n                        } else {\n                            chunk.timestamp[1] = rounded_time;\n\n                            // Handling merges\n                            previous_tokens.push(current_tokens)\n\n                            if (returnWordTimestamps) {\n                                previous_token_timestamps.push(current_token_timestamps);\n                            }\n                            const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(\n                                previous_tokens, previous_token_timestamps\n                            )\n\n                            const resolved_text = this.decode(resolved_tokens)\n                            chunk.text = resolved_text\n\n                            if (returnWordTimestamps) {\n                                chunk.words = this.collateWordTimestamps(\n                                    resolved_tokens, resolved_token_timestamps, last_language,\n                                )\n                            }\n\n                            chunks.push(chunk)\n\n                            // Flush all our temporary context\n                            previous_tokens = []\n                            current_tokens = []\n                            previous_token_timestamps = []\n                            current_token_timestamps = []\n                            chunk = new_chunk()\n                        }\n                    }\n\n                } else {\n                    // 4/ Regular token\n                    // We just append to the list of all tokens so we can handle\n                    // merges later and decode into text.\n                    current_tokens.push(token)\n\n                    if (returnWordTimestamps) {\n                        let start_time = round(token_timestamps[i] + time_offset, 2);\n\n                        let end_time;\n                        if (i + 1 < token_timestamps.length) {\n                            end_time = round(token_timestamps[i + 1] + time_offset, 2);\n                        } else {\n                            // should never happen\n                            end_time = null;\n                        }\n                        current_token_timestamps.push([start_time, end_time]);\n                    }\n\n                }\n            }\n\n            if ('stride' in output) {\n                const [chunk_len, stride_left, stride_right] = output.stride;\n                time_offset += chunk_len - stride_right\n            }\n\n            // Leftover tokens\n            if (current_tokens.length > 0) {\n                previous_tokens.push(current_tokens)\n                if (returnWordTimestamps) {\n                    previous_token_timestamps.push(current_token_timestamps);\n                }\n            } else if (previous_tokens.every(p => p.length === 0)) {\n                // Flushing previous tokens (END)\"\n                chunk = new_chunk()\n                previous_tokens = []\n                current_tokens = []\n                previous_token_timestamps = [];\n                current_token_timestamps = [];\n            }\n\n        }\n\n        if (previous_tokens.length > 0) {\n            if (force_full_sequences && return_timestamps) {\n                // Last token should always be timestamps, so there shouldn't be\n                // leftover\n                throw new Error(\n                    \"Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. \" +\n                    \"Also make sure WhisperTimeStampLogitsProcessor was used during generation.\"\n                );\n            }\n\n            // Happens when we don't use timestamps\n            const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(previous_tokens, previous_token_timestamps);\n\n            // Flushing previous tokens (FINAL)\n            const resolved_text = this.decode(resolved_tokens);\n            chunk.text = resolved_text;\n            if (returnWordTimestamps) {\n                chunk.words = this.collateWordTimestamps(\n                    resolved_tokens, resolved_token_timestamps, last_language,\n                )\n            }\n            chunks.push(chunk);\n        }\n\n        let optional = Object.create(null);\n\n        // Preparing and cleaning up the pipeline output\n        const full_text = chunks.map(chunk => chunk.text).join('');\n        if (return_timestamps || return_language) {\n            for (let i = 0; i < chunks.length; ++i) {\n                const chunk = chunks[i];\n                if (!return_timestamps) {\n                    delete chunk[\"timestamp\"];\n                }\n\n                if (!return_language) {\n                    delete chunk[\"language\"];\n                }\n            }\n            if (returnWordTimestamps) {\n                let new_chunks = [];\n                for (let chunk of chunks) {\n                    for (let word of chunk.words) {\n                        new_chunks.push(word);\n                    }\n                }\n                optional = { \"chunks\": new_chunks };\n            } else {\n                optional = { \"chunks\": chunks };\n            }\n        }\n        return [full_text, optional];\n\n    }\n\n    /**\n     * Finds the longest common sequence among the provided sequences.\n     * @param {number[][]} sequences An array of sequences of token ids to compare.\n     * @returns {number[][]} The longest common sequence found.\n     * @throws {Error} If there is a bug within the function.\n     * @private\n     */\n    findLongestCommonSequence(sequences, token_timestamp_sequences = null) {\n        // It would be much harder to do O(n) because of fault tolerance.\n        // We actually have a really good property which is that the total sequence\n        // MUST be those subsequences in order.\n        // If token_timestamp_sequences is provided, will split those sequences in\n        // exactly the same way.\n        let leftSequence = sequences[0];\n        let leftLength = leftSequence.length;\n        let totalSequence = [];\n\n        const use_token_timestamp_sequences = Array.isArray(token_timestamp_sequences) && token_timestamp_sequences.length > 0;\n        let total_token_timestamp_sequence = use_token_timestamp_sequences ? [] : null;\n        let left_token_timestamp_sequence = use_token_timestamp_sequences ? token_timestamp_sequences[0] : null;\n        for (let i = 1; i < sequences.length; ++i) {\n            const rightSequence = sequences[i];\n            let max = 0.0;\n            let maxIndices = [leftLength, leftLength, 0, 0];\n            // Here we're sliding matches\n            // [a, b, c, d]\n            //          [c, d, f]\n            // =        [c] == [d]\n\n            // [a, b, c, d]\n            //       [c, d, f]\n            // =     [c, d] == [c, d]\n\n\n            // [a, b, c, d]\n            //    [c, d, f]\n\n            // =  [b, c, d] == [c, d, f]\n\n            // [a, b, c, d]\n            // [c, d, f]\n\n            // [a, b, c] == [c, d, f]\n\n            // [a, b, c, d]\n            // [d, f]\n\n            // [a, b] == [d, f]\n\n            // [a, b, c, d]\n            // [f]\n\n            // [a] == [f]\n\n            const rightLength = rightSequence.length;\n            for (let j = 1; j < leftLength + rightLength; ++j) {\n                const eps = j / 10000.0;\n                const leftStart = Math.max(0, leftLength - j);\n                const leftStop = Math.min(leftLength, leftLength + rightLength - j);\n                const left = leftSequence.slice(leftStart, leftStop);\n                const rightStart = Math.max(0, j - leftLength);\n                const rightStop = Math.min(rightLength, j);\n                const right = rightSequence.slice(rightStart, rightStop);\n                if (left.length !== right.length) {\n                    throw new Error(\"There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.\");\n                }\n                const matches = left.filter((elem, idx) => elem === right[idx]).length;\n                const matching = matches / j + eps;\n                if (matches > 1 && matching > max) {\n                    max = matching;\n                    maxIndices = [leftStart, leftStop, rightStart, rightStop];\n                }\n            }\n            const [leftStart, leftStop, rightStart, rightStop] = maxIndices;\n            const leftMid = Math.floor((leftStop + leftStart) / 2);\n            const rightMid = Math.floor((rightStop + rightStart) / 2);\n            totalSequence.push(...leftSequence.slice(0, leftMid));\n            leftSequence = rightSequence.slice(rightMid);\n            leftLength = leftSequence.length;\n\n            if (use_token_timestamp_sequences) {\n                total_token_timestamp_sequence.push(...left_token_timestamp_sequence.slice(0, leftMid));\n                left_token_timestamp_sequence = token_timestamp_sequences[i].slice(rightMid);\n            }\n        }\n        totalSequence.push(...leftSequence);\n\n        if (use_token_timestamp_sequences) {\n            total_token_timestamp_sequence.push(...left_token_timestamp_sequence);\n            return [totalSequence, total_token_timestamp_sequence];\n        } else {\n            return [totalSequence, []];\n        }\n    }\n\n    /** @private */\n    collateWordTimestamps(tokens, token_timestamps, language) {\n\n        let [words, _, token_indices] = this.combineTokensIntoWords(tokens, language);\n\n        let timings = [];\n        for (let i = 0; i < words.length; ++i) {\n            const indices = token_indices[i];\n            timings.push({\n                text: words[i],\n                timestamp: [\n                    token_timestamps[indices.at(0)][0],\n                    token_timestamps[indices.at(-1)][1],\n                ],\n            });\n        }\n        return timings;\n    }\n\n    /**\n     * Groups tokens by word. Returns a tuple containing a list of strings with the words,\n     * and a list of `token_id` sequences with the tokens making up each word.\n     * @param {number[]} tokens \n     * @param {string} [language] \n     * @param {string} prepend_punctionations \n     * @param {string} append_punctuations \n     * \n     * @private\n     */\n    combineTokensIntoWords(tokens, language, prepend_punctionations = \"\\\"'“¡¿([{-\", append_punctuations = \"\\\"'.。,，!！?？:：”)]}、\") {\n        language = language ?? 'english';\n\n        let words, word_tokens, token_indices;\n\n        if ([\"chinese\", \"japanese\", \"thai\", \"lao\", \"myanmar\"].includes(language)) {\n            // These languages don't typically use spaces.\n            [words, word_tokens, token_indices] = this.splitTokensOnUnicode(tokens)\n        } else {\n            [words, word_tokens, token_indices] = this.splitTokensOnSpaces(tokens)\n        }\n\n        return this.mergePunctuations(words, word_tokens, token_indices, prepend_punctionations, append_punctuations);\n    }\n\n    /** @type {PreTrainedTokenizer['decode']} */\n    decode(\n        token_ids,\n        decode_args,\n    ) {\n        let text;\n        // @ts-ignore\n        if (decode_args && decode_args.decode_with_timestamps) {\n            text = this.decodeWithTimestamps(token_ids, decode_args);\n        } else {\n            text = super.decode(token_ids, decode_args);\n        }\n        // TODO: implement offsets\n        // if (decode_args.output_offsets) {\n        //     let offsets = this.computeOffsets\n        // }\n        return text;\n    }\n\n    /**\n     * @param {number[]} token_ids List of token IDs to decode.\n     * @param {Object} decode_args Optional arguments for decoding\n     * @private\n     */\n    decodeWithTimestamps(token_ids, decode_args) {\n        const time_precision = decode_args?.time_precision ?? 0.02;\n\n        const timestamp_begin = Array.from(this.all_special_ids).at(-1) + 1;\n        /**@type {Array} */\n        let outputs = [[]];\n        for (let token of token_ids) {\n            if (token >= timestamp_begin) {\n                let timestamp = (token - timestamp_begin) * time_precision;\n                timestamp = round(timestamp, 2);\n                outputs.push(`<|${timestamp}|>`);\n                outputs.push([]);\n            } else {\n                outputs[outputs.length - 1].push(token);\n            }\n        }\n        outputs = outputs.map(\n            s => {\n                if (typeof s === 'string') {\n                    return s;\n                } else {\n                    return super.decode(s, decode_args);\n                }\n            }\n        )\n\n        return outputs.join('');\n    }\n\n    /**\n     * Combine tokens into words by splitting at any position where the tokens are decoded as valid unicode points.\n     * @param {number[]} tokens \n     * @returns {*}\n     * @private\n     */\n    splitTokensOnUnicode(tokens) {\n        const decoded_full = this.decode(tokens, {\n            // @ts-ignore\n            decode_with_timestamps: true,\n        });\n        const replacement_char = '\\uFFFD';\n\n        let words = []\n        let word_tokens = []\n        let token_indices = []\n        let current_tokens = []\n        let current_indices = []\n        let unicode_offset = 0\n\n        for (let token_idx = 0; token_idx < tokens.length; ++token_idx) {\n            const token = tokens[token_idx];\n\n            current_tokens.push(token);\n            current_indices.push(token_idx);\n\n            const decoded = this.decode(current_tokens, {\n                // @ts-ignore\n                decode_with_timestamps: true,\n            });\n\n            if (!decoded.includes(replacement_char) || decoded_full[unicode_offset + decoded.indexOf(replacement_char)] === replacement_char) {\n                words.push(decoded)\n                word_tokens.push(current_tokens)\n                token_indices.push(current_indices)\n                current_tokens = []\n                current_indices = []\n                unicode_offset += decoded.length;\n            }\n\n        }\n\n        return [words, word_tokens, token_indices]\n    }\n\n    /**\n     * Combine tokens into words by splitting at whitespace and punctuation tokens.\n     * @param {number[]} tokens \n     * @private\n     */\n    splitTokensOnSpaces(tokens) {\n\n        let [subwords, subword_tokens_list, subword_indices_list] = this.splitTokensOnUnicode(tokens);\n\n        let words = []\n        let word_tokens = []\n        let token_indices = []\n\n        const punctuationRegex = new RegExp(`^[${PUNCTUATION_REGEX}]$`, 'gu');\n\n        for (let i = 0; i < subwords.length; ++i) {\n\n            const subword = subwords[i];\n            const subword_tokens = subword_tokens_list[i];\n            const subword_indices = subword_indices_list[i];\n\n            // @ts-ignore\n            const special = subword_tokens[0] >= this.model.tokens_to_ids.get('<|endoftext|>');\n            const with_space = subword.startsWith(' ');\n            const trimmed = subword.trim();\n            const punctuation = punctuationRegex.test(trimmed);\n\n            if (special || with_space || punctuation || words.length === 0) {\n                words.push(subword);\n                word_tokens.push(subword_tokens);\n                token_indices.push(subword_indices);\n            } else {\n                const ix = words.length - 1;\n                words[ix] += subword;\n                word_tokens[ix].push(...subword_tokens);\n                token_indices[ix].push(...subword_indices);\n            }\n        }\n\n        return [words, word_tokens, token_indices];\n\n    }\n\n    /**\n     * Merges punctuation tokens with neighboring words.\n     * @param {string[]} words \n     * @param {number[][]} tokens \n     * @param {number[][]} indices \n     * @param {string} prepended \n     * @param {string} appended \n     * @private\n     */\n    mergePunctuations(words, tokens, indices, prepended, appended) {\n\n        let newWords = structuredClone(words);\n        let newTokens = structuredClone(tokens);\n        let newIndices = structuredClone(indices);\n\n\n        // prepend punctuations\n        let i = newWords.length - 2;\n        let j = newWords.length - 1;\n\n        while (i >= 0) {\n            if (newWords[i].startsWith(' ') && prepended.includes(newWords[i].trim())) {\n                newWords[j] = newWords[i] + newWords[j];\n                newTokens[j] = mergeArrays(newTokens[i], newTokens[j]);\n                newIndices[j] = mergeArrays(newIndices[i], newIndices[j]);\n                newWords[i] = '';\n                newTokens[i] = [];\n                newIndices[i] = [];\n            } else {\n                j = i;\n            }\n            --i;\n        }\n\n        // append punctuations\n        i = 0;\n        j = 1;\n        while (j < newWords.length) {\n            if (!newWords[i].endsWith(' ') && appended.includes(newWords[j])) {\n                newWords[i] += newWords[j];\n                newTokens[i] = mergeArrays(newTokens[i], newTokens[j]);\n                newIndices[i] = mergeArrays(newIndices[i], newIndices[j]);\n                newWords[j] = '';\n                newTokens[j] = [];\n                newIndices[j] = [];\n            } else {\n                i = j;\n            }\n            ++j;\n        }\n\n        return [\n            newWords.filter(x => x),\n            newTokens.filter(x => x.length > 0),\n            newIndices.filter(x => x.length > 0),\n        ]\n    }\n\n    /**\n     * Helper function to build translation inputs for a `WhisperTokenizer`,\n     * depending on the language, task, and whether to predict timestamp tokens.\n     * \n     * Used to override the prefix tokens appended to the start of the label sequence.\n     * \n     * **Example: Get ids for a language**\n     * ```javascript\n     * // instantiate the tokenizer and set the prefix token to Spanish\n     * let tokenizer = await WhisperTokenizer.from_pretrained('Xenova/whisper-tiny');\n     * let forced_decoder_ids = tokenizer.get_decoder_prompt_ids({ language: 'spanish' });\n     * // [(1, 50262), (2, 50363)]\n     * ```\n     * \n     * @param {Object} options Options to generate the decoder prompt.\n     * @param {string} [options.language] The language of the transcription text.\n     * The corresponding language id token is appended to the start of the sequence for multilingual\n     * speech recognition and speech translation tasks, e.g. for \"Spanish\" the token \"<|es|>\" is appended\n     * to the start of sequence.\n     * @param {string} [options.task] Task identifier to append at the start of sequence (if any).\n     * This should be used for mulitlingual fine-tuning, with \"transcribe\" for speech recognition and\n     * \"translate\" for speech translation.\n     * @param {boolean} [options.no_timestamps] Whether to add the <|notimestamps|> token at the start of the sequence.\n     * @returns {number[][]} The decoder prompt ids.\n     */\n    get_decoder_prompt_ids({\n        language = null,\n        task = null,\n        no_timestamps = true,\n    } = {}) {\n\n        // <|lang_id|> <|task|> <|notimestamps|>\n\n        let forced_decoder_ids = [];\n\n        if (language) {\n            // User wishes to specify the language\n            language = language.toLowerCase();\n\n            // Map to code from user-friendly name (e.g., \"english\" -> \"en\")\n            let language_code = WHISPER_TO_LANGUAGE_CODE_MAPPING.get(language);\n\n            if (language_code === undefined) {\n                // User provided something that is not a language name\n\n                if (WHISPER_LANGUAGE_MAPPING.has(language)) {\n                    // User provided the language code directly (e.g., \"en\")\n                    language_code = language;\n\n                } else {\n                    // User provided something that is not a language code or name\n                    const is_language_code = language.length === 2;\n                    const langs = is_language_code ? WHISPER_LANGUAGE_MAPPING.keys() : WHISPER_LANGUAGE_MAPPING.values();\n\n                    throw new Error(`Language \"${language}\" is not supported. Must be one of: ${JSON.stringify(langs)}`);\n                }\n            }\n\n            let language_token_id = this.model.tokens_to_ids.get(`<|${language_code}|>`);\n            if (language_token_id === undefined) {\n                throw new Error(`Unable to find language \"${language_code}\" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.`)\n            }\n\n            forced_decoder_ids.push(language_token_id);\n        } else {\n            // No token will be forced, which leaves the model to predict the language\n            forced_decoder_ids.push(null);\n        }\n\n        if (task) {\n            task = task.toLowerCase();\n            if (task !== 'transcribe' && task !== 'translate') {\n                throw new Error(`Task \"${task}\" is not supported. Must be one of: [\"transcribe\", \"translate\"]`);\n            }\n\n            let task_token_id = this.model.tokens_to_ids.get(`<|${task}|>`);\n            if (task_token_id === undefined) {\n                throw new Error(`Unable to find task \"${task}\" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.`)\n            }\n\n            forced_decoder_ids.push(task_token_id);\n        } else {\n            // No token will be forced, which leaves the model to predict the task\n            forced_decoder_ids.push(null);\n        }\n\n        if (no_timestamps) {\n            let no_timestamps_id = this.model.tokens_to_ids.get(`<|notimestamps|>`);\n            if (no_timestamps_id === undefined) {\n                throw new Error('Unable to find \"<|notimestamps|>\" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.')\n            }\n\n            forced_decoder_ids.push(no_timestamps_id);\n        }\n\n        return forced_decoder_ids.map((x, i) => [i + 1, x]).filter(x => x[1] !== null);\n\n    }\n}\nexport class CodeGenTokenizer extends PreTrainedTokenizer { }\nexport class CLIPTokenizer extends PreTrainedTokenizer { }\n\n\n/**\n * @todo This model is not yet supported by Hugging Face's \"fast\" tokenizers library (https://github.com/huggingface/tokenizers).\n * Therefore, this implementation (which is based on fast tokenizers) may produce slightly inaccurate results.\n */\nexport class MarianTokenizer extends PreTrainedTokenizer {\n    /**\n     * Create a new MarianTokenizer instance.\n     * @param {Object} tokenizerJSON The JSON of the tokenizer.\n     * @param {Object} tokenizerConfig The config of the tokenizer.\n     */\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n\n        this.languageRegex = /^(>>\\w+<<)\\s*/g;\n\n        this.supported_language_codes = this.model.vocab.filter(\n            x => this.languageRegex.test(x)\n        );\n\n        console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\\'s \"fast\" tokenizers library. Therefore, you may experience slightly inaccurate results.')\n    }\n\n    /**\n     * Encodes a single text. Overriding this method is necessary since the language codes\n     * must be removed before encoding with sentencepiece model.\n     * @see https://github.com/huggingface/transformers/blob/12d51db243a00726a548a43cc333390ebae731e3/src/transformers/models/marian/tokenization_marian.py#L204-L213\n     *\n     * @param {string|null} text The text to encode.\n     * @returns {Array} The encoded tokens.\n     */\n    _encode_text(text) {\n        if (text === null) return null;\n\n        // Check if text starts with language code:\n        let [matchInfo, ...remainder] = text.trim().split(this.languageRegex);\n\n        if (remainder.length === 0) {\n            // No language code, encode normally\n            return super._encode_text(matchInfo);\n\n        } else if (remainder.length === 2) {\n            // Text starts with language code, so we do not encode it with sentencepiece.\n            let [language, text] = remainder;\n\n            if (!this.supported_language_codes.includes(language)) {\n                console.warn(`Unsupported language code \"${language}\" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`)\n            }\n            return mergeArrays([language], super._encode_text(text));\n        }\n    }\n\n}\n\nexport class Wav2Vec2CTCTokenizer extends PreTrainedTokenizer { }\n\nexport class BlenderbotTokenizer extends PreTrainedTokenizer { }\nexport class BlenderbotSmallTokenizer extends PreTrainedTokenizer { }\n\nexport class SpeechT5Tokenizer extends PreTrainedTokenizer { }\n\n/**\n * Helper class which is used to instantiate pretrained tokenizers with the `from_pretrained` function.\n * The chosen tokenizer class is determined by the type specified in the tokenizer config.\n * \n * @example\n * let tokenizer = await AutoTokenizer.from_pretrained('Xenova/bert-base-uncased');\n */\nexport class AutoTokenizer {\n    static TOKENIZER_CLASS_MAPPING = {\n        T5Tokenizer,\n        DistilBertTokenizer,\n        CamembertTokenizer,\n        DebertaTokenizer,\n        DebertaV2Tokenizer,\n        BertTokenizer,\n        HerbertTokenizer,\n        XLMTokenizer,\n        MobileBertTokenizer,\n        SqueezeBertTokenizer,\n        AlbertTokenizer,\n        GPT2Tokenizer,\n        BartTokenizer,\n        MBartTokenizer,\n        MBart50Tokenizer,\n        RobertaTokenizer,\n        WhisperTokenizer,\n        CodeGenTokenizer,\n        CLIPTokenizer,\n        MarianTokenizer,\n        BloomTokenizer,\n        NllbTokenizer,\n        M2M100Tokenizer,\n        LlamaTokenizer,\n        CodeLlamaTokenizer,\n        XLMRobertaTokenizer,\n        MPNetTokenizer,\n        FalconTokenizer,\n        GPTNeoXTokenizer,\n        Wav2Vec2CTCTokenizer,\n        BlenderbotTokenizer,\n        BlenderbotSmallTokenizer,\n        SpeechT5Tokenizer,\n\n        // Base case:\n        PreTrainedTokenizer,\n    }\n\n\n    /**\n     * Instantiate one of the tokenizer classes of the library from a pretrained model.\n     * \n     * The tokenizer class to instantiate is selected based on the `tokenizer_class` property of the config object\n     * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n     * \n     * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n     * - A string, the *model id* of a pretrained tokenizer hosted inside a model repo on huggingface.co.\n     *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n     *   user or organization name, like `dbmdz/bert-base-german-cased`.\n     * - A path to a *directory* containing tokenizer files, e.g., `./my_model_directory/`.\n     * @param {import('./utils/hub.js').PretrainedOptions} options Additional options for loading the tokenizer.\n     * \n     * @returns {Promise<PreTrainedTokenizer>} A new instance of the PreTrainedTokenizer class.\n     */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        quantized = true,\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n    } = {}) {\n\n        let [tokenizerJSON, tokenizerConfig] = await loadTokenizer(pretrained_model_name_or_path, {\n            quantized,\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n        })\n\n        // Some tokenizers are saved with the \"Fast\" suffix, so we remove that if present.\n        let tokenizerName = tokenizerConfig.tokenizer_class.replace(/Fast$/, '');\n\n        let cls = this.TOKENIZER_CLASS_MAPPING[tokenizerName];\n        if (!cls) {\n            console.warn(`Unknown tokenizer class \"${tokenizerName}\", attempting to construct from base class.`);\n            cls = PreTrainedTokenizer;\n        }\n        return new cls(tokenizerJSON, tokenizerConfig);\n    }\n}\n","\n/**\n * @file Core utility functions/classes for Transformers.js.\n * \n * These are only used internally, meaning an end-user shouldn't\n * need to access anything here.\n * \n * @module utils/core\n */\n\n/**\n * Helper function to dispatch progress callbacks.\n *\n * @param {function} progress_callback The progress callback function to dispatch.\n * @param {any} data The data to pass to the progress callback function.\n * @returns {void}\n * @private\n */\nexport function dispatchCallback(progress_callback, data) {\n    if (progress_callback !== null) progress_callback(data);\n}\n\n/**\n * Reverses the keys and values of an object.\n *\n * @param {Object} data The object to reverse.\n * @returns {Object} The reversed object.\n * @see https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n */\nexport function reverseDictionary(data) {\n    // https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n    return Object.fromEntries(Object.entries(data).map(([key, value]) => [value, key]));\n}\n\n/**\n * Escapes regular expression special characters from a string by replacing them with their escaped counterparts.\n *\n * @param {string} string The string to escape.\n * @returns {string} The escaped string.\n */\nexport function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * A base class for creating callable objects.\n * \n * @type {new () => {(...args: any[]): any, _call(...args: any[]): any}}\n */\nexport const Callable = /** @type {any} */ (class {\n    /**\n    * Creates a new instance of the Callable class.\n    */\n    constructor() {\n        /**\n         * Creates a closure that delegates to a private method '_call' with the given arguments.\n         * @type {any}\n         * @param {...any} args Zero or more arguments to pass to the '_call' method.\n         * @returns {*} The result of calling the '_call' method.\n         */\n        let closure = function (...args) {\n            return closure._call(...args)\n        }\n        return Object.setPrototypeOf(closure, new.target.prototype)\n    }\n\n    /**\n     * This method should be implemented in subclasses to provide the\n     * functionality of the callable object.\n     *\n     * @param {any[]} args\n     * @throws {Error} If the subclass does not implement the `_call` method.\n     */\n    _call(...args) {\n        throw Error('Must implement _call method in subclass')\n    }\n});\n\n\n/**\n * Check if a value is a string.\n * @param {*} text The value to check.\n * @returns {boolean} True if the value is a string, false otherwise.\n */\nexport function isString(text) {\n    return typeof text === 'string' || text instanceof String\n}\n\n\n/**\n * Check if a value is a typed array.\n * @param {*} val The value to check.\n * @returns {boolean} True if the value is a `TypedArray`, false otherwise.\n * \n * Adapted from https://stackoverflow.com/a/71091338/13989043\n */\nexport function isTypedArray(val) {\n    return val?.prototype?.__proto__?.constructor?.name === 'TypedArray';\n}\n\n\n/**\n * Check if a value is an integer.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value is a string, false otherwise.\n */\nexport function isIntegralNumber(x) {\n    return Number.isInteger(x) || typeof x === 'bigint'\n}\n\n/**\n * Check if a value is exists.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value exists, false otherwise.\n */\nexport function exists(x) {\n    return x !== undefined && x !== null;\n}\n\n/**\n * Calculates the dimensions of a nested array.\n *\n * @param {Array} arr The nested array to calculate dimensions for.\n * @returns {Array} An array containing the dimensions of the input array.\n */\nexport function calculateDimensions(arr) {\n    const dimensions = [];\n    let current = arr;\n    while (Array.isArray(current)) {\n        dimensions.push(current.length);\n        current = current[0];\n    }\n    return dimensions;\n}\n\n/**\n * Replicate python's .pop() method for objects.\n * @param {Object} obj The object to pop from.\n * @param {string} key The key to pop.\n * @param {*} defaultValue The default value to return if the key does not exist.\n * @returns {*} The value of the popped key.\n * @throws {Error} If the key does not exist and no default value is provided.\n */\nexport function pop(obj, key, defaultValue = undefined) {\n    const value = obj[key];\n    if (value !== undefined) {\n        delete obj[key];\n        return value;\n    }\n    if (defaultValue === undefined) {\n        throw Error(`Key ${key} does not exist in object.`)\n    }\n    return defaultValue;\n}\n\n/**\n * Efficiently merge arrays, creating a new copy.\n * Adapted from https://stackoverflow.com/a/6768642/13989043\n * @param  {Array[]} arrs Arrays to merge.\n * @returns {Array} The merged array.\n */\nexport function mergeArrays(...arrs) {\n    return Array.prototype.concat.apply([], arrs);\n}\n\n/**\n * Compute the Cartesian product of given arrays\n * @param {...Array} a Arrays to compute the product\n * @returns {Array} Returns the computed Cartesian product as an array\n * @private\n */\nexport function product(...a) {\n    // Cartesian product of items\n    // Adapted from https://stackoverflow.com/a/43053803\n    return a.reduce((a, b) => a.flatMap(d => b.map(e => [d, e])));\n}\n","\n/**\n * @file Utility functions to interact with the Hugging Face Hub (https://huggingface.co/models)\n * \n * @module utils/hub\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport stream from 'stream/web';\n\nimport { env } from '../env.js';\nimport { dispatchCallback } from './core.js';\n\nif (!globalThis.ReadableStream) {\n    // @ts-ignore\n    globalThis.ReadableStream = stream.ReadableStream; // ReadableStream is not a global with Node 16\n}\n\n/**\n * @typedef {Object} PretrainedOptions Options for loading a pretrained model.     \n * @property {boolean?} [quantized=true] Whether to load the 8-bit quantized version of the model (only applicable when loading model files).\n * @property {function} [progress_callback=null] If specified, this function will be called during model construction, to provide the user with progress updates.\n * @property {Object} [config=null] Configuration for the model to use instead of an automatically loaded configuration. Configuration can be automatically loaded when:\n * - The model is a model provided by the library (loaded with the *model id* string of a pretrained model).\n * - The model is loaded by supplying a local directory as `pretrained_model_name_or_path` and a configuration JSON file named *config.json* is found in the directory.\n * @property {string} [cache_dir=null] Path to a directory in which a downloaded pretrained model configuration should be cached if the standard cache should not be used.\n * @property {boolean} [local_files_only=false] Whether or not to only look at local files (e.g., not try downloading the model).\n * @property {string} [revision='main'] The specific model version to use. It can be a branch name, a tag name, or a commit id,\n * since we use a git-based system for storing models and other artifacts on huggingface.co, so `revision` can be any identifier allowed by git.\n * NOTE: This setting is ignored for local requests.\n * @property {string} [model_file_name=null] If specified, load the model with this name (excluding the .onnx suffix). Currently only valid for encoder- or decoder-only models.\n */\n\nclass FileResponse {\n    /**\n     * Mapping from file extensions to MIME types.\n     */\n    _CONTENT_TYPE_MAP = {\n        'txt': 'text/plain',\n        'html': 'text/html',\n        'css': 'text/css',\n        'js': 'text/javascript',\n        'json': 'application/json',\n        'png': 'image/png',\n        'jpg': 'image/jpeg',\n        'jpeg': 'image/jpeg',\n        'gif': 'image/gif',\n    }\n    /**\n     * Creates a new `FileResponse` object.\n     * @param {string|URL} filePath\n     */\n    constructor(filePath) {\n        this.filePath = filePath;\n        this.headers = new Headers();\n\n        this.exists = fs.existsSync(filePath);\n        if (this.exists) {\n            this.status = 200;\n            this.statusText = 'OK';\n\n            let stats = fs.statSync(filePath);\n            this.headers.set('content-length', stats.size.toString());\n\n            this.updateContentType();\n\n            let self = this;\n            this.body = new ReadableStream({\n                start(controller) {\n                    self.arrayBuffer().then(buffer => {\n                        controller.enqueue(new Uint8Array(buffer));\n                        controller.close();\n                    })\n                }\n            });\n        } else {\n            this.status = 404;\n            this.statusText = 'Not Found';\n            this.body = null;\n        }\n    }\n\n    /**\n     * Updates the 'content-type' header property of the response based on the extension of\n     * the file specified by the filePath property of the current object.\n     * @returns {void}\n     */\n    updateContentType() {\n        // Set content-type header based on file extension\n        const extension = this.filePath.toString().split('.').pop().toLowerCase();\n        this.headers.set('content-type', this._CONTENT_TYPE_MAP[extension] ?? 'application/octet-stream');\n    }\n\n    /**\n     * Clone the current FileResponse object.\n     * @returns {FileResponse} A new FileResponse object with the same properties as the current object.\n     */\n    clone() {\n        let response = new FileResponse(this.filePath);\n        response.exists = this.exists;\n        response.status = this.status;\n        response.statusText = this.statusText;\n        response.headers = new Headers(this.headers);\n        return response;\n    }\n\n    /**\n     * Reads the contents of the file specified by the filePath property and returns a Promise that\n     * resolves with an ArrayBuffer containing the file's contents.\n     * @returns {Promise<ArrayBuffer>} A Promise that resolves with an ArrayBuffer containing the file's contents.\n     * @throws {Error} If the file cannot be read.\n     */\n    async arrayBuffer() {\n        const data = await fs.promises.readFile(this.filePath);\n        return data.buffer;\n    }\n\n    /**\n     * Reads the contents of the file specified by the filePath property and returns a Promise that\n     * resolves with a Blob containing the file's contents.\n     * @returns {Promise<Blob>} A Promise that resolves with a Blob containing the file's contents.\n     * @throws {Error} If the file cannot be read.\n     */\n    async blob() {\n        const data = await fs.promises.readFile(this.filePath);\n        return new Blob([data], { type: this.headers.get('content-type') });\n    }\n\n    /**\n     * Reads the contents of the file specified by the filePath property and returns a Promise that\n     * resolves with a string containing the file's contents.\n     * @returns {Promise<string>} A Promise that resolves with a string containing the file's contents.\n     * @throws {Error} If the file cannot be read.\n     */\n    async text() {\n        const data = await fs.promises.readFile(this.filePath, 'utf8');\n        return data;\n    }\n\n    /**\n     * Reads the contents of the file specified by the filePath property and returns a Promise that\n     * resolves with a parsed JavaScript object containing the file's contents.\n     * \n     * @returns {Promise<Object>} A Promise that resolves with a parsed JavaScript object containing the file's contents.\n     * @throws {Error} If the file cannot be read.\n     */\n    async json() {\n        return JSON.parse(await this.text());\n    }\n}\n\n/**\n * Determines whether the given string is a valid HTTP or HTTPS URL.\n * @param {string|URL} string The string to test for validity as an HTTP or HTTPS URL.\n * @param {string[]} [validHosts=null] A list of valid hostnames. If specified, the URL's hostname must be in this list.\n * @returns {boolean} True if the string is a valid HTTP or HTTPS URL, false otherwise.\n */\nfunction isValidHttpUrl(string, validHosts = null) {\n    // https://stackoverflow.com/a/43467144\n    let url;\n    try {\n        url = new URL(string);\n    } catch (_) {\n        return false;\n    }\n    if (validHosts && !validHosts.includes(url.hostname)) {\n        return false;\n    }\n    return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n\n/**\n * Helper function to get a file, using either the Fetch API or FileSystem API.\n *\n * @param {URL|string} urlOrPath The URL/path of the file to get.\n * @returns {Promise<FileResponse|Response>} A promise that resolves to a FileResponse object (if the file is retrieved using the FileSystem API), or a Response object (if the file is retrieved using the Fetch API).\n */\nexport async function getFile(urlOrPath) {\n\n    if (env.useFS && !isValidHttpUrl(urlOrPath)) {\n        return new FileResponse(urlOrPath);\n\n    } else if (typeof process !== 'undefined' && process?.release?.name === 'node') {\n        const IS_CI = !!process.env?.TESTING_REMOTELY;\n        const version = env.version;\n\n        const headers = new Headers();\n        headers.set('User-Agent', `transformers.js/${version}; is_ci/${IS_CI};`);\n\n        // Check whether we are making a request to the Hugging Face Hub.\n        const isHFURL = isValidHttpUrl(urlOrPath, ['huggingface.co', 'hf.co']);\n        if (isHFURL) {\n            // If an access token is present in the environment variables,\n            // we add it to the request headers.\n            const token = process.env?.HF_ACCESS_TOKEN;\n            if (token) {\n                headers.set('Authorization', `Bearer ${token}`);\n            }\n        }\n        return fetch(urlOrPath, { headers });\n    } else {\n        // Running in a browser-environment, so we use default headers\n        // NOTE: We do not allow passing authorization headers in the browser,\n        // since this would require exposing the token to the client.\n        return fetch(urlOrPath);\n    }\n}\n\nconst ERROR_MAPPING = {\n    // 4xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses)\n    400: 'Bad request error occurred while trying to load file',\n    401: 'Unauthorized access to file',\n    403: 'Forbidden access to file',\n    404: 'Could not locate file',\n    408: 'Request timeout error occurred while trying to load file',\n\n    // 5xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses)\n    500: 'Internal server error error occurred while trying to load file',\n    502: 'Bad gateway error occurred while trying to load file',\n    503: 'Service unavailable error occurred while trying to load file',\n    504: 'Gateway timeout error occurred while trying to load file',\n}\n/**\n * Helper method to handle fatal errors that occur while trying to load a file from the Hugging Face Hub.\n * @param {number} status The HTTP status code of the error.\n * @param {string} remoteURL The URL of the file that could not be loaded.\n * @param {boolean} fatal Whether to raise an error if the file could not be loaded.\n * @returns {null} Returns `null` if `fatal = true`.\n * @throws {Error} If `fatal = false`.\n */\nfunction handleError(status, remoteURL, fatal) {\n    if (!fatal) {\n        // File was not loaded correctly, but it is optional.\n        // TODO in future, cache the response?\n        return null;\n    }\n\n    const message = ERROR_MAPPING[status] ?? `Error (${status}) occurred while trying to load file`;\n    throw Error(`${message}: \"${remoteURL}\".`);\n}\n\nclass FileCache {\n    /**\n     * Instantiate a `FileCache` object.\n     * @param {string} path \n     */\n    constructor(path) {\n        this.path = path;\n    }\n\n    /**\n     * Checks whether the given request is in the cache.\n     * @param {string} request \n     * @returns {Promise<FileResponse | undefined>}\n     */\n    async match(request) {\n\n        let filePath = path.join(this.path, request);\n        let file = new FileResponse(filePath);\n\n        if (file.exists) {\n            return file;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Adds the given response to the cache.\n     * @param {string} request \n     * @param {Response|FileResponse} response \n     * @returns {Promise<void>}\n     */\n    async put(request, response) {\n        const buffer = Buffer.from(await response.arrayBuffer());\n\n        let outputPath = path.join(this.path, request);\n\n        try {\n            await fs.promises.mkdir(path.dirname(outputPath), { recursive: true });\n            await fs.promises.writeFile(outputPath, buffer);\n\n        } catch (err) {\n            console.warn('An error occurred while writing the file to cache:', err)\n        }\n    }\n\n    // TODO add the rest?\n    // addAll(requests: RequestInfo[]): Promise<void>;\n    // delete(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<boolean>;\n    // keys(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;\n    // match(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<Response | undefined>;\n    // matchAll(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;\n}\n\n/**\n * \n * @param {FileCache|Cache} cache The cache to search\n * @param {string[]} names The names of the item to search for\n * @returns {Promise<FileResponse|Response|undefined>} The item from the cache, or undefined if not found.\n */\nasync function tryCache(cache, ...names) {\n    for (let name of names) {\n        try {\n            let result = await cache.match(name);\n            if (result) return result;\n        } catch (e) {\n            continue;\n        }\n    }\n    return undefined;\n}\n\n/**\n * \n * Retrieves a file from either a remote URL using the Fetch API or from the local file system using the FileSystem API.\n * If the filesystem is available and `env.useCache = true`, the file will be downloaded and cached.\n * \n * @param {string} path_or_repo_id This can be either:\n * - a string, the *model id* of a model repo on huggingface.co.\n * - a path to a *directory* potentially containing the file.\n * @param {string} filename The name of the file to locate in `path_or_repo`.\n * @param {boolean} [fatal=true] Whether to throw an error if the file is not found.\n * @param {PretrainedOptions} [options] An object containing optional parameters.\n * \n * @throws Will throw an error if the file is not found and `fatal` is true.\n * @returns {Promise} A Promise that resolves with the file content as a buffer.\n */\nexport async function getModelFile(path_or_repo_id, filename, fatal = true, options = {}) {\n\n    if (!env.allowLocalModels) {\n        // User has disabled local models, so we just make sure other settings are correct.\n\n        if (options.local_files_only) {\n            throw Error(\"Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).\")\n        } else if (!env.allowRemoteModels) {\n            throw Error(\"Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.\")\n        }\n    }\n\n    // Initiate file retrieval\n    dispatchCallback(options.progress_callback, {\n        status: 'initiate',\n        name: path_or_repo_id,\n        file: filename\n    })\n\n    // First, check if the a caching backend is available\n    // If no caching mechanism available, will download the file every time\n    let cache;\n    if (!cache && env.useBrowserCache) {\n        if (typeof caches === 'undefined') {\n            throw Error('Browser cache is not available in this environment.')\n        }\n        try {\n            // In some cases, the browser cache may be visible, but not accessible due to security restrictions.\n            // For example, when running an application in an iframe, if a user attempts to load the page in\n            // incognito mode, the following error is thrown: `DOMException: Failed to execute 'open' on 'CacheStorage':\n            // An attempt was made to break through the security policy of the user agent.`\n            // So, instead of crashing, we just ignore the error and continue without using the cache.\n            cache = await caches.open('transformers-cache');\n        } catch (e) {\n            console.warn('An error occurred while opening the browser cache:', e);\n        }\n    }\n\n    if (!cache && env.useFSCache) {\n        // TODO throw error if not available\n\n        // If `cache_dir` is not specified, use the default cache directory\n        cache = new FileCache(options.cache_dir ?? env.cacheDir);\n    }\n\n    if (!cache && env.useCustomCache) {\n        // Allow the user to specify a custom cache system.\n        if (!env.customCache) {\n            throw Error('`env.useCustomCache=true`, but `env.customCache` is not defined.')\n        }\n\n        // Check that the required methods are defined:\n        if (!env.customCache.match || !env.customCache.put) {\n            throw new Error(\n                \"`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. \" +\n                \"For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache\"\n            )\n        }\n        cache = env.customCache;\n    }\n\n    const revision = options.revision ?? 'main';\n\n    let requestURL = pathJoin(path_or_repo_id, filename);\n    let localPath = pathJoin(env.localModelPath, requestURL);\n\n    let remoteURL = pathJoin(\n        env.remoteHost,\n        env.remotePathTemplate\n            .replaceAll('{model}', path_or_repo_id)\n            .replaceAll('{revision}', revision),\n        filename\n    );\n\n    // Choose cache key for filesystem cache\n    // When using the main revision (default), we use the request URL as the cache key.\n    // If a specific revision is requested, we account for this in the cache key.\n    let fsCacheKey = revision === 'main' ? requestURL : pathJoin(path_or_repo_id, revision, filename);\n\n    /** @type {string} */\n    let cacheKey;\n    let proposedCacheKey = cache instanceof FileCache ? fsCacheKey : remoteURL;\n\n    // Whether to cache the final response in the end.\n    let toCacheResponse = false;\n\n    /** @type {Response|FileResponse|undefined} */\n    let response;\n\n    if (cache) {\n        // A caching system is available, so we try to get the file from it.\n        //  1. We first try to get from cache using the local path. In some environments (like deno),\n        //     non-URL cache keys are not allowed. In these cases, `response` will be undefined.\n        //  2. If no response is found, we try to get from cache using the remote URL or file system cache.\n        response = await tryCache(cache, localPath, proposedCacheKey);\n    }\n\n    if (response === undefined) {\n        // Caching not available, or file is not cached, so we perform the request\n\n        if (env.allowLocalModels) {\n            // Accessing local models is enabled, so we try to get the file locally.\n            // If request is a valid HTTP URL, we skip the local file check. Otherwise, we try to get the file locally.\n            const isURL = isValidHttpUrl(requestURL);\n            if (!isURL) {\n                try {\n                    response = await getFile(localPath);\n                    cacheKey = localPath; // Update the cache key to be the local path\n                } catch (e) {\n                    // Something went wrong while trying to get the file locally.\n                    // NOTE: error handling is done in the next step (since `response` will be undefined)\n                    console.warn(`Unable to load from local path \"${localPath}\": \"${e}\"`);\n                }\n            } else if (options.local_files_only) {\n                throw new Error(`\\`local_files_only=true\\`, but attempted to load a remote file from: ${requestURL}.`);\n            } else if (!env.allowRemoteModels) {\n                throw new Error(`\\`env.allowRemoteModels=false\\`, but attempted to load a remote file from: ${requestURL}.`);\n            }\n        }\n\n        if (response === undefined || response.status === 404) {\n            // File not found locally. This means either:\n            // - The user has disabled local file access (`env.allowLocalModels=false`)\n            // - the path is a valid HTTP url (`response === undefined`)\n            // - the path is not a valid HTTP url and the file is not present on the file system or local server (`response.status === 404`)\n\n            if (options.local_files_only || !env.allowRemoteModels) {\n                // User requested local files only, but the file is not found locally.\n                if (fatal) {\n                    throw Error(`\\`local_files_only=true\\` or \\`env.allowRemoteModels=false\\` and file was not found locally at \"${localPath}\".`);\n                } else {\n                    // File not found, but this file is optional.\n                    // TODO in future, cache the response?\n                    return null;\n                }\n            }\n\n            // File not found locally, so we try to download it from the remote server\n            response = await getFile(remoteURL);\n\n            if (response.status !== 200) {\n                return handleError(response.status, remoteURL, fatal);\n            }\n\n            // Success! We use the proposed cache key from earlier\n            cacheKey = proposedCacheKey;\n        }\n\n        // Only cache the response if:\n        toCacheResponse =\n            cache                              // 1. A caching system is available\n            && typeof Response !== 'undefined' // 2. `Response` is defined (i.e., we are in a browser-like environment)\n            && response instanceof Response    // 3. result is a `Response` object (i.e., not a `FileResponse`)\n            && response.status === 200         // 4. request was successful (status code 200)\n    }\n\n    // Start downloading\n    dispatchCallback(options.progress_callback, {\n        status: 'download',\n        name: path_or_repo_id,\n        file: filename\n    })\n\n    const buffer = await readResponse(response, data => {\n        dispatchCallback(options.progress_callback, {\n            status: 'progress',\n            ...data,\n            name: path_or_repo_id,\n            file: filename\n        })\n    })\n\n    if (\n        // Only cache web responses\n        // i.e., do not cache FileResponses (prevents duplication)\n        toCacheResponse && cacheKey\n        &&\n        // Check again whether request is in cache. If not, we add the response to the cache\n        (await cache.match(cacheKey) === undefined)\n    ) {\n        // NOTE: We use `new Response(buffer, ...)` instead of `response.clone()` to handle LFS files\n        await cache.put(cacheKey, new Response(buffer, {\n            headers: response.headers\n        }))\n            .catch(err => {\n                // Do not crash if unable to add to cache (e.g., QuotaExceededError).\n                // Rather, log a warning and proceed with execution.\n                console.warn(`Unable to add response to browser cache: ${err}.`);\n            });\n\n    }\n\n    dispatchCallback(options.progress_callback, {\n        status: 'done',\n        name: path_or_repo_id,\n        file: filename\n    });\n\n    return buffer;\n}\n\n/**\n * Fetches a JSON file from a given path and file name.\n *\n * @param {string} modelPath The path to the directory containing the file.\n * @param {string} fileName The name of the file to fetch.\n * @param {boolean} [fatal=true] Whether to throw an error if the file is not found.\n * @param {PretrainedOptions} [options] An object containing optional parameters.\n * @returns {Promise<Object>} The JSON data parsed into a JavaScript object.\n * @throws Will throw an error if the file is not found and `fatal` is true.\n */\nexport async function getModelJSON(modelPath, fileName, fatal = true, options = {}) {\n    let buffer = await getModelFile(modelPath, fileName, fatal, options);\n    if (buffer === null) {\n        // Return empty object\n        return {}\n    }\n\n    let decoder = new TextDecoder('utf-8');\n    let jsonData = decoder.decode(buffer);\n\n    return JSON.parse(jsonData);\n}\n\n/**\n * Read and track progress when reading a Response object\n *\n * @param {any} response The Response object to read\n * @param {function} progress_callback The function to call with progress updates\n * @returns {Promise<Uint8Array>} A Promise that resolves with the Uint8Array buffer\n */\nasync function readResponse(response, progress_callback) {\n    // Read and track progress when reading a Response object\n\n    const contentLength = response.headers.get('Content-Length');\n    if (contentLength === null) {\n        console.warn('Unable to determine content-length from response headers. Will expand buffer when needed.')\n    }\n    let total = parseInt(contentLength ?? '0');\n    let buffer = new Uint8Array(total);\n    let loaded = 0;\n\n    const reader = response.body.getReader();\n    async function read() {\n        const { done, value } = await reader.read();\n        if (done) return;\n\n        let newLoaded = loaded + value.length;\n        if (newLoaded > total) {\n            total = newLoaded;\n\n            // Adding the new data will overflow buffer.\n            // In this case, we extend the buffer\n            let newBuffer = new Uint8Array(total);\n\n            // copy contents\n            newBuffer.set(buffer);\n\n            buffer = newBuffer;\n        }\n        buffer.set(value, loaded)\n        loaded = newLoaded;\n\n        const progress = (loaded / total) * 100;\n\n        // Call your function here\n        progress_callback({\n            progress: progress,\n            loaded: loaded,\n            total: total,\n        })\n\n        return read();\n    }\n\n    // Actually read\n    await read();\n\n    return buffer;\n}\n\n/**\n * Joins multiple parts of a path into a single path, while handling leading and trailing slashes.\n *\n * @param {...string} parts Multiple parts of a path.\n * @returns {string} A string representing the joined path.\n */\nfunction pathJoin(...parts) {\n    // https://stackoverflow.com/a/55142565\n    parts = parts.map((part, index) => {\n        if (index) {\n            part = part.replace(new RegExp('^/'), '');\n        }\n        if (index !== parts.length - 1) {\n            part = part.replace(new RegExp('/$'), '');\n        }\n        return part;\n    })\n    return parts.join('/');\n}\n","/**\n * @file Module used to configure Transformers.js.\n * \n * **Example:** Disable remote models.\n * ```javascript\n * import { env } from '@xenova/transformers';\n * env.allowRemoteModels = false;\n * ```\n * \n * **Example:** Set local model path.\n * ```javascript\n * import { env } from '@xenova/transformers';\n * env.localModelPath = '/path/to/local/models/';\n * ```\n * \n * **Example:** Set cache directory.\n * ```javascript\n * import { env } from '@xenova/transformers';\n * env.cacheDir = '/path/to/cache/directory/';\n * ```\n * \n * @module env\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport url from 'url';\n\nimport { ONNX } from './backends/onnx.js';\nconst { env: onnx_env } = ONNX;\n\nconst VERSION = '2.7.0';\n\n// Check if various APIs are available (depends on environment)\nconst WEB_CACHE_AVAILABLE = typeof self !== 'undefined' && 'caches' in self;\nconst FS_AVAILABLE = !isEmpty(fs); // check if file system is available\nconst PATH_AVAILABLE = !isEmpty(path); // check if path is available\n\nconst RUNNING_LOCALLY = FS_AVAILABLE && PATH_AVAILABLE;\n\nconst __dirname = RUNNING_LOCALLY\n    ? path.dirname(path.dirname(url.fileURLToPath(import.meta.url)))\n    : './';\n\n// Only used for environments with access to file system\nconst DEFAULT_CACHE_DIR = RUNNING_LOCALLY\n    ? path.join(__dirname, '/.cache/')\n    : null;\n\n// Set local model path, based on available APIs\nconst DEFAULT_LOCAL_MODEL_PATH = '/models/';\nconst localModelPath = RUNNING_LOCALLY\n    ? path.join(__dirname, DEFAULT_LOCAL_MODEL_PATH)\n    : DEFAULT_LOCAL_MODEL_PATH;\n\n// Set path to wasm files. This is needed when running in a web worker.\n// https://onnxruntime.ai/docs/api/js/interfaces/Env.WebAssemblyFlags.html#wasmPaths\n// We use remote wasm files by default to make it easier for newer users.\n// In practice, users should probably self-host the necessary .wasm files.\nonnx_env.wasm.wasmPaths = RUNNING_LOCALLY\n    ? path.join(__dirname, '/dist/')\n    : `https://cdn.jsdelivr.net/npm/@xenova/transformers@${VERSION}/dist/`;\n\n\n/**\n * Global variable used to control execution. This provides users a simple way to configure Transformers.js.\n * @property {Object} backends Expose environment variables of different backends,\n * allowing users to set these variables if they want to.\n * @property {string} __dirname Directory name of module. Useful for resolving local paths.\n * @property {string} version This version of Transformers.js.\n * @property {boolean} allowRemoteModels Whether to allow loading of remote files, defaults to `true`.\n * If set to `false`, it will have the same effect as setting `local_files_only=true` when loading pipelines, models, tokenizers, processors, etc.\n * @property {string} remoteHost Host URL to load models from. Defaults to the Hugging Face Hub.\n * @property {string} remotePathTemplate Path template to fill in and append to `remoteHost` when loading models.\n * @property {boolean} allowLocalModels Whether to allow loading of local files, defaults to `true`.\n * If set to `false`, it will skip the local file check and try to load the model from the remote host.\n * @property {string} localModelPath Path to load local models from. Defaults to `/models/`.\n * @property {boolean} useFS Whether to use the file system to load files. By default, it is `true` if available.\n * @property {boolean} useBrowserCache Whether to use Cache API to cache models. By default, it is `true` if available.\n * @property {boolean} useFSCache Whether to use the file system to cache files. By default, it is `true` if available.\n * @property {string} cacheDir The directory to use for caching files with the file system. By default, it is `./.cache`.\n * @property {boolean} useCustomCache Whether to use a custom cache system (defined by `customCache`), defaults to `false`.\n * @property {Object} customCache The custom cache to use. Defaults to `null`. Note: this must be an object which\n * implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache\n */\nexport const env = {\n    /////////////////// Backends settings ///////////////////\n    backends: {\n        // onnxruntime-web/onnxruntime-node\n        onnx: onnx_env,\n\n        // TensorFlow.js\n        tfjs: {},\n    },\n\n    __dirname,\n    version: VERSION,\n\n    /////////////////// Model settings ///////////////////\n    allowRemoteModels: true,\n    remoteHost: 'https://huggingface.co/',\n    remotePathTemplate: '{model}/resolve/{revision}/',\n\n    allowLocalModels: true,\n    localModelPath: localModelPath,\n    useFS: FS_AVAILABLE,\n\n    /////////////////// Cache settings ///////////////////\n    useBrowserCache: WEB_CACHE_AVAILABLE,\n\n    useFSCache: FS_AVAILABLE,\n    cacheDir: DEFAULT_CACHE_DIR,\n\n    useCustomCache: false,\n    customCache: null,\n    //////////////////////////////////////////////////////\n}\n\n\n/**\n * @param {Object} obj\n * @private\n */\nfunction isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n}\n\n","/**\n * @file Handler file for choosing the correct version of ONNX Runtime, based on the environment.\n * Ideally, we could import the `onnxruntime-web` and `onnxruntime-node` packages only when needed,\n * but dynamic imports don't seem to work with the current webpack version and/or configuration.\n * This is possibly due to the experimental nature of top-level await statements.\n * So, we just import both packages, and use the appropriate one based on the environment:\n *   - When running in node, we use `onnxruntime-node`.\n *   - When running in the browser, we use `onnxruntime-web` (`onnxruntime-node` is not bundled).\n * \n * This module is not directly exported, but can be accessed through the environment variables:\n * ```javascript\n * import { env } from '@xenova/transformers';\n * console.log(env.backends.onnx);\n * ```\n * \n * @module backends/onnx\n */\n\n// NOTE: Import order matters here. We need to import `onnxruntime-node` before `onnxruntime-web`.\n// In either case, we select the default export if it exists, otherwise we use the named export.\nimport * as ONNX_NODE from 'onnxruntime-node';\nimport * as ONNX_WEB from 'onnxruntime-web';\n\n/** @type {module} The ONNX runtime module. */\nexport let ONNX;\n\nexport const executionProviders = [\n    // 'webgpu',\n    'wasm'\n];\n\nif (typeof process !== 'undefined' && process?.release?.name === 'node') {\n    // Running in a node-like environment.\n    ONNX = ONNX_NODE.default ?? ONNX_NODE;\n\n    // Add `cpu` execution provider, with higher precedence that `wasm`.\n    executionProviders.unshift('cpu');\n\n} else {\n    // Running in a browser-environment\n    ONNX = ONNX_WEB.default ?? ONNX_WEB;\n\n    // SIMD for WebAssembly does not operate correctly in some recent versions of iOS (16.4.x).\n    // As a temporary fix, we disable it for now.\n    // For more information, see: https://github.com/microsoft/onnxruntime/issues/15644\n    const isIOS = typeof navigator !== 'undefined' && /iP(hone|od|ad).+16_4.+AppleWebKit/.test(navigator.userAgent);\n    if (isIOS) {\n        ONNX.env.wasm.simd = false;\n    }\n}\n","\n/**\n * @file Helper module for mathematical processing. \n * \n * These functions and classes are only used internally, \n * meaning an end-user shouldn't need to access anything here.\n * \n * @module utils/maths\n */\n\n/**\n * @typedef {Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array} TypedArray\n * @typedef {BigInt64Array | BigUint64Array} BigTypedArray\n * @typedef {TypedArray | BigTypedArray} AnyTypedArray\n */\n\n/**\n * @param {TypedArray} input\n */\nexport function interpolate_data(input, [in_channels, in_height, in_width], [out_height, out_width], mode = 'bilinear', align_corners = false) {\n    // TODO use mode and align_corners\n\n    // Output image dimensions\n    const x_scale = out_width / in_width;\n    const y_scale = out_height / in_height;\n\n    // Output image\n    // @ts-ignore\n    const out_img = new input.constructor(out_height * out_width * in_channels);\n\n    // Pre-calculate strides\n    const inStride = in_height * in_width;\n    const outStride = out_height * out_width;\n\n    for (let i = 0; i < out_height; ++i) {\n        for (let j = 0; j < out_width; ++j) {\n            // Calculate output offset\n            const outOffset = i * out_width + j;\n\n            // Calculate input pixel coordinates\n            const x = (j + 0.5) / x_scale - 0.5;\n            const y = (i + 0.5) / y_scale - 0.5;\n\n            // Calculate the four nearest input pixels\n            // We also check if the input pixel coordinates are within the image bounds\n            let x1 = Math.floor(x);\n            let y1 = Math.floor(y);\n            const x2 = Math.min(x1 + 1, in_width - 1);\n            const y2 = Math.min(y1 + 1, in_height - 1);\n\n            x1 = Math.max(x1, 0);\n            y1 = Math.max(y1, 0);\n\n\n            // Calculate the fractional distances between the input pixel and the four nearest pixels\n            const s = x - x1;\n            const t = y - y1;\n\n            // Perform bilinear interpolation\n            const w1 = (1 - s) * (1 - t);\n            const w2 = s * (1 - t);\n            const w3 = (1 - s) * t;\n            const w4 = s * t;\n\n            // Calculate the four nearest input pixel indices\n            const yStride = y1 * in_width;\n            const xStride = y2 * in_width;\n            const idx1 = yStride + x1;\n            const idx2 = yStride + x2;\n            const idx3 = xStride + x1;\n            const idx4 = xStride + x2;\n\n            for (let k = 0; k < in_channels; ++k) {\n                // Calculate channel offset\n                const cOffset = k * inStride;\n\n                out_img[k * outStride + outOffset] =\n                    w1 * input[cOffset + idx1] +\n                    w2 * input[cOffset + idx2] +\n                    w3 * input[cOffset + idx3] +\n                    w4 * input[cOffset + idx4];\n            }\n        }\n    }\n\n    return out_img;\n}\n\n\n/**\n * Helper method to transpose a `AnyTypedArray` directly\n * @param {T} array \n * @template {AnyTypedArray} T \n * @param {number[]} dims \n * @param {number[]} axes \n * @returns {[T, number[]]} The transposed array and the new shape.\n */\nexport function transpose_data(array, dims, axes) {\n    // Calculate the new shape of the transposed array\n    // and the stride of the original array\n    const shape = new Array(axes.length);\n    const stride = new Array(axes.length);\n\n    for (let i = axes.length - 1, s = 1; i >= 0; --i) {\n        stride[i] = s;\n        shape[i] = dims[axes[i]];\n        s *= shape[i];\n    }\n\n    // Precompute inverse mapping of stride\n    const invStride = axes.map((_, i) => stride[axes.indexOf(i)]);\n\n    // Create the transposed array with the new shape\n    // @ts-ignore\n    const transposedData = new array.constructor(array.length);\n\n    // Transpose the original array to the new array\n    for (let i = 0; i < array.length; ++i) {\n        let newIndex = 0;\n        for (let j = dims.length - 1, k = i; j >= 0; --j) {\n            newIndex += (k % dims[j]) * invStride[j];\n            k = Math.floor(k / dims[j]);\n        }\n        transposedData[newIndex] = array[i];\n    }\n\n    return [transposedData, shape];\n}\n\n\n/**\n * Compute the softmax of an array of numbers.\n *\n * @param {number[]} arr The array of numbers to compute the softmax of.\n * @returns {number[]} The softmax array.\n */\nexport function softmax(arr) {\n    // Compute the maximum value in the array\n    const maxVal = max(arr)[0];\n\n    // Compute the exponentials of the array values\n    const exps = arr.map(x => Math.exp(x - maxVal));\n\n    // Compute the sum of the exponentials\n    const sumExps = exps.reduce((acc, val) => acc + val, 0);\n\n    // Compute the softmax values\n    const softmaxArr = exps.map(x => x / sumExps);\n\n    return softmaxArr;\n}\n\n/**\n * Calculates the logarithm of the softmax function for the input array.\n * @param {number[]} arr The input array to calculate the log_softmax function for.\n * @returns {any} The resulting log_softmax array.\n */\nexport function log_softmax(arr) {\n    // Compute the softmax values\n    const softmaxArr = softmax(arr);\n\n    // Apply log formula to each element\n    const logSoftmaxArr = softmaxArr.map(x => Math.log(x));\n\n    return logSoftmaxArr;\n}\n\n/**\n * Calculates the dot product of two arrays.\n * @param {number[]} arr1 The first array.\n * @param {number[]} arr2 The second array.\n * @returns {number} The dot product of arr1 and arr2.\n */\nexport function dot(arr1, arr2) {\n    return arr1.reduce((acc, val, i) => acc + val * arr2[i], 0);\n}\n\n\n/**\n * Get the top k items from an iterable, sorted by descending order\n *\n * @param {Array} items The items to be sorted\n * @param {number} [top_k=0] The number of top items to return (default: 0 = return all)\n * @returns {Array} The top k items, sorted by descending order\n */\nexport function getTopItems(items, top_k = 0) {\n    // if top == 0, return all\n\n    items = Array.from(items)\n        .map((x, i) => [i, x])            // Get indices ([index, score])\n        .sort((a, b) => b[1] - a[1])      // Sort by log probabilities\n\n    if (top_k > 0) {\n        items = items.slice(0, top_k);    // Get top k items\n    }\n\n    return items\n}\n\n/**\n * Computes the cosine similarity between two arrays.\n *\n * @param {number[]} arr1 The first array.\n * @param {number[]} arr2 The second array.\n * @returns {number} The cosine similarity between the two arrays.\n */\nexport function cos_sim(arr1, arr2) {\n    // Calculate dot product of the two arrays\n    const dotProduct = dot(arr1, arr2);\n\n    // Calculate the magnitude of the first array\n    const magnitudeA = magnitude(arr1);\n\n    // Calculate the magnitude of the second array\n    const magnitudeB = magnitude(arr2);\n\n    // Calculate the cosine similarity\n    const cosineSimilarity = dotProduct / (magnitudeA * magnitudeB);\n\n    return cosineSimilarity;\n}\n\n/**\n * Calculates the magnitude of a given array.\n * @param {number[]} arr The array to calculate the magnitude of.\n * @returns {number} The magnitude of the array.\n */\nexport function magnitude(arr) {\n    return Math.sqrt(arr.reduce((acc, val) => acc + val * val, 0));\n}\n\n\n/**\n * Returns the value and index of the minimum element in an array.\n * @param {number[]} arr array of numbers.\n * @returns {number[]} the value and index of the minimum element, of the form: [valueOfMin, indexOfMin]\n * @throws {Error} If array is empty.\n */\nexport function min(arr) {\n    if (arr.length === 0) throw Error('Array must not be empty');\n    let min = arr[0];\n    let indexOfMin = 0;\n    for (let i = 1; i < arr.length; ++i) {\n        if (arr[i] < min) {\n            min = arr[i];\n            indexOfMin = i;\n        }\n    }\n    return [min, indexOfMin];\n}\n\n\n/**\n * Returns the value and index of the maximum element in an array.\n * @param {number[]} arr array of numbers.\n * @returns {number[]} the value and index of the maximum element, of the form: [valueOfMax, indexOfMax]\n * @throws {Error} If array is empty.\n */\nexport function max(arr) {\n    if (arr.length === 0) throw Error('Array must not be empty');\n    let max = arr[0];\n    let indexOfMax = 0;\n    for (let i = 1; i < arr.length; ++i) {\n        if (arr[i] > max) {\n            max = arr[i];\n            indexOfMax = i;\n        }\n    }\n    return [max, indexOfMax];\n}\n\n/**\n * Return the Discrete Fourier Transform sample frequencies.\n * \n * Code adapted from https://github.com/numpy/numpy/blob/25908cacd19915bf3ddd659c28be28a41bd97a54/numpy/fft/helper.py#L173-L221\n * Original Python doc: https://numpy.org/doc/stable/reference/generated/numpy.fft.rfftfreq.html\n * @example\n * rfftfreq(400, 1 / 16000) // (201) [0, 40, 80, 120, 160, 200, ..., 8000]\n * @param {number} n Window length\n * @param {number} [d = 1.0] Sample spacing (inverse of the sampling rate). Defaults to 1.\n * @throws {TypeError} If n is not an integer.\n * @returns {number[]} Array of length `Math.floor(n / 2) + 1;` containing the sample frequencies.\n */\nexport function rfftfreq(n, d = 1.0) {\n    if (!Number.isInteger(n)) {\n        throw new TypeError(`n should be an integer, but ${n} given.`);\n    }\n    const val = 1.0 / (n * d);\n    const len = Math.floor(n / 2) + 1;\n    const results = new Array(len);\n    for (let i = 0; i < len; ++i) {\n        results[i] = i * val;\n    }\n    return results;\n}\n\n/**\n * FFT class provides functionality for performing Fast Fourier Transform on arrays\n * Code adapted from https://www.npmjs.com/package/fft.js\n */\nexport class FFT {\n    /**\n     * @param {number} size The size of the input array. Must be a power of two and bigger than 1.\n     * @throws {Error} FFT size must be a power of two and bigger than 1.\n     */\n    constructor(size) {\n        this.size = size | 0; // convert to a 32-bit signed integer\n        if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n            throw new Error('FFT size must be a power of two and bigger than 1');\n\n        this._csize = size << 1;\n\n        this.table = new Float32Array(this.size * 2);\n        for (let i = 0; i < this.table.length; i += 2) {\n            const angle = Math.PI * i / this.size;\n            this.table[i] = Math.cos(angle);\n            this.table[i + 1] = -Math.sin(angle);\n        }\n\n        // Find size's power of two\n        let power = 0;\n        for (let t = 1; this.size > t; t <<= 1)\n            ++power;\n\n        // Calculate initial step's width:\n        //   * If we are full radix-4, it is 2x smaller to give inital len=8\n        //   * Otherwise it is the same as `power` to give len=4\n        this._width = power % 2 === 0 ? power - 1 : power;\n\n        // Pre-compute bit-reversal patterns\n        this._bitrev = new Int32Array(1 << this._width);\n        for (let j = 0; j < this._bitrev.length; ++j) {\n            this._bitrev[j] = 0;\n            for (let shift = 0; shift < this._width; shift += 2) {\n                const revShift = this._width - shift - 2;\n                this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n            }\n        }\n    }\n\n    /**\n     * Create a complex number array with size `2 * size`\n     *\n     * @returns {Float32Array} A complex number array with size `2 * size`\n     */\n    createComplexArray() {\n        return new Float32Array(this._csize);\n    }\n\n    /**\n     * Converts a complex number representation stored in a Float32Array to an array of real numbers.\n     * \n     * @param {Float32Array} complex The complex number representation to be converted.\n     * @param {number[]} [storage] An optional array to store the result in.\n     * @returns {number[]} An array of real numbers representing the input complex number representation.\n     */\n    fromComplexArray(complex, storage) {\n        const res = storage || new Array(complex.length >>> 1);\n        for (let i = 0; i < complex.length; i += 2)\n            res[i >>> 1] = complex[i];\n        return res;\n    }\n\n    /**\n     * Convert a real-valued input array to a complex-valued output array.\n     * @param {Float32Array} input The real-valued input array.\n     * @param {Float32Array} [storage] Optional buffer to store the output array.\n     * @returns {Float32Array} The complex-valued output array.\n     */\n    toComplexArray(input, storage) {\n        const res = storage || this.createComplexArray();\n        for (let i = 0; i < res.length; i += 2) {\n            res[i] = input[i >>> 1];\n            res[i + 1] = 0;\n        }\n        return res;\n    }\n\n    /**\n     * Completes the spectrum by adding its mirrored negative frequency components.\n     * @param {Float32Array} spectrum The input spectrum.\n     * @returns {void}\n     */\n    completeSpectrum(spectrum) {\n        const size = this._csize;\n        const half = size >>> 1;\n        for (let i = 2; i < half; i += 2) {\n            spectrum[size - i] = spectrum[i];\n            spectrum[size - i + 1] = -spectrum[i + 1];\n        }\n    }\n\n    /**\n     * Performs a Fast Fourier Transform (FFT) on the given input data and stores the result in the output buffer.\n     * \n     * @param {Float32Array} out The output buffer to store the result.\n     * @param {Float32Array} data The input data to transform.\n     * \n     * @throws {Error} Input and output buffers must be different.\n     * \n     * @returns {void}\n     */\n    transform(out, data) {\n        if (out === data)\n            throw new Error('Input and output buffers must be different');\n\n        this._transform4(out, data, 1 /* DONE */);\n    }\n\n    /**\n     * Performs a real-valued forward FFT on the given input buffer and stores the result in the given output buffer.\n     * The input buffer must contain real values only, while the output buffer will contain complex values. The input and\n     * output buffers must be different.\n     *\n     * @param {Float32Array} out The output buffer.\n     * @param {Float32Array} data The input buffer containing real values.\n     *\n     * @throws {Error} If the input and output buffers are the same.\n     */\n    realTransform(out, data) {\n        if (out === data)\n            throw new Error('Input and output buffers must be different');\n\n        this._realTransform4(out, data, 1 /* DONE */);\n    }\n\n    /**\n     * Performs an inverse FFT transformation on the given `data` array, and stores the result in `out`.\n     * The `out` array must be a different buffer than the `data` array. The `out` array will contain the\n     * result of the transformation. The `data` array will not be modified.\n     * \n     * @param {Float32Array} out The output buffer for the transformed data.\n     * @param {Float32Array} data The input data to transform.\n     * @throws {Error} If `out` and `data` refer to the same buffer.\n     * @returns {void}\n     */\n    inverseTransform(out, data) {\n        if (out === data)\n            throw new Error('Input and output buffers must be different');\n\n        this._transform4(out, data, -1 /* DONE */);\n        for (let i = 0; i < out.length; ++i)\n            out[i] /= this.size;\n    }\n\n    /**\n     * Performs a radix-4 implementation of a discrete Fourier transform on a given set of data.\n     *\n     * @param {Float32Array} out The output buffer for the transformed data.\n     * @param {Float32Array} data The input buffer of data to be transformed.\n     * @param {number} inv A scaling factor to apply to the transform.\n     * @returns {void}\n     */\n    _transform4(out, data, inv) {\n        // radix-4 implementation\n\n        const size = this._csize;\n\n        // Initial step (permute and transform)\n        const width = this._width;\n        let step = 1 << width;\n        let len = (size / step) << 1;\n\n        let outOff;\n        let t;\n        let bitrev = this._bitrev;\n        if (len === 4) {\n            for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                const off = bitrev[t];\n                this._singleTransform2(data, out, outOff, off, step);\n            }\n        } else {\n            // len === 8\n            for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                const off = bitrev[t];\n                this._singleTransform4(data, out, outOff, off, step, inv);\n            }\n        }\n\n        // Loop through steps in decreasing order\n        for (step >>= 2; step >= 2; step >>= 2) {\n            len = (size / step) << 1;\n            let quarterLen = len >>> 2;\n\n            // Loop through offsets in the data\n            for (outOff = 0; outOff < size; outOff += len) {\n                // Full case\n                let limit = outOff + quarterLen;\n                for (let i = outOff, k = 0; i < limit; i += 2, k += step) {\n                    const A = i;\n                    const B = A + quarterLen;\n                    const C = B + quarterLen;\n                    const D = C + quarterLen;\n\n                    // Original values\n                    const Ar = out[A];\n                    const Ai = out[A + 1];\n                    const Br = out[B];\n                    const Bi = out[B + 1];\n                    const Cr = out[C];\n                    const Ci = out[C + 1];\n                    const Dr = out[D];\n                    const Di = out[D + 1];\n\n                    const tableBr = this.table[k];\n                    const tableBi = inv * this.table[k + 1];\n                    const MBr = Br * tableBr - Bi * tableBi;\n                    const MBi = Br * tableBi + Bi * tableBr;\n\n                    const tableCr = this.table[2 * k];\n                    const tableCi = inv * this.table[2 * k + 1];\n                    const MCr = Cr * tableCr - Ci * tableCi;\n                    const MCi = Cr * tableCi + Ci * tableCr;\n\n                    const tableDr = this.table[3 * k];\n                    const tableDi = inv * this.table[3 * k + 1];\n                    const MDr = Dr * tableDr - Di * tableDi;\n                    const MDi = Dr * tableDi + Di * tableDr;\n\n                    // Pre-Final values\n                    const T0r = Ar + MCr;\n                    const T0i = Ai + MCi;\n                    const T1r = Ar - MCr;\n                    const T1i = Ai - MCi;\n                    const T2r = MBr + MDr;\n                    const T2i = MBi + MDi;\n                    const T3r = inv * (MBr - MDr);\n                    const T3i = inv * (MBi - MDi);\n\n                    // Final values\n                    out[A] = T0r + T2r;\n                    out[A + 1] = T0i + T2i;\n                    out[B] = T1r + T3i;\n                    out[B + 1] = T1i - T3r;\n                    out[C] = T0r - T2r;\n                    out[C + 1] = T0i - T2i;\n                    out[D] = T1r - T3i;\n                    out[D + 1] = T1i + T3r;\n                }\n            }\n        }\n    }\n\n    /**\n     * Performs a radix-2 implementation of a discrete Fourier transform on a given set of data.\n     *\n     * @param {Float32Array} data The input buffer of data to be transformed.\n     * @param {Float32Array} out The output buffer for the transformed data.\n     * @param {number} outOff The offset at which to write the output data.\n     * @param {number} off The offset at which to begin reading the input data.\n     * @param {number} step The step size for indexing the input data.\n     * @returns {void}\n     */\n    _singleTransform2(data, out, outOff, off, step) {\n        // radix-2 implementation\n        // NOTE: Only called for len=4\n\n        const evenR = data[off];\n        const evenI = data[off + 1];\n        const oddR = data[off + step];\n        const oddI = data[off + step + 1];\n\n        out[outOff] = evenR + oddR;\n        out[outOff + 1] = evenI + oddI;\n        out[outOff + 2] = evenR - oddR;\n        out[outOff + 3] = evenI - oddI;\n    }\n\n    /**\n     * Performs radix-4 transformation on input data of length 8\n     *\n     * @param {Float32Array} data Input data array of length 8\n     * @param {Float32Array} out Output data array of length 8\n     * @param {number} outOff Index of output array to start writing from\n     * @param {number} off Index of input array to start reading from\n     * @param {number} step Step size between elements in input array\n     * @param {number} inv Scaling factor for inverse transform\n     * \n     * @returns {void}\n     */\n    _singleTransform4(data, out, outOff, off, step, inv) {\n        // radix-4\n        // NOTE: Only called for len=8\n        const step2 = step * 2;\n        const step3 = step * 3;\n\n        // Original values\n        const Ar = data[off];\n        const Ai = data[off + 1];\n        const Br = data[off + step];\n        const Bi = data[off + step + 1];\n        const Cr = data[off + step2];\n        const Ci = data[off + step2 + 1];\n        const Dr = data[off + step3];\n        const Di = data[off + step3 + 1];\n\n        // Pre-Final values\n        const T0r = Ar + Cr;\n        const T0i = Ai + Ci;\n        const T1r = Ar - Cr;\n        const T1i = Ai - Ci;\n        const T2r = Br + Dr;\n        const T2i = Bi + Di;\n        const T3r = inv * (Br - Dr);\n        const T3i = inv * (Bi - Di);\n\n        // Final values\n        out[outOff] = T0r + T2r;\n        out[outOff + 1] = T0i + T2i;\n        out[outOff + 2] = T1r + T3i;\n        out[outOff + 3] = T1i - T3r;\n        out[outOff + 4] = T0r - T2r;\n        out[outOff + 5] = T0i - T2i;\n        out[outOff + 6] = T1r - T3i;\n        out[outOff + 7] = T1i + T3r;\n    }\n\n    /**\n     * Real input radix-4 implementation\n     * @param {Float32Array} out Output array for the transformed data\n     * @param {Float32Array} data Input array of real data to be transformed\n     * @param {number} inv The scale factor used to normalize the inverse transform\n     */\n    _realTransform4(out, data, inv) {\n        // Real input radix-4 implementation\n        const size = this._csize;\n\n        // Initial step (permute and transform)\n        const width = this._width;\n        let step = 1 << width;\n        let len = (size / step) << 1;\n\n        var outOff;\n        var t;\n        var bitrev = this._bitrev;\n        if (len === 4) {\n            for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                const off = bitrev[t];\n                this._singleRealTransform2(data, out, outOff, off >>> 1, step >>> 1);\n            }\n        } else {\n            // len === 8\n            for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                const off = bitrev[t];\n                this._singleRealTransform4(data, out, outOff, off >>> 1, step >>> 1, inv);\n            }\n        }\n\n        // Loop through steps in decreasing order\n        for (step >>= 2; step >= 2; step >>= 2) {\n            len = (size / step) << 1;\n            const halfLen = len >>> 1;\n            const quarterLen = halfLen >>> 1;\n            const hquarterLen = quarterLen >>> 1;\n\n            // Loop through offsets in the data\n            for (outOff = 0; outOff < size; outOff += len) {\n                for (let i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n                    const A = outOff + i;\n                    const B = A + quarterLen;\n                    const C = B + quarterLen;\n                    const D = C + quarterLen;\n\n                    // Original values\n                    const Ar = out[A];\n                    const Ai = out[A + 1];\n                    const Br = out[B];\n                    const Bi = out[B + 1];\n                    const Cr = out[C];\n                    const Ci = out[C + 1];\n                    const Dr = out[D];\n                    const Di = out[D + 1];\n\n                    const tableBr = this.table[k];\n                    const tableBi = inv * this.table[k + 1];\n                    const MBr = Br * tableBr - Bi * tableBi;\n                    const MBi = Br * tableBi + Bi * tableBr;\n\n                    const tableCr = this.table[2 * k];\n                    const tableCi = inv * this.table[2 * k + 1];\n                    const MCr = Cr * tableCr - Ci * tableCi;\n                    const MCi = Cr * tableCi + Ci * tableCr;\n\n                    const tableDr = this.table[3 * k];\n                    const tableDi = inv * this.table[3 * k + 1];\n                    const MDr = Dr * tableDr - Di * tableDi;\n                    const MDi = Dr * tableDi + Di * tableDr;\n\n                    // Pre-Final values\n                    const T0r = Ar + MCr;\n                    const T0i = Ai + MCi;\n                    const T1r = Ar - MCr;\n                    const T1i = Ai - MCi;\n                    const T2r = MBr + MDr;\n                    const T2i = MBi + MDi;\n                    const T3r = inv * (MBr - MDr);\n                    const T3i = inv * (MBi - MDi);\n\n                    // Final values\n                    out[A] = T0r + T2r;\n                    out[A + 1] = T0i + T2i;\n                    out[B] = T1r + T3i;\n                    out[B + 1] = T1i - T3r;\n\n                    // Output final middle point\n                    if (i === 0) {\n                        out[C] = T0r - T2r;\n                        out[C + 1] = T0i - T2i;\n                        continue;\n                    }\n\n                    // Do not overwrite ourselves\n                    if (i === hquarterLen)\n                        continue;\n\n                    const SA = outOff + quarterLen - i;\n                    const SB = outOff + halfLen - i;\n\n                    out[SA] = T1r + -inv * T3i;\n                    out[SA + 1] = -T1i - inv * T3r;\n                    out[SB] = T0r + -inv * T2r;\n                    out[SB + 1] = -T0i + inv * T2i;\n                }\n            }\n        }\n    }\n\n    /**\n     * Performs a single real input radix-2 transformation on the provided data\n     * \n     * @param {Float32Array} data The input data array\n     * @param {Float32Array} out The output data array\n     * @param {number} outOff The output offset\n     * @param {number} off The input offset\n     * @param {number} step The step\n     * \n     * @returns {void}\n     */\n    _singleRealTransform2(data, out, outOff, off, step) {\n        // radix-2 implementation\n        // NOTE: Only called for len=4\n\n        const evenR = data[off];\n        const oddR = data[off + step];\n\n        out[outOff] = evenR + oddR;\n        out[outOff + 1] = 0;\n        out[outOff + 2] = evenR - oddR;\n        out[outOff + 3] = 0;\n    }\n\n    /**\n     * Computes a single real-valued transform using radix-4 algorithm.\n     * This method is only called for len=8.\n     *\n     * @param {Float32Array} data The input data array.\n     * @param {Float32Array} out The output data array.\n     * @param {number} outOff The offset into the output array.\n     * @param {number} off The offset into the input array.\n     * @param {number} step The step size for the input array.\n     * @param {number} inv The value of inverse.\n     */\n    _singleRealTransform4(data, out, outOff, off, step, inv) {\n        // radix-4\n        // NOTE: Only called for len=8\n        const step2 = step * 2;\n        const step3 = step * 3;\n\n        // Original values\n        const Ar = data[off];\n        const Br = data[off + step];\n        const Cr = data[off + step2];\n        const Dr = data[off + step3];\n\n        // Pre-Final values\n        const T0r = Ar + Cr;\n        const T1r = Ar - Cr;\n        const T2r = Br + Dr;\n        const T3r = inv * (Br - Dr);\n\n        // Final values\n        out[outOff] = T0r + T2r;\n        out[outOff + 1] = 0;\n        out[outOff + 2] = T1r;\n        out[outOff + 3] = -T3r;\n        out[outOff + 4] = T0r - T2r;\n        out[outOff + 5] = 0;\n        out[outOff + 6] = T1r;\n        out[outOff + 7] = T3r;\n    }\n}\n\n/**\n * Performs median filter on the provided data. Padding is done by mirroring the data.\n * @param {AnyTypedArray} data The input array\n * @param {number} windowSize The window size\n */\nexport function medianFilter(data, windowSize) {\n\n    if (windowSize % 2 === 0 || windowSize <= 0) {\n        throw new Error('Window size must be a positive odd number');\n    }\n\n    // @ts-ignore\n    const outputArray = new data.constructor(data.length);\n\n    // @ts-ignore\n    const buffer = new data.constructor(windowSize); // Reusable array for storing values\n\n    const halfWindowSize = Math.floor(windowSize / 2);\n\n    for (let i = 0; i < data.length; ++i) {\n        let valuesIndex = 0;\n\n        for (let j = -halfWindowSize; j <= halfWindowSize; ++j) {\n            let index = i + j;\n            if (index < 0) {\n                index = Math.abs(index);\n            } else if (index >= data.length) {\n                index = 2 * (data.length - 1) - index;\n            }\n\n            buffer[valuesIndex++] = data[index];\n        }\n\n        buffer.sort();\n        outputArray[i] = buffer[halfWindowSize];\n    }\n\n    return outputArray;\n}\n\n/**\n * Helper function to round a number to a given number of decimals\n * @param {number} num The number to round\n * @param {number} decimals The number of decimals\n * @returns {number} The rounded number\n */\nexport function round(num, decimals) {\n    const pow = Math.pow(10, decimals);\n    return Math.round(num * pow) / pow;\n}\n","/**\n * @file Helper module for `Tensor` processing.\n * \n * These functions and classes are only used internally, \n * meaning an end-user shouldn't need to access anything here.\n * \n * @module utils/tensor\n */\n\nimport { ONNX } from '../backends/onnx.js';\n\nimport {\n    interpolate_data,\n    transpose_data\n} from './maths.js';\n\n\n/**\n * @typedef {import('./maths.js').AnyTypedArray | any[]} DataArray\n */\n\n/** @type {Object} */\nconst ONNXTensor = ONNX.Tensor;\n\nexport class Tensor extends ONNXTensor {\n    /**\n     * Create a new Tensor or copy an existing Tensor.\n     * @param {[string, DataArray, number[]]|[ONNXTensor]} args\n     */\n    constructor(...args) {\n        if (args[0] instanceof ONNX.Tensor) {\n            // Create shallow copy\n            super(args[0].type, args[0].data, args[0].dims);\n\n        } else {\n            // Create new\n            super(...args);\n        }\n\n        return new Proxy(this, {\n            get: (obj, key) => {\n                if (typeof key === 'string') {\n                    let index = Number(key);\n                    if (Number.isInteger(index)) {\n                        // key is an integer (i.e., index)\n                        return obj._getitem(index);\n                    }\n                }\n                // @ts-ignore\n                return obj[key];\n            },\n            set: (obj, key, value) => {\n                // TODO allow setting of data\n\n                // @ts-ignore\n                return obj[key] = value;\n            }\n        });\n    }\n\n    /**\n     * Returns an iterator object for iterating over the tensor data in row-major order.\n     * If the tensor has more than one dimension, the iterator will yield subarrays.\n     * @returns {Iterator} An iterator object for iterating over the tensor data in row-major order.\n     */\n    *[Symbol.iterator]() {\n        const [iterLength, ...iterDims] = this.dims;\n\n        if (iterDims.length > 0) {\n            const iterSize = iterDims.reduce((a, b) => a * b);\n            for (let i = 0; i < iterLength; ++i) {\n                yield this._subarray(i, iterSize, iterDims);\n            }\n        } else {\n            yield* this.data\n        }\n\n    }\n\n    /**\n     * Index into a Tensor object.\n     * @param {number} index The index to access.\n     * @returns {Tensor} The data at the specified index.\n     */\n    _getitem(index) {\n        const [iterLength, ...iterDims] = this.dims;\n\n        index = safeIndex(index, iterLength);\n\n        if (iterDims.length > 0) {\n            const iterSize = iterDims.reduce((a, b) => a * b);\n            return this._subarray(index, iterSize, iterDims);\n        } else {\n            return new Tensor(this.type, [this.data[index]], iterDims);\n        }\n    }\n\n    /**\n     * @param {number|bigint} item The item to search for in the tensor\n     * @returns {number} The index of the first occurrence of item in the tensor data.\n     */\n    indexOf(item) {\n        for (let index = 0; index < this.data.length; ++index) {\n            // Note: == instead of === so we can match Ints with BigInts\n            if (this.data[index] == item) {\n                return index;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * @param {number} index \n     * @param {number} iterSize \n     * @param {any} iterDims \n     * @returns {Tensor}\n     */\n    _subarray(index, iterSize, iterDims) {\n        let data = this.data.subarray(index * iterSize, (index + 1) * iterSize);\n        return new Tensor(this.type, data, iterDims);\n    }\n\n    /**\n     * Returns the value of this tensor as a standard JavaScript Number. This only works\n     * for tensors with one element. For other cases, see `Tensor.tolist()`.\n     * @returns {number} The value of this tensor as a standard JavaScript Number.\n     * @throws {Error} If the tensor has more than one element.\n     */\n    item() {\n        if (this.data.length !== 1) {\n            throw new Error(`a Tensor with ${this.data.length} elements cannot be converted to Scalar`);\n        }\n        return this.data[0];\n    }\n\n    /**\n     * Convert tensor data to a n-dimensional JS list\n     * @returns {Array}\n     */\n    tolist() {\n        return reshape(this.data, this.dims)\n    }\n\n    /**\n     * Return a new Tensor with the sigmoid function applied to each element.\n     * @returns {Tensor} The tensor with the sigmoid function applied.\n     */\n    sigmoid() {\n        return this.clone().sigmoid_();\n    }\n\n    /**\n     * Applies the sigmoid function to the tensor in place.\n     * @returns {Tensor} Returns `this`.\n     */\n    sigmoid_() {\n        for (let i = 0; i < this.data.length; ++i) {\n            this.data[i] = 1 / (1 + Math.exp(-this.data[i]));\n        }\n        return this;\n    }\n\n    clone() {\n        return new Tensor(this.type, this.data.slice(), this.dims.slice());\n    }\n\n    slice(...slices) {\n        // This allows for slicing with ranges and numbers\n        let newTensorDims = [];\n        let newOffsets = [];\n\n        // slices is an array of numbers or arrays of numbers\n        // e.g., slices = [0, [1, 3], null, [0, 3]]\n        for (let sliceIndex = 0; sliceIndex < this.dims.length; ++sliceIndex) {\n            let slice = slices[sliceIndex];\n\n            if (slice === null || slice === undefined) {\n                // null or undefined means take the whole dimension\n                newOffsets.push([0, this.dims[sliceIndex]]);\n                newTensorDims.push(this.dims[sliceIndex]);\n\n            } else if (typeof slice === 'number') {\n                slice = safeIndex(slice, this.dims[sliceIndex], sliceIndex);\n\n                // A number means take a single element\n                newOffsets.push([slice, slice + 1]);\n\n            } else if (Array.isArray(slice) && slice.length === 2) {\n                // An array of length 2 means take a range of elements\n\n                if (slice[0] > slice[1]) {\n                    throw new Error(`Invalid slice: ${slice}`);\n                }\n\n                let offsets = [\n                    Math.max(slice[0], 0),\n                    Math.min(slice[1], this.dims[sliceIndex])\n                ];\n\n                newOffsets.push(offsets);\n                newTensorDims.push(offsets[1] - offsets[0]);\n\n            } else {\n                throw new Error(`Invalid slice: ${slice}`);\n            }\n        }\n\n        let newDims = newOffsets.map(([start, end]) => end - start);\n        let newBufferSize = newDims.reduce((a, b) => a * b);\n\n        // Allocate memory\n        let data = new this.data.constructor(newBufferSize);\n\n        // Precompute strides\n        const stride = this.stride();\n\n        for (let i = 0; i < newBufferSize; ++i) {\n            let originalIndex = 0;\n            for (let j = newDims.length - 1, num = i; j >= 0; --j) {\n                const size = newDims[j];\n                originalIndex += ((num % size) + newOffsets[j][0]) * stride[j];\n                num = Math.floor(num / size);\n            }\n            data[i] = this.data[originalIndex];\n        }\n        return new Tensor(this.type, data, newTensorDims);\n\n    }\n\n    /**\n     * Return a transposed version of this Tensor, according to the provided dimensions.\n     * @param  {...number} dims Dimensions to transpose.\n     * @returns {Tensor} The transposed tensor.\n     */\n    transpose(...dims) {\n        return transpose(this, dims);\n    }\n\n    // TODO: rename transpose to permute\n    // TODO: implement transpose\n\n    // TODO add .max() and .min() methods\n\n    /**\n     * Returns the sum of each row of the input tensor in the given dimension dim.\n     * \n     * @param {number} [dim=null] The dimension or dimensions to reduce. If `null`, all dimensions are reduced.\n     * @param {boolean} keepdim Whether the output tensor has `dim` retained or not.\n     * @returns The summed tensor\n     */\n    sum(dim = null, keepdim = false) {\n        return this.norm(1, dim, keepdim);\n    }\n\n    /**\n     * Returns the matrix norm or vector norm of a given tensor.\n     * @param {number|string} [p='fro'] The order of norm\n     * @param {number} [dim=null] Specifies which dimension of the tensor to calculate the norm across.\n     * If dim is None, the norm will be calculated across all dimensions of input.\n     * @param {boolean} [keepdim=false] Whether the output tensors have dim retained or not.\n     * @returns {Tensor} The norm of the tensor.\n     */\n    norm(p = 'fro', dim = null, keepdim = false) {\n        if (p === 'fro') {\n            // NOTE: Since we only support integer dims, Frobenius norm produces the same result as p=2.\n            p = 2;\n        } else if (typeof p === 'string') {\n            throw Error(`Unsupported norm: ${p}`);\n        }\n\n        if (dim === null) {\n            // @ts-ignore\n            let val = this.data.reduce((a, b) => a + (b ** p), 0) ** (1 / p);\n            return new Tensor(this.type, [val], []);\n        }\n\n        // Negative indexing\n        dim = safeIndex(dim, this.dims.length);\n\n        // Calculate the shape of the resulting array after summation\n        const resultDims = this.dims.slice(); // Copy the original dimensions\n        resultDims[dim] = 1; // Remove the specified axis\n\n        // Create a new array to store the accumulated values\n        const result = new this.data.constructor(this.data.length / this.dims[dim]);\n\n        // Iterate over the data array\n        for (let i = 0; i < this.data.length; ++i) {\n\n            // Calculate the index in the resulting array\n            let resultIndex = 0;\n\n            for (let j = this.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n                const size = this.dims[j];\n                if (j !== dim) {\n                    const index = num % size;\n                    resultIndex += index * resultMultiplier;\n                    resultMultiplier *= resultDims[j];\n                }\n                num = Math.floor(num / size);\n            }\n\n            // Accumulate the value at the current index\n            result[resultIndex] += (this.data[i]) ** p;\n        }\n\n        if (p !== 1) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = result[i] ** (1 / p);\n            }\n        }\n\n        if (!keepdim) {\n            resultDims.splice(dim, 1);\n        }\n\n        return new Tensor(this.type, result, resultDims);\n    }\n\n    /**\n     * Performs `L_p` normalization of inputs over specified dimension. Operates in place.\n     * @param {number} [p=2] The exponent value in the norm formulation\n     * @param {number} [dim=1] The dimension to reduce\n     * @returns {Tensor} `this` for operation chaining.\n     */\n    normalize_(p = 2.0, dim = 1) {\n        dim = safeIndex(dim, this.dims.length);\n\n        const norm = this.norm(p, dim, true);\n\n        for (let i = 0; i < this.data.length; ++i) {\n\n            // Calculate the index in the resulting array\n            let resultIndex = 0;\n\n            for (let j = this.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n                const size = this.dims[j];\n                if (j !== dim) {\n                    const index = num % size;\n                    resultIndex += index * resultMultiplier;\n                    resultMultiplier *= this.dims[j];\n                }\n                num = Math.floor(num / size);\n            }\n\n            // Divide by normalized value\n            this.data[i] /= norm.data[resultIndex];\n        }\n\n        return this;\n    }\n\n    /**\n     * Performs `L_p` normalization of inputs over specified dimension.\n     * @param {number} [p=2] The exponent value in the norm formulation\n     * @param {number} [dim=1] The dimension to reduce\n     * @returns {Tensor} The normalized tensor.\n     */\n    normalize(p = 2.0, dim = 1) {\n        return this.clone().normalize_(p, dim);\n    }\n\n    /**\n     * Compute and return the stride of this tensor.\n     * Stride is the jump necessary to go from one element to the next one in the specified dimension dim.\n     * @returns {number[]} The stride of this tensor.\n     */\n    stride() {\n        return dimsToStride(this.dims);\n    }\n\n    /**\n     * Returns a tensor with all specified dimensions of input of size 1 removed.\n     * \n     * NOTE: The returned tensor shares the storage with the input tensor, so changing the contents of one will change the contents of the other.\n     * If you would like a copy, use `tensor.clone()` before squeezing.\n     * \n     * @param {number} [dim=null] If given, the input will be squeezed only in the specified dimensions.\n     * @returns The squeezed tensor\n     */\n    squeeze(dim = null) {\n        return new Tensor(\n            this.type,\n            this.data,\n            calc_squeeze_dims(this.dims, dim)\n        )\n    }\n\n    /**\n     * In-place version of @see {@link Tensor.squeeze}\n     */\n    squeeze_(dim = null) {\n        this.dims = calc_squeeze_dims(this.dims, dim);\n        return this;\n    }\n\n    /**\n     * Returns a new tensor with a dimension of size one inserted at the specified position.\n     * \n     * NOTE: The returned tensor shares the same underlying data with this tensor.\n     * \n     * @param {number} dim The index at which to insert the singleton dimension\n     * @returns The unsqueezed tensor\n     */\n    unsqueeze(dim = null) {\n        return new Tensor(\n            this.type,\n            this.data,\n            calc_unsqueeze_dims(this.dims, dim)\n        );\n    }\n\n    /**\n     * In-place version of @see {@link Tensor.unsqueeze}\n     */\n    unsqueeze_(dim = null) {\n        this.dims = calc_unsqueeze_dims(this.dims, dim);\n        return this;\n    }\n\n    /**\n     * In-place version of @see {@link Tensor.flatten}\n     */\n    flatten_(start_dim = 0, end_dim = -1) {\n        // TODO validate inputs\n        end_dim = (end_dim + this.dims.length) % this.dims.length;\n\n        let dimsToKeepBefore = this.dims.slice(0, start_dim);\n        let dimsToFlatten = this.dims.slice(start_dim, end_dim + 1);\n        let dimsToKeepAfter = this.dims.slice(end_dim + 1);\n\n        this.dims = [...dimsToKeepBefore, dimsToFlatten.reduce((a, b) => a * b, 1), ...dimsToKeepAfter]\n        return this;\n    }\n\n    /**\n     * Flattens input by reshaping it into a one-dimensional tensor.\n     * If `start_dim` or `end_dim` are passed, only dimensions starting with `start_dim`\n     * and ending with `end_dim` are flattened. The order of elements in input is unchanged.\n     * @param {number} start_dim the first dim to flatten\n     * @param {number} end_dim the last dim to flatten\n     * @returns The flattened tensor.\n     */\n    flatten(start_dim = 0, end_dim = -1) {\n        return this.clone().flatten_(start_dim, end_dim);\n    }\n\n    /**\n     * Returns a new tensor with the same data as the `self` tensor but of a different `shape`.\n     * @param  {...number} dims the desired size\n     * @returns {Tensor} The tensor with the same data but different shape\n     */\n    view(...dims) {\n        // TODO: validate dims\n        let inferredIndex = -1;\n        for (let i = 0; i < dims.length; ++i) {\n            if (dims[i] === -1) {\n                if (inferredIndex !== -1) {\n                    throw new Error(\"Only one dimension can be inferred\");\n                }\n                inferredIndex = i;\n            }\n        }\n\n        if (inferredIndex !== -1) {\n            // Some dimension must be inferred\n            const productOther = dims.reduce((product, curr, index) => {\n                return index !== inferredIndex ? product * curr : product\n            }, 1);\n\n            dims[inferredIndex] = this.data.length / productOther;\n        }\n        return new Tensor(this.type, this.data, dims); // NOTE: uses same underlying storage\n    }\n\n    neg_() {\n        for (let i = 0; i < this.data.length; ++i) {\n            this.data[i] = -this.data[i];\n        }\n        return this;\n    }\n    neg() {\n        return this.clone().neg_();\n    }\n}\n\n/**\n * This creates a nested array of a given type and depth (see examples).\n * \n * @example\n *   NestArray<string, 1>; // string[]\n * @example\n *   NestArray<number, 2>; // number[][]\n * @example\n *   NestArray<string, 3>; // string[][][] etc.\n * @template T\n * @template {number} Depth\n * @template {never[]} [Acc=[]]\n * @typedef {Acc['length'] extends Depth ? T : NestArray<T[], Depth, [...Acc, never]>} NestArray\n */\n\n/**\n * Reshapes a 1-dimensional array into an n-dimensional array, according to the provided dimensions.\n *\n * @example\n *   reshape([10                    ], [1      ]); // Type: number[]      Value: [10]\n *   reshape([1, 2, 3, 4            ], [2, 2   ]); // Type: number[][]    Value: [[1, 2], [3, 4]]\n *   reshape([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 2]); // Type: number[][][]  Value: [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n *   reshape([1, 2, 3, 4, 5, 6, 7, 8], [4, 2   ]); // Type: number[][]    Value: [[1, 2], [3, 4], [5, 6], [7, 8]]\n * @param {T[]} data The input array to reshape.\n * @param {DIM} dimensions The target shape/dimensions.\n * @template T\n * @template {[number]|[number, number]|[number, number, number]|[number, number, number, number]} DIM\n * @returns {NestArray<T, DIM[\"length\"]>} The reshaped array.\n */\nfunction reshape(data, dimensions) {\n\n    const totalElements = data.length;\n    const dimensionSize = dimensions.reduce((a, b) => a * b);\n\n    if (totalElements !== dimensionSize) {\n        throw Error(`cannot reshape array of size ${totalElements} into shape (${dimensions})`);\n    }\n\n    /** @type {any} */\n    let reshapedArray = data;\n\n    for (let i = dimensions.length - 1; i >= 0; i--) {\n        reshapedArray = reshapedArray.reduce((acc, val) => {\n            let lastArray = acc[acc.length - 1];\n\n            if (lastArray.length < dimensions[i]) {\n                lastArray.push(val);\n            } else {\n                acc.push([val]);\n            }\n\n            return acc;\n        }, [[]]);\n    }\n\n    return reshapedArray[0];\n}\n\n/**\n * Transposes a tensor according to the provided axes.\n * @param {any} tensor The input tensor to transpose.\n * @param {Array} axes The axes to transpose the tensor along.\n * @returns {Tensor} The transposed tensor.\n */\nexport function transpose(tensor, axes) {\n    const [transposedData, shape] = transpose_data(tensor.data, tensor.dims, axes);\n    return new Tensor(tensor.type, transposedData, shape);\n}\n\n\n/**\n * Interpolates an Tensor to the given size.\n * @param {Tensor} input The input tensor to interpolate. Data must be channel-first (i.e., [c, h, w])\n * @param {number[]} size The output size of the image\n * @param {string} mode The interpolation mode\n * @param {boolean} align_corners Whether to align corners.\n * @returns {Tensor} The interpolated tensor.\n */\nexport function interpolate(input, [out_height, out_width], mode = 'bilinear', align_corners = false) {\n\n    // Input image dimensions\n    const in_channels = input.dims.at(-3) ?? 1;\n    const in_height = input.dims.at(-2);\n    const in_width = input.dims.at(-1);\n\n    let output = interpolate_data(\n        input.data,\n        [in_channels, in_height, in_width],\n        [out_height, out_width],\n        mode,\n        align_corners\n    );\n    return new Tensor(input.type, output, [in_channels, out_height, out_width]);\n}\n\n/**\n * Perform mean pooling of the last hidden state followed by a normalization step.\n * @param {Tensor} last_hidden_state Tensor of shape [batchSize, seqLength, embedDim]\n * @param {Tensor} attention_mask Tensor of shape [batchSize, seqLength]\n * @returns {Tensor} Returns a new Tensor of shape [batchSize, embedDim].\n */\nexport function mean_pooling(last_hidden_state, attention_mask) {\n    // last_hidden_state: [batchSize, seqLength, embedDim]\n    // attention_mask:    [batchSize, seqLength]\n\n    let shape = [last_hidden_state.dims[0], last_hidden_state.dims[2]];\n    let returnedData = new last_hidden_state.data.constructor(shape[0] * shape[1]);\n    let [batchSize, seqLength, embedDim] = last_hidden_state.dims;\n\n    let outIndex = 0;\n    for (let i = 0; i < batchSize; ++i) {\n        let offset = i * embedDim * seqLength;\n\n        for (let k = 0; k < embedDim; ++k) {\n            let sum = 0;\n            let count = 0;\n\n            let attnMaskOffset = i * seqLength;\n            let offset2 = offset + k;\n            // Pool over all words in sequence\n            for (let j = 0; j < seqLength; ++j) {\n                // index into attention mask\n                let attn = Number(attention_mask.data[attnMaskOffset + j]);\n\n                count += attn;\n                sum += last_hidden_state.data[offset2 + j * embedDim] * attn;\n            }\n\n            let avg = sum / count;\n            returnedData[outIndex++] = avg;\n        }\n    }\n\n    return new Tensor(\n        last_hidden_state.type,\n        returnedData,\n        shape\n    )\n}\n\n/**\n * Helper function to calculate new dimensions when performing a squeeze operation.\n * @param {number[]} dims The dimensions of the tensor.\n * @param {number|number[]|null} dim The dimension(s) to squeeze.\n * @returns The new dimensions.\n * @private\n */\nfunction calc_squeeze_dims(dims, dim) {\n    dims = dims.slice();\n    if (dim === null) {\n        dims = dims.filter((d) => d !== 1);\n    } else if (typeof dim === 'number') {\n        if (dims[dim] === 1) {\n            dims.splice(dim, 1);\n        }\n    } else if (Array.isArray(dim)) {\n        dims = dims.filter((x, i) => {\n            return x !== 1 || !dim.includes(i);\n        });\n    }\n    return dims;\n}\n\n/**\n * Helper function to calculate new dimensions when performing an unsqueeze operation.\n * @param {number[]} dims The dimensions of the tensor.\n * @param {number} dim The dimension to unsqueeze.\n * @returns The new dimensions.\n * @private\n */\nfunction calc_unsqueeze_dims(dims, dim) {\n    // Dimension out of range (e.g., \"expected to be in range of [-4, 3], but got 4\")\n    // + 1 since we allow inserting at the end (i.e. dim = -1)\n    dim = safeIndex(dim, dims.length + 1);\n    dims = dims.slice();\n    // Insert 1 into specified dimension\n    dims.splice(dim, 0, 1);\n    return dims;\n}\n\n/**\n * Safely calculate the index for an array of a given size, allowing negative indexing.\n * @param {number} index The index that will be used.\n * @param {number} size The size of the array.\n * @param {number} [dimension=null] The dimension that the index is for (optional).\n * @returns {number} The index, guaranteed to be non-negative and less than `arrayLength`.\n * \n * @throws {Error} If the index is out of range.\n * @private\n */\nfunction safeIndex(index, size, dimension = null) {\n    if (index < -size || index >= size) {\n        throw new Error(`IndexError: index ${index} is out of bounds for dimension${dimension === null ? '' : ' ' + dimension} with size ${size}`);\n    }\n\n    if (index < 0) {\n        // Negative indexing, ensuring positive index\n        index = ((index % size) + size) % size;\n    }\n    return index;\n}\n\n/**\n * Concatenates an array of tensors along a specified dimension.\n * @param {Tensor[]} tensors The array of tensors to concatenate.\n * @param {number} dim The dimension to concatenate along.\n * @returns {Tensor} The concatenated tensor.\n */\nexport function cat(tensors, dim = 0) {\n    dim = safeIndex(dim, tensors[0].dims.length);\n\n    // TODO do validation of shapes\n\n    const resultDims = tensors[0].dims.slice();\n    resultDims[dim] = tensors.reduce((a, b) => a + b.dims[dim], 0);\n\n    // Create a new array to store the accumulated values\n    const resultSize = resultDims.reduce((a, b) => a * b, 1);\n    const result = new tensors[0].data.constructor(resultSize);\n\n    // Create output tensor of same type as first\n    const resultType = tensors[0].type;\n\n    if (dim === 0) {\n        // Handle special case for performance reasons\n\n        let offset = 0;\n        for (let t of tensors) {\n            result.set(t.data, offset);\n            offset += t.data.length;\n        }\n\n    } else {\n\n        let currentDim = 0;\n\n        for (let t = 0; t < tensors.length; ++t) {\n            let tensor = tensors[t];\n\n            // Iterate over the data array\n            for (let i = 0; i < tensor.data.length; ++i) {\n                // Calculate the index in the resulting array\n                let resultIndex = 0;\n\n                for (let j = tensor.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n                    const size = tensor.dims[j];\n                    let index = num % size;\n                    if (j === dim) {\n                        index += currentDim;\n                    }\n                    resultIndex += index * resultMultiplier;\n                    resultMultiplier *= resultDims[j];\n                    num = Math.floor(num / size);\n                }\n                // Accumulate the value at the current index\n                result[resultIndex] = tensor.data[i];\n            }\n\n            currentDim += tensor.dims[dim];\n        }\n    }\n    return new Tensor(resultType, result, resultDims);\n}\n\n/**\n * Stack an array of tensors along a specified dimension.\n * @param {Tensor[]} tensors The array of tensors to stack.\n * @param {number} dim The dimension to stack along.\n * @returns {Tensor} The stacked tensor.\n */\nexport function stack(tensors, dim = 0) {\n    // TODO do validation of shapes\n    // NOTE: stack expects each tensor to be equal size\n    return cat(tensors.map(t => t.unsqueeze(dim)), dim);\n}\n\n\n/**\n * Calculates the standard deviation and mean over the dimensions specified by dim. dim can be a single dimension or `null` to reduce over all dimensions.\n * @param {Tensor} input the input tenso\n * @param {number|null} dim the dimension to reduce. If None, all dimensions are reduced.\n * @param {number} correction difference between the sample size and sample degrees of freedom. Defaults to Bessel's correction, correction=1.\n * @param {boolean} keepdim whether the output tensor has dim retained or not.\n * @returns {Tensor[]} A tuple of (std, mean) tensors.\n */\nexport function std_mean(input, dim = null, correction = 1, keepdim = false) {\n\n    if (dim === null) {\n        // None to reduce over all dimensions.\n        const sum = input.data.reduce((a, b) => a + b, 0);\n        const mean = sum / input.data.length;\n        const std = Math.sqrt(input.data.reduce((a, b) => a + (b - mean) ** 2, 0) / (input.data.length - correction));\n\n        const meanTensor = new Tensor(input.type, [mean], [/* scalar */]);\n        const stdTensor = new Tensor(input.type, [std], [/* scalar */]);\n\n        return [stdTensor, meanTensor];\n    }\n\n    // Negative indexing\n    dim = safeIndex(dim, input.dims.length);\n\n    const meanTensor = mean(input, dim, keepdim);\n\n    // Calculate the shape of the resulting array after summation\n    const resultDims = input.dims.slice(); // Copy the original dimensions\n    resultDims[dim] = 1; // Remove the specified axis\n\n    // Create a new array to store the accumulated values\n    const result = new input.data.constructor(input.data.length / input.dims[dim]);\n\n    // Iterate over the data array\n    for (let i = 0; i < input.data.length; ++i) {\n\n        // Calculate the index in the resulting array\n        let resultIndex = 0;\n\n        for (let j = input.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n            const size = input.dims[j];\n            if (j !== dim) {\n                const index = num % size;\n                resultIndex += index * resultMultiplier;\n                resultMultiplier *= resultDims[j];\n            }\n            num = Math.floor(num / size);\n        }\n\n        // Accumulate the value at the current index\n        result[resultIndex] += (input.data[i] - meanTensor.data[resultIndex]) ** 2;\n    }\n\n    for (let i = 0; i < result.length; ++i) {\n        result[i] = Math.sqrt(result[i] / (input.dims[dim] - correction));\n    }\n\n    if (!keepdim) {\n        resultDims.splice(dim, 1);\n    }\n\n    const stdTensor = new Tensor(input.type, result, resultDims);\n\n    return [stdTensor, meanTensor];\n}\n\n\n/**\n * Returns the mean value of each row of the input tensor in the given dimension dim.\n * @param {Tensor} input the input tensor.\n * @param {number|null} dim the dimension to reduce.\n * @param {boolean} keepdim whether the output tensor has dim retained or not.\n * @returns A new tensor with means taken along the specified dimension.\n */\nexport function mean(input, dim = null, keepdim = false) {\n\n    if (dim === null) {\n        // None to reduce over all dimensions.\n        let val = input.data.reduce((a, b) => a + b, 0);\n        return new Tensor(input.type, [val / input.data.length], [/* scalar */]);\n    }\n\n    // Negative indexing\n    dim = safeIndex(dim, input.dims.length);\n\n    // Calculate the shape of the resulting array after summation\n    const resultDims = input.dims.slice(); // Copy the original dimensions\n    resultDims[dim] = 1; // Remove the specified axis\n\n    // Create a new array to store the accumulated values\n    const result = new input.data.constructor(input.data.length / input.dims[dim]);\n\n    // Iterate over the data array\n    for (let i = 0; i < input.data.length; ++i) {\n\n        // Calculate the index in the resulting array\n        let resultIndex = 0;\n\n        for (let j = input.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n            const size = input.dims[j];\n            if (j !== dim) {\n                const index = num % size;\n                resultIndex += index * resultMultiplier;\n                resultMultiplier *= resultDims[j];\n            }\n            num = Math.floor(num / size);\n        }\n\n        // Accumulate the value at the current index\n        result[resultIndex] += input.data[i];\n    }\n\n    if (input.dims[dim] !== 1) {\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = result[i] / input.dims[dim];\n        }\n    }\n\n    if (!keepdim) {\n        resultDims.splice(dim, 1);\n    }\n\n    return new Tensor(input.type, result, resultDims);\n}\n\n\n/**\n *\n * Measures similarity between two temporal sequences (e.g., input audio and output tokens\n * to generate token-level timestamps).\n * @param {Tensor} matrix \n * @returns {number[][]}\n */\nexport function dynamicTimeWarping(matrix) {\n    const [output_length, input_length] = matrix.dims;\n\n    const outputShape = [output_length + 1, input_length + 1];\n\n    const cost = new Tensor(\n        'float32',\n        new Float32Array(outputShape[0] * outputShape[1]).fill(Infinity),\n        outputShape\n    );\n\n    const trace = new Tensor(\n        'float32',\n        new Float32Array(outputShape[0] * outputShape[1]).fill(-1),\n        outputShape\n    )\n\n    // same as `cost[0][0] = 0`;\n    cost[0].data[0] = 0;\n\n    for (let j = 1; j < input_length + 1; ++j) {\n        for (let i = 1; i < output_length + 1; ++i) {\n\n            const c0 = cost[i - 1][j - 1].item();\n            const c1 = cost[i - 1][j].item();\n            const c2 = cost[i][j - 1].item();\n\n            let c, t;\n            if (c0 < c1 && c0 < c2) {\n                c = c0;\n                t = 0;\n            } else if (c1 < c0 && c1 < c2) {\n                c = c1;\n                t = 1;\n            } else {\n                c = c2;\n                t = 2;\n            }\n\n            cost[i].data[j] = matrix[i - 1][j - 1].item() + c;\n            trace[i].data[j] = t;\n        }\n    }\n\n    // backtrace\n    let i = output_length;\n    let j = input_length;\n\n    trace.data.fill(2, 0, outputShape[1]) // trace[0, :] = 2\n    for (let i = 0; i < outputShape[0]; ++i) { // trace[:, 0] = 1\n        trace[i].data[0] = 1;\n    }\n\n    let text_indices = [];\n    let time_indices = [];\n\n    while (i > 0 || j > 0) {\n        text_indices.push(i - 1);\n        time_indices.push(j - 1);\n\n        const t = trace[i][j].item();\n        switch (t) {\n            case 0:\n                --i; --j;\n                break;\n            case 1:\n                --i;\n                break;\n            case 2:\n                --j;\n                break;\n            default:\n                throw new Error(\n                    `Internal error in dynamic time warping. Unexpected trace[${i}, ${j}]. Please file a bug report.`\n                )\n        }\n    }\n\n    text_indices.reverse();\n    time_indices.reverse();\n\n    return [text_indices, time_indices];\n\n}\n\nfunction dimsToStride(dims) {\n    const stride = new Array(dims.length);\n    for (let i = dims.length - 1, s2 = 1; i >= 0; --i) {\n        stride[i] = s2;\n        s2 *= dims[i];\n    }\n    return stride;\n}\n\n/**\n * Returns a tensor filled with the scalar value 1, with the shape defined by the variable argument size.\n * @param {number[]} size A sequence of integers defining the shape of the output tensor.\n */\nexport function ones(size) {\n    const numElements = size.reduce((a, b) => a * b, 1);\n    return new Tensor(\n        'int64',\n        new BigInt64Array(numElements).fill(1n),\n        size\n    )\n}\n\n/**\n * Returns a tensor filled with the scalar value 1, with the same size as input.\n * @param {Tensor} tensor The size of input will determine size of the output tensor.\n * @returns The ones tensor.\n */\nexport function ones_like(tensor) {\n    return ones(tensor.dims);\n}\n","\n/**\n * @file Custom data structures.\n * \n * These are only used internally, meaning an end-user shouldn't\n * need to access anything here.\n * \n * @module utils/data-structures\n */\n\n\n/**\n * Efficient Heap-based Implementation of a Priority Queue.\n * It uses an array-based binary heap, where the root is at index `0`, and the\n * children of node `i` are located at indices `2i + 1` and `2i + 2`, respectively.\n * \n * Adapted from the following sources:\n * - https://stackoverflow.com/a/42919752/13989043 (original)\n * - https://github.com/belladoreai/llama-tokenizer-js (minor improvements)\n */\nexport class PriorityQueue {\n\n    /**\n     * Create a new PriorityQueue.\n     * @param {Function} comparator Comparator function to determine priority. Defaults to a MaxHeap.\n     */\n    constructor(comparator = (a, b) => a > b) {\n        this._heap = [];\n        this._comparator = comparator;\n    }\n\n    /**\n     * The size of the queue\n     */\n    get size() {\n        return this._heap.length;\n    }\n\n    /**\n     * Check if the queue is empty.\n     * @returns {boolean} `true` if the queue is empty, `false` otherwise.\n     */\n    isEmpty() {\n        return this.size === 0;\n    }\n\n    /**\n     * Return the element with the highest priority in the queue.\n     * @returns {any} The highest priority element in the queue.\n     */\n    peek() {\n        return this._heap[0];\n    }\n\n    /**\n     * Add one or more elements to the queue.\n     * @param  {...any} values The values to push into the queue.\n     * @returns {number} The new size of the queue.\n     */\n    push(...values) {\n        return this.extend(values);\n    }\n\n    /**\n     * Add multiple elements to the queue.\n     * @param {any[]} values The values to push into the queue.\n     * @returns {number} The new size of the queue.\n     */\n    extend(values) {\n        for (const value of values) {\n            this._heap.push(value);\n            this._siftUp();\n        }\n        return this.size;\n    }\n\n    /**\n     * Remove and return the element with the highest priority in the queue.\n     * @returns {any} The element with the highest priority in the queue.\n     */\n    pop() {\n        const poppedValue = this.peek();\n        const bottom = this.size - 1;\n        if (bottom > 0) {\n            this._swap(0, bottom);\n        }\n        this._heap.pop();\n        this._siftDown();\n        return poppedValue;\n    }\n\n    /**\n     * Replace the element with the highest priority in the queue with a new value.\n     * @param {*} value The new value.\n     * @returns {*} The replaced value.\n     */\n    replace(value) {\n        const replacedValue = this.peek();\n        this._heap[0] = value;\n        this._siftDown();\n        return replacedValue;\n    }\n\n    /**\n     * Compute the index for the parent of the node at index `i`.\n     * @param {number} i The index of the node to get the parent of.\n     * @returns {number} The index of the parent node.\n     * @private\n     */\n    _parent(i) {\n        return ((i + 1) >>> 1) - 1;\n    }\n\n    /**\n     * Compute the index for the left child of the node at index `i`.\n     * @param {number} i The index of the node to get the left child of.\n     * @returns {number} The index of the left child.\n     * @private\n     */\n    _left(i) {\n        return (i << 1) + 1;\n    }\n\n    /**\n     * Compute the index for the right child of the node at index `i`.\n     * @param {number} i The index of the node to get the right child of.\n     * @returns {number} The index of the right child.\n     * @private\n     */\n    _right(i) {\n        return (i + 1) << 1;\n    }\n\n    /**\n     * Check if the element at index `i` is greater than the element at index `j`.\n     * @param {number} i The index of the first element to compare.\n     * @param {number} j The index of the second element to compare.\n     * @returns {boolean} `true` if the element at index `i` is greater than the element at index `j`, `false` otherwise.\n     * @private\n     */\n    _greater(i, j) {\n        return this._comparator(this._heap[i], this._heap[j]);\n    }\n\n    /**\n     * Swap the elements at indices `i` and `j`.\n     * @param {number} i The index of the first element to swap.\n     * @param {number} j The index of the second element to swap.\n     * @private\n     */\n    _swap(i, j) {\n        const temp = this._heap[i];\n        this._heap[i] = this._heap[j];\n        this._heap[j] = temp;\n    }\n\n    /**\n     * Maintain the heap property by updating positions in the heap,\n     * starting at the last element and moving up the heap.\n     * @private\n     */\n    _siftUp() {\n        let node = this.size - 1;\n        while (node > 0 && this._greater(node, this._parent(node))) {\n            this._swap(node, this._parent(node));\n            node = this._parent(node);\n        }\n    }\n    /**\n     * Maintain the heap property by updating positions in the heap,\n     * starting at the first element and moving down the heap.\n     * @private\n     */\n    _siftDown() {\n        let node = 0;\n        while (\n            (this._left(node) < this.size && this._greater(this._left(node), node)) ||\n            (this._right(node) < this.size && this._greater(this._right(node), node))\n        ) {\n            const maxChild = (this._right(node) < this.size && this._greater(this._right(node), this._left(node)))\n                ? this._right(node)\n                : this._left(node);\n            this._swap(node, maxChild);\n            node = maxChild;\n        }\n    }\n}\n\n/**\n * A trie structure to efficiently store and search for strings.\n */\nexport class CharTrie {\n    constructor() {\n        this.root = CharTrieNode.default();\n    }\n\n    /**\n     * Adds one or more `texts` to the trie.\n     * @param {string[]} texts The strings to add to the trie.\n     */\n    extend(texts) {\n        for (let text of texts) {\n            this.push(text);\n        }\n    }\n\n    /**\n     * Adds text to the trie.\n     * @param {string} text The string to add to the trie.\n     */\n    push(text) {\n        let node = this.root;\n        for (let ch of text) {\n            let child = node.children.get(ch);\n            if (child === undefined) {\n                child = CharTrieNode.default();\n                node.children.set(ch, child);\n            }\n            node = child;\n        }\n        node.isLeaf = true;\n    }\n\n    /**\n     * Searches the trie for all strings with a common prefix of `text`.\n     * @param {string} text The common prefix to search for.\n     * @yields {string} Each string in the trie that has `text` as a prefix.\n     */\n    *commonPrefixSearch(text) {\n        let node = this.root;\n        let prefix = \"\";\n        for (let i = 0; i < text.length && node !== undefined; ++i) {\n            const ch = text[i];\n            prefix += ch;\n            node = node.children.get(ch);\n            if (node !== undefined && node.isLeaf) {\n                yield prefix;\n            }\n        }\n    }\n}\n\n/**\n * Represents a node in a character trie.\n */\nclass CharTrieNode {\n    /**\n     * Create a new CharTrieNode.\n     * @param {boolean} isLeaf Whether the node is a leaf node or not.\n     * @param {Map<string, CharTrieNode>} children A map containing the node's children, where the key is a character and the value is a `CharTrieNode`.\n     */\n    constructor(isLeaf, children) {\n        this.isLeaf = isLeaf;\n        this.children = children;\n    }\n\n    /**\n     * Returns a new `CharTrieNode` instance with default values.\n     * @returns {CharTrieNode} A new `CharTrieNode` instance with `isLeaf` set to `false` and an empty `children` map.\n     */\n    static default() {\n        return new CharTrieNode(false, new Map());\n    }\n}\n\n/**\n * A lattice data structure to be used for tokenization.\n */\nexport class TokenLattice {\n    /**\n     * Creates a new TokenLattice instance.\n     *\n     * @param {string} sentence The input sentence to be tokenized.\n     * @param {number} bosTokenId The beginning-of-sequence token ID.\n     * @param {number} eosTokenId The end-of-sequence token ID.\n     */\n    constructor(sentence, bosTokenId, eosTokenId) {\n        this.sentence = sentence;\n        this.len = sentence.length;\n        this.bosTokenId = bosTokenId;\n        this.eosTokenId = eosTokenId;\n        this.nodes = [];\n        this.beginNodes = Array.from({ length: this.len + 1 }, () => []);\n        this.endNodes = Array.from({ length: this.len + 1 }, () => []);\n\n        const bos = new TokenLatticeNode(this.bosTokenId, 0, 0, 0, 0.0);\n        const eos = new TokenLatticeNode(this.eosTokenId, 1, this.len, 0, 0.0);\n        this.nodes.push(bos.clone());\n        this.nodes.push(eos.clone());\n        this.beginNodes[this.len].push(eos);\n        this.endNodes[0].push(bos);\n    }\n\n    /**\n     * Inserts a new token node into the token lattice.\n     *\n     * @param {number} pos The starting position of the token.\n     * @param {number} length The length of the token.\n     * @param {number} score The score of the token.\n     * @param {number} tokenId The token ID of the token.\n     */\n    insert(pos, length, score, tokenId) {\n        const nodeId = this.nodes.length;\n        const node = new TokenLatticeNode(tokenId, nodeId, pos, length, score);\n        this.beginNodes[pos].push(node);\n        this.endNodes[pos + length].push(node);\n        this.nodes.push(node);\n    }\n\n    /**\n     * Implements the Viterbi algorithm to compute the most likely sequence of tokens.\n     *\n     * @returns {TokenLatticeNode[]} The array of nodes representing the most likely sequence of tokens.\n     */\n    viterbi() {\n        const len = this.len;\n        let pos = 0;\n        while (pos <= len) {\n            if (this.beginNodes[pos].length == 0) {\n                return [];\n            }\n            for (let rnode of this.beginNodes[pos]) {\n                rnode.prev = null;\n                let bestScore = 0.0;\n                let bestNode = null;\n                for (let lnode of this.endNodes[pos]) {\n                    const score = lnode.backtraceScore + rnode.score;\n                    if (bestNode === null || score > bestScore) {\n                        bestNode = lnode.clone();\n                        bestScore = score;\n                    }\n                }\n\n                if (bestNode !== null) {\n                    rnode.prev = bestNode;\n                    rnode.backtraceScore = bestScore;\n                } else {\n                    return [];\n                }\n            }\n            ++pos;\n        }\n\n        const results = [];\n        const root = this.beginNodes[len][0];\n        const prev = root.prev;\n        if (prev === null) {\n            return [];\n        }\n\n        let node = prev.clone();\n        while (node.prev !== null) {\n            results.push(node.clone());\n            const n = node.clone();\n            node = n.prev.clone();\n        }\n\n        results.reverse();\n        return results;\n    }\n\n    /**\n     * @param {TokenLatticeNode} node\n     * @returns {string} The array of nodes representing the most likely sequence of tokens.\n     */\n    piece(node) {\n        return this.sentence.slice(node.pos, node.pos + node.length);\n    }\n\n    /**\n     * @returns {Array} The array of nodes representing the most likely sequence of tokens.\n     */\n    tokens() {\n        const nodes = this.viterbi();\n        return nodes.map(x => this.piece(x));\n    }\n\n    /**\n     * @returns {Array} The array of nodes representing the most likely sequence of tokens.\n     */\n    tokenIds() {\n        const nodes = this.viterbi();\n        return nodes.map(x => x.tokenId);\n    }\n}\nclass TokenLatticeNode {\n    /**\n     * Represents a node in a token lattice for a given sentence.\n     * @param {number} tokenId The ID of the token associated with this node.\n     * @param {number} nodeId The ID of this node.\n     * @param {number} pos The starting position of the token in the sentence.\n     * @param {number} length The length of the token.\n     * @param {number} score The score associated with the token.\n     */\n    constructor(tokenId, nodeId, pos, length, score) {\n        this.tokenId = tokenId;\n        this.nodeId = nodeId;\n        this.pos = pos;\n        this.length = length;\n        this.score = score;\n        this.prev = null;\n        this.backtraceScore = 0.0;\n    }\n\n    /**\n     * Returns a clone of this node.\n     * @returns {TokenLatticeNode} A clone of this node.\n     */\n    clone() {\n        const n = new TokenLatticeNode(this.tokenId, this.nodeId, this.pos, this.length, this.score);\n        n.prev = this.prev;\n        n.backtraceScore = this.backtraceScore;\n        return n;\n    }\n}\n","\n/**\n * @file Definitions of all models available in Transformers.js.\n * \n * **Example:** Load and run an `AutoModel`.\n * \n * ```javascript\n * import { AutoModel, AutoTokenizer } from '@xenova/transformers';\n *\n * let tokenizer = await AutoTokenizer.from_pretrained('Xenova/bert-base-uncased');\n * let model = await AutoModel.from_pretrained('Xenova/bert-base-uncased');\n *\n * let inputs = await tokenizer('I love transformers!');\n * let { logits } = await model(inputs);\n * // Tensor {\n * //     data: Float32Array(183132) [-7.117443084716797, -7.107812881469727, -7.092104911804199, ...]\n * //     dims: (3) [1, 6, 30522],\n * //     type: \"float32\",\n * //     size: 183132,\n * // }\n * ```\n * \n * We also provide other `AutoModel`s (listed below), which you can use in the same way as the Python library. For example:\n * \n * **Example:** Load and run a `AutoModelForSeq2SeqLM`.\n * ```javascript\n * import { AutoModelForSeq2SeqLM, AutoTokenizer } from '@xenova/transformers';\n * \n * let tokenizer = await AutoTokenizer.from_pretrained('Xenova/t5-small');\n * let model = await AutoModelForSeq2SeqLM.from_pretrained('Xenova/t5-small');\n *\n * let { input_ids } = await tokenizer('translate English to German: I love transformers!');\n * let outputs = await model.generate(input_ids);\n * let decoded = tokenizer.decode(outputs[0], { skip_special_tokens: true });\n * // 'Ich liebe Transformatoren!'\n * ```\n * \n * @module models\n */\n\nimport {\n    AutoConfig,\n} from './configs.js';\n\nimport {\n    Callable,\n    isIntegralNumber,\n    isTypedArray,\n    mergeArrays,\n} from './utils/core.js';\n\nimport {\n    getModelFile,\n    getModelJSON,\n} from './utils/hub.js';\n\nimport {\n    LogitsProcessorList,\n    GenerationConfig,\n    ForceTokensLogitsProcessor,\n    ForcedBOSTokenLogitsProcessor,\n    ForcedEOSTokenLogitsProcessor,\n    SuppressTokensAtBeginLogitsProcessor,\n    WhisperTimeStampLogitsProcessor,\n    NoRepeatNGramLogitsProcessor,\n    RepetitionPenaltyLogitsProcessor,\n    MinLengthLogitsProcessor,\n    MinNewTokensLengthLogitsProcessor,\n\n    Sampler,\n} from './utils/generation.js';\n\nimport {\n    cat,\n    dynamicTimeWarping,\n    mean,\n    ones_like,\n    stack,\n    std_mean,\n    Tensor,\n} from './utils/tensor.js';\n\nimport { executionProviders, ONNX } from './backends/onnx.js';\nimport { medianFilter } from './transformers.js';\nconst { InferenceSession, Tensor: ONNXTensor } = ONNX;\n\n//////////////////////////////////////////////////\n// Model types: used internally\nconst MODEL_TYPES = {\n    EncoderOnly: 0,\n    EncoderDecoder: 1,\n    Seq2Seq: 2,\n    Vision2Seq: 3,\n    DecoderOnly: 4,\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Helper functions\n\n// NOTE: These will be populated fully later\nconst MODEL_TYPE_MAPPING = new Map();\nconst MODEL_NAME_TO_CLASS_MAPPING = new Map();\nconst MODEL_CLASS_TO_NAME_MAPPING = new Map();\n\n\n/**\n * Constructs an InferenceSession using a model file located at the specified path.\n * @param {string} pretrained_model_name_or_path The path to the directory containing the model file.\n * @param {string} fileName The name of the model file.\n * @param {import('./utils/hub.js').PretrainedOptions} options Additional options for loading the model.\n * @returns {Promise<InferenceSession>} A Promise that resolves to an InferenceSession object.\n * @private\n */\nasync function constructSession(pretrained_model_name_or_path, fileName, options) {\n    // TODO add option for user to force specify their desired execution provider\n    let modelFileName = `onnx/${fileName}${options.quantized ? '_quantized' : ''}.onnx`;\n    let buffer = await getModelFile(pretrained_model_name_or_path, modelFileName, true, options);\n\n    try {\n        return await InferenceSession.create(buffer, {\n            executionProviders,\n        });\n    } catch (err) {\n        // If the execution provided was only wasm, throw the error\n        if (executionProviders.length === 1 && executionProviders[0] === 'wasm') {\n            throw err;\n        }\n\n        console.warn(err);\n        console.warn(\n            'Something went wrong during model construction (most likely a missing operation). ' +\n            'Using `wasm` as a fallback. '\n        )\n        return await InferenceSession.create(buffer, {\n            executionProviders: ['wasm']\n        });\n    }\n}\n\n/**\n * Validate model inputs\n * @param {InferenceSession} session The InferenceSession object that will be run.\n * @param {Object} inputs The inputs to check.\n * @returns {Promise<Object>} A Promise that resolves to the checked inputs.\n * @throws {Error} If any inputs are missing.\n * @private\n */\nasync function validateInputs(session, inputs) {\n    // NOTE: Only create a shallow copy\n    const checkedInputs = {};\n    const missingInputs = [];\n    for (let inputName of session.inputNames) {\n        if (inputs[inputName] === undefined) {\n            missingInputs.push(inputName);\n        } else {\n            checkedInputs[inputName] = inputs[inputName];\n        }\n    }\n    if (missingInputs.length > 0) {\n        throw new Error(\n            `An error occurred during model execution: \"Missing the following inputs: ${missingInputs.join(', ')}.`);\n    }\n\n    const numInputsProvided = Object.keys(inputs).length;\n    const numInputsNeeded = session.inputNames.length;\n    if (numInputsProvided > numInputsNeeded) {\n        // No missing inputs, but too many inputs were provided.\n        // Warn the user and ignore the extra inputs.\n        let ignored = Object.keys(inputs).filter(inputName => !session.inputNames.includes(inputName));\n        console.warn(`WARNING: Too many inputs were provided (${numInputsProvided} > ${numInputsNeeded}). The following inputs will be ignored: \"${ignored.join(', ')}\".`);\n    }\n\n    return checkedInputs;\n}\n\n/**\n * Executes an InferenceSession using the specified inputs.\n * NOTE: `inputs` must contain at least the input names of the model.\n *  - If additional inputs are passed, they will be ignored.\n *  - If inputs are missing, an error will be thrown.\n * \n * @param {InferenceSession} session The InferenceSession object to run.\n * @param {Object} inputs An object that maps input names to input tensors.\n * @returns {Promise<Object>} A Promise that resolves to an object that maps output names to output tensors.\n * @private\n */\nasync function sessionRun(session, inputs) {\n    const checkedInputs = await validateInputs(session, inputs);\n    try {\n        let output = await session.run(checkedInputs);\n        output = replaceTensors(output);\n        return output;\n    } catch (e) {\n        // This usually occurs when the inputs are of the wrong type.\n        console.error(`An error occurred during model execution: \"${e}\".`);\n        console.error('Inputs given to model:', checkedInputs);\n        throw e;\n    }\n}\n\n/**\n * Replaces ONNX Tensor objects with custom Tensor objects to support additional functions.\n * @param {Object} obj The object to replace tensor objects in.\n * @returns {Object} The object with tensor objects replaced by custom Tensor objects.\n * @private\n */\nfunction replaceTensors(obj) {\n    for (let prop in obj) {\n        if (obj[prop] instanceof ONNXTensor) {\n            obj[prop] = new Tensor(obj[prop]);\n        } else if (typeof obj[prop] === 'object') {\n            replaceTensors(obj[prop]);\n        }\n    }\n    return obj;\n}\n\n\n/**\n * Converts an array or Tensor of integers to an int64 Tensor.\n * @param {Array|Tensor} items The input integers to be converted.\n * @returns {Tensor} The int64 Tensor with the converted values.\n * @throws {Error} If the input array is empty or the input is a batched Tensor and not all sequences have the same length.\n * @private\n */\nfunction toI64Tensor(items) {\n    if (items instanceof Tensor) {\n        return items;\n    }\n    // items is an array\n    if (items.length === 0) {\n        throw Error(\"items must be non-empty\");\n    }\n\n    if (Array.isArray(items[0])) {\n        // batched\n        if (items.some(x => x.length !== items[0].length)) {\n            throw Error(\"Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.\")\n        }\n\n        return new Tensor('int64',\n            BigInt64Array.from(items.flat().map(x => BigInt(x))),\n            [items.length, items[0].length]\n        );\n    } else {\n        //flat\n        return new Tensor('int64',\n            BigInt64Array.from(items.map(x => BigInt(x))),\n            [1, items.length]\n        );\n    }\n}\n\n/**\n * Prepares an attention mask for a sequence of tokens based on configuration options.\n * @param {Object} self The calling object instance.\n * @param {Tensor} tokens The input tokens.\n * @returns {Tensor} The attention mask tensor.\n * @private\n */\nfunction prepareAttentionMask(self, tokens) {\n\n    // Prepare attention mask\n    let pad_token_id = self.config.pad_token_id ?? null;\n    let eos_token_id = self.config.eos_token_id ?? null;\n    if (isIntegralNumber(eos_token_id)) {\n        eos_token_id = [eos_token_id];\n    }\n\n    let is_pad_token_in_inputs = tokens.indexOf(pad_token_id) !== -1;\n    let is_pad_token_not_equal_to_eos_token_id = (eos_token_id === null) || !eos_token_id.includes(pad_token_id)\n\n    if (is_pad_token_in_inputs && is_pad_token_not_equal_to_eos_token_id) {\n        let data = BigInt64Array.from(\n            // Note: != so that int matches bigint\n            tokens.data.map(x => x != pad_token_id)\n        )\n        return new Tensor('int64', data, tokens.dims)\n    } else {\n        return ones_like(tokens);\n    }\n}\n\n/**\n * Creates a boolean tensor with a single value.\n * @param {boolean} value The value of the tensor.\n * @returns {Tensor} The boolean tensor.\n * @private\n */\nfunction boolTensor(value) {\n    return new Tensor('bool', [value], [1]);\n}\n\n// JS doesn't support mixins, so we define some reused functions here, and allow \"this\" to be passed in\n/**\n * Perform forward pass on the seq2seq model (both encoder and decoder).\n * @param {Object} self The seq2seq model object.\n * @param {Object} model_inputs The input object for the model containing encoder and decoder inputs.\n * @returns {Promise<Seq2SeqLMOutput>} Promise that resolves with the output of the seq2seq model.\n * @private\n */\nasync function seq2seqForward(self, model_inputs) {\n\n    let { encoder_outputs, past_key_values } = model_inputs;\n\n    if (!encoder_outputs) {\n        // Encoder outputs are not given, so we must compute them.\n        encoder_outputs = (await encoderForward(self, model_inputs)).last_hidden_state;\n    }\n    let decoderFeeds = {\n        input_ids: model_inputs.decoder_input_ids,\n        encoder_hidden_states: encoder_outputs,\n        use_cache_branch: boolTensor(!!past_key_values)\n    };\n\n    if (self.decoder_merged_session.inputNames.includes('encoder_attention_mask')) {\n        decoderFeeds.encoder_attention_mask = model_inputs.attention_mask\n    }\n    self.addPastKeyValues(decoderFeeds, past_key_values);\n\n    const decoderResults = await sessionRun(self.decoder_merged_session, decoderFeeds);\n    let logits = decoderResults.logits;\n    past_key_values = self.getPastKeyValues(decoderResults, past_key_values);\n\n    // Get cross attention and/or decoder attentions if they are present\n    const attns = self.getAttentions(decoderResults);\n\n    return new Seq2SeqLMOutput({ logits, past_key_values, encoder_outputs, ...attns });\n}\n\n/**\n * Start the beam search process for the seq2seq model.\n * @param {PreTrainedModel} self The seq2seq model object.\n * @param {Tensor} inputTokenIds Array of input token ids for each input sequence.\n * @param {Object} generation_config The generation config.\n * @param {number} numOutputTokens The maximum number of output tokens for the model.\n * @returns {Object[]} Array of beam search objects.\n * @private\n */\nfunction seq2seqStartBeams(self, inputTokenIds, generation_config, numOutputTokens) {\n    let beams = [];\n    let beamId = 0;\n\n    // @ts-ignore\n    const requires_attention_mask = self.requires_attention_mask ?? true;\n\n    // decoder_input_ids == output_token_ids\n    let decoder_input_ids =\n        generation_config.decoder_input_ids\n        ?? generation_config.decoder_start_token_id\n        ?? generation_config.bos_token_id\n        ?? generation_config.eos_token_id;\n\n    // Support input as tensor or list\n    // TODO support batched decoder_input_ids\n    if (decoder_input_ids instanceof Tensor) {\n        decoder_input_ids = decoder_input_ids.tolist().flat();\n    } else if (!Array.isArray(decoder_input_ids)) {\n        decoder_input_ids = [decoder_input_ids];\n    }\n\n    for (let tokens of inputTokenIds) {\n        // TODO: Improve\n        // Currently, just add back batch dimension.\n        // In future, allow for true parallel execution\n        tokens.dims = [1, ...tokens.dims]\n\n        // Create beam\n        let start = {\n            inputs: tokens,\n            encoder_outputs: null,\n            prev_model_outputs: null,\n\n            output_token_ids: decoder_input_ids,\n            done: false,\n            score: 0,\n            id: beamId++ // assign unique id to beams\n        }\n\n        if (requires_attention_mask) {\n            start.attention_mask = prepareAttentionMask(self, tokens);\n        }\n\n        beams.push(start);\n    }\n\n    return beams;\n}\n\n/**\n * Run beam search on the seq2seq model for a single beam.\n * @param {PreTrainedModel} self The seq2seq model object.\n * @param {Object} beam The beam search object for which to run the model.\n * @param {Object} options options\n * @param {string} [options.input_name='input_ids'] The name of the input tensor for the encoder.\n * @returns {Promise<Object>} Promise that resolves with the output of the seq2seq model for the given beam.\n * @private\n */\nasync function seq2seqRunBeam(self, beam) {\n    const input_name = self.main_input_name;\n\n    let decoder_input_ids = beam.output_token_ids;\n    if (beam.prev_model_outputs) {\n        // After the first step, `prev_model_outputs` won't be null.\n        // So, we cut decoder_input_ids if past is used\n        decoder_input_ids = decoder_input_ids.slice(-1);\n    }\n\n    // 1. Prepare\n    let model_inputs = {\n        [input_name]: beam.inputs,\n        decoder_input_ids: toI64Tensor(decoder_input_ids),\n        encoder_outputs: beam.encoder_outputs,\n        past_key_values: beam.prev_model_outputs?.past_key_values,\n    }\n    if (beam.attention_mask) {\n        model_inputs.attention_mask = beam.attention_mask\n    }\n\n    // 2. Run\n    let output = await self.forward(model_inputs);\n\n    // 3. Update\n    beam.prev_model_outputs = output;\n    beam.encoder_outputs = output.encoder_outputs;\n\n    return output;\n}\n\n/**\n * Update a beam with a new token ID.\n * @param {Object} beam The beam to update.\n * @param {number} newTokenId The new token ID to add to the beam's output.\n * @private\n */\nfunction seq2seqUpdatebeam(beam, newTokenId) {\n    beam.output_token_ids = [...beam.output_token_ids, newTokenId];\n}\n\n/**\n * Forward pass of an encoder model.\n * @param {Object} self The encoder model.\n * @param {Object} model_inputs The input data to be used for the forward pass.\n * @returns {Promise<Object>} Promise that resolves with an object containing the model's outputs.\n * @private\n */\nasync function encoderForward(self, model_inputs) {\n    let encoderFeeds = {};\n    for (let key of self.session.inputNames) {\n        encoderFeeds[key] = model_inputs[key];\n    }\n    return await sessionRun(self.session, encoderFeeds);\n}\n\n\n/**\n * Forward pass of a decoder model.\n * @param {Object} self The decoder model.\n * @param {Object} model_inputs The input data to be used for the forward pass.\n * @returns {Promise<Object>} Promise that resolves with an object containing the logits and past key values.\n * @private\n */\nasync function decoderForward(self, model_inputs) {\n    let { input_ids, past_key_values, attention_mask } = model_inputs;\n    let decoderFeeds = {\n        input_ids: input_ids,\n        attention_mask: attention_mask ?? prepareAttentionMask(self, input_ids),\n        use_cache_branch: boolTensor(!!past_key_values)\n    }\n\n    self.addPastKeyValues(decoderFeeds, past_key_values);\n\n    let decoderResults = await sessionRun(self.session, decoderFeeds);\n\n    let logits = decoderResults.logits;\n\n    past_key_values = self.getPastKeyValues(decoderResults, past_key_values);\n    return { logits, past_key_values };\n}\n\n/**\n * Starts the generation of text by initializing the beams for the given input token IDs.\n * @param {Object} self The text generation model object.\n * @param {Tensor} inputTokenIds An tensor of input token IDs to generate text from.\n * @param {Object} generation_config The generation config.\n * @param {number} numOutputTokens The maximum number of tokens to generate for each beam.\n * @param {Tensor} [inputs_attention_mask] The attention mask tensor for the input token IDs.\n * @returns {Object[]} An array of beams initialized with the given inputs and parameters.\n * @private\n */\nfunction decoderStartBeams(self, inputTokenIds, generation_config, numOutputTokens, inputs_attention_mask) {\n    let beams = [];\n\n    let beamId = 0;\n    for (let tokens of inputTokenIds) {\n        let output_token_ids = tokens.tolist().map(Number);\n\n        // TODO: Improve\n        // Currently, just add back batch dimension.\n        // In future, allow for true parallel execution\n        tokens.dims = [1, ...tokens.dims]\n\n        let attn_mask;\n        if (inputs_attention_mask) {\n            attn_mask = inputs_attention_mask[beamId];\n            attn_mask.dims = [1, ...attn_mask.dims]\n\n        } else {\n            attn_mask = prepareAttentionMask(self, tokens)\n        }\n\n        let start = {\n            input: tokens,\n            model_input_ids: tokens,\n            attention_mask: attn_mask,\n            prev_model_outputs: null,\n\n            output_token_ids: output_token_ids,\n            num_output_tokens: numOutputTokens,\n\n            done: false,\n            score: 0,\n            id: beamId++ // assign unique id to beams\n        }\n\n        beams.push(start);\n    }\n    return beams;\n}\n\n/**\n * Runs a single step of the text generation process for a given beam.\n *\n * @param {Object} self The decoder object.\n * @param {Object} beam The beam to run.\n * @param {Tensor} beam.input The input tensor.\n * @param {Tensor} beam.model_input_ids The input ids to the model.\n * @param {Tensor} beam.attention_mask The attention mask.\n * @param {Object} beam.prev_model_outputs The past key values.\n * @param {number[]} beam.output_token_ids The output token ids.\n * @returns {Promise<Object>} The output of the generation step.\n * @private\n */\nasync function decoderRunBeam(self, beam) {\n    let attnMaskData = new BigInt64Array(beam.output_token_ids.length).fill(1n)\n\n    // 1. Prepare\n    let model_inputs = {\n        input_ids: beam.model_input_ids,\n        attention_mask: new Tensor(\n            'int64',\n            attnMaskData,\n            [1, attnMaskData.length]\n        ),\n        past_key_values: beam.prev_model_outputs?.past_key_values,\n    }\n\n    // 2. Run\n    let output = await self.forward(model_inputs);\n\n    // 3. Update\n    beam.prev_model_outputs = output;\n\n    return output;\n}\n\n/**\n * Update a beam with a new token ID.\n * @param {Object} beam The beam to update.\n * @param {number} newTokenId The new token ID to add to the beam's output.\n * @private\n */\nfunction decoderUpdatebeam(beam, newTokenId) {\n    beam.output_token_ids = [...beam.output_token_ids, newTokenId];\n    beam.model_input_ids = new Tensor('int64', [BigInt(newTokenId)], [1, 1]);\n}\n\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n/**\n * A base class for pre-trained models that provides the model configuration and an ONNX session.\n */\nexport class PreTrainedModel extends Callable {\n    main_input_name = 'input_ids';\n\n    /**\n     * Creates a new instance of the `PreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {any} session session for the model.\n     */\n    constructor(config, session) {\n        super();\n\n        this.config = config;\n        this.session = session;\n\n        const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);\n        const modelType = MODEL_TYPE_MAPPING.get(modelName);\n\n        this.can_generate = false;\n        this._runBeam = null;\n        this._getStartBeams = null;\n        this._updateBeam = null;\n        this._forward = null;\n        if (modelType === MODEL_TYPES.DecoderOnly) {\n            this.can_generate = true;\n\n            this._runBeam = decoderRunBeam;\n            this._getStartBeams = decoderStartBeams;\n            this._updateBeam = decoderUpdatebeam;\n            this._forward = decoderForward;\n\n        } else if (modelType === MODEL_TYPES.Seq2Seq || modelType === MODEL_TYPES.Vision2Seq) {\n            this.can_generate = true;\n\n            this._runBeam = seq2seqRunBeam;\n            this._getStartBeams = seq2seqStartBeams;\n            this._updateBeam = seq2seqUpdatebeam;\n            this._forward = seq2seqForward;\n\n        } else if (modelType === MODEL_TYPES.EncoderDecoder) {\n            this._forward = encoderForward;\n\n        } else { // should be MODEL_TYPES.EncoderOnly\n            this._forward = encoderForward;\n        }\n    }\n\n    /**\n    * Disposes of all the ONNX sessions that were created during inference.\n    * @returns {Promise<unknown[]>} An array of promises, one for each ONNX session that is being disposed.\n    * @todo Use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n    */\n    async dispose() {\n        let promises = [];\n        for (let key of Object.keys(this)) {\n            let item = this[key];\n            if (item instanceof InferenceSession) {\n                promises.push(item.handler.dispose())\n            }\n        }\n        return await Promise.all(promises);\n    }\n\n    /**\n     * Instantiate one of the model classes of the library from a pretrained model.\n     * \n     * The model class to instantiate is selected based on the `model_type` property of the config object\n     * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n     * \n     * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n     * - A string, the *model id* of a pretrained model hosted inside a model repo on huggingface.co.\n     *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n     *   user or organization name, like `dbmdz/bert-base-german-cased`.\n     * - A path to a *directory* containing model weights, e.g., `./my_model_directory/`.\n     * @param {import('./utils/hub.js').PretrainedOptions} options Additional options for loading the model.\n     * \n     * @returns {Promise<PreTrainedModel>} A new instance of the `PreTrainedModel` class.\n     */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        quantized = true,\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n        model_file_name = null,\n    } = {}) {\n\n        let options = {\n            quantized,\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n            model_file_name,\n        }\n\n        const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this);\n        const modelType = MODEL_TYPE_MAPPING.get(modelName);\n\n        let info;\n        if (modelType === MODEL_TYPES.DecoderOnly) {\n            info = await Promise.all([\n                AutoConfig.from_pretrained(pretrained_model_name_or_path, options),\n                constructSession(pretrained_model_name_or_path, options.model_file_name ?? 'decoder_model_merged', options),\n                getModelJSON(pretrained_model_name_or_path, 'generation_config.json', false, options),\n            ]);\n\n        } else if (modelType === MODEL_TYPES.Seq2Seq || modelType === MODEL_TYPES.Vision2Seq) {\n            info = await Promise.all([\n                AutoConfig.from_pretrained(pretrained_model_name_or_path, options),\n                constructSession(pretrained_model_name_or_path, 'encoder_model', options),\n                constructSession(pretrained_model_name_or_path, 'decoder_model_merged', options),\n                getModelJSON(pretrained_model_name_or_path, 'generation_config.json', false, options),\n            ]);\n\n        } else if (modelType === MODEL_TYPES.EncoderDecoder) {\n            info = await Promise.all([\n                AutoConfig.from_pretrained(pretrained_model_name_or_path, options),\n                constructSession(pretrained_model_name_or_path, 'encoder_model', options),\n                constructSession(pretrained_model_name_or_path, 'decoder_model_merged', options),\n            ]);\n\n        } else { // should be MODEL_TYPES.EncoderOnly\n            if (modelType !== MODEL_TYPES.EncoderOnly) {\n                console.warn(`Model type for '${modelName}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`)\n            }\n            info = await Promise.all([\n                AutoConfig.from_pretrained(pretrained_model_name_or_path, options),\n                constructSession(pretrained_model_name_or_path, options.model_file_name ?? 'model', options)\n            ]);\n        }\n\n        // @ts-ignore\n        return new this(...info);\n    }\n\n    /**\n     * Runs the model with the provided inputs\n     * @param {Object} model_inputs Object containing input tensors\n     * @returns {Promise<Object>} Object containing output tensors\n     */\n    async _call(model_inputs) {\n        return await this.forward(model_inputs);\n    }\n\n    /**\n     * Forward method for a pretrained model. If not overridden by a subclass, the correct forward method\n     * will be chosen based on the model type.\n     * @param {Object} model_inputs The input data to the model in the format specified in the ONNX model.\n     * @returns {Promise<Object>} The output data from the model in the format specified in the ONNX model.\n     * @throws {Error} This method must be implemented in subclasses.\n     */\n    async forward(model_inputs) {\n        return await this._forward(this, model_inputs);\n    }\n\n    /**\n     * @param {GenerationConfig} generation_config \n     * @param {number} input_ids_seq_length The starting sequence length for the input ids.\n     * @returns {LogitsProcessorList}\n     * @private\n     */\n    _get_logits_processor(\n        generation_config,\n        input_ids_seq_length,\n        // encoder_input_ids, TODO\n        // prefix_allowed_tokens_fn, TODO\n        logits_processor = null\n    ) {\n        const processors = new LogitsProcessorList();\n\n        // if (generation_config.diversity_penalty !== null && generation_config.diversity_penalty > 0.0) {\n        //     processors.push(new HammingDiversityLogitsProcessor(\n        //         generation_config.diversity_penalty,\n        //         generation_config.num_beams,\n        //         generation_config.num_beam_groups\n        //     ));\n        // }\n\n        // if (generation_config.encoder_repetition_penalty !== null && generation_config.encoder_repetition_penalty !== 1.0) {\n        //     processors.push(new EncoderRepetitionPenaltyLogitsProcessor(\n        //         generation_config.encoder_repetition_penalty,\n        //         encoder_input_ids\n        //     ));\n        // }\n\n        if (generation_config.repetition_penalty !== null && generation_config.repetition_penalty !== 1.0) {\n            processors.push(new RepetitionPenaltyLogitsProcessor(generation_config.repetition_penalty));\n        }\n\n        if (generation_config.no_repeat_ngram_size !== null && generation_config.no_repeat_ngram_size > 0) {\n            processors.push(new NoRepeatNGramLogitsProcessor(generation_config.no_repeat_ngram_size));\n        }\n\n        // if (generation_config.encoder_no_repeat_ngram_size !== null && generation_config.encoder_no_repeat_ngram_size > 0) {\n        //     if (this.config.is_encoder_decoder) {\n        //         processors.push(new EncoderNoRepeatNGramLogitsProcessor(\n        //             generation_config.encoder_no_repeat_ngram_size,\n        //             encoder_input_ids\n        //         ));\n        //     } else {\n        //         throw new Error(\"It's impossible to use `encoder_no_repeat_ngram_size` with decoder-only architecture\");\n        //     }\n        // }\n\n        // if (generation_config.bad_words_ids !== null) {\n        //     processors.push(new NoBadWordsLogitsProcessor(generation_config.bad_words_ids, generation_config.eos_token_id));\n        // }\n\n        if (generation_config.min_length !== null && generation_config.eos_token_id !== null && generation_config.min_length > 0) {\n            processors.push(new MinLengthLogitsProcessor(generation_config.min_length, generation_config.eos_token_id));\n        }\n\n        if (generation_config.min_new_tokens !== null && generation_config.eos_token_id !== null && generation_config.min_new_tokens > 0) {\n            processors.push(new MinNewTokensLengthLogitsProcessor(\n                input_ids_seq_length,\n                generation_config.min_new_tokens,\n                generation_config.eos_token_id\n            ));\n        }\n\n        // if (prefix_allowed_tokens_fn !== null) {\n        //     processors.push(new PrefixConstrainedLogitsProcessor(\n        //         prefix_allowed_tokens_fn,\n        //         generation_config.num_beams / generation_config.num_beam_groups\n        //     ));\n        // }\n\n\n        if (generation_config.forced_bos_token_id !== null) {\n            processors.push(new ForcedBOSTokenLogitsProcessor(generation_config.forced_bos_token_id));\n        }\n\n        if (generation_config.forced_eos_token_id !== null) {\n            processors.push(new ForcedEOSTokenLogitsProcessor(\n                generation_config.max_length,\n                generation_config.forced_eos_token_id\n            ));\n        }\n\n        // if (generation_config.remove_invalid_values === true) {\n        //     processors.push(new InfNanRemoveLogitsProcessor());\n        // }\n\n        // if (generation_config.exponential_decay_length_penalty !== null) {\n        //     processors.push(new ExponentialDecayLengthPenalty(\n        //         generation_config.exponential_decay_length_penalty,\n        //         generation_config.eos_token_id,\n        //         input_ids_seq_length\n        //     ));\n        // }\n\n        // if (generation_config.suppress_tokens !== null) {\n        //     processors.push(new SuppressTokensLogitsProcessor(generation_config.suppress_tokens));\n        // }\n\n        if (generation_config.begin_suppress_tokens !== null) {\n            let begin_index = (input_ids_seq_length > 1 || generation_config.forced_bos_token_id === null)\n                ? input_ids_seq_length\n                : input_ids_seq_length + 1;\n\n            if (generation_config.forced_decoder_ids !== null) {\n                // generation starts after the last token that is forced\n                begin_index += generation_config.forced_decoder_ids[generation_config.forced_decoder_ids.length - 1][0];\n            }\n            processors.push(new SuppressTokensAtBeginLogitsProcessor(generation_config.begin_suppress_tokens, begin_index));\n        }\n\n        if (generation_config.forced_decoder_ids !== null) {\n            processors.push(new ForceTokensLogitsProcessor(generation_config.forced_decoder_ids));\n        }\n\n        if (logits_processor !== null) {\n            processors.extend(logits_processor)\n        }\n\n        // `LogitNormalization` should always be the last logit processor, when present\n        // if (generation_config.renormalize_logits === true) {\n        //     processors.push(new LogitNormalization());\n        // }\n\n        return processors;\n    }\n\n    /**\n     * This function merges multiple generation configs together to form a final generation config to be used by the model for text generation.\n     * It first creates an empty `GenerationConfig` object, then it applies the model's own `generation_config` property to it. Finally, if a `generation_config` object was passed in the arguments, it overwrites the corresponding properties in the final config with those of the passed config object.\n     *\n     * @param {GenerationConfig} generation_config A `GenerationConfig` object containing generation parameters.\n     * @returns {GenerationConfig} The final generation config object to be used by the model for text generation.\n     */\n    _get_generation_config(generation_config) {\n        // Create empty generation config (contains defaults)\n        // We pass `this.config` so that if `eos_token_id` or `bos_token_id` exist in the model's config, we will use them\n        let gen_config = new GenerationConfig(this.config);\n\n        // Apply model's generation config, if it exists\n        if ('generation_config' in this) {\n            Object.assign(gen_config, this.generation_config);\n        }\n\n        // Finally, use any generation config specified by the user\n        // when calling `generate`\n        if (generation_config !== null) {\n            Object.assign(gen_config, generation_config);\n        }\n        return gen_config;\n    }\n\n    /**\n     * @typedef {import('./utils/maths.js').TypedArray} TypedArray\n     */\n\n    /**\n     * @typedef {{ sequences: Tensor, decoder_attentions: Tensor, cross_attentions: Tensor }} EncoderDecoderOutput\n     * @typedef {Object} DecoderOutput\n     * \n     * Generates text based on the given inputs and generation configuration using the model.\n     * @param {Tensor|Array|TypedArray} inputs An array of input token IDs.\n     * @param {Object|GenerationConfig|null} generation_config The generation configuration to use. If null, default configuration will be used.\n     * @param {Object|null} logits_processor An optional logits processor to use. If null, a new LogitsProcessorList instance will be created.\n     * @param {Object} options options\n     * @param {Object} [options.inputs_attention_mask=null] An optional attention mask for the inputs.\n     * @returns {Promise<number[][]|EncoderDecoderOutput|DecoderOutput>} An array of generated output sequences, where each sequence is an array of token IDs.\n     * @throws {Error} Throws an error if the inputs array is empty.\n     */\n    async generate(\n        inputs,\n        generation_config = null,\n        logits_processor = null,\n        {\n            inputs_attention_mask = null\n        } = {},\n    ) {\n        if (!this.can_generate) {\n            const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);\n            let errorMessage = `The current model class (${modelName}) is not compatible with \\`.generate()\\`, as it doesn't have a language model head.`\n\n            const modelType = this.config.model_type;\n            const possibleInfo =\n                MODEL_WITH_LM_HEAD_MAPPING_NAMES.get(modelType)\n                ?? MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES.get(modelType)\n                ?? MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES.get(modelType)\n                // ?? MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES.get(modelType) // TODO\n                ?? MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES.get(modelType);\n\n            if (possibleInfo) {\n                // TODO: support multiple possible classes\n                errorMessage += ` Please use the following class instead: '${possibleInfo[0]}'`;\n            }\n            throw Error(errorMessage);\n        }\n\n        if (!(inputs instanceof Tensor) && !isTypedArray(inputs) && !Array.isArray(inputs)) {\n            throw Error(`\\`inputs\\` must be a Tensor, TypedArray, or Array, but is \"${inputs.constructor.name}\".`);\n        }\n\n        let input_ids_seq_length;\n\n        // Prepare `input_ids` which will be used for auto-regressive generation\n        // TODO: Update to align with HF transformers' implementation\n        if (this.config.is_encoder_decoder) {\n            // Generating from the encoder outputs\n            input_ids_seq_length = 0;\n\n        } else {\n            input_ids_seq_length = inputs instanceof Tensor ? inputs.dims.at(-1) : inputs.length;\n\n            // decoder-only\n            if (input_ids_seq_length === 0) {\n                throw Error(\"Must supply a non-empty array of input token ids.\")\n            }\n        }\n\n        // Update generation config with defaults\n        generation_config = this._get_generation_config(generation_config);\n\n        logits_processor = logits_processor ?? new LogitsProcessorList()\n\n        // Update logits processor\n        logits_processor = this._get_logits_processor(\n            generation_config,\n            input_ids_seq_length,\n            logits_processor\n        )\n\n        /** @type {number[]} */\n        let eos_token_ids = generation_config.eos_token_id;\n        if (eos_token_ids !== null && !Array.isArray(eos_token_ids)) {\n            eos_token_ids = [eos_token_ids];\n        }\n\n        // TODO implement early_stopping\n        // https://huggingface.co/blog/how-to-generate\n\n        let numOutputTokens = 1;\n        const maxOutputTokens = numOutputTokens + (generation_config.max_new_tokens ?? Infinity);\n\n        // Only use max length if max_new_tokens is not provided\n        const useMaxLength = Number.isInteger(generation_config.max_length) && (generation_config.max_new_tokens ?? null) === null;\n        let sampler = Sampler.getSampler(generation_config);\n\n        // @ts-ignore\n        let beams = this.getStartBeams(inputs, generation_config, numOutputTokens, inputs_attention_mask);\n\n        while (beams.some(x => !x.done) && numOutputTokens < maxOutputTokens) {\n            let newest_beams = [];\n            for (let beam of beams) {\n                if (beam.done) {\n                    // Add this beam back into the pool\n                    newest_beams.push(beam);\n                    continue\n                }\n                if (useMaxLength && beam.output_token_ids.length >= generation_config.max_length) {\n                    // Set this beam to done and add it back into the pool\n                    beam.done = true;\n                    newest_beams.push(beam);\n                    continue\n                }\n\n                // @ts-ignore\n                let output = await this.runBeam(beam);\n\n                // add attentions/scores to beam only if user requested\n                if (generation_config.output_attentions) {\n                    this.addAttentionsToBeam(beam, output);\n                }\n                if (generation_config.output_scores) {\n                    // TODO add\n                }\n\n                // Logits are of the form [batch_size, out_seq_length, vocab_size]\n                // In most cases, this will be [batch_size, 1, vocab_size]\n                // So, we select the last token's logits:\n                // (equivalent to `logits = outputs.logits[:, -1, :]`)\n                let logits = output.logits.slice(null, -1, null);\n\n                // Apply logits processor\n                logits_processor(beam.output_token_ids, logits);\n\n                let sampledTokens = sampler(logits);\n                for (let [newTokenId, logProb] of sampledTokens) {\n                    // use previous beam as a starting point\n                    let newBeam = { ...beam };\n\n                    // update new beam\n                    // @ts-ignore\n                    this.updateBeam(newBeam, newTokenId);\n\n                    newBeam.score += logProb;\n\n                    if (eos_token_ids && eos_token_ids.includes(newTokenId)) {\n                        newBeam.done = true;\n                    }\n\n                    newest_beams.push(newBeam);\n                }\n            }\n            ++numOutputTokens;\n\n            // Next, we get the best beams, per ID\n            newest_beams = this.groupBeams(newest_beams).map(\n                group => group\n                    .sort((a, b) => b.score - a.score)      // sort by score\n                    .slice(0, generation_config.num_beams)  // remove outside beam width\n            );\n\n            // Flatten beams\n            beams = newest_beams.flat();\n\n            // Run callback\n            if (generation_config.callback_function) {\n                generation_config.callback_function(beams);\n            }\n        }\n\n        // TODO: Ensure that we can return non-batched outputs\n\n        const groupedBeams = this.groupBeams(beams);\n\n        const getFlattened = (key) => groupedBeams.map(\n            batch => {\n                if (generation_config.num_return_sequences > 1) {\n                    return batch.slice(0, generation_config.num_return_sequences).map(x => x[key]);\n                } else {\n                    return [batch[0][key]];\n                }\n            }\n        ).flat(); // Flatten across batches (depth=1)\n\n        const sequences = getFlattened('output_token_ids'); // [1, seqLength]\n\n        if (generation_config.return_dict_in_generate) {\n            // NOTE: `decoder_attentions` and `cross_attentions` should be:\n            //    list (one element for each generated token)\n            //    of list (one element for each layer of the decoder)\n            //    of torch.FloatTensor of shape (batch_size, num_heads, generated_length, sequence_length)\n            // However, since we are only generating one batch at a time, they are of the form:\n            //   list (batches)\n            //   of list (one element for each generated token)\n            //   of list (one element for each layer of the decoder)\n            //   of torch.FloatTensor of shape (1, num_heads, generated_length, sequence_length)\n            // \n            // TODO: In future (when true parallelism, we should be able to return the correct shape)\n\n            const decoder_attentions = getFlattened('decoder_attentions');\n            const cross_attentions = getFlattened('cross_attentions');\n\n            return {\n                sequences,\n\n                decoder_attentions,\n                cross_attentions,\n            }\n        } else {\n            return sequences;\n        }\n    }\n\n    /**\n     * Helper function to add attentions to beam\n     * @param {Object} beam \n     * @param {Object} output\n     * @private \n     */\n    addAttentionsToBeam(beam, output) {\n        if (this.config.is_encoder_decoder) {\n            if (!output.cross_attentions || output.cross_attentions.length === 0) {\n                throw Error(\n                    \"`output_attentions` is true, but the model did not produce cross-attentions. \" +\n                    \"This is most likely because the model was not exported with `output_attentions=True`.\"\n                )\n            }\n            if (!beam.cross_attentions) {\n                beam.cross_attentions = [];\n            }\n            beam.cross_attentions.push(output.cross_attentions);\n        }\n\n        if (!output.decoder_attentions || output.decoder_attentions.length === 0) {\n            throw Error(\n                \"`output_attentions` is true, but the model did not produce decoder-attentions. \" +\n                \"This is most likely because the model was not exported with `output_attentions=True`.\"\n            )\n        }\n        if (!beam.decoder_attentions) {\n            beam.decoder_attentions = [];\n        }\n        beam.decoder_attentions.push(output.decoder_attentions);\n    }\n\n    /**\n     * Groups an array of beam objects by their ids.\n     *\n     * @param {Array} beams The array of beam objects to group.\n     * @returns {Array} An array of arrays, where each inner array contains beam objects with the same id.\n     */\n    groupBeams(beams) {\n        // Group beams by their ids\n        const groups = Object.create(null);\n        for (const obj of beams) {\n            if (groups[obj.id] === undefined) {\n                groups[obj.id] = [obj];\n            } else {\n                groups[obj.id].push(obj);\n            }\n        }\n\n        return Object.values(groups);\n    }\n\n    /**\n     * Returns an object containing past key values from the given decoder results object.\n     *\n     * @param {Object} decoderResults The decoder results object.\n     * @param {Object} pastKeyValues The previous past key values.\n     * @returns {Object} An object containing past key values.\n     */\n    getPastKeyValues(decoderResults, pastKeyValues) {\n\n        const pkvs = Object.create(null);\n\n        for (const name in decoderResults) {\n            if (name.startsWith('present')) {\n                let newName = name.replace('present', 'past_key_values');\n\n                if (pastKeyValues && name.includes('encoder')) {\n                    // Optimization introduced by optimum to reuse past key values. So, we just replace the constant\n                    // outputs with the previous past key values.\n                    // https://github.com/huggingface/optimum/blob/0bf2c05fb7e1182b52d21b703cfc95fd9e4ea3dc/optimum/onnxruntime/base.py#L677-L704\n                    pkvs[newName] = pastKeyValues[newName];\n                } else {\n                    pkvs[newName] = decoderResults[name];\n                }\n            }\n        }\n        return pkvs;\n    }\n\n    /**\n     * Returns an object containing attentions from the given decoder results object.\n     *\n     * @param {Object} decoderResults The decoder results object.\n     * @returns {Object} An object containing attentions.\n     */\n    getAttentions(decoderResults) {\n        const attns = Object.create(null);\n\n        for (const attnName of ['cross_attentions', 'decoder_attentions']) {\n            const result = [];\n            for (const name in decoderResults) {\n                if (name.startsWith(attnName)) {\n                    const index = name.split('.').pop()\n                    result[index] = decoderResults[name];\n                }\n            }\n            attns[attnName] = result;\n        }\n        return attns;\n    }\n\n    /**\n     * Adds past key values to the decoder feeds object. If pastKeyValues is null, creates new tensors for past key values.\n     *\n     * @param {Object} decoderFeeds The decoder feeds object to add past key values to.\n     * @param {Object} pastKeyValues An object containing past key values.\n     */\n    addPastKeyValues(decoderFeeds, pastKeyValues) {\n        if (pastKeyValues) {\n            Object.assign(decoderFeeds, pastKeyValues)\n        } else {\n            // TODO support batches (i.e., batch_size > 1)\n            // @ts-ignore\n            if (this.config.is_encoder_decoder && (this.add_encoder_pkv ?? true)) {\n                // @ts-ignore\n                let encoder_dims = [1, this.num_encoder_heads, 0, this.encoder_dim_kv];\n                // @ts-ignore\n                let decoder_dims = [1, this.num_decoder_heads, 0, this.decoder_dim_kv];\n                // @ts-ignore\n                for (let i = 0; i < this.num_decoder_layers; ++i) {\n                    decoderFeeds[`past_key_values.${i}.encoder.key`] = new Tensor('float32', [], encoder_dims)\n                    decoderFeeds[`past_key_values.${i}.encoder.value`] = new Tensor('float32', [], encoder_dims)\n                    decoderFeeds[`past_key_values.${i}.decoder.key`] = new Tensor('float32', [], decoder_dims)\n                    decoderFeeds[`past_key_values.${i}.decoder.value`] = new Tensor('float32', [], decoder_dims)\n                }\n            } else if (this.config.multi_query) { // e.g., for `gpt_bigcode`\n                // @ts-ignore\n                let dims = [1, 0, 2 * this.dim_kv]\n                // @ts-ignore\n                for (let i = 0; i < this.num_layers; ++i) {\n                    decoderFeeds[`past_key_values.${i}.key_value`] = new Tensor('float32', [], dims)\n                }\n            } else if (this.config.model_type === 'bloom') {\n                // NOTE: Custom implementation for Bloom\n\n                // @ts-ignore\n                let keyDims = [1 * this.num_heads, this.dim_kv, 0] // [batch_size x num_heads,64,past_sequence_length]\n                // @ts-ignore\n                let valueDims = [1 * this.num_heads, 0, this.dim_kv] // [batch_size x num_heads,past_sequence_length,64]\n                // @ts-ignore\n                for (let i = 0; i < this.num_layers; ++i) {\n                    decoderFeeds[`past_key_values.${i}.key`] = new Tensor('float32', [], keyDims)\n                    decoderFeeds[`past_key_values.${i}.value`] = new Tensor('float32', [], valueDims)\n                }\n            } else { // Decoder-only\n                // @ts-ignore\n                let dims = [1, this.num_heads, 0, this.dim_kv]\n                // @ts-ignore\n                for (let i = 0; i < this.num_layers; ++i) {\n                    decoderFeeds[`past_key_values.${i}.key`] = new Tensor('float32', [], dims)\n                    decoderFeeds[`past_key_values.${i}.value`] = new Tensor('float32', [], dims)\n                }\n            }\n        }\n    }\n\n    /**\n     * Initializes and returns the beam for text generation task\n     * @param {Tensor} inputTokenIds The input token ids.\n     * @param {Object} generation_config The generation config.\n     * @param {number} numOutputTokens The number of tokens to be generated.\n     * @param {Tensor} inputs_attention_mask Optional input attention mask.\n     * @returns {any} A Beam object representing the initialized beam.\n     * @private\n     */\n    getStartBeams(inputTokenIds, generation_config, numOutputTokens, inputs_attention_mask) {\n        return this._getStartBeams(this, inputTokenIds, generation_config, numOutputTokens, inputs_attention_mask)\n    }\n\n    /**\n     * Runs a single step of the beam search generation algorithm.\n     * @param {any} beam The current beam being generated.\n     * @returns {Promise<any>} The updated beam after a single generation step.\n     * @private\n     */\n    async runBeam(beam) {\n        return await this._runBeam(this, beam);\n    }\n\n    /**\n     * Update a beam with a new token ID.\n     * @param {Object} beam The beam to update.\n     * @param {number} newTokenId The new token ID to add to the beam's output.\n     * @private\n     */\n    updateBeam(beam, newTokenId) {\n        return this._updateBeam(beam, newTokenId);\n    }\n}\n\n//////////////////////////////////////////////////\n// Base model output class\nexport class ModelOutput { }\n\n/**\n * Base class for model's outputs, with potential hidden states and attentions.\n */\nexport class BaseModelOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.last_hidden_state Sequence of hidden-states at the output of the last layer of the model.\n     * @param {Tensor} [output.hidden_states] Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.\n     * @param {Tensor} [output.attentions] Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.\n     */\n    constructor({ last_hidden_state, hidden_states = null, attentions = null }) {\n        super();\n        this.last_hidden_state = last_hidden_state;\n        this.hidden_states = hidden_states;\n        this.attentions = attentions;\n    }\n}\n//////////////////////////////////////////////////\n// Bert models\nexport class BertPreTrainedModel extends PreTrainedModel { }\nexport class BertModel extends BertPreTrainedModel { }\n\n/**\n * BertForMaskedLM is a class representing a BERT model for masked language modeling.\n */\nexport class BertForMaskedLM extends BertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * BertForSequenceClassification is a class representing a BERT model for sequence classification.\n */\nexport class BertForSequenceClassification extends BertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * BertForTokenClassification is a class representing a BERT model for token classification.\n */\nexport class BertForTokenClassification extends BertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * BertForQuestionAnswering is a class representing a BERT model for question answering.\n */\nexport class BertForQuestionAnswering extends BertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// CamemBERT models\nexport class CamembertPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class CamembertModel extends CamembertPreTrainedModel { }\n\n/**\n * CamemBERT Model with a `language modeling` head on top.\n */\nexport class CamembertForMaskedLM extends CamembertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output) e.g. for GLUE tasks.\n */\nexport class CamembertForSequenceClassification extends CamembertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for Named-Entity-Recognition (NER) tasks.\n */\nexport class CamembertForTokenClassification extends CamembertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * CamemBERT Model with a span classification head on top for extractive question-answering tasks\n */\nexport class CamembertForQuestionAnswering extends CamembertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// DeBERTa models\nexport class DebertaPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare DeBERTa Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class DebertaModel extends DebertaPreTrainedModel { }\n\n/**\n * DeBERTa Model with a `language modeling` head on top.\n */\nexport class DebertaForMaskedLM extends DebertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class DebertaForSequenceClassification extends DebertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for Named-Entity-Recognition (NER) tasks.\n */\nexport class DebertaForTokenClassification extends DebertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear\n * layers on top of the hidden-states output to compute `span start logits` and `span end logits`).\n */\nexport class DebertaForQuestionAnswering extends DebertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// DeBERTa-v2 models\nexport class DebertaV2PreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare DeBERTa-V2 Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class DebertaV2Model extends DebertaV2PreTrainedModel { }\n\n/**\n * DeBERTa-V2 Model with a `language modeling` head on top.\n */\nexport class DebertaV2ForMaskedLM extends DebertaV2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa-V2 Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class DebertaV2ForSequenceClassification extends DebertaV2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa-V2 Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for Named-Entity-Recognition (NER) tasks.\n */\nexport class DebertaV2ForTokenClassification extends DebertaV2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa-V2 Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear\n * layers on top of the hidden-states output to compute `span start logits` and `span end logits`).\n */\nexport class DebertaV2ForQuestionAnswering extends DebertaV2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// DistilBert models\nexport class DistilBertPreTrainedModel extends PreTrainedModel { }\nexport class DistilBertModel extends DistilBertPreTrainedModel { }\n\n/**\n * DistilBertForSequenceClassification is a class representing a DistilBERT model for sequence classification.\n */\nexport class DistilBertForSequenceClassification extends DistilBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DistilBertForTokenClassification is a class representing a DistilBERT model for token classification.\n */\nexport class DistilBertForTokenClassification extends DistilBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n\n/**\n * DistilBertForQuestionAnswering is a class representing a DistilBERT model for question answering.\n */\nexport class DistilBertForQuestionAnswering extends DistilBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DistilBertForMaskedLM is a class representing a DistilBERT model for masking task.\n */\nexport class DistilBertForMaskedLM extends DistilBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// MobileBert models\nexport class MobileBertPreTrainedModel extends PreTrainedModel { }\nexport class MobileBertModel extends MobileBertPreTrainedModel { }\n\n/**\n * MobileBertForMaskedLM is a class representing a MobileBERT model for masking task.\n */\nexport class MobileBertForMaskedLM extends MobileBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * MobileBert Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class MobileBertForSequenceClassification extends MobileBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * MobileBert Model with a span classification head on top for extractive question-answering tasks\n */\nexport class MobileBertForQuestionAnswering extends MobileBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// MPNet models\nexport class MPNetPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare MPNet Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class MPNetModel extends MPNetPreTrainedModel { }\n\n/**\n * MPNetForMaskedLM is a class representing a MPNet model for masked language modeling.\n */\nexport class MPNetForMaskedLM extends MPNetPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * MPNetForSequenceClassification is a class representing a MPNet model for sequence classification.\n */\nexport class MPNetForSequenceClassification extends MPNetPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * MPNetForTokenClassification is a class representing a MPNet model for token classification.\n */\nexport class MPNetForTokenClassification extends MPNetPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * MPNetForQuestionAnswering is a class representing a MPNet model for question answering.\n */\nexport class MPNetForQuestionAnswering extends MPNetPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// SqueezeBert models\nexport class SqueezeBertPreTrainedModel extends PreTrainedModel { }\nexport class SqueezeBertModel extends SqueezeBertPreTrainedModel { }\nexport class SqueezeBertForMaskedLM extends SqueezeBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\nexport class SqueezeBertForSequenceClassification extends SqueezeBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\nexport class SqueezeBertForQuestionAnswering extends SqueezeBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Albert models\nexport class AlbertPreTrainedModel extends PreTrainedModel { }\nexport class AlbertModel extends AlbertPreTrainedModel { }\nexport class AlbertForSequenceClassification extends AlbertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\nexport class AlbertForQuestionAnswering extends AlbertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\nexport class AlbertForMaskedLM extends AlbertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// T5 models\nexport class T5PreTrainedModel extends PreTrainedModel { };\n\nexport class T5Model extends T5PreTrainedModel { }\n\n/**\n * T5Model is a class representing a T5 model for conditional generation.\n */\nexport class T5ForConditionalGeneration extends T5PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `T5ForConditionalGeneration` class.\n     * @param {Object} config The model configuration.\n     * @param {any} session session for the model.\n     * @param {any} decoder_merged_session session for the decoder.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.num_decoder_layers;\n        this.num_decoder_heads = this.config.num_heads;\n        this.decoder_dim_kv = this.config.d_kv;\n\n        this.num_encoder_layers = this.config.num_layers;\n        this.num_encoder_heads = this.config.num_heads;\n        this.encoder_dim_kv = this.config.d_kv;\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// LONGT5 models\n/**\n * An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.\n */\nexport class LongT5PreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare LONGT5 Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class LongT5Model extends LongT5PreTrainedModel { }\n\n/**\n * LONGT5 Model with a `language modeling` head on top.\n */\nexport class LongT5ForConditionalGeneration extends LongT5PreTrainedModel {\n    /**\n     * Creates a new instance of the `LongT5ForConditionalGeneration` class.\n     * @param {Object} config The model configuration.\n     * @param {any} session session for the model.\n     * @param {any} decoder_merged_session session for the decoder.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.num_decoder_layers;\n        this.num_decoder_heads = this.config.num_heads;\n        this.decoder_dim_kv = this.config.d_kv;\n\n        this.num_encoder_layers = this.config.num_layers;\n        this.num_encoder_heads = this.config.num_heads;\n        this.encoder_dim_kv = this.config.d_kv;\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// MT5 models\nexport class MT5PreTrainedModel extends PreTrainedModel { };\n\nexport class MT5Model extends MT5PreTrainedModel { }\n\n/**\n * A class representing a conditional sequence-to-sequence model based on the MT5 architecture.\n */\nexport class MT5ForConditionalGeneration extends MT5PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `MT5ForConditionalGeneration` class.\n     * @param {any} config The model configuration.\n     * @param {any} session The ONNX session containing the encoder weights.\n     * @param {any} decoder_merged_session The ONNX session containing the merged decoder weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.num_decoder_layers;\n        this.num_decoder_heads = this.config.num_heads;\n        this.decoder_dim_kv = this.config.d_kv;\n\n        this.num_encoder_layers = this.config.num_layers;\n        this.num_encoder_heads = this.config.num_heads;\n        this.encoder_dim_kv = this.config.d_kv;\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Bart models\nexport class BartPretrainedModel extends PreTrainedModel { };\n\n/**\n * The bare BART Model outputting raw hidden-states without any specific head on top.\n */\nexport class BartModel extends BartPretrainedModel { }\n\n/**\n * The BART Model with a language modeling head. Can be used for summarization.\n */\nexport class BartForConditionalGeneration extends BartPretrainedModel {\n\n    /**\n     * Creates a new instance of the `BartForConditionalGeneration` class.\n     * @param {Object} config The configuration object for the Bart model.\n     * @param {Object} session The ONNX session used to execute the model.\n     * @param {Object} decoder_merged_session The ONNX session used to execute the decoder.\n     * @param {Object} generation_config The generation configuration object.\n     */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.decoder_layers;\n        this.num_decoder_heads = this.config.decoder_attention_heads;\n        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;\n\n        this.num_encoder_layers = this.config.encoder_layers;\n        this.num_encoder_heads = this.config.encoder_attention_heads;\n        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;\n    }\n\n}\n\n/**\n * Bart model with a sequence classification/head on top (a linear layer on top of the pooled output)\n */\nexport class BartForSequenceClassification extends BartPretrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// MBart models\nexport class MBartPreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare MBART Model outputting raw hidden-states without any specific head on top.\n */\nexport class MBartModel extends MBartPreTrainedModel { }\n\n/**\n * The MBART Model with a language modeling head. Can be used for summarization, after fine-tuning the pretrained models.\n */\nexport class MBartForConditionalGeneration extends MBartPreTrainedModel {\n\n    /**\n     * Creates a new instance of the `MBartForConditionalGeneration` class.\n     * @param {Object} config The configuration object for the Bart model.\n     * @param {Object} session The ONNX session used to execute the model.\n     * @param {Object} decoder_merged_session The ONNX session used to execute the decoder.\n     * @param {Object} generation_config The generation configuration object.\n     */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.decoder_layers;\n        this.num_decoder_heads = this.config.decoder_attention_heads;\n        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;\n\n        this.num_encoder_layers = this.config.encoder_layers;\n        this.num_encoder_heads = this.config.encoder_attention_heads;\n        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;\n    }\n\n}\n\n/**\n * MBart model with a sequence classification/head on top (a linear layer on top of the pooled output).\n */\nexport class MBartForSequenceClassification extends MBartPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n\nexport class MBartForCausalLM extends MBartPreTrainedModel {\n    /**\n     * Creates a new instance of the `MBartForCausalLM` class.\n     * @param {Object} config Configuration object for the model.\n     * @param {Object} decoder_merged_session ONNX Session object for the decoder.\n     * @param {Object} generation_config Configuration object for the generation process.\n     */\n    constructor(config, decoder_merged_session, generation_config) {\n        super(config, decoder_merged_session);\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.decoder_layers;\n        this.num_decoder_heads = this.config.decoder_attention_heads;\n        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;\n\n        this.num_encoder_layers = this.config.encoder_layers;\n        this.num_encoder_heads = this.config.encoder_attention_heads;\n        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Blenderbot models\nexport class BlenderbotPreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare Blenderbot Model outputting raw hidden-states without any specific head on top.\n */\nexport class BlenderbotModel extends BlenderbotPreTrainedModel { }\n\n/**\n * The Blenderbot Model with a language modeling head. Can be used for summarization.\n */\nexport class BlenderbotForConditionalGeneration extends BlenderbotPreTrainedModel {\n\n    /**\n     * Creates a new instance of the `BlenderbotForConditionalGeneration` class.\n     * @param {any} config The model configuration.\n     * @param {any} session The ONNX session containing the encoder weights.\n     * @param {any} decoder_merged_session The ONNX session containing the merged decoder weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.decoder_layers;\n        this.num_decoder_heads = this.config.decoder_attention_heads;\n        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;\n\n        this.num_encoder_layers = this.config.encoder_layers;\n        this.num_encoder_heads = this.config.encoder_attention_heads;\n        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Blenderbot models\nexport class BlenderbotSmallPreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare BlenderbotSmall Model outputting raw hidden-states without any specific head on top.\n */\nexport class BlenderbotSmallModel extends BlenderbotSmallPreTrainedModel { }\n\n/**\n * The BlenderbotSmall Model with a language modeling head. Can be used for summarization.\n */\nexport class BlenderbotSmallForConditionalGeneration extends BlenderbotSmallPreTrainedModel {\n\n    /**\n     * Creates a new instance of the `BlenderbotForConditionalGeneration` class.\n     * @param {any} config The model configuration.\n     * @param {any} session The ONNX session containing the encoder weights.\n     * @param {any} decoder_merged_session The ONNX session containing the merged decoder weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.decoder_layers;\n        this.num_decoder_heads = this.config.decoder_attention_heads;\n        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;\n\n        this.num_encoder_layers = this.config.encoder_layers;\n        this.num_encoder_heads = this.config.encoder_attention_heads;\n        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Roberta models\nexport class RobertaPreTrainedModel extends PreTrainedModel { }\nexport class RobertaModel extends RobertaPreTrainedModel { }\n\n/**\n * RobertaForMaskedLM class for performing masked language modeling on Roberta models.\n */\nexport class RobertaForMaskedLM extends RobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * RobertaForSequenceClassification class for performing sequence classification on Roberta models.\n */\nexport class RobertaForSequenceClassification extends RobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * RobertaForTokenClassification class for performing token classification on Roberta models.\n */\nexport class RobertaForTokenClassification extends RobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * RobertaForQuestionAnswering class for performing question answering on Roberta models.\n */\nexport class RobertaForQuestionAnswering extends RobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// XLM models\n/**\n * An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.\n */\nexport class XLMPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare XLM Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class XLMModel extends XLMPreTrainedModel { }\n\n/**\n * The XLM Model transformer with a language modeling head on top (linear layer with weights tied to the input embeddings).\n */\nexport class XLMWithLMHeadModel extends XLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLM Model with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class XLMForSequenceClassification extends XLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLM Model with a token classification head on top (a linear layer on top of the hidden-states output)\n */\nexport class XLMForTokenClassification extends XLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLM Model with a span classification head on top for extractive question-answering tasks\n */\nexport class XLMForQuestionAnswering extends XLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// XLMRoberta models\nexport class XLMRobertaPreTrainedModel extends PreTrainedModel { }\nexport class XLMRobertaModel extends XLMRobertaPreTrainedModel { }\n\n/**\n * XLMRobertaForMaskedLM class for performing masked language modeling on XLMRoberta models.\n */\nexport class XLMRobertaForMaskedLM extends XLMRobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLMRobertaForSequenceClassification class for performing sequence classification on XLMRoberta models.\n */\nexport class XLMRobertaForSequenceClassification extends XLMRobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLMRobertaForTokenClassification class for performing token classification on XLMRoberta models.\n */\nexport class XLMRobertaForTokenClassification extends XLMRobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLMRobertaForQuestionAnswering class for performing question answering on XLMRoberta models.\n */\nexport class XLMRobertaForQuestionAnswering extends XLMRobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Whisper models\nexport class WhisperPreTrainedModel extends PreTrainedModel { };\n\n/**\n * WhisperModel class for training Whisper models without a language model head.\n */\nexport class WhisperModel extends WhisperPreTrainedModel { }\n\n/**\n * WhisperForConditionalGeneration class for generating conditional outputs from Whisper models.\n */\nexport class WhisperForConditionalGeneration extends WhisperPreTrainedModel {\n\n    requires_attention_mask = false;\n    main_input_name = 'input_features';\n\n    /**\n     * Creates a new instance of the `WhisperForConditionalGeneration` class.\n     * @param {Object} config Configuration object for the model.\n     * @param {Object} session ONNX Session object for the model.\n     * @param {Object} decoder_merged_session ONNX Session object for the decoder.\n     * @param {Object} generation_config Configuration object for the generation process.\n     */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.decoder_layers;\n        this.num_decoder_heads = this.config.decoder_attention_heads;\n        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;\n\n        this.num_encoder_layers = this.config.encoder_layers;\n        this.num_encoder_heads = this.config.encoder_attention_heads;\n        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;\n    }\n\n    /**\n     * @typedef {Object} WhisperGenerationConfig\n     * @extends GenerationConfig\n     * @property {boolean} [return_timestamps=null] Whether to return the timestamps with the text. This enables the `WhisperTimestampsLogitsProcessor`.\n     * @property {boolean} [return_token_timestamps=null] Whether to return token-level timestamps\n     * with the text. This can be used with or without the `return_timestamps` option. To get word-level\n     * timestamps, use the tokenizer to group the tokens into words.\n     * @property {number} [num_frames=null]  The number of audio frames available in this chunk. This is only used generating word-level timestamps.\n     */\n\n    /**\n     * Generates outputs based on input and generation configuration.\n     * @param {Object} inputs Input data for the model.\n     * @param {WhisperGenerationConfig} generation_config Configuration object for the generation process.\n     * @param {Object} logits_processor Optional logits processor object.\n     * @returns {Promise<Object>} Promise object represents the generated outputs.\n     */\n    async generate(\n        inputs,\n        generation_config = null,\n        logits_processor = null,\n        // {\n        //     return_timestamps = null,\n        //     return_token_timestamps = null,\n        //     language = null,\n        //     task = null,\n        // } = {},\n    ) {\n        // Create generation config object\n        generation_config = this._get_generation_config(generation_config);\n\n\n        // Whisper has additional options for returning timestamps\n        generation_config.return_timestamps ??= false;\n\n        // TODO add language and task\n\n        if (generation_config.return_timestamps) {\n            logits_processor = [new WhisperTimeStampLogitsProcessor(generation_config)]\n        }\n\n        if (generation_config.return_token_timestamps) {\n            generation_config.output_attentions = true;\n            generation_config.return_dict_in_generate = true;\n\n            if (generation_config.task === 'translate') {\n                console.warn(\"Token-level timestamps may not be reliable for task 'translate'.\")\n            }\n\n            if (!generation_config.alignment_heads) {\n                throw new Error(\n                    \"Model generation config has no `alignment_heads`, token-level timestamps not available. \" +\n                    \"See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.\"\n                )\n            }\n        }\n\n        const outputs = await super.generate(inputs, generation_config, logits_processor);\n\n        if (generation_config.return_token_timestamps && generation_config.alignment_heads) {\n            outputs[\"token_timestamps\"] = this._extract_token_timestamps(\n                outputs,\n                generation_config.alignment_heads,\n                generation_config.num_frames,\n            )\n        }\n\n        return outputs\n    }\n\n    /**\n     * Calculates token-level timestamps using the encoder-decoder cross-attentions and\n     * dynamic time-warping (DTW) to map each output token to a position in the input audio.\n     * @param {Object} generate_outputs Outputs generated by the model\n     * @param {Tensor[][][]} generate_outputs.cross_attentions The cross attentions output by the model\n     * @param {Tensor[][][]} generate_outputs.decoder_attentions The decoder attentions output by the model\n     * @param {number[][]} generate_outputs.sequences The sequences output by the model\n     * @param {number[][]} alignment_heads Alignment heads of the model\n     * @param {number} [num_frames=null] Number of frames in the input audio.\n     * @param {number} [time_precision=0.02] Precision of the timestamps in seconds\n     * @returns {Tensor} tensor containing the timestamps in seconds for each predicted token\n     */\n    _extract_token_timestamps(generate_outputs, alignment_heads, num_frames = null, time_precision = 0.02) {\n        if (!generate_outputs.cross_attentions) {\n            throw new Error(\n                \"Model outputs must contain cross attentions to extract timestamps. \" +\n                \"This is most likely because the model was not exported with `output_attentions=True`.\"\n            )\n        }\n\n        let median_filter_width = this.config.median_filter_width;\n        if (median_filter_width === undefined) {\n            console.warn(\"Model config has no `median_filter_width`, using default value of 7.\")\n            median_filter_width = 7;\n        }\n\n        const batchedMatrices = generate_outputs.cross_attentions.map(batch => {\n            // Create a list with `decoder_layers` elements, each a tensor of shape\n            // (batch size, attention_heads, output length, input length).\n            let cross_attentions = Array.from({ length: this.config.decoder_layers },\n                (_, i) => cat(batch.map(x => x[i]), 2)\n            );\n\n            let weights = stack(alignment_heads.map(([l, h]) => {\n                return num_frames\n                    ? cross_attentions[l].slice(null, h, null, [0, num_frames])\n                    : cross_attentions[l].slice(null, h);\n            }));\n            weights = weights.transpose(1, 0, 2, 3)\n\n            let [std, calculatedMean] = std_mean(weights, -2, 0, true);\n\n            // Normalize and smoothen the weights.\n            let smoothedWeights = weights.clone(); // [1, 8, seqLength, 1500]\n\n            for (let a = 0; a < smoothedWeights.dims[0]; ++a) {\n                let aTensor = smoothedWeights[a]; // [8, seqLength, 1500]\n\n                for (let b = 0; b < aTensor.dims[0]; ++b) {\n                    let bTensor = aTensor[b]; // [seqLength, 1500]\n\n                    const stdTensor = std[a][b][0]; // [1500]\n                    const meanTensor = calculatedMean[a][b][0]; // [1500]\n\n                    for (let c = 0; c < bTensor.dims[0]; ++c) {\n\n                        let cTensor = bTensor[c]; // [1500]\n                        for (let d = 0; d < cTensor.data.length; ++d) {\n                            cTensor.data[d] = (cTensor.data[d] - meanTensor.data[d]) / stdTensor.data[d]\n                        }\n\n                        // Apply median filter.\n                        cTensor.data.set(medianFilter(cTensor.data, median_filter_width))\n                    }\n                }\n            }\n\n            // Average the different cross-attention heads.\n            const matrix = mean(smoothedWeights, 1);\n            return matrix;\n        });\n\n        const timestampsShape = [generate_outputs.sequences.length, generate_outputs.sequences[0].length];\n\n        const timestamps = new Tensor(\n            'float32',\n            new Float32Array(timestampsShape[0] * timestampsShape[1]),\n            timestampsShape\n        );\n\n        // Perform dynamic time warping on each element of the batch.\n        for (let batch_idx = 0; batch_idx < timestampsShape[0]; ++batch_idx) {\n            // NOTE: Since we run only one batch at a time, we can squeeze to get the same dimensions\n            // as the python implementation\n            const matrix = batchedMatrices[batch_idx].neg().squeeze_(0);\n            let [text_indices, time_indices] = dynamicTimeWarping(matrix);\n\n            let diffs = Array.from({ length: text_indices.length - 1 }, (v, i) => text_indices[i + 1] - text_indices[i]);\n            let jumps = mergeArrays([1], diffs).map(x => !!x); // convert to boolean\n\n            let jump_times = [];\n            for (let i = 0; i < jumps.length; ++i) {\n                if (jumps[i]) {\n                    jump_times.push(time_indices[i] * time_precision);\n                    // NOTE: No point in rounding here, since we set to Float32Array later\n                }\n            }\n            timestamps[batch_idx].data.set(jump_times, 1)\n        }\n\n        return timestamps;\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n/**\n * Vision Encoder-Decoder model based on OpenAI's GPT architecture for image captioning and other vision tasks\n */\nexport class VisionEncoderDecoderModel extends PreTrainedModel {\n    main_input_name = 'pixel_values';\n\n    /**\n     * Creates a new instance of the `VisionEncoderDecoderModel` class.\n     * @param {Object} config The configuration object specifying the hyperparameters and other model settings.\n     * @param {Object} session The ONNX session containing the encoder model.\n     * @param {any} decoder_merged_session The ONNX session containing the merged decoder model.\n     * @param {Object} generation_config Configuration object for the generation process.\n     */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        // Extract configs\n        const encoderConfig = this.config.encoder;\n        const decoderConfig = this.config.decoder;\n\n        // Validate encoder\n        const encoderModelType = encoderConfig.model_type;\n        const encoderModel =\n            MODEL_MAPPING_NAMES_ENCODER_ONLY.get(encoderModelType)\n            ?? MODEL_MAPPING_NAMES_ENCODER_DECODER.get(encoderModelType);\n        if (!encoderModel) {\n            console.warn(`Model type for encoder '${encoderModelType}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`);\n        }\n\n        // Validate decoder\n        const decoderModel = MODEL_WITH_LM_HEAD_MAPPING_NAMES.get(decoderConfig.model_type);\n        if (!decoderModel) {\n            throw new Error(`Unable to construct \\`VisionEncoderDecoder\\` due to unsupported decoder: \"${this.config.decoder.model_type}\"`);\n        }\n\n        // @ts-ignore\n        const decoderModelClass = decoderModel[1];\n        // @ts-ignore\n        const decoder = new decoderModelClass(decoderConfig, decoder_merged_session, generation_config);\n\n        this.add_encoder_pkv = 'num_decoder_layers' in decoder;\n        if (this.add_encoder_pkv) {\n            // Decoder is part of an encoder-decoder model\n            this.num_decoder_layers = decoder.num_decoder_layers;\n            this.num_decoder_heads = decoder.num_decoder_heads;\n            this.decoder_dim_kv = decoder.decoder_dim_kv;\n\n            this.num_encoder_layers = decoder.num_encoder_layers;\n            this.num_encoder_heads = decoder.num_encoder_heads;\n            this.encoder_dim_kv = decoder.encoder_dim_kv;\n\n        } else {\n            // Decoder is a decoder-only model\n            this.num_layers = decoder.num_layers;\n            this.num_heads = decoder.num_heads;\n            this.dim_kv = decoder.dim_kv;\n        }\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// CLIP models\nexport class CLIPPreTrainedModel extends PreTrainedModel { }\n\n/**\n * CLIP Text and Vision Model with a projection layers on top\n * \n * **Example:** Perform zero-shot image classification with a `CLIPModel`.\n * \n * ```javascript\n * import { AutoTokenizer, AutoProcessor, CLIPModel, RawImage } from '@xenova/transformers';\n * \n * // Load tokenizer, processor, and model\n * let tokenizer = await AutoTokenizer.from_pretrained('Xenova/clip-vit-base-patch16');\n * let processor = await AutoProcessor.from_pretrained('Xenova/clip-vit-base-patch16');\n * let model = await CLIPModel.from_pretrained('Xenova/clip-vit-base-patch16');\n * \n * // Run tokenization\n * let texts = ['a photo of a car', 'a photo of a football match']\n * let text_inputs = tokenizer(texts, { padding: true, truncation: true });\n * \n * // Read image and run processor\n * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');\n * let image_inputs = await processor(image);\n * \n * // Run model with both text and pixel inputs\n * let output = await model({ ...text_inputs, ...image_inputs });\n * // {\n * //   logits_per_image: Tensor {\n * //     dims: [ 1, 2 ],\n * //     data: Float32Array(2) [ 18.579734802246094, 24.31830596923828 ],\n * //   },\n * //   logits_per_text: Tensor {\n * //     dims: [ 2, 1 ],\n * //     data: Float32Array(2) [ 18.579734802246094, 24.31830596923828 ],\n * //   },\n * //   text_embeds: Tensor {\n * //     dims: [ 2, 512 ],\n * //     data: Float32Array(1024) [ ... ],\n * //   },\n * //   image_embeds: Tensor {\n * //     dims: [ 1, 512 ],\n * //     data: Float32Array(512) [ ... ],\n * //   }\n * // }\n * ```\n */\nexport class CLIPModel extends CLIPPreTrainedModel { }\n\n/**\n * CLIP Text Model with a projection layer on top (a linear layer on top of the pooled output)\n * \n * **Example:** Compute text embeddings with `CLIPTextModelWithProjection`.\n * \n * ```javascript\n * import { AutoTokenizer, CLIPTextModelWithProjection } from '@xenova/transformers';\n * \n * // Load tokenizer and text model\n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/clip-vit-base-patch16');\n * const text_model = await CLIPTextModelWithProjection.from_pretrained('Xenova/clip-vit-base-patch16');\n * \n * // Run tokenization\n * let texts = ['a photo of a car', 'a photo of a football match'];\n * let text_inputs = tokenizer(texts, { padding: true, truncation: true });\n * \n * // Compute embeddings\n * const { text_embeds } = await text_model(text_inputs);\n * // Tensor {\n * //   dims: [ 2, 512 ],\n * //   type: 'float32',\n * //   data: Float32Array(1024) [ ... ],\n * //   size: 1024\n * // }\n * ```\n */\nexport class CLIPTextModelWithProjection extends CLIPPreTrainedModel {\n\n    /** @type {PreTrainedModel.from_pretrained} */\n    static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n        // Update default model file name if not provided\n        options.model_file_name ??= 'text_model';\n        return super.from_pretrained(pretrained_model_name_or_path, options);\n    }\n}\n\n/**\n * CLIP Vision Model with a projection layer on top (a linear layer on top of the pooled output)\n * \n * **Example:** Compute vision embeddings with `CLIPVisionModelWithProjection`.\n * \n * ```javascript\n * import { AutoProcessor, CLIPVisionModelWithProjection, RawImage} from '@xenova/transformers';\n * \n * // Load processor and vision model\n * const processor = await AutoProcessor.from_pretrained('Xenova/clip-vit-base-patch16');\n * const vision_model = await CLIPVisionModelWithProjection.from_pretrained('Xenova/clip-vit-base-patch16');\n * \n * // Read image and run processor\n * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');\n * let image_inputs = await processor(image);\n * \n * // Compute embeddings\n * const { image_embeds } = await vision_model(image_inputs);\n * // Tensor {\n * //   dims: [ 1, 512 ],\n * //   type: 'float32',\n * //   data: Float32Array(512) [ ... ],\n * //   size: 512\n * // }\n * ```\n */\nexport class CLIPVisionModelWithProjection extends CLIPPreTrainedModel {\n    /** @type {PreTrainedModel.from_pretrained} */\n    static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n        // Update default model file name if not provided\n        options.model_file_name ??= 'vision_model';\n        return super.from_pretrained(pretrained_model_name_or_path, options);\n    }\n}\n\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// GPT2 models\nexport class GPT2PreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GPT2PreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n\n        // config doesn't contain pad_token_id, so we assume it is the eos_token_id\n        this.config.pad_token_id = this.config.eos_token_id\n\n        this.num_heads = this.config.n_head\n        this.num_layers = this.config.n_layer\n        this.dim_kv = this.config.n_embd / this.num_heads;\n    }\n}\n\nexport class GPT2Model extends GPT2PreTrainedModel { }\n\n/**\n * GPT-2 language model head on top of the GPT-2 base model. This model is suitable for text generation tasks.\n */\nexport class GPT2LMHeadModel extends GPT2PreTrainedModel { }\n// export class GPT2ForSequenceClassification extends GPT2PreTrainedModel {\n// TODO\n// }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// GPTNeo models\nexport class GPTNeoPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GPTNeoPreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n\n        // config doesn't contain pad_token_id, so we assume it is the eos_token_id\n        this.config.pad_token_id = this.config.eos_token_id\n\n        this.num_heads = this.config.num_heads;\n        this.num_layers = this.config.num_layers;\n        this.dim_kv = this.config.hidden_size / this.num_heads;\n    }\n}\nexport class GPTNeoModel extends GPTNeoPreTrainedModel { }\n\nexport class GPTNeoForCausalLM extends GPTNeoPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// GPTNeoX models\nexport class GPTNeoXPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GPTNeoXPreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n\n        // config doesn't contain pad_token_id, so we assume it is the eos_token_id\n        this.config.pad_token_id = this.config.eos_token_id\n\n        this.num_heads = this.config.num_attention_heads;\n        this.num_layers = this.config.num_hidden_layers;\n        this.dim_kv = this.config.hidden_size / this.num_heads;\n    }\n}\nexport class GPTNeoXModel extends GPTNeoXPreTrainedModel { }\n\nexport class GPTNeoXForCausalLM extends GPTNeoXPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// GPT-J models\nexport class GPTJPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GPTJPreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n\n        // config doesn't contain pad_token_id, so we assume it is the eos_token_id\n        this.config.pad_token_id = this.config.eos_token_id\n\n        this.num_heads = this.config.n_head\n        this.num_layers = this.config.n_layer\n        this.dim_kv = this.config.n_embd / this.num_heads;\n    }\n}\n\nexport class GPTJModel extends GPTJPreTrainedModel { }\n\nexport class GPTJForCausalLM extends GPTJPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// GPTBigCode models\nexport class GPTBigCodePreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GPTBigCodePreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n\n        // config doesn't contain pad_token_id, so we assume it is the eos_token_id\n        this.config.pad_token_id = this.config.eos_token_id\n\n        this.num_heads = this.config.n_head\n        this.num_layers = this.config.n_layer\n        this.dim_kv = this.config.n_embd / this.num_heads;\n    }\n}\n\nexport class GPTBigCodeModel extends GPTBigCodePreTrainedModel { }\n\nexport class GPTBigCodeForCausalLM extends GPTBigCodePreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// CodeGen models\nexport class CodeGenPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `CodeGenPreTrainedModel` class.\n     * @param {Object} config The model configuration object.\n     * @param {Object} session The ONNX session object.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n\n        // config doesn't contain pad_token_id, so we assume it is the eos_token_id\n        this.config.pad_token_id = this.config.eos_token_id\n\n        this.num_heads = this.config.n_head\n        this.num_layers = this.config.n_layer\n        this.dim_kv = this.config.n_embd / this.num_heads;\n    }\n}\n/**\n * CodeGenModel is a class representing a code generation model without a language model head.\n */\nexport class CodeGenModel extends CodeGenPreTrainedModel { }\n\n/**\n * CodeGenForCausalLM is a class that represents a code generation model based on the GPT-2 architecture. It extends the `CodeGenPreTrainedModel` class.\n */\nexport class CodeGenForCausalLM extends CodeGenPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// LLama models\n\n/**\n * The bare LLama Model outputting raw hidden-states without any specific head on top.\n */\nexport class LlamaPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `LlamaPreTrainedModel` class.\n     * @param {Object} config The model configuration object.\n     * @param {Object} session The ONNX session object.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n\n        // config doesn't contain pad_token_id, so we assume it is the eos_token_id\n        this.config.pad_token_id = this.config.eos_token_id\n\n        this.num_heads = this.config.num_attention_heads\n        this.num_layers = this.config.num_hidden_layers\n        this.dim_kv = this.config.hidden_size / this.num_heads;\n    }\n}\n/**\n * The bare LLaMA Model outputting raw hidden-states without any specific head on top.\n */\nexport class LlamaModel extends LlamaPreTrainedModel { }\n\nexport class LlamaForCausalLM extends LlamaPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Bloom models\n/**\n * The Bloom Model transformer with a language modeling head on top (linear layer with weights tied to the input embeddings).\n */\nexport class BloomPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `BloomPreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n\n        // config doesn't contain pad_token_id, so we assume it is the eos_token_id\n        this.config.pad_token_id = this.config.eos_token_id\n\n        this.num_heads = this.config.n_head\n        this.num_layers = this.config.n_layer\n        this.dim_kv = this.config.hidden_size / this.num_heads;\n    }\n}\n\n/**\n * The bare Bloom Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class BloomModel extends BloomPreTrainedModel { }\n\n/**\n * The Bloom Model transformer with a language modeling head on top (linear layer with weights tied to the input embeddings).\n */\nexport class BloomForCausalLM extends BloomPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// MPT models\nexport class MptPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `MptPreTrainedModel` class.\n     * @param {Object} config The model configuration object.\n     * @param {Object} session The ONNX session object.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n\n        // config doesn't contain pad_token_id, so we assume it is the eos_token_id\n        this.config.pad_token_id = this.config.eos_token_id\n\n        this.num_heads = this.config.n_heads\n        this.num_layers = this.config.n_layers\n        this.dim_kv = this.config.d_model / this.num_heads;\n    }\n}\n\n/**\n * The bare Mpt Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class MptModel extends MptPreTrainedModel { }\n\n/**\n * The MPT Model transformer with a language modeling head on top (linear layer with weights tied to the input embeddings).\n */\nexport class MptForCausalLM extends MptPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// OPT models\nexport class OPTPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `OPTPreTrainedModel` class.\n     * @param {Object} config The model configuration object.\n     * @param {Object} session The ONNX session object.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n\n        // config doesn't contain pad_token_id, so we assume it is the eos_token_id\n        this.config.pad_token_id = this.config.eos_token_id\n\n        this.num_heads = this.config.num_attention_heads;\n        this.num_layers = this.config.num_hidden_layers;\n        this.dim_kv = this.config.hidden_size / this.num_heads;\n    }\n}\n\n/**\n * The bare OPT Model outputting raw hidden-states without any specific head on top.\n */\nexport class OPTModel extends OPTPreTrainedModel { }\n\n/**\n * The OPT Model transformer with a language modeling head on top (linear layer with weights tied to the input embeddings).\n */\nexport class OPTForCausalLM extends OPTPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class ViTPreTrainedModel extends PreTrainedModel { }\nexport class ViTModel extends ViTPreTrainedModel { }\nexport class ViTForImageClassification extends ViTPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class MobileViTPreTrainedModel extends PreTrainedModel { }\nexport class MobileViTModel extends MobileViTPreTrainedModel { }\nexport class MobileViTForImageClassification extends MobileViTPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n// TODO: MobileViTForSemanticSegmentation\n\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Beit Models\nexport class BeitPreTrainedModel extends PreTrainedModel { }\nexport class BeitModel extends BeitPreTrainedModel { }\nexport class BeitForImageClassification extends BeitPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class DetrPreTrainedModel extends PreTrainedModel { }\nexport class DetrModel extends DetrPreTrainedModel { }\nexport class DetrForObjectDetection extends DetrPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new DetrObjectDetectionOutput(await super._call(model_inputs));\n    }\n}\n\nexport class DetrForSegmentation extends DetrPreTrainedModel {\n    /**\n     * Runs the model with the provided inputs\n     * @param {Object} model_inputs Model inputs\n     * @returns {Promise<DetrSegmentationOutput>} Object containing segmentation outputs\n     */\n    async _call(model_inputs) {\n        return new DetrSegmentationOutput(await super._call(model_inputs));\n    }\n}\n\nexport class DetrObjectDetectionOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Classification logits (including no-object) for all queries.\n     * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).\n     * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).\n     */\n    constructor({ logits, pred_boxes }) {\n        super();\n        this.logits = logits;\n        this.pred_boxes = pred_boxes;\n    }\n}\n\nexport class DetrSegmentationOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits The output logits of the model.\n     * @param {Tensor} output.pred_boxes Predicted boxes.\n     * @param {Tensor} output.pred_masks Predicted masks.\n     */\n    constructor({ logits, pred_boxes, pred_masks }) {\n        super();\n        this.logits = logits;\n        this.pred_boxes = pred_boxes;\n        this.pred_masks = pred_masks;\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class DeiTPreTrainedModel extends PreTrainedModel { }\nexport class DeiTModel extends DeiTPreTrainedModel { }\nexport class DeiTForImageClassification extends DeiTPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n/**\n * An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.\n */\nexport class ResNetPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare ResNet model outputting raw features without any specific head on top.\n */\nexport class ResNetModel extends ResNetPreTrainedModel { }\n\n/**\n * ResNet Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for ImageNet.\n */\nexport class ResNetForImageClassification extends ResNetPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class SwinPreTrainedModel extends PreTrainedModel { }\nexport class SwinModel extends SwinPreTrainedModel { }\nexport class SwinForImageClassification extends SwinPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class DonutSwinPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare Donut Swin Model transformer outputting raw hidden-states without any specific head on top.\n * \n * **Example:** Step-by-step Document Parsing.\n * \n * ```javascript\n * import { AutoProcessor, AutoTokenizer, AutoModelForVision2Seq, RawImage } from '@xenova/transformers';\n * \n * // Choose model to use\n * const model_id = 'Xenova/donut-base-finetuned-cord-v2';\n * \n * // Prepare image inputs\n * const processor = await AutoProcessor.from_pretrained(model_id);\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/receipt.png';\n * const image = await RawImage.read(url);\n * const image_inputs = await processor(image);\n * \n * // Prepare decoder inputs\n * const tokenizer = await AutoTokenizer.from_pretrained(model_id);\n * const task_prompt = '<s_cord-v2>';\n * const decoder_input_ids = tokenizer(task_prompt, {\n *   add_special_tokens: false,\n * }).input_ids;\n * \n * // Create the model\n * const model = await AutoModelForVision2Seq.from_pretrained(model_id);\n * \n * // Run inference\n * const output = await model.generate(image_inputs.pixel_values, {\n *   decoder_input_ids,\n *   max_length: model.config.decoder.max_position_embeddings,\n * });\n * \n * // Decode output\n * const decoded = tokenizer.batch_decode(output)[0];\n * // <s_cord-v2><s_menu><s_nm> CINNAMON SUGAR</s_nm><s_unitprice> 17,000</s_unitprice><s_cnt> 1 x</s_cnt><s_price> 17,000</s_price></s_menu><s_sub_total><s_subtotal_price> 17,000</s_subtotal_price></s_sub_total><s_total><s_total_price> 17,000</s_total_price><s_cashprice> 20,000</s_cashprice><s_changeprice> 3,000</s_changeprice></s_total></s>\n * ```\n * \n * **Example:** Step-by-step Document Visual Question Answering (DocVQA)\n * \n * ```javascript\n * import { AutoProcessor, AutoTokenizer, AutoModelForVision2Seq, RawImage } from '@xenova/transformers';\n * \n * // Choose model to use\n * const model_id = 'Xenova/donut-base-finetuned-docvqa';\n * \n * // Prepare image inputs\n * const processor = await AutoProcessor.from_pretrained(model_id);\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/invoice.png';\n * const image = await RawImage.read(url);\n * const image_inputs = await processor(image);\n * \n * // Prepare decoder inputs\n * const tokenizer = await AutoTokenizer.from_pretrained(model_id);\n * const question = 'What is the invoice number?';\n * const task_prompt = `<s_docvqa><s_question>${question}</s_question><s_answer>`;\n * const decoder_input_ids = tokenizer(task_prompt, {\n *   add_special_tokens: false,\n * }).input_ids;\n * \n * // Create the model\n * const model = await AutoModelForVision2Seq.from_pretrained(model_id);\n * \n * // Run inference\n * const output = await model.generate(image_inputs.pixel_values, {\n *   decoder_input_ids,\n *   max_length: model.config.decoder.max_position_embeddings,\n * });\n * \n * // Decode output\n * const decoded = tokenizer.batch_decode(output)[0];\n * // <s_docvqa><s_question> What is the invoice number?</s_question><s_answer> us-001</s_answer></s>\n * ```\n */\nexport class DonutSwinModel extends DonutSwinPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class YolosPreTrainedModel extends PreTrainedModel { }\nexport class YolosModel extends YolosPreTrainedModel { }\nexport class YolosForObjectDetection extends YolosPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new YolosObjectDetectionOutput(await super._call(model_inputs));\n    }\n}\n\nexport class YolosObjectDetectionOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Classification logits (including no-object) for all queries.\n     * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).\n     * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).\n     */\n    constructor({ logits, pred_boxes }) {\n        super();\n        this.logits = logits;\n        this.pred_boxes = pred_boxes;\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class SamPreTrainedModel extends PreTrainedModel { }\nexport class SamModel extends SamPreTrainedModel {\n    /**\n     * @param {Object} model_inputs\n     * @param {Tensor} model_inputs.pixel_values Pixel values as a Tensor with shape `(batch_size, num_channels, height, width)`.\n     * @param {Tensor} model_inputs.input_points Input 2D spatial points with shape `(batch_size, num_points, 2)`. This is used by the prompt encoder to encode the prompt.\n     * @todo Add support for `input_labels`, `input_boxes`, `input_masks`, and `image_embeddings`.\n     */\n    async _call(model_inputs) {\n        return new SamImageSegmentationOutput(await super._call(model_inputs));\n    }\n}\n\n\n/**\n * Base class for Segment-Anything model's output.\n */\nexport class SamImageSegmentationOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.iou_scores The output logits of the model.\n     * @param {Tensor} output.pred_masks Predicted boxes.\n     */\n    constructor({ iou_scores, pred_masks }) {\n        super();\n        this.iou_scores = iou_scores;\n        this.pred_masks = pred_masks;\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// MarianMT models\nexport class MarianPreTrainedModel extends PreTrainedModel { };\n\nexport class MarianModel extends MarianPreTrainedModel { }\n\nexport class MarianMTModel extends MarianPreTrainedModel {\n\n    /**\n     * Creates a new instance of the `MarianMTModel` class.\n    * @param {Object} config The model configuration object.\n    * @param {Object} session The ONNX session object.\n    * @param {any} decoder_merged_session \n    * @param {any} generation_config \n    */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.decoder_layers;\n        this.num_decoder_heads = this.config.decoder_attention_heads;\n        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;\n\n        this.num_encoder_layers = this.config.encoder_layers;\n        this.num_encoder_heads = this.config.encoder_attention_heads;\n        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// M2M100 models\nexport class M2M100PreTrainedModel extends PreTrainedModel { };\n\nexport class M2M100Model extends M2M100PreTrainedModel { }\n\nexport class M2M100ForConditionalGeneration extends M2M100PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `M2M100ForConditionalGeneration` class.\n    * @param {Object} config The model configuration object.\n    * @param {Object} session The ONNX session object.\n    * @param {any} decoder_merged_session \n    * @param {any} generation_config \n    */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.decoder_layers;\n        this.num_decoder_heads = this.config.decoder_attention_heads;\n        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;\n\n        this.num_encoder_layers = this.config.encoder_layers;\n        this.num_encoder_heads = this.config.encoder_attention_heads;\n        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;\n    }\n\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Wav2Vec2 models\nexport class Wav2Vec2PreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare Wav2Vec2 Model transformer outputting raw hidden-states without any specific head on top.\n * \n * **Example:** Load and run an `Wav2Vec2Model` for feature extraction.\n * \n * ```javascript\n * import { AutoProcessor, AutoModel, read_audio } from '@xenova/transformers';\n * \n * // Read and preprocess audio\n * const processor = await AutoProcessor.from_pretrained('Xenova/mms-300m');\n * const audio = await read_audio('https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/mlk.flac', 16000);\n * const inputs = await processor(audio);\n * \n * // Run model with inputs\n * const model = await AutoModel.from_pretrained('Xenova/mms-300m');\n * const output = await model(inputs);\n * // {\n * //   last_hidden_state: Tensor {\n * //     dims: [ 1, 1144, 1024 ],\n * //     type: 'float32',\n * //     data: Float32Array(1171456) [ ... ],\n * //     size: 1171456\n * //   }\n * // }\n * ```\n */\nexport class Wav2Vec2Model extends Wav2Vec2PreTrainedModel { }\n\nexport class Wav2Vec2ForCTC extends Wav2Vec2PreTrainedModel {\n    /**\n     * @param {Object} model_inputs\n     * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n     * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n     */\n    async _call(model_inputs) {\n        return new CausalLMOutput(await super._call(model_inputs));\n    }\n}\n\nexport class Wav2Vec2ForSequenceClassification extends Wav2Vec2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n// WavLM models\n/**\n * An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.\n */\nexport class WavLMPreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare WavLM Model transformer outputting raw hidden-states without any specific head on top.\n * \n * **Example:** Load and run an `WavLMModel` for feature extraction.\n * \n * ```javascript\n * import { AutoProcessor, AutoModel, read_audio } from '@xenova/transformers';\n * \n * // Read and preprocess audio\n * const processor = await AutoProcessor.from_pretrained('Xenova/wavlm-base');\n * const audio = await read_audio('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav', 16000);\n * const inputs = await processor(audio);\n * \n * // Run model with inputs\n * const model = await AutoModel.from_pretrained('Xenova/wavlm-base');\n * const output = await model(inputs);\n * // {\n * //   last_hidden_state: Tensor {\n * //     dims: [ 1, 549, 768 ],\n * //     type: 'float32',\n * //     data: Float32Array(421632) [-0.349443256855011, -0.39341306686401367,  0.022836603224277496, ...],\n * //     size: 421632\n * //   }\n * // }\n * ```\n */\nexport class WavLMModel extends WavLMPreTrainedModel { }\n\n/**\n * WavLM Model with a `language modeling` head on top for Connectionist Temporal Classification (CTC).\n */\nexport class WavLMForCTC extends WavLMPreTrainedModel {\n    /**\n     * @param {Object} model_inputs\n     * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n     * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n     */\n    async _call(model_inputs) {\n        return new CausalLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * WavLM Model with a sequence classification head on top (a linear layer over the pooled output).\n */\nexport class WavLMForSequenceClassification extends WavLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n//////////////////////////////////////////////////\n// SpeechT5 models\n/**\n * An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.\n */\nexport class SpeechT5PreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare SpeechT5 Encoder-Decoder Model outputting raw hidden-states without any specific pre- or post-nets.\n */\nexport class SpeechT5Model extends SpeechT5PreTrainedModel { };\n\n/**\n * SpeechT5 Model with a speech encoder and a text decoder.\n */\nexport class SpeechT5ForSpeechToText extends SpeechT5PreTrainedModel { }\n\n/**\n * SpeechT5 Model with a text encoder and a speech decoder.\n */\nexport class SpeechT5ForTextToSpeech extends SpeechT5PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `SpeechT5ForTextToSpeech` class.\n     * @param {Object} config The model configuration.\n     * @param {any} session session for the model.\n     * @param {any} decoder_merged_session session for the decoder.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, decoder_merged_session, generation_config) {\n        super(config, session);\n        this.decoder_merged_session = decoder_merged_session;\n        this.generation_config = generation_config;\n\n        this.num_decoder_layers = this.config.decoder_layers;\n        this.num_decoder_heads = this.config.decoder_attention_heads;\n        this.decoder_dim_kv = this.config.hidden_size / this.num_decoder_heads;\n\n        this.num_encoder_layers = this.config.encoder_layers;\n        this.num_encoder_heads = this.config.encoder_attention_heads;\n        this.encoder_dim_kv = this.config.hidden_size / this.num_encoder_heads;\n    }\n\n    /**\n     * @typedef {Object} SpeechOutput\n     * @property {Tensor} [spectrogram] The predicted log-mel spectrogram of shape\n     * `(output_sequence_length, config.num_mel_bins)`. Returned when no `vocoder` is provided\n     * @property {Tensor} [waveform] The predicted waveform of shape `(num_frames,)`. Returned when a `vocoder` is provided.\n     * @property {Tensor} [cross_attentions] The outputs of the decoder's cross-attention layers of shape\n     * `(config.decoder_layers, config.decoder_attention_heads, output_sequence_length, input_sequence_length)`. returned when `output_cross_attentions` is `true`.\n     */\n\n    /**\n     * Converts a sequence of input tokens into a sequence of mel spectrograms, which are subsequently turned into a speech waveform using a vocoder.\n     * @param {Tensor} input_values Indices of input sequence tokens in the vocabulary.\n     * @param {Tensor} speaker_embeddings Tensor containing the speaker embeddings.\n     * @param {Object} options Optional parameters for generating speech.\n     * @param {number} [options.threshold=0.5] The generated sequence ends when the predicted stop token probability exceeds this value.\n     * @param {number} [options.minlenratio=0.0] Used to calculate the minimum required length for the output sequence.\n     * @param {number} [options.maxlenratio=20.0] Used to calculate the maximum allowed length for the output sequence.\n     * @param {Object} [options.vocoder=null] The vocoder that converts the mel spectrogram into a speech waveform. If `null`, the output is the mel spectrogram.\n     * @param {boolean} [options.output_cross_attentions=false] Whether or not to return the attentions tensors of the decoder's cross-attention layers.\n     * @returns {Promise<SpeechOutput>} A promise which resolves to an object containing the spectrogram, waveform, and cross-attention tensors.\n     */\n    async generate_speech(input_values, speaker_embeddings, {\n        threshold = 0.5,\n        minlenratio = 0.0,\n        maxlenratio = 20.0,\n        vocoder = null,\n        // output_cross_attentions = false, // TODO add\n    } = {}) {\n\n        const model_inputs = {\n            input_ids: input_values\n        }\n\n        const { encoder_outputs, encoder_attention_mask } = await encoderForward(this, model_inputs);\n\n        const r = encoder_outputs.dims[1] / this.config.reduction_factor;\n        const maxlen = Math.floor(r * maxlenratio);\n        const minlen = Math.floor(r * minlenratio);\n\n        const num_mel_bins = this.config.num_mel_bins;\n\n        let spectrogramParts = [];\n        let past_key_values = null;\n        let decoder_outputs = null;\n        let idx = 0;\n\n        while (true) {\n            ++idx;\n\n            const use_cache_branch = boolTensor(!!decoder_outputs);\n            let output_sequence;\n            if (decoder_outputs) {\n                output_sequence = decoder_outputs.output_sequence_out;\n            } else {\n                output_sequence = new Tensor(\n                    'float32',\n                    new Float32Array(num_mel_bins),\n                    [1, 1, num_mel_bins],\n                )\n            }\n            let decoderFeeds = {\n                use_cache_branch,\n                output_sequence,\n                encoder_attention_mask: encoder_attention_mask,\n                speaker_embeddings: speaker_embeddings,\n                encoder_hidden_states: encoder_outputs,\n            };\n\n            this.addPastKeyValues(decoderFeeds, past_key_values);\n            decoder_outputs = await sessionRun(this.decoder_merged_session, decoderFeeds);\n            past_key_values = this.getPastKeyValues(decoder_outputs, past_key_values);\n\n            const { prob, spectrum } = decoder_outputs;\n            spectrogramParts.push(spectrum);\n\n            if (idx >= minlen && (\n                // Finished when stop token or maximum length is reached.\n                Array.from(prob.data).filter(p => p >= threshold).length > 0 || idx >= maxlen\n            )) {\n                break;\n            }\n        }\n\n        const spectrogram = cat(spectrogramParts);\n        const { waveform } = await sessionRun(vocoder.session, { spectrogram });\n\n        return {\n            spectrogram,\n            waveform,\n            // cross_attentions: null, // TODO add\n        }\n    }\n}\n\n/**\n * HiFi-GAN vocoder.\n */\nexport class SpeechT5HifiGan extends PreTrainedModel {\n    main_input_name = 'spectrogram';\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// AutoModels, used to simplify construction of PreTrainedModels\n// (uses config to instantiate correct class)\n\n/**\n * Base class of all AutoModels. Contains the `from_pretrained` function\n * which is used to instantiate pretrained models.\n */\nexport class PretrainedMixin {\n    /**\n     * Mapping from model type to model class.\n     * @type {Map<string, Object>[]}\n     */\n    static MODEL_CLASS_MAPPINGS = null;\n\n    /**\n     * Whether to attempt to instantiate the base class (`PretrainedModel`) if \n     * the model type is not found in the mapping.\n     */\n    static BASE_IF_FAIL = false;\n\n\n    /** @type {PreTrainedModel.from_pretrained} */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        quantized = true,\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n        model_file_name = null,\n    } = {}) {\n\n        let options = {\n            quantized,\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n            model_file_name,\n        }\n        config = await AutoConfig.from_pretrained(pretrained_model_name_or_path, options);\n        if (!options.config) {\n            // If no config was passed, reuse this config for future processing\n            options.config = config;\n        }\n\n        if (!this.MODEL_CLASS_MAPPINGS) {\n            throw new Error(\"`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: \" + this.name);\n        }\n\n        for (let MODEL_CLASS_MAPPING of this.MODEL_CLASS_MAPPINGS) {\n            const modelInfo = MODEL_CLASS_MAPPING.get(config.model_type);\n            if (!modelInfo) {\n                continue; // Item not found in this mapping\n            }\n            return await modelInfo[1].from_pretrained(pretrained_model_name_or_path, options);\n        }\n\n        if (this.BASE_IF_FAIL) {\n            console.warn(`Unknown model class \"${config.model_type}\", attempting to construct from base class.`);\n            return await PreTrainedModel.from_pretrained(pretrained_model_name_or_path, options);\n        } else {\n            throw Error(`Unsupported model type: ${config.model_type}`)\n        }\n    }\n}\n\nconst MODEL_MAPPING_NAMES_ENCODER_ONLY = new Map([\n    ['bert', ['BertModel', BertModel]],\n    ['camembert', ['CamembertModel', CamembertModel]],\n    ['deberta', ['DebertaModel', DebertaModel]],\n    ['deberta-v2', ['DebertaV2Model', DebertaV2Model]],\n    ['mpnet', ['MPNetModel', MPNetModel]],\n    ['albert', ['AlbertModel', AlbertModel]],\n    ['distilbert', ['DistilBertModel', DistilBertModel]],\n    ['roberta', ['RobertaModel', RobertaModel]],\n    ['xlm', ['XLMModel', XLMModel]],\n    ['xlm-roberta', ['XLMRobertaModel', XLMRobertaModel]],\n    ['clip', ['CLIPModel', CLIPModel]],\n    ['mobilebert', ['MobileBertModel', MobileBertModel]],\n    ['squeezebert', ['SqueezeBertModel', SqueezeBertModel]],\n    ['wav2vec2', ['Wav2Vec2Model', Wav2Vec2Model]],\n    ['wavlm', ['WavLMModel', WavLMModel]],\n\n    ['detr', ['DetrModel', DetrModel]],\n    ['vit', ['ViTModel', ViTModel]],\n    ['mobilevit', ['MobileViTModel', MobileViTModel]],\n    ['beit', ['BeitModel', BeitModel]],\n    ['deit', ['DeiTModel', DeiTModel]],\n    ['resnet', ['ResNetModel', ResNetModel]],\n    ['swin', ['SwinModel', SwinModel]],\n    ['donut-swin', ['DonutSwinModel', DonutSwinModel]],\n    ['yolos', ['YolosModel', YolosModel]],\n\n    ['hifigan', ['SpeechT5HifiGan', SpeechT5HifiGan]],\n\n    ['sam', ['SamModel', SamModel]], // TODO change to encoder-decoder when model is split correctly\n]);\n\nconst MODEL_MAPPING_NAMES_ENCODER_DECODER = new Map([\n    ['t5', ['T5Model', T5Model]],\n    ['longt5', ['LongT5Model', LongT5Model]],\n    ['mt5', ['MT5Model', MT5Model]],\n    ['bart', ['BartModel', BartModel]],\n    ['mbart', ['MBartModel', MBartModel]],\n    ['marian', ['MarianModel', MarianModel]],\n    ['whisper', ['WhisperModel', WhisperModel]],\n    ['m2m_100', ['M2M100Model', M2M100Model]],\n    ['blenderbot', ['BlenderbotModel', BlenderbotModel]],\n    ['blenderbot-small', ['BlenderbotSmallModel', BlenderbotSmallModel]],\n]);\n\n\nconst MODEL_MAPPING_NAMES_DECODER_ONLY = new Map([\n    ['bloom', ['BloomModel', BloomModel]],\n    ['gpt2', ['GPT2Model', GPT2Model]],\n    ['gptj', ['GPTJModel', GPTJModel]],\n    ['gpt_bigcode', ['GPTBigCodeModel', GPTBigCodeModel]],\n    ['gpt_neo', ['GPTNeoModel', GPTNeoModel]],\n    ['gpt_neox', ['GPTNeoXModel', GPTNeoXModel]],\n    ['codegen', ['CodeGenModel', CodeGenModel]],\n    ['llama', ['LlamaModel', LlamaModel]],\n    ['mpt', ['MptModel', MptModel]],\n    ['opt', ['OPTModel', OPTModel]],\n]);\n\nconst MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES = new Map([\n    ['speecht5', ['SpeechT5ForSpeechToText', SpeechT5ForSpeechToText]],\n    ['whisper', ['WhisperForConditionalGeneration', WhisperForConditionalGeneration]],\n])\n\nconst MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES = new Map([\n    ['speecht5', ['SpeechT5ForTextToSpeech', SpeechT5ForTextToSpeech]],\n])\n\nconst MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES = new Map([\n    ['bert', ['BertForSequenceClassification', BertForSequenceClassification]],\n    ['camembert', ['CamembertForSequenceClassification', CamembertForSequenceClassification]],\n    ['deberta', ['DebertaForSequenceClassification', DebertaForSequenceClassification]],\n    ['deberta-v2', ['DebertaV2ForSequenceClassification', DebertaV2ForSequenceClassification]],\n    ['mpnet', ['MPNetForSequenceClassification', MPNetForSequenceClassification]],\n    ['albert', ['AlbertForSequenceClassification', AlbertForSequenceClassification]],\n    ['distilbert', ['DistilBertForSequenceClassification', DistilBertForSequenceClassification]],\n    ['roberta', ['RobertaForSequenceClassification', RobertaForSequenceClassification]],\n    ['xlm', ['XLMForSequenceClassification', XLMForSequenceClassification]],\n    ['xlm-roberta', ['XLMRobertaForSequenceClassification', XLMRobertaForSequenceClassification]],\n    ['bart', ['BartForSequenceClassification', BartForSequenceClassification]],\n    ['mbart', ['MBartForSequenceClassification', MBartForSequenceClassification]],\n    ['mobilebert', ['MobileBertForSequenceClassification', MobileBertForSequenceClassification]],\n    ['squeezebert', ['SqueezeBertForSequenceClassification', SqueezeBertForSequenceClassification]],\n]);\n\nconst MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES = new Map([\n    ['bert', ['BertForTokenClassification', BertForTokenClassification]],\n    ['camembert', ['CamembertForTokenClassification', CamembertForTokenClassification]],\n    ['deberta', ['DebertaForTokenClassification', DebertaForTokenClassification]],\n    ['deberta-v2', ['DebertaV2ForTokenClassification', DebertaV2ForTokenClassification]],\n    ['mpnet', ['MPNetForTokenClassification', MPNetForTokenClassification]],\n    ['distilbert', ['DistilBertForTokenClassification', DistilBertForTokenClassification]],\n    ['roberta', ['RobertaForTokenClassification', RobertaForTokenClassification]],\n    ['xlm', ['XLMForTokenClassification', XLMForTokenClassification]],\n    ['xlm-roberta', ['XLMRobertaForTokenClassification', XLMRobertaForTokenClassification]],\n]);\n\nconst MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES = new Map([\n    ['t5', ['T5ForConditionalGeneration', T5ForConditionalGeneration]],\n    ['longt5', ['LongT5ForConditionalGeneration', LongT5ForConditionalGeneration]],\n    ['mt5', ['MT5ForConditionalGeneration', MT5ForConditionalGeneration]],\n    ['bart', ['BartForConditionalGeneration', BartForConditionalGeneration]],\n    ['mbart', ['MBartForConditionalGeneration', MBartForConditionalGeneration]],\n    ['marian', ['MarianMTModel', MarianMTModel]],\n    ['m2m_100', ['M2M100ForConditionalGeneration', M2M100ForConditionalGeneration]],\n    ['blenderbot', ['BlenderbotForConditionalGeneration', BlenderbotForConditionalGeneration]],\n    ['blenderbot-small', ['BlenderbotSmallForConditionalGeneration', BlenderbotSmallForConditionalGeneration]],\n]);\n\nconst MODEL_WITH_LM_HEAD_MAPPING_NAMES = new Map([\n    ['bloom', ['BloomForCausalLM', BloomForCausalLM]],\n    ['gpt2', ['GPT2LMHeadModel', GPT2LMHeadModel]],\n    ['gptj', ['GPTJForCausalLM', GPTJForCausalLM]],\n    ['gpt_bigcode', ['GPTBigCodeForCausalLM', GPTBigCodeForCausalLM]],\n    ['gpt_neo', ['GPTNeoForCausalLM', GPTNeoForCausalLM]],\n    ['gpt_neox', ['GPTNeoXForCausalLM', GPTNeoXForCausalLM]],\n    ['codegen', ['CodeGenForCausalLM', CodeGenForCausalLM]],\n    ['llama', ['LlamaForCausalLM', LlamaForCausalLM]],\n    ['mpt', ['MptForCausalLM', MptForCausalLM]],\n    ['opt', ['OPTForCausalLM', OPTForCausalLM]],\n    ['mbart', ['MBartForCausalLM', MBartForCausalLM]],\n]);\n\nconst MODEL_FOR_MASKED_LM_MAPPING_NAMES = new Map([\n    ['bert', ['BertForMaskedLM', BertForMaskedLM]],\n    ['camembert', ['CamembertForMaskedLM', CamembertForMaskedLM]],\n    ['deberta', ['DebertaForMaskedLM', DebertaForMaskedLM]],\n    ['deberta-v2', ['DebertaV2ForMaskedLM', DebertaV2ForMaskedLM]],\n    ['mpnet', ['MPNetForMaskedLM', MPNetForMaskedLM]],\n    ['albert', ['AlbertForMaskedLM', AlbertForMaskedLM]],\n    ['distilbert', ['DistilBertForMaskedLM', DistilBertForMaskedLM]],\n    ['roberta', ['RobertaForMaskedLM', RobertaForMaskedLM]],\n    ['xlm', ['XLMWithLMHeadModel', XLMWithLMHeadModel]],\n    ['xlm-roberta', ['XLMRobertaForMaskedLM', XLMRobertaForMaskedLM]],\n    ['mobilebert', ['MobileBertForMaskedLM', MobileBertForMaskedLM]],\n    ['squeezebert', ['SqueezeBertForMaskedLM', SqueezeBertForMaskedLM]],\n]);\n\nconst MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES = new Map([\n    ['bert', ['BertForQuestionAnswering', BertForQuestionAnswering]],\n    ['camembert', ['CamembertForQuestionAnswering', CamembertForQuestionAnswering]],\n    ['deberta', ['DebertaForQuestionAnswering', DebertaForQuestionAnswering]],\n    ['deberta-v2', ['DebertaV2ForQuestionAnswering', DebertaV2ForQuestionAnswering]],\n    ['mpnet', ['MPNetForQuestionAnswering', MPNetForQuestionAnswering]],\n    ['albert', ['AlbertForQuestionAnswering', AlbertForQuestionAnswering]],\n    ['distilbert', ['DistilBertForQuestionAnswering', DistilBertForQuestionAnswering]],\n    ['roberta', ['RobertaForQuestionAnswering', RobertaForQuestionAnswering]],\n    ['xlm', ['XLMForQuestionAnswering', XLMForQuestionAnswering]],\n    ['xlm-roberta', ['XLMRobertaForQuestionAnswering', XLMRobertaForQuestionAnswering]],\n    ['mobilebert', ['MobileBertForQuestionAnswering', MobileBertForQuestionAnswering]],\n    ['squeezebert', ['SqueezeBertForQuestionAnswering', SqueezeBertForQuestionAnswering]],\n]);\n\nconst MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES = new Map([\n    ['vision-encoder-decoder', ['VisionEncoderDecoderModel', VisionEncoderDecoderModel]],\n]);\n\nconst MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES = new Map([\n    ['vision-encoder-decoder', ['VisionEncoderDecoderModel', VisionEncoderDecoderModel]],\n]);\n\nconst MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES = new Map([\n    ['vit', ['ViTForImageClassification', ViTForImageClassification]],\n    ['mobilevit', ['MobileViTForImageClassification', MobileViTForImageClassification]],\n    ['beit', ['BeitForImageClassification', BeitForImageClassification]],\n    ['deit', ['DeiTForImageClassification', DeiTForImageClassification]],\n    ['resnet', ['ResNetForImageClassification', ResNetForImageClassification]],\n    ['swin', ['SwinForImageClassification', SwinForImageClassification]],\n]);\n\nconst MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES = new Map([\n    ['detr', ['DetrForObjectDetection', DetrForObjectDetection]],\n    ['yolos', ['YolosForObjectDetection', YolosForObjectDetection]],\n]);\n\nconst MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES = new Map([\n    ['detr', ['DetrForSegmentation', DetrForSegmentation]],\n]);\n\nconst MODEL_FOR_MASK_GENERATION_MAPPING_NAMES = new Map([\n    ['sam', ['SamModel', SamModel]],\n]);\n\nconst MODEL_FOR_CTC_MAPPING_NAMES = new Map([\n    ['wav2vec2', ['Wav2Vec2ForCTC', Wav2Vec2ForCTC]],\n    ['wavlm', ['WavLMForCTC', WavLMForCTC]],\n]);\n\nconst MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES = new Map([\n    ['wav2vec2', ['Wav2Vec2ForSequenceClassification', Wav2Vec2ForSequenceClassification]],\n    ['wavlm', ['WavLMForSequenceClassification', WavLMForSequenceClassification]],\n]);\n\n\nconst MODEL_CLASS_TYPE_MAPPING = [\n    [MODEL_MAPPING_NAMES_ENCODER_ONLY, MODEL_TYPES.EncoderOnly],\n    [MODEL_MAPPING_NAMES_ENCODER_DECODER, MODEL_TYPES.EncoderDecoder],\n    [MODEL_MAPPING_NAMES_DECODER_ONLY, MODEL_TYPES.DecoderOnly],\n    [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],\n    [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],\n    [MODEL_WITH_LM_HEAD_MAPPING_NAMES, MODEL_TYPES.DecoderOnly],\n    [MODEL_FOR_MASKED_LM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Vision2Seq],\n    [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_CTC_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],\n];\n\nfor (const [mappings, type] of MODEL_CLASS_TYPE_MAPPING) {\n    // @ts-ignore\n    for (const [name, model] of mappings.values()) {\n        MODEL_TYPE_MAPPING.set(name, type);\n        MODEL_CLASS_TO_NAME_MAPPING.set(model, name);\n        MODEL_NAME_TO_CLASS_MAPPING.set(name, model);\n    }\n}\n\nconst CUSTOM_MAPPING = [\n    ['CLIPTextModelWithProjection', CLIPTextModelWithProjection, MODEL_TYPES.EncoderOnly],\n    ['CLIPVisionModelWithProjection', CLIPVisionModelWithProjection, MODEL_TYPES.EncoderOnly],\n]\nfor (const [name, model, type] of CUSTOM_MAPPING) {\n    MODEL_TYPE_MAPPING.set(name, type);\n    MODEL_CLASS_TO_NAME_MAPPING.set(model, name);\n    MODEL_NAME_TO_CLASS_MAPPING.set(name, model);\n}\n\n\n/**\n * Helper class which is used to instantiate pretrained models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModel.from_pretrained('bert-base-uncased');\n */\nexport class AutoModel extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_MAPPING_NAMES_ENCODER_ONLY, MODEL_MAPPING_NAMES_ENCODER_DECODER, MODEL_MAPPING_NAMES_DECODER_ONLY];\n    static BASE_IF_FAIL = true;\n}\n\n/**\n * Helper class which is used to instantiate pretrained sequence classification models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForSequenceClassification.from_pretrained('distilbert-base-uncased-finetuned-sst-2-english');\n */\nexport class AutoModelForSequenceClassification extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained token classification models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForTokenClassification.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl');\n */\nexport class AutoModelForTokenClassification extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained sequence-to-sequence models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForSeq2SeqLM.from_pretrained('t5-small');\n */\nexport class AutoModelForSeq2SeqLM extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained sequence-to-sequence speech-to-text models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForSpeechSeq2Seq.from_pretrained('openai/whisper-tiny.en');\n */\nexport class AutoModelForSpeechSeq2Seq extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained sequence-to-sequence text-to-spectrogram models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForTextToSpectrogram.from_pretrained('microsoft/speecht5_tts');\n */\nexport class AutoModelForTextToSpectrogram extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained causal language models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForCausalLM.from_pretrained('gpt2');\n */\nexport class AutoModelForCausalLM extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_WITH_LM_HEAD_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained masked language models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForMaskedLM.from_pretrained('bert-base-uncased');\n */\nexport class AutoModelForMaskedLM extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_MASKED_LM_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained question answering models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForQuestionAnswering.from_pretrained('distilbert-base-cased-distilled-squad');\n */\nexport class AutoModelForQuestionAnswering extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained vision-to-sequence models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForVision2Seq.from_pretrained('nlpconnect/vit-gpt2-image-captioning');\n */\nexport class AutoModelForVision2Seq extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained image classification models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForImageClassification.from_pretrained('google/vit-base-patch16-224');\n */\nexport class AutoModelForImageClassification extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained image segmentation models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForImageSegmentation.from_pretrained('facebook/detr-resnet-50-panoptic');\n */\nexport class AutoModelForImageSegmentation extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained object detection models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForObjectDetection.from_pretrained('facebook/detr-resnet-50');\n */\nexport class AutoModelForObjectDetection extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained object detection models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForMaskGeneration.from_pretrained('Xenova/sam-vit-base');\n */\nexport class AutoModelForMaskGeneration extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES];\n}\n\nexport class AutoModelForCTC extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_CTC_MAPPING_NAMES];\n}\n\nexport class AutoModelForAudioClassification extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES];\n}\n\nexport class AutoModelForDocumentQuestionAnswering extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES];\n}\n\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class Seq2SeqLMOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits The output logits of the model.\n     * @param {Tensor} output.past_key_values An tensor of key/value pairs that represent the previous state of the model.\n     * @param {Tensor} output.encoder_outputs The output of the encoder in a sequence-to-sequence model.\n     * @param {Tensor} [output.decoder_attentions] Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the self-attention heads.\n     * @param {Tensor} [output.cross_attentions] Attentions weights of the decoder's cross-attention layer, after the attention softmax, used to compute the weighted average in the cross-attention heads.\n     */\n    constructor({ logits, past_key_values, encoder_outputs, decoder_attentions = null, cross_attentions = null }) {\n        super();\n        this.logits = logits;\n        this.past_key_values = past_key_values;\n        this.encoder_outputs = encoder_outputs;\n        this.decoder_attentions = decoder_attentions;\n        this.cross_attentions = cross_attentions;\n    }\n}\n\n/**\n * Base class for outputs of sentence classification models.\n */\nexport class SequenceClassifierOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits classification (or regression if config.num_labels==1) scores (before SoftMax).\n     */\n    constructor({ logits }) {\n        super();\n        this.logits = logits;\n    }\n}\n\n/**\n * Base class for outputs of token classification models.\n */\nexport class TokenClassifierOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Classification scores (before SoftMax).\n     */\n    constructor({ logits }) {\n        super();\n        this.logits = logits;\n    }\n}\n\n/**\n * Base class for masked language models outputs.\n */\nexport class MaskedLMOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).\n     */\n    constructor({ logits }) {\n        super();\n        this.logits = logits;\n    }\n}\n\n/**\n * Base class for outputs of question answering models.\n */\nexport class QuestionAnsweringModelOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.start_logits Span-start scores (before SoftMax).\n     * @param {Tensor} output.end_logits Span-end scores (before SoftMax).\n     */\n    constructor({ start_logits, end_logits }) {\n        super();\n        this.start_logits = start_logits;\n        this.end_logits = end_logits;\n    }\n}\n\n\n/**\n * Base class for causal language model (or autoregressive) outputs.\n */\nexport class CausalLMOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).\n     */\n    constructor({ logits }) {\n        super();\n        this.logits = logits;\n    }\n}\n\n/**\n * Base class for causal language model (or autoregressive) outputs.\n */\nexport class CausalLMOutputWithPast extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).\n     * @param {Tensor} output.past_key_values Contains pre-computed hidden-states (key and values in the self-attention blocks)\n     * that can be used (see `past_key_values` input) to speed up sequential decoding.\n     */\n    constructor({ logits, past_key_values }) {\n        super();\n        this.logits = logits;\n        this.past_key_values = past_key_values;\n    }\n}\n","\n/**\n * @file Helper module for using model configs. For more information, see the corresponding\n * [Python documentation](https://huggingface.co/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig).\n * \n * **Example:** Load an `AutoConfig`.\n * \n * ```javascript\n * import { AutoConfig } from '@xenova/transformers';\n * let config = await AutoConfig.from_pretrained('bert-base-uncased');\n * console.log(config);\n * // PretrainedConfig {\n * //   \"model_type\": \"bert\",\n * //   \"is_encoder_decoder\": false,\n * //   \"architectures\": [\n * //       \"BertForMaskedLM\"\n * //   ],\n * //   \"vocab_size\": 30522\n * //   \"num_attention_heads\": 12,\n * //   \"num_hidden_layers\": 12,\n * //   \"hidden_size\": 768,\n * //   \"max_position_embeddings\": 512,\n * //   ...\n * // }\n * ```\n * \n * @module configs\n */\n\nimport {\n    getModelJSON,\n} from './utils/hub.js';\n\n/**\n * @typedef {import('./utils/hub.js').PretrainedOptions} PretrainedOptions\n */\n\n\n/**\n * Loads a config from the specified path.\n * @param {string} pretrained_model_name_or_path The path to the config directory.\n * @param {PretrainedOptions} options Additional options for loading the config.\n * @returns {Promise<Array>} A promise that resolves with information about the loaded config.\n */\nasync function loadConfig(pretrained_model_name_or_path, options) {\n    let info = await getModelJSON(pretrained_model_name_or_path, 'config.json', true, options);\n    return info;\n}\n\n/**\n * Base class for all configuration classes. For more information, see the corresponding\n * [Python documentation](https://huggingface.co/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig).\n */\nexport class PretrainedConfig {\n    // NOTE: Typo in original\n\n    /**\n     * Create a new PreTrainedTokenizer instance.\n     * @param {Object} configJSON The JSON of the config.\n     */\n    constructor(configJSON) {\n        this.model_type = null;\n        this.is_encoder_decoder = false;\n\n        Object.assign(this, configJSON);\n    }\n\n    /**\n     * Loads a pre-trained config from the given `pretrained_model_name_or_path`. \n     * \n     * @param {string} pretrained_model_name_or_path The path to the pre-trained config.\n     * @param {PretrainedOptions} options Additional options for loading the config.\n     * @throws {Error} Throws an error if the config.json is not found in the `pretrained_model_name_or_path`.\n     * \n     * @returns {Promise<PretrainedConfig>} A new instance of the `PretrainedConfig` class.\n     */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n    } = {}) {\n\n        let data = config ?? await loadConfig(pretrained_model_name_or_path, {\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n        })\n        return new this(data);\n    }\n}\n\n/**\n * Helper class which is used to instantiate pretrained configs with the `from_pretrained` function.\n * \n * @example\n * let config = await AutoConfig.from_pretrained('bert-base-uncased'); \n */\nexport class AutoConfig {\n    /** @type {PretrainedConfig.from_pretrained} */\n    static async from_pretrained(...args) {\n        return PretrainedConfig.from_pretrained(...args);\n    }\n}\n","\n/**\n * @file Classes, functions, and utilities for generation.\n * \n * @todo Describe how to create a custom `GenerationConfig`.\n * \n * @module utils/generation\n */\nimport { Tensor } from './tensor.js';\nimport {\n    Callable,\n    exists,\n} from './core.js';\nimport {\n    max,\n    softmax,\n    log_softmax,\n    getTopItems,\n} from './maths.js';\n\n/**\n * A class representing a list of logits processors. A logits processor is a function that modifies the logits\n * output of a language model. This class provides methods for adding new processors and applying all processors to a\n * batch of logits.\n *\n * @extends Callable\n */\nexport class LogitsProcessorList extends Callable {\n    /**\n     * Constructs a new instance of `LogitsProcessorList`.\n     */\n    constructor() {\n        super();\n        this.processors = [];\n    }\n\n    /**\n     * Adds a new logits processor to the list.\n     *\n     * @param {LogitsProcessor} item The logits processor function to add.\n     */\n    push(item) {\n        this.processors.push(item);\n    }\n\n    /**\n     * Adds multiple logits processors to the list.\n     *\n     * @param {LogitsProcessor[]} items The logits processor functions to add.\n     */\n    extend(items) {\n        this.processors.push(...items);\n    }\n\n    /**\n     * Applies all logits processors in the list to a batch of logits, modifying them in-place.\n     *\n     * @param {number[]} input_ids The input IDs for the language model.\n     * @param {number[][]} batchedLogits A 2D array of logits, where each row corresponds to a single\n     *                                                input sequence in the batch.\n     */\n    _call(input_ids, batchedLogits) {\n        // NOTE: This is different from the Python code, since vanilla JS does not support vectorized operations. \n        // As a result, we apply each processor to each item in the batch.\n        for (let logits of batchedLogits) {\n            // Modifies logits inplace\n            this.processors.forEach(\n                func => func(input_ids, logits)\n            )\n        }\n    }\n\n    [Symbol.iterator]() {\n        return this.processors.values();\n    }\n}\n\n/**\n * Base class for processing logits.\n * @extends Callable\n */\nexport class LogitsProcessor extends Callable {\n    /**\n     * Apply the processor to the input logits.\n     *\n     * @abstract\n     * @param {Array} input_ids The input ids.\n     * @param {Tensor} logits The logits to process.\n     * @throws {Error} Throws an error if `_call` is not implemented in the subclass.\n     */\n    _call(input_ids, logits) {\n        throw Error(\"`_call` should be implemented in a subclass\")\n    }\n}\n\n/**\n * A logits processor that forces a specific token to be generated by the decoder.\n * \n * @extends LogitsProcessor\n */\nexport class ForceTokensLogitsProcessor extends LogitsProcessor {\n    /**\n     * Constructs a new instance of `ForceTokensLogitsProcessor`.\n     * \n     * @param {Array} forced_decoder_ids The ids of tokens that should be forced.\n     */\n    constructor(forced_decoder_ids) {\n        super();\n        this.force_token_map = Object.fromEntries(forced_decoder_ids ?? []);\n    }\n\n    /**\n     * Apply the processor to the input logits.\n     *\n     * @param {Array} input_ids The input ids.\n     * @param {Tensor} logits The logits to process.\n     * @returns {Tensor} The processed logits.\n     */\n    _call(input_ids, logits) {\n        let map = this.force_token_map[input_ids.length];\n        if (exists(map)) { // There exists a mapping\n            logits.data.fill(-Infinity)\n            logits.data[map] = 0;\n        }\n        return logits;\n    }\n}\n\n/**\n * A LogitsProcessor that forces a BOS token at the beginning of the generated sequence.\n * @extends LogitsProcessor\n */\nexport class ForcedBOSTokenLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a ForcedBOSTokenLogitsProcessor.\n     * @param {number} bos_token_id The ID of the beginning-of-sequence token to be forced.\n     */\n    constructor(bos_token_id) {\n        super();\n        this.bos_token_id = bos_token_id;\n    }\n\n    /**\n     * Apply the BOS token forcing to the logits.\n     * @param {Array} input_ids The input IDs.\n     * @param {Object} logits The logits.\n     * @returns {Object} The logits with BOS token forcing.\n     */\n    _call(input_ids, logits) {\n        if (input_ids.length === 1) {\n            logits.data.fill(-Infinity)\n            logits.data[this.bos_token_id] = 0;\n        }\n        return logits;\n    }\n}\n\n/**\n * A logits processor that forces end-of-sequence token probability to 1.\n * \n * @extends LogitsProcessor\n */\nexport class ForcedEOSTokenLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a ForcedEOSTokenLogitsProcessor.\n     * @param {number} max_length Max length of the sequence.\n     * @param {number|number[]} forced_eos_token_id The ID of the end-of-sequence token to be forced.\n     */\n    constructor(max_length, forced_eos_token_id) {\n        super();\n        this.max_length = max_length;\n        this.forced_eos_token_id = forced_eos_token_id;\n    }\n\n    /**\n     * Apply the processor to input_ids and logits.\n     * \n     * @param {number[]} input_ids The input ids.\n     * @param {Tensor} logits The logits tensor.\n     */\n    _call(input_ids, logits) {\n        // console.log('call ForcedEOSTokenLogitsProcessor')\n        // TODO\n    }\n}\n\n/**\n * A LogitsProcessor that suppresses a list of tokens as soon as the `generate` function starts\n * generating using `begin_index` tokens. This should ensure that the tokens defined by\n * `begin_suppress_tokens` at not sampled at the begining of the generation.\n * @extends LogitsProcessor\n */\nexport class SuppressTokensAtBeginLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a SuppressTokensAtBeginLogitsProcessor.\n     * @param {number[]} begin_suppress_tokens The IDs of the tokens to suppress.\n     * @param {number} begin_index The number of tokens to generate before suppressing tokens.\n     */\n    constructor(begin_suppress_tokens, begin_index) {\n        super();\n        this.begin_suppress_tokens = begin_suppress_tokens;\n        this.begin_index = begin_index;\n    }\n\n    /**\n     * Apply the BOS token forcing to the logits.\n     * @param {Array} input_ids The input IDs.\n     * @param {Object} logits The logits.\n     * @returns {Object} The logits with BOS token forcing.\n     */\n    _call(input_ids, logits) {\n        if (input_ids.length === this.begin_index) {\n            for (let token_id of this.begin_suppress_tokens) {\n                logits.data[token_id] = -Infinity;\n            }\n        }\n        return logits;\n    }\n}\n\n/**\n * A LogitsProcessor that handles adding timestamps to generated text.\n * @extends LogitsProcessor\n */\nexport class WhisperTimeStampLogitsProcessor extends LogitsProcessor {\n    /**\n     * Constructs a new WhisperTimeStampLogitsProcessor.\n     * @param {Object} generate_config The config object passed to the `generate()` method of a transformer model.\n     * @param {number} generate_config.eos_token_id The ID of the end-of-sequence token.\n     * @param {number} generate_config.no_timestamps_token_id The ID of the token used to indicate that a token should not have a timestamp.\n     * @param {number[][]} [generate_config.forced_decoder_ids] An array of two-element arrays representing decoder IDs that are forced to appear in the output. The second element of each array indicates whether the token is a timestamp.\n     * @param {number} [generate_config.max_initial_timestamp_index] The maximum index at which an initial timestamp can appear.\n     */\n    constructor(generate_config) {\n        super();\n        this.eos_token_id = generate_config.eos_token_id;\n        this.no_timestamps_token_id = generate_config.no_timestamps_token_id;\n        this.timestamp_begin = this.no_timestamps_token_id + 1;\n\n        this.begin_index = (generate_config.forced_decoder_ids || []).length + 2;\n        if (generate_config.forced_decoder_ids.slice(-1)[0][1] === this.no_timestamps_token_id) {\n            this.begin_index -= 1;\n        }\n        this.max_initial_timestamp_index = generate_config.max_initial_timestamp_index;\n\n    }\n\n    /**\n     * Modify the logits to handle timestamp tokens.\n     * @param {Array} input_ids The input sequence of tokens.\n     * @param {Tensor} logits The logits output by the model.\n     * @returns {Tensor} The modified logits.\n     */\n    _call(input_ids, logits) {\n        // suppress <|notimestamps|> which is handled by without_timestamps\n        logits.data[this.no_timestamps_token_id] = -Infinity;\n\n        if (input_ids.length === this.begin_index - 1) {\n            logits.data.fill(-Infinity);\n            logits.data[this.timestamp_begin] = 0;\n            return logits;\n        }\n\n        // timestamps have to appear in pairs, except directly before eos_token; mask logits accordingly\n        const seq = input_ids.slice(this.begin_index);\n        const last_was_timestamp = seq.length >= 1 && seq[seq.length - 1] >= this.timestamp_begin;\n        const penultimate_was_timestamp = seq.length < 2 || seq[seq.length - 2] >= this.timestamp_begin;\n\n        if (last_was_timestamp) {\n            if (penultimate_was_timestamp) { // has to be non-timestamp\n                logits.data.subarray(this.timestamp_begin).fill(-Infinity);\n            } else { // cannot be normal text tokens\n                logits.data.subarray(0, this.eos_token_id).fill(-Infinity);\n            }\n        }\n\n        // apply the `max_initial_timestamp` option\n        if (input_ids.length === this.begin_index && this.max_initial_timestamp_index !== null) {\n            const last_allowed = this.timestamp_begin + this.max_initial_timestamp_index;\n            logits.data.subarray(last_allowed + 1).fill(-Infinity);\n        }\n\n        // if sum of probability over timestamps is above any other token, sample timestamp\n        const logprobs = log_softmax(logits.data);\n        const timestamp_logprob = Math.log(logprobs.subarray(this.timestamp_begin).map(Math.exp).reduce((a, b) => a + b));\n        const max_text_token_logprob = max(logprobs.subarray(0, this.timestamp_begin))[0];\n\n        if (timestamp_logprob > max_text_token_logprob) {\n            logits.data.subarray(0, this.timestamp_begin).fill(-Infinity);\n        }\n\n        return logits;\n    }\n}\n\n/**\n * A logits processor that disallows ngrams of a certain size to be repeated.\n * \n * @extends LogitsProcessor\n */\nexport class NoRepeatNGramLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a NoRepeatNGramLogitsProcessor.\n     * @param {number} no_repeat_ngram_size The no-repeat-ngram size. All ngrams of this size can only occur once.\n     */\n    constructor(no_repeat_ngram_size) {\n        super();\n        this.no_repeat_ngram_size = no_repeat_ngram_size;\n    }\n\n    /**\n     * Generate n-grams from a sequence of token ids.\n     * @param {number[]} prevInputIds List of previous input ids\n     * @returns {Map<string, number[]>} Map of generated n-grams\n     */\n    getNgrams(prevInputIds) {\n        const curLen = prevInputIds.length;\n\n        /**@type {number[][]} */\n        const ngrams = [];\n        for (let j = 0; j < curLen + 1 - this.no_repeat_ngram_size; ++j) {\n            const ngram = [];\n            for (let k = 0; k < this.no_repeat_ngram_size; ++k) {\n                ngram.push(prevInputIds[j + k]);\n            }\n            ngrams.push(ngram);\n        }\n\n        /** @type {Map<string, number[]>} */\n        const generatedNgram = new Map();\n        for (const ngram of ngrams) {\n            const prevNgram = ngram.slice(0, ngram.length - 1);\n            const prevNgramKey = JSON.stringify(prevNgram);\n            const prevNgramValue = generatedNgram.get(prevNgramKey) ?? [];\n            prevNgramValue.push(ngram[ngram.length - 1]);\n            generatedNgram.set(prevNgramKey, prevNgramValue);\n        }\n        return generatedNgram;\n    }\n\n    /**\n     * Generate n-grams from a sequence of token ids.\n     * @param {Map<string, number[]>} bannedNgrams Map of banned n-grams\n     * @param {number[]} prevInputIds List of previous input ids\n     * @returns {number[]} Map of generated n-grams\n     */\n    getGeneratedNgrams(bannedNgrams, prevInputIds) {\n        const ngramIdx = prevInputIds.slice(prevInputIds.length + 1 - this.no_repeat_ngram_size, prevInputIds.length);\n        const banned = bannedNgrams.get(JSON.stringify(ngramIdx)) ?? [];\n        return banned;\n    }\n\n    /**\n     * Calculate banned n-gram tokens\n     * @param {number[]} prevInputIds List of previous input ids\n     * @returns {number[]} Map of generated n-grams\n     */\n    calcBannedNgramTokens(prevInputIds) {\n        const bannedTokens = [];\n        if (prevInputIds.length + 1 < this.no_repeat_ngram_size) {\n            // return no banned tokens if we haven't generated no_repeat_ngram_size tokens yet\n            return bannedTokens;\n\n        } else {\n            const generatedNgrams = this.getNgrams(prevInputIds);\n            const bannedTokens = this.getGeneratedNgrams(generatedNgrams, prevInputIds);\n            return bannedTokens;\n        }\n    }\n\n    /**\n     * Apply the no-repeat-ngram processor to the logits.\n     * @param {Array} input_ids The input IDs.\n     * @param {Object} logits The logits.\n     * @returns {Object} The logits with no-repeat-ngram processing.\n     */\n    _call(input_ids, logits) {\n        const bannedTokens = this.calcBannedNgramTokens(input_ids);\n\n        for (const token of bannedTokens) {\n            logits.data[token] = -Infinity;\n        }\n        return logits;\n    }\n}\n\n/**\n * A logits processor that penalises repeated output tokens.\n * \n * @extends LogitsProcessor\n */\nexport class RepetitionPenaltyLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a RepetitionPenaltyLogitsProcessor.\n     * @param {number} penalty The penalty to apply for repeated tokens.\n     */\n    constructor(penalty) {\n        super();\n        this.penalty = penalty;\n    }\n\n    /**\n     * Apply the repetition penalty to the logits.\n     * @param {Array} input_ids The input IDs.\n     * @param {Object} logits The logits.\n     * @returns {Object} The logits with repetition penalty processing.\n     */\n    _call(input_ids, logits) {\n        // Modify the logits corresponding to each element in `input_ids`.\n        // As a consequence, the logits corresponding to tokens that appear\n        // many times in the output will be penalised more.\n        for (const input_id of input_ids) {\n            if (logits.data[input_id] < 0) {\n                logits.data[input_id] *= this.penalty;\n            } else {\n                logits.data[input_id] /= this.penalty;\n            }\n        }\n        return logits\n    }\n}\n\n/**\n * A logits processor that enforces a minimum number of tokens.\n * \n * @extends LogitsProcessor\n */\nexport class MinLengthLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a MinLengthLogitsProcessor.\n     * @param {number} min_length The minimum length below which the score of `eos_token_id` is set to negative infinity.\n     * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.\n     */\n    constructor(min_length, eos_token_id) {\n        super();\n        this.min_length = min_length;\n        this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];\n    }\n\n    /**\n     * Apply logit processor.\n     * @param {Array} input_ids The input IDs.\n     * @param {Object} logits The logits.\n     * @returns {Object} The processed logits.\n     */\n    _call(input_ids, logits) {\n        if (input_ids.length < this.min_length) {\n            for (const eos_token of this.eos_token_id) {\n                logits.data[eos_token] = -Infinity;\n            }\n        }\n\n        return logits\n    }\n}\n\n/**\n * A logits processor that enforces a minimum number of new tokens.\n * \n * @extends LogitsProcessor\n */\nexport class MinNewTokensLengthLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a MinNewTokensLengthLogitsProcessor.\n     * @param {number} prompt_length_to_skip The input tokens length.\n     * @param {number} min_new_tokens The minimum *new* tokens length below which the score of `eos_token_id` is set to negative infinity.\n     * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.\n     */\n    constructor(prompt_length_to_skip, min_new_tokens, eos_token_id) {\n        super();\n        this.prompt_length_to_skip = prompt_length_to_skip;\n        this.min_new_tokens = min_new_tokens;\n        this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];\n    }\n\n    /**\n     * Apply logit processor.\n     * @param {Array} input_ids The input IDs.\n     * @param {Object} logits The logits.\n     * @returns {Object} The processed logits.\n     */\n    _call(input_ids, logits) {\n        const new_tokens_length = input_ids.length - this.prompt_length_to_skip;\n        if (new_tokens_length < this.min_new_tokens) {\n            for (const eos_token of this.eos_token_id) {\n                logits.data[eos_token] = -Infinity;\n            }\n        }\n\n        return logits\n    }\n}\n\n/**\n * Class that holds a configuration for a generation task.\n */\nexport class GenerationConfig {\n    /**\n     * Create a GenerationConfig object\n     * @param {Object} [kwargs={}] The configuration parameters. If not set, the default values are used.\n     * @param {number} [kwargs.max_length=20] The maximum length the generated tokens can have. Corresponds to the length of the input prompt + `max_new_tokens`. Its effect is overridden by `max_new_tokens`, if also set.\n     * @param {number} [kwargs.max_new_tokens=null] The maximum numbers of tokens to generate, ignoring the number of tokens in the prompt.\n     * @param {number} [kwargs.min_length=0] The minimum length of the sequence to be generated. Corresponds to the length of the input prompt + `min_new_tokens`. Its effect is overridden by `min_new_tokens`, if also set.\n     * @param {number} [kwargs.min_new_tokens=null] The minimum numbers of tokens to generate, ignoring the number of tokens in the prompt.\n     * @param {boolean|\"never\"} [kwargs.early_stopping=false] Controls the stopping condition for beam-based methods, like beam-search. It accepts the following values:\n     * - `true`, where the generation stops as soon as there are `num_beams` complete candidates;\n     * - `false`, where an heuristic is applied and the generation stops when is it very unlikely to find better candidates;\n     * - `\"never\"`, where the beam search procedure only stops when there cannot be better candidates (canonical beam search algorithm).\n     * @param {number} [kwargs.max_time=null] The maximum amount of time you allow the computation to run for in seconds. Generation will still finish the current pass after allocated time has been passed.\n     *\n     * @param {boolean} [kwargs.do_sample=false] Whether or not to use sampling; use greedy decoding otherwise.\n     * @param {number} [kwargs.num_beams=1] Number of beams for beam search. 1 means no beam search.\n     * @param {number} [kwargs.num_beam_groups=1] Number of groups to divide `num_beams` into in order to ensure diversity among different groups of beams. See [this paper](https://arxiv.org/pdf/1610.02424.pdf) for more details.\n     * @param {number} [kwargs.penalty_alpha=null] The values balance the model confidence and the degeneration penalty in contrastive search decoding.\n     * @param {boolean} [kwargs.use_cache=true] Whether or not the model should use the past last key/values attentions (if applicable to the model) to speed up decoding.\n     *\n     * @param {number} [kwargs.temperature=1.0] The value used to modulate the next token probabilities.\n     * @param {number} [kwargs.top_k=50] The number of highest probability vocabulary tokens to keep for top-k-filtering.\n     * @param {number} [kwargs.top_p=1.0] If set to float < 1, only the smallest set of most probable tokens with probabilities that add up to `top_p` or higher are kept for generation.\n     * @param {number} [kwargs.typical_p=1.0] Local typicality measures how similar the conditional probability of predicting a target token next is to the expected conditional probability of predicting a random token next, given the partial text already generated. If set to float < 1, the smallest set of the most locally typical tokens with probabilities that add up to `typical_p` or higher are kept for generation. See [this paper](https://arxiv.org/pdf/2202.00666.pdf) for more details.\n     * @param {number} [kwargs.epsilon_cutoff=0.0] If set to float strictly between 0 and 1, only tokens with a conditional probability greater than `epsilon_cutoff` will be sampled. In the paper, suggested values range from 3e-4 to 9e-4, depending on the size of the model. See [Truncation Sampling as Language Model Desmoothing](https://arxiv.org/abs/2210.15191) for more details.\n     * @param {number} [kwargs.eta_cutoff=0.0] Eta sampling is a hybrid of locally typical sampling and epsilon sampling. If set to float strictly between 0 and 1, a token is only considered if it is greater than either `eta_cutoff` or `sqrt(eta_cutoff) * exp(-entropy(softmax(next_token_logits)))`. The latter term is intuitively the expected next token probability, scaled by `sqrt(eta_cutoff)`. In the paper, suggested values range from 3e-4 to 2e-3, depending on the size of the model. See [Truncation Sampling as Language Model Desmoothing](https://arxiv.org/abs/2210.15191) for more details.\n     * @param {number} [kwargs.diversity_penalty=0.0] This value is subtracted from a beam's score if it generates a token same as any beam from other group at a particular time. Note that `diversity_penalty` is only effective if `group beam search` is enabled.\n     * @param {number} [kwargs.repetition_penalty=1.0] The parameter for repetition penalty. 1.0 means no penalty. See [this paper](https://arxiv.org/pdf/1909.05858.pdf) for more details.\n     * @param {number} [kwargs.encoder_repetition_penalty=1.0] The paramater for encoder_repetition_penalty. An exponential penalty on sequences that are not in the original input. 1.0 means no penalty.\n     * @param {number} [kwargs.length_penalty=1.0] Exponential penalty to the length that is used with beam-based generation. It is applied as an exponent to the sequence length, which in turn is used to divide the score of the sequence. Since the score is the log likelihood of the sequence (i.e. negative), `length_penalty` > 0.0 promotes longer sequences, while `length_penalty` < 0.0 encourages shorter sequences.\n     * @param {number} [kwargs.no_repeat_ngram_size=0] If set to int > 0, all ngrams of that size can only occur once.\n     * @param {number[][]} [kwargs.bad_words_ids=null] List of token ids that are not allowed to be generated. In order to get the token ids of the words that should not appear in the generated text, use `(await tokenizer(bad_words, {add_prefix_space: true, add_special_tokens: false})).input_ids`.\n     * @param {number[][]|number[][][]} [kwargs.force_words_ids=null] List of token ids that must be generated. If given a `number[][]`, this is treated as a simple list of words that must be included, the opposite to `bad_words_ids`. If given `number[][][]`, this triggers a [disjunctive constraint](https://github.com/huggingface/transformers/issues/14081), where one can allow different forms of each word.\n     * @param {boolean} [kwargs.renormalize_logits=false] Whether to renormalize the logits after applying all the logits processors or warpers (including the custom ones). It's highly recommended to set this flag to `true` as the search algorithms suppose the score logits are normalized but some logit processors or warpers break the normalization.\n     * @param {Object[]} [kwargs.constraints=null] Custom constraints that can be added to the generation to ensure that the output will contain the use of certain tokens as defined by `Constraint` objects, in the most sensible way possible.\n     * \n     * @param {number} [kwargs.forced_bos_token_id=null] The id of the token to force as the first generated token after the `decoder_start_token_id`. Useful for multilingual models like mBART where the first generated token needs to be the target language token.\n     * @param {number|number[]} [kwargs.forced_eos_token_id=null] The id of the token to force as the last generated token when `max_length` is reached. Optionally, use a list to set multiple *end-of-sequence* tokens.\n     * @param {boolean} [kwargs.remove_invalid_values=false] Whether to remove possible *nan* and *inf* outputs of the model to prevent the generation method to crash. Note that using `remove_invalid_values` can slow down generation.\n     * @param {number[]} [kwargs.exponential_decay_length_penalty=null] This Tuple adds an exponentially increasing length penalty, after a certain amount of tokens have been generated. The tuple shall consist of: `(start_index, decay_factor)` where `start_index` indicates where penalty starts and `decay_factor` represents the factor of exponential decay.\n     * @param {number[]} [kwargs.suppress_tokens=null] A list of tokens that will be suppressed at generation. The `SupressTokens` logit processor will set their log probs to `-inf` so that they are not sampled.\n     * @param {number[]} [kwargs.begin_suppress_tokens=null] A list of tokens that will be suppressed at the beginning of the generation. The `SupressBeginTokens` logit processor will set their log probs to `-inf` so that they are not sampled.\n     * @param {number[][]} [kwargs.forced_decoder_ids=null] A list of pairs of integers which indicates a mapping from generation indices to token indices that will be forced before sampling. For example, `[[1, 123]]` means the second generated token will always be a token of index 123.\n     * \n     * @param {number} [kwargs.num_return_sequences=1] The number of independently computed returned sequences for each element in the batch.\n     * @param {boolean} [kwargs.output_attentions=false] Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned tensors for more details.\n     * @param {boolean} [kwargs.output_hidden_states=false] Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for more details.\n     * @param {boolean} [kwargs.output_scores=false] Whether or not to return the prediction scores. See `scores` under returned tensors for more details.\n     * @param {boolean} [kwargs.return_dict_in_generate=false] Whether or not to return a `ModelOutput` instead of a plain tuple.\n     * \n     * @param {number} [kwargs.pad_token_id=null] The id of the *padding* token.\n     * @param {number} [kwargs.bos_token_id=null] The id of the *beginning-of-sequence* token.\n     * @param {number|number[]} [kwargs.eos_token_id=null] The id of the *end-of-sequence* token. Optionally, use a list to set multiple *end-of-sequence* tokens.\n     * \n     * @param {number} [kwargs.encoder_no_repeat_ngram_size=0] If set to int > 0, all ngrams of that size that occur in the `encoder_input_ids` cannot occur in the `decoder_input_ids`.\n     * @param {number} [kwargs.decoder_start_token_id=null] If an encoder-decoder model starts decoding with a different token than *bos*, the id of that token.\n     * \n     * @param {Object} [kwargs.generation_kwargs={}] Additional generation kwargs will be forwarded to the `generate` function of the model. Kwargs that are not present in `generate`'s signature will be used in the model forward pass.\n     */\n    constructor(kwargs = {}) {\n        // Parameters that control the length of the output\n        this.max_length = kwargs.max_length ?? 20;\n        this.max_new_tokens = kwargs.max_new_tokens ?? null;\n        this.min_length = kwargs.min_length ?? 0;\n        this.min_new_tokens = kwargs.min_new_tokens ?? null;\n        this.early_stopping = kwargs.early_stopping ?? false;\n        this.max_time = kwargs.max_time ?? null;\n\n        // Parameters that control the generation strategy used\n        this.do_sample = kwargs.do_sample ?? false;\n        this.num_beams = kwargs.num_beams ?? 1;\n        this.num_beam_groups = kwargs.num_beam_groups ?? 1;\n        this.penalty_alpha = kwargs.penalty_alpha ?? null;\n        this.use_cache = kwargs.use_cache ?? true;\n\n        // Parameters for manipulation of the model output logits\n        this.temperature = kwargs.temperature ?? 1.0;\n        this.top_k = kwargs.top_k ?? 50;\n        this.top_p = kwargs.top_p ?? 1.0;\n        this.typical_p = kwargs.typical_p ?? 1.0;\n        this.epsilon_cutoff = kwargs.epsilon_cutoff ?? 0.0;\n        this.eta_cutoff = kwargs.eta_cutoff ?? 0.0;\n        this.diversity_penalty = kwargs.diversity_penalty ?? 0.0;\n        this.repetition_penalty = kwargs.repetition_penalty ?? 1.0;\n        this.encoder_repetition_penalty = kwargs.encoder_repetition_penalty ?? 1.0;\n        this.length_penalty = kwargs.length_penalty ?? 1.0;\n        this.no_repeat_ngram_size = kwargs.no_repeat_ngram_size ?? 0;\n        this.bad_words_ids = kwargs.bad_words_ids ?? null;\n        this.force_words_ids = kwargs.force_words_ids ?? null;\n        this.renormalize_logits = kwargs.renormalize_logits ?? false;\n        this.constraints = kwargs.constraints ?? null;\n        this.forced_bos_token_id = kwargs.forced_bos_token_id ?? null;\n        this.forced_eos_token_id = kwargs.forced_eos_token_id ?? null;\n        this.remove_invalid_values = kwargs.remove_invalid_values ?? false;\n        this.exponential_decay_length_penalty = kwargs.exponential_decay_length_penalty ?? null;\n        this.suppress_tokens = kwargs.suppress_tokens ?? null;\n        this.begin_suppress_tokens = kwargs.begin_suppress_tokens ?? null;\n        this.forced_decoder_ids = kwargs.forced_decoder_ids ?? null;\n\n        // Parameters that define the output variables of `generate`\n        this.num_return_sequences = kwargs.num_return_sequences ?? 1;\n        this.output_attentions = kwargs.output_attentions ?? false;\n        this.output_hidden_states = kwargs.output_hidden_states ?? false;\n        this.output_scores = kwargs.output_scores ?? false;\n        this.return_dict_in_generate = kwargs.return_dict_in_generate ?? false;\n\n        // Special tokens that can be used at generation time\n        this.pad_token_id = kwargs.pad_token_id ?? null;\n        this.bos_token_id = kwargs.bos_token_id ?? null;\n        this.eos_token_id = kwargs.eos_token_id ?? null;\n\n        // Generation parameters exclusive to encoder-decoder models\n        this.encoder_no_repeat_ngram_size = kwargs.encoder_no_repeat_ngram_size ?? 0;\n        this.decoder_start_token_id = kwargs.decoder_start_token_id ?? null;\n\n        // Wild card\n        this.generation_kwargs = kwargs.generation_kwargs ?? {};\n    }\n}\n\n\n/**\n * Sampler is a base class for all sampling methods used for text generation.\n */\nexport class Sampler extends Callable {\n    /**\n     * Creates a new Sampler object with the specified generation config.\n     * @param {GenerationConfig} generation_config The generation config.\n     */\n    constructor(generation_config) {\n        super();\n        this.generation_config = generation_config;\n    }\n\n    /**\n     * Executes the sampler, using the specified logits.\n     * @param {Tensor} logits\n     * @param {number} index\n     * @returns {void}\n     */\n    _call(logits, index = -1) {\n        // Sample from logits, of dims [batch, sequence_length, vocab_size].\n        // If index is specified, sample from [batch, index, vocab_size].\n        return this.sample(logits, index);\n    }\n\n    /**\n     * Abstract method for sampling the logits.\n     * @param {Tensor} logits\n     * @param {number} index\n     * @throws {Error}\n     */\n    sample(logits, index) {\n        throw Error(\"sample should be implemented in subclasses.\")\n    }\n\n    /**\n     * Returns the specified logits as an array, with temperature applied.\n     * @param {Tensor} logits\n     * @param {number} index\n     * @returns {Array}\n     */\n    getLogits(logits, index) {\n        let vocabSize = logits.dims.at(-1);\n\n        let logs = logits.data;\n\n        if (index === -1) {\n            logs = logs.slice(-vocabSize);\n        } else {\n            let startIndex = index * vocabSize;\n            logs = logs.slice(startIndex, startIndex + vocabSize);\n        }\n\n        // add temperature\n        if (this.generation_config.temperature > 0) {\n            logs = logs.map(x => x / this.generation_config.temperature)\n        }\n        return logs;\n    }\n\n    /**\n     * Selects an item randomly based on the specified probabilities.\n     * @param {Array} probabilities An array of probabilities to use for selection.\n     * @returns {number} The index of the selected item.\n     */\n    randomSelect(probabilities) {\n        // Return index of chosen item\n        let sumProbabilities = probabilities.reduce((acc, curr) => acc + curr, 0);\n\n        let r = Math.random() * sumProbabilities;\n        for (let i = 0; i < probabilities.length; ++i) {\n            r -= probabilities[i];\n            if (r <= 0) {\n                return i;\n            }\n        }\n        return 0; // return first (most probable) as a fallback\n    }\n\n    /**\n     * Returns a Sampler object based on the specified options.\n     * @param {GenerationConfig} generation_config An object containing options for the sampler.\n     * @returns {Sampler} A Sampler object.\n     */\n    static getSampler(generation_config) {\n        // - *greedy decoding*: `num_beams=1` and `do_sample=False`\n        // - *contrastive search*: `penalty_alpha>0` and `top_k>1`\n        // - *multinomial sampling*: `num_beams=1` and `do_sample=True`\n        // - *beam-search decoding*: `num_beams>1` and `do_sample=False`\n        // - *beam-search multinomial sampling*: `num_beams>1` and `do_sample=True`\n        // - *diverse beam-search decoding*: `num_beams>1` and `num_beam_groups>1`\n        // - *constrained beam-search decoding*: `constraints!=None` or `force_words_ids!=None`\n\n        // NOTE: beam search is implemented directly into the generation function\n        if (generation_config.do_sample) {\n            return new MultinomialSampler(generation_config);\n\n        } else if (generation_config.num_beams > 1) {\n            return new BeamSearchSampler(generation_config);\n\n        } else {\n            if (generation_config.num_return_sequences > 1) {\n                throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${generation_config.num_return_sequences}.`)\n            }\n            return new GreedySampler(generation_config);\n        }\n    }\n}\n\n/**\n * Class representing a Greedy Sampler.\n * @extends Sampler\n */\nclass GreedySampler extends Sampler {\n    /**\n     * Sample the maximum probability of a given logits tensor.\n     * @param {Tensor} logits\n     * @param {number} [index=-1]\n     * @returns {Array} An array with a single tuple, containing the index of the maximum value and a meaningless score (since this is a greedy search).\n     */\n    sample(logits, index = -1) {\n        // NOTE: no need to do log_softmax here since we only take the maximum\n        let logs = this.getLogits(logits, index);\n        let argmax = max(logs)[1];\n\n        // Note: score is meaningless in this context, since we are performing\n        // greedy search (p = 1 => log(p) = 0)\n        return [\n            [argmax, 0]\n        ];\n    }\n}\n\n/**\n * Class representing a MultinomialSampler.\n * @extends Sampler\n */\nclass MultinomialSampler extends Sampler {\n\n    /**\n     * Sample from the logits.\n     * @param {Tensor} logits\n     * @param {number} index\n     * @returns {Array}\n     */\n    sample(logits, index = -1) {\n        let k = logits.dims.at(-1); // defaults to vocab size\n        if (this.generation_config.top_k > 0) {\n            k = Math.min(this.generation_config.top_k, k);\n        }\n\n        // Get logits of nth token\n        const logs = this.getLogits(logits, index);\n\n        // Get top k tokens\n        const topLogits = getTopItems(logs, k);\n\n        // Compute softmax over logits\n        const probabilities = softmax(topLogits.map(x => x[1]));\n\n        return Array.from({ length: this.generation_config.num_beams }, () => {\n            const sampledIndex = this.randomSelect(probabilities);\n            return [\n                topLogits[sampledIndex][0], // token id\n                Math.log(probabilities[sampledIndex]), // score\n            ];\n        });\n    }\n}\n\n\n/**\n * Class representing a BeamSearchSampler.\n * @extends Sampler\n */\nclass BeamSearchSampler extends Sampler {\n\n    /**\n     * Sample from the logits.\n     * @param {Tensor} logits\n     * @param {number} index\n     * @returns {Array}\n     */\n    sample(logits, index = -1) {\n        let k = logits.dims.at(-1); // defaults to vocab size\n        if (this.generation_config.top_k > 0) {\n            k = Math.min(this.generation_config.top_k, k);\n        }\n\n        // Get logits of nth token\n        const logs = this.getLogits(logits, index);\n\n        // Get top k tokens\n        const topLogits = getTopItems(logs, k);\n\n        // Compute softmax over logits\n        const probabilities = softmax(topLogits.map(x => x[1]));\n\n        return Array.from({ length: this.generation_config.num_beams }, (_, i) => {\n            return [\n                topLogits[i][0], // token id\n                Math.log(probabilities[i]), // score\n            ];\n        });\n    }\n}\n","\n/**\n * @file Processors are used to prepare non-textual inputs (e.g., image or audio) for a model.\n * \n * **Example:** Using a `WhisperProcessor` to prepare an audio input for a model.\n * ```javascript\n * import { AutoProcessor, read_audio } from '@xenova/transformers';\n *\n * let processor = await AutoProcessor.from_pretrained('openai/whisper-tiny.en');\n * let audio = await read_audio('https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/mlk.flac', 16000);\n * let { input_features } = await processor(audio);\n * // Tensor {\n * //   data: Float32Array(240000) [0.4752984642982483, 0.5597258806228638, 0.56434166431427, ...],\n * //   dims: [1, 80, 3000],\n * //   type: 'float32',\n * //   size: 240000,\n * // }\n * ```\n * \n * @module processors\n */\nimport {\n    Callable,\n    calculateDimensions,\n} from './utils/core.js';\n\nimport {\n    getModelJSON,\n} from './utils/hub.js';\n\nimport {\n    max,\n    softmax,\n    FFT,\n} from './utils/maths.js';\n\n\nimport { Tensor, transpose, cat, interpolate } from './utils/tensor.js';\n\nimport { RawImage } from './utils/image.js';\nimport { getMelFilters } from './utils/audio.js';\n\n\n// Helper functions\n\n/**\n * Converts bounding boxes from center format to corners format.\n * \n * @param {number[]} arr The coordinate for the center of the box and its width, height dimensions (center_x, center_y, width, height)\n * @returns {number[]} The coodinates for the top-left and bottom-right corners of the box (top_left_x, top_left_y, bottom_right_x, bottom_right_y)\n */\nfunction center_to_corners_format([centerX, centerY, width, height]) {\n    return [\n        centerX - width / 2,\n        centerY - height / 2,\n        centerX + width / 2,\n        centerY + height / 2\n    ];\n}\n\n/**\n * Post-processes the outputs of the model (for object detection).\n * @param {Object} outputs The outputs of the model that must be post-processed\n * @param {Tensor} outputs.logits The logits\n * @param {Tensor} outputs.pred_boxes The predicted boxes.\n * @return {Object[]} An array of objects containing the post-processed outputs.\n */\nfunction post_process_object_detection(outputs, threshold = 0.5, target_sizes = null) {\n    const out_logits = outputs.logits;\n    const out_bbox = outputs.pred_boxes;\n    const [batch_size, num_boxes, num_classes] = out_logits.dims;\n\n    if (target_sizes !== null && target_sizes.length !== batch_size) {\n        throw Error(\"Make sure that you pass in as many target sizes as the batch dimension of the logits\")\n    }\n    let toReturn = [];\n    for (let i = 0; i < batch_size; ++i) {\n        let target_size = target_sizes !== null ? target_sizes[i] : null;\n        let info = {\n            boxes: [],\n            classes: [],\n            scores: []\n        }\n        let logits = out_logits[i];\n        let bbox = out_bbox[i];\n\n        for (let j = 0; j < num_boxes; ++j) {\n            let logit = logits[j];\n\n            // Get most probable class\n            let maxIndex = max(logit.data)[1];\n\n            if (maxIndex === num_classes - 1) {\n                // This is the background class, skip it\n                continue;\n            }\n\n            // Compute softmax over classes\n            let probs = softmax(logit.data);\n\n            let score = probs[maxIndex];\n            if (score > threshold) {\n                // Some class has a high enough probability\n                /** @type {number[]} */\n                let box = bbox[j].data;\n\n                // convert to [x0, y0, x1, y1] format\n                box = center_to_corners_format(box)\n                if (target_size !== null) {\n                    box = box.map((x, i) => x * target_size[(i + 1) % 2])\n                }\n\n                info.boxes.push(box);\n                info.classes.push(maxIndex);\n                info.scores.push(score);\n            }\n        }\n        toReturn.push(info);\n    }\n    return toReturn;\n}\n\n/**\n * Named tuple to indicate the order we are using is (height x width), even though\n * the Graphics’ industry standard is (width x height).\n * @typedef {[height: number, width: number]} HeightWidth\n */\n\n/**\n * Base class for feature extractors.\n *\n * @extends Callable\n */\nexport class FeatureExtractor extends Callable {\n    /**\n     * Constructs a new FeatureExtractor instance.\n     *\n     * @param {Object} config The configuration for the feature extractor.\n     */\n    constructor(config) {\n        super();\n        this.config = config\n    }\n}\n\n/**\n * @typedef {object} ImageFeatureExtractorResult\n * @property {Tensor} pixel_values The pixel values of the batched preprocessed images.\n * @property {HeightWidth[]} original_sizes Array of two-dimensional tuples like [[480, 640]].\n * @property {HeightWidth[]} reshaped_input_sizes Array of two-dimensional tuples like [[1000, 1330]].\n */\n\n/**\n * Feature extractor for image models.\n *\n * @extends FeatureExtractor\n */\nexport class ImageFeatureExtractor extends FeatureExtractor {\n\n    /**\n     * Constructs a new ImageFeatureExtractor instance.\n     *\n     * @param {Object} config The configuration for the feature extractor.\n     * @param {number[]} config.image_mean The mean values for image normalization.\n     * @param {number[]} config.image_std The standard deviation values for image normalization.\n     * @param {boolean} config.do_rescale Whether to rescale the image pixel values to the [0,1] range.\n     * @param {number} config.rescale_factor The factor to use for rescaling the image pixel values.\n     * @param {boolean} config.do_normalize Whether to normalize the image pixel values.\n     * @param {boolean} config.do_resize Whether to resize the image.\n     * @param {number} config.resample What method to use for resampling.\n     * @param {number} config.size The size to resize the image to.\n     */\n    constructor(config) {\n        super(config);\n\n        this.image_mean = this.config.image_mean;\n        this.image_std = this.config.image_std;\n\n        this.resample = this.config.resample ?? 2; // 2 => bilinear\n        this.do_rescale = this.config.do_rescale ?? true;\n        this.rescale_factor = this.config.rescale_factor ?? (1 / 255);\n        this.do_normalize = this.config.do_normalize;\n\n        this.do_resize = this.config.do_resize;\n        this.do_thumbnail = this.config.do_thumbnail;\n        this.size = this.config.size;\n\n        this.do_center_crop = this.config.do_center_crop;\n        this.crop_size = this.config.crop_size;\n        this.do_convert_rgb = this.config.do_convert_rgb ?? true;\n\n        this.pad_size = this.config.pad_size;\n        this.do_pad = this.config.do_pad;\n\n        if (this.do_pad && !this.pad_size && this.size.width !== undefined && this.size.height !== undefined) {\n            // Should pad, but no pad size specified\n            // We infer the pad size from the resize size\n            this.pad_size = this.size\n        }\n    }\n\n    /**\n     * Resize the image to make a thumbnail. The image is resized so that no dimension is larger than any\n     * corresponding dimension of the specified size.\n     * @param {RawImage} image The image to be resized.\n     * @param {{height:number, width:number}} size The size `{\"height\": h, \"width\": w}` to resize the image to.\n     * @param {string | 0 | 1 | 2 | 3 | 4 | 5} [resample=2] The resampling filter to use.\n     * @returns {Promise<RawImage>} The resized image.\n     */\n    async thumbnail(image, size, resample = 2) {\n        const input_height = image.height;\n        const input_width = image.width;\n\n        const output_height = size.height;\n        const output_width = size.width;\n\n        // We always resize to the smallest of either the input or output size.\n        let height = Math.min(input_height, output_height)\n        let width = Math.min(input_width, output_width)\n\n        if (height === input_height && width === input_width) {\n            return image;\n        }\n        if (input_height > input_width) {\n            width = Math.floor(input_width * height / input_height);\n        } else if (input_width > input_height) {\n            height = Math.floor(input_height * width / input_width);\n        }\n        return await image.resize(width, height, { resample });\n    }\n\n    /**\n     * @typedef {object} PreprocessedImage\n     * @property {HeightWidth} original_size The original size of the image.\n     * @property {HeightWidth} reshaped_input_size The reshaped input size of the image.\n     * @property {Tensor} pixel_values The pixel values of the preprocessed image.\n     */\n\n    /**\n     * Preprocesses the given image.\n     *\n     * @param {RawImage} image The image to preprocess.\n     * @returns {Promise<PreprocessedImage>} The preprocessed image.\n     */\n    async preprocess(image) {\n\n        // First, convert image to RGB if specified in config.\n        if (this.do_convert_rgb) {\n            image = image.rgb();\n        }\n\n        const srcWidth = image.width;   // original width\n        const srcHeight = image.height; // original height\n\n        // Next, resize all images\n        if (this.do_resize) {\n            // TODO:\n            // For efficiency reasons, it might be best to merge the resize and center crop operations into one.\n\n            // `this.size` comes in many forms, so we need to handle them all here:\n            // 1. `this.size` is an integer, in which case we resize the image to be a square \n\n            let shortest_edge;\n            let longest_edge;\n\n            if (this.do_thumbnail) {\n                // NOTE: custom logic for `Donut` models\n                const { height, width } = this.size;\n                shortest_edge = Math.min(height, width)\n            }\n            // Support both formats for backwards compatibility\n            else if (Number.isInteger(this.size)) {\n                shortest_edge = this.size;\n                longest_edge = this.config.max_size ?? shortest_edge;\n\n            } else {\n                // Extract known properties from `this.size`\n                shortest_edge = this.size.shortest_edge;\n                longest_edge = this.size.longest_edge;\n            }\n\n            // If `longest_edge` and `shortest_edge` are set, maintain aspect ratio and resize to `shortest_edge`\n            // while keeping the largest dimension <= `longest_edge`\n            if (shortest_edge !== undefined || longest_edge !== undefined) {\n                // http://opensourcehacker.com/2011/12/01/calculate-aspect-ratio-conserving-resize-for-images-in-javascript/\n                // Try resize so that shortest edge is `this.shortest_edge` (target)\n                const shortResizeFactor = shortest_edge === undefined\n                    ? 1 // If `shortest_edge` is not set, don't upscale\n                    : Math.max(shortest_edge / srcWidth, shortest_edge / srcHeight);\n\n                const newWidth = srcWidth * shortResizeFactor;\n                const newHeight = srcHeight * shortResizeFactor;\n\n                // The new width and height might be greater than `this.longest_edge`, so\n                // we downscale again to ensure the largest dimension is `this.longest_edge` \n                const longResizeFactor = longest_edge === undefined\n                    ? 1 // If `longest_edge` is not set, don't downscale\n                    : Math.min(longest_edge / newWidth, longest_edge / newHeight);\n\n                // To avoid certain floating point precision issues, we round to 2 decimal places\n                const finalWidth = Math.floor(Number((newWidth * longResizeFactor).toFixed(2)));\n                const finalHeight = Math.floor(Number((newHeight * longResizeFactor).toFixed(2)));\n\n                // Perform resize\n                image = await image.resize(finalWidth, finalHeight, {\n                    resample: this.resample,\n                });\n\n            } else if (this.size.width !== undefined && this.size.height !== undefined) {\n                // If `width` and `height` are set, resize to those dimensions\n                image = await image.resize(this.size.width, this.size.height, {\n                    resample: this.resample,\n                });\n            } else {\n                throw new Error(`Could not resize image due to unsupported \\`this.size\\` option in config: ${JSON.stringify(this.size)}`);\n            }\n        }\n\n        // Resize the image using thumbnail method.\n        if (this.do_thumbnail) {\n            image = await this.thumbnail(image, this.size, this.resample);\n        }\n\n        if (this.do_center_crop) {\n\n            let crop_width;\n            let crop_height;\n            if (Number.isInteger(this.crop_size)) {\n                crop_width = this.crop_size;\n                crop_height = this.crop_size;\n            } else {\n                crop_width = this.crop_size.width;\n                crop_height = this.crop_size.height;\n            }\n\n            image = await image.center_crop(crop_width, crop_height);\n        }\n\n        /** @type {HeightWidth} */\n        let reshaped_input_size = [image.height, image.width];\n\n        // TODO is it okay to pad before rescaling/normalizing?\n        if (this.do_pad && this.pad_size) {\n            let left = 0;\n            let right = this.pad_size.width - image.width;\n            let top = 0;\n            let bottom = this.pad_size.height - image.height;\n\n            image = await image.pad([left, right, top, bottom]);\n        }\n\n        const pixelData = Float32Array.from(image.data);\n\n        if (this.do_rescale) {\n            for (let i = 0; i < pixelData.length; ++i) {\n                pixelData[i] = this.rescale_factor * pixelData[i];\n            }\n        }\n\n        if (this.do_normalize) {\n            let image_mean = this.image_mean;\n            if (!Array.isArray(this.image_mean)) {\n                image_mean = new Array(image.channels).fill(image_mean);\n            }\n\n            let image_std = this.image_std;\n            if (!Array.isArray(this.image_std)) {\n                image_std = new Array(image.channels).fill(image_mean);\n            }\n\n            if (image_mean.length !== image.channels || image_std.length !== image.channels) {\n                throw new Error(`When set to arrays, the length of \\`image_mean\\` (${image_mean.length}) and \\`image_std\\` (${image_std.length}) must match the number of channels in the image (${image.channels}).`);\n            }\n\n            for (let i = 0; i < pixelData.length; i += image.channels) {\n                for (let j = 0; j < image.channels; ++j) {\n                    pixelData[i + j] = (pixelData[i + j] - this.image_mean[j]) / this.image_std[j];\n                }\n            }\n        }\n\n        // convert to channel dimension format:\n        let imgDims = [image.height, image.width, image.channels];\n        let img = new Tensor('float32', pixelData, imgDims);\n        let transposed = transpose(img, [2, 0, 1]); // hwc -> chw\n\n        return {\n            original_size: [srcHeight, srcWidth],\n            reshaped_input_size: reshaped_input_size,\n            pixel_values: transposed,\n        }\n    }\n\n    /**\n     * Calls the feature extraction process on an array of image\n     * URLs, preprocesses each image, and concatenates the resulting\n     * features into a single Tensor.\n     * @param {any[]} images The URL(s) of the image(s) to extract features from.\n     * @param {...any} args Additional arguments.\n     * @returns {Promise<ImageFeatureExtractorResult>} An object containing the concatenated pixel values (and other metadata) of the preprocessed images.\n     */\n    async _call(images, ...args) {\n        if (!Array.isArray(images)) {\n            images = [images];\n        }\n        /** @type {PreprocessedImage[]} */\n        const imageData = await Promise.all(images.map(x => this.preprocess(x)));\n\n        // TODO:\n\n        // Concatenate pixel values\n        // TEMP: Add batch dimension so that concat works\n        imageData.forEach(x => x.pixel_values.dims = [1, ...x.pixel_values.dims]);\n        const pixel_values = cat(imageData.map(x => x.pixel_values));\n\n        return {\n            pixel_values: pixel_values,\n\n            // Original sizes of images\n            original_sizes: imageData.map(x => x.original_size),\n\n            // Reshaped sizes of images, before padding or cropping\n            reshaped_input_sizes: imageData.map(x => x.reshaped_input_size),\n        }\n    }\n\n}\n\nexport class ConvNextFeatureExtractor extends ImageFeatureExtractor { }\nexport class ViTFeatureExtractor extends ImageFeatureExtractor { }\nexport class MobileViTFeatureExtractor extends ImageFeatureExtractor { }\nexport class DeiTFeatureExtractor extends ImageFeatureExtractor { }\nexport class BeitFeatureExtractor extends ImageFeatureExtractor { }\nexport class DonutFeatureExtractor extends ImageFeatureExtractor { }\n\n/**\n * @typedef {object} DetrFeatureExtractorResultProps\n * @property {Tensor} pixel_mask\n * @typedef {ImageFeatureExtractorResult & DetrFeatureExtractorResultProps} DetrFeatureExtractorResult\n */\n\n/**\n * Detr Feature Extractor.\n *\n * @extends ImageFeatureExtractor\n */\nexport class DetrFeatureExtractor extends ImageFeatureExtractor {\n    /**\n     * Calls the feature extraction process on an array of image URLs, preprocesses\n     * each image, and concatenates the resulting features into a single Tensor.\n     * @param {any[]} urls The URL(s) of the image(s) to extract features from.\n     * @returns {Promise<DetrFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.\n     */\n    async _call(urls) {\n        const result = await super._call(urls);\n\n        // TODO support differently-sized images, for now assume all images are the same size.\n        // TODO support different mask sizes (not just 64x64)\n        // Currently, just fill pixel mask with 1s\n        const maskSize = [result.pixel_values.dims[0], 64, 64];\n        const pixel_mask = new Tensor(\n            'int64',\n            new BigInt64Array(maskSize.reduce((a, b) => a * b)).fill(1n),\n            maskSize\n        );\n\n        return { ...result, pixel_mask };\n    }\n\n    /**\n     * Post-processes the outputs of the model (for object detection).\n     * @param {Object} outputs The outputs of the model that must be post-processed\n     * @param {Tensor} outputs.logits The logits\n     * @param {Tensor} outputs.pred_boxes The predicted boxes.\n     * @return {Object[]} An array of objects containing the post-processed outputs.\n     */\n\n    /** @type {post_process_object_detection} */\n    post_process_object_detection(...args) {\n        return post_process_object_detection(...args);\n    }\n\n    /**\n     * Binarize the given masks using `object_mask_threshold`, it returns the associated values of `masks`, `scores` and `labels`.\n     * @param {Tensor} class_logits The class logits.\n     * @param {Tensor} mask_logits The mask logits.\n     * @param {number} object_mask_threshold A number between 0 and 1 used to binarize the masks.\n     * @param {number} num_labels The number of labels.\n     * @returns {[Tensor[], number[], number[]]} The binarized masks, the scores, and the labels.\n     */\n    remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold, num_labels) {\n\n        let mask_probs_item = [];\n        let pred_scores_item = [];\n        let pred_labels_item = [];\n\n        for (let j = 0; j < class_logits.dims[0]; ++j) {\n            let cls = class_logits[j];\n            let mask = mask_logits[j];\n\n            let pred_label = max(cls.data)[1];\n            if (pred_label === num_labels) {\n                // Is the background, so we ignore it\n                continue;\n            }\n\n            let scores = softmax(cls.data);\n            let pred_score = scores[pred_label];\n            if (pred_score > object_mask_threshold) {\n                mask_probs_item.push(mask);\n                pred_scores_item.push(pred_score);\n                pred_labels_item.push(pred_label);\n            }\n        }\n\n        return [mask_probs_item, pred_scores_item, pred_labels_item];\n\n    }\n\n    /**\n     * Checks whether the segment is valid or not.\n     * @param {Int32Array} mask_labels Labels for each pixel in the mask.\n     * @param {Tensor[]} mask_probs Probabilities for each pixel in the masks.\n     * @param {number} k The class id of the segment.\n     * @param {number} mask_threshold The mask threshold.\n     * @param {number} overlap_mask_area_threshold The overlap mask area threshold.\n     * @returns {[boolean, number[]]} Whether the segment is valid or not, and the indices of the valid labels.\n     */\n    check_segment_validity(\n        mask_labels,\n        mask_probs,\n        k,\n        mask_threshold = 0.5,\n        overlap_mask_area_threshold = 0.8\n    ) {\n        // mask_k is a 1D array of indices, indicating where the mask is equal to k\n        let mask_k = [];\n        let mask_k_area = 0;\n        let original_area = 0;\n\n        // Compute the area of all the stuff in query k\n        for (let i = 0; i < mask_labels.length; ++i) {\n            if (mask_labels[i] === k) {\n                mask_k.push(i);\n                ++mask_k_area;\n            }\n\n            if (mask_probs[k].data[i] >= mask_threshold) {\n                ++original_area;\n            }\n        }\n        let mask_exists = mask_k_area > 0 && original_area > 0;\n\n        // Eliminate disconnected tiny segments\n        if (mask_exists) {\n            // Perform additional check\n            let area_ratio = mask_k_area / original_area;\n            mask_exists = area_ratio > overlap_mask_area_threshold;\n        }\n\n        return [mask_exists, mask_k]\n    }\n\n    /**\n     * Computes the segments.\n     * @param {Tensor[]} mask_probs The mask probabilities.\n     * @param {number[]} pred_scores The predicted scores.\n     * @param {number[]} pred_labels The predicted labels.\n     * @param {number} mask_threshold The mask threshold.\n     * @param {number} overlap_mask_area_threshold The overlap mask area threshold.\n     * @param {Set<number>} label_ids_to_fuse The label ids to fuse.\n     * @param {number[]} target_size The target size of the image.\n     * @returns {[Tensor, Array<{id: number, label_id: number, score: number}>]} The computed segments.\n     */\n    compute_segments(\n        mask_probs,\n        pred_scores,\n        pred_labels,\n        mask_threshold,\n        overlap_mask_area_threshold,\n        label_ids_to_fuse = null,\n        target_size = null,\n    ) {\n        let [height, width] = target_size ?? mask_probs[0].dims;\n\n        let segmentation = new Tensor(\n            'int32',\n            new Int32Array(height * width),\n            [height, width]\n        );\n        let segments = [];\n\n        // 1. If target_size is not null, we need to resize the masks to the target size\n        if (target_size !== null) {\n            // resize the masks to the target size\n            for (let i = 0; i < mask_probs.length; ++i) {\n                mask_probs[i] = interpolate(mask_probs[i], target_size, 'bilinear', false);\n            }\n        }\n\n        // 2. Weigh each mask by its prediction score\n        // NOTE: `mask_probs` is updated in-place\n        // \n        // Temporary storage for the best label/scores for each pixel ([height, width]):\n        let mask_labels = new Int32Array(mask_probs[0].data.length);\n        let bestScores = new Float32Array(mask_probs[0].data.length);\n\n        for (let i = 0; i < mask_probs.length; ++i) {\n            let score = pred_scores[i];\n\n            for (let j = 0; j < mask_probs[i].data.length; ++j) {\n                mask_probs[i].data[j] *= score\n                if (mask_probs[i].data[j] > bestScores[j]) {\n                    mask_labels[j] = i;\n                    bestScores[j] = mask_probs[i].data[j];\n                }\n            }\n        }\n\n        let current_segment_id = 0;\n\n        // let stuff_memory_list = {}\n        for (let k = 0; k < pred_labels.length; ++k) {\n            let pred_class = pred_labels[k];\n\n            // TODO add `should_fuse`\n            // let should_fuse = pred_class in label_ids_to_fuse\n\n            // Check if mask exists and large enough to be a segment\n            let [mask_exists, mask_k] = this.check_segment_validity(\n                mask_labels,\n                mask_probs,\n                k,\n                mask_threshold,\n                overlap_mask_area_threshold\n            )\n\n            if (!mask_exists) {\n                // Nothing to see here\n                continue;\n            }\n\n            // TODO\n            // if (pred_class in stuff_memory_list) {\n            //     current_segment_id = stuff_memory_list[pred_class]\n            // } else {\n            //     current_segment_id += 1;\n            // }\n            ++current_segment_id;\n\n\n            // Add current object segment to final segmentation map\n            for (let index of mask_k) {\n                segmentation.data[index] = current_segment_id;\n            }\n\n            segments.push({\n                id: current_segment_id,\n                label_id: pred_class,\n                // was_fused: should_fuse, TODO\n                score: pred_scores[k],\n            })\n\n            // TODO\n            // if(should_fuse){\n            //     stuff_memory_list[pred_class] = current_segment_id\n            // }\n        }\n\n        return [segmentation, segments];\n    }\n\n    /**\n     * Post-process the model output to generate the final panoptic segmentation.\n     * @param {*} outputs The model output to post process\n     * @param {number} [threshold=0.5] The probability score threshold to keep predicted instance masks.\n     * @param {number} [mask_threshold=0.5] Threshold to use when turning the predicted masks into binary values.\n     * @param {number} [overlap_mask_area_threshold=0.8] The overlap mask area threshold to merge or discard small disconnected parts within each binary instance mask.\n     * @param {Set<number>} [label_ids_to_fuse=null] The labels in this state will have all their instances be fused together.\n     * @param {number[][]} [target_sizes=null] The target sizes to resize the masks to.\n     * @returns {Array<{ segmentation: Tensor, segments_info: Array<{id: number, label_id: number, score: number}>}>}\n     */\n    post_process_panoptic_segmentation(\n        outputs,\n        threshold = 0.5,\n        mask_threshold = 0.5,\n        overlap_mask_area_threshold = 0.8,\n        label_ids_to_fuse = null,\n        target_sizes = null,\n    ) {\n        if (label_ids_to_fuse === null) {\n            console.warn(\"`label_ids_to_fuse` unset. No instance will be fused.\")\n            label_ids_to_fuse = new Set();\n        }\n\n        const class_queries_logits = outputs.logits; // [batch_size, num_queries, num_classes+1]\n        const masks_queries_logits = outputs.pred_masks; // [batch_size, num_queries, height, width]\n\n        const mask_probs = masks_queries_logits.sigmoid()  // [batch_size, num_queries, height, width]\n\n        let [batch_size, num_queries, num_labels] = class_queries_logits.dims;\n        num_labels -= 1; // Remove last class (background)\n\n        if (target_sizes !== null && target_sizes.length !== batch_size) {\n            throw Error(\"Make sure that you pass in as many target sizes as the batch dimension of the logits\")\n        }\n\n        let toReturn = [];\n        for (let i = 0; i < batch_size; ++i) {\n            let target_size = target_sizes !== null ? target_sizes[i] : null;\n\n            let class_logits = class_queries_logits[i];\n            let mask_logits = mask_probs[i];\n\n            let [mask_probs_item, pred_scores_item, pred_labels_item] = this.remove_low_and_no_objects(class_logits, mask_logits, threshold, num_labels);\n\n            if (pred_labels_item.length === 0) {\n                // No mask found\n                let [height, width] = target_size ?? mask_logits.dims.slice(-2);\n\n                let segmentation = new Tensor(\n                    'int32',\n                    new Int32Array(height * width).fill(-1),\n                    [height, width]\n                )\n                toReturn.push({\n                    segmentation: segmentation,\n                    segments_info: []\n                });\n                continue;\n            }\n\n\n            // Get segmentation map and segment information of batch item\n            let [segmentation, segments] = this.compute_segments(\n                mask_probs_item,\n                pred_scores_item,\n                pred_labels_item,\n                mask_threshold,\n                overlap_mask_area_threshold,\n                label_ids_to_fuse,\n                target_size,\n            )\n\n            toReturn.push({\n                segmentation: segmentation,\n                segments_info: segments\n            })\n        }\n\n        return toReturn;\n    }\n\n    post_process_instance_segmentation() {\n        // TODO\n        throw Error(\"Not implemented yet\");\n    }\n}\n\nexport class YolosFeatureExtractor extends ImageFeatureExtractor {\n    /** @type {post_process_object_detection} */\n    post_process_object_detection(...args) {\n        return post_process_object_detection(...args);\n    }\n}\n\n/**\n * @typedef {object} SamImageProcessorResult\n * @property {Tensor} pixel_values\n * @property {HeightWidth[]} original_sizes\n * @property {HeightWidth[]} reshaped_input_sizes\n * @property {Tensor} input_points\n */\n\nexport class SamImageProcessor extends ImageFeatureExtractor {\n    /**\n     * @param {any[]} images The URL(s) of the image(s) to extract features from.\n     * @param {*} input_points A 3D or 4D array, representing the input points provided by the user.\n     * - 3D: `[point_batch_size, nb_points_per_image, 2]`. In this case, `batch_size` is assumed to be 1.\n     * - 4D: `[batch_size, point_batch_size, nb_points_per_image, 2]`.\n     * @returns {Promise<SamImageProcessorResult>}\n     */\n    async _call(images, input_points) {\n        let {\n            pixel_values,\n            original_sizes,\n            reshaped_input_sizes,\n        } = await super._call(images);\n\n        let shape = calculateDimensions(input_points);\n\n        // TODO: add support for 2D input_points\n        if (shape.length === 3) {\n            // Correct user's input\n            shape = [1, ...shape];\n            input_points = [input_points];\n        } else if (shape.length !== 4) {\n            throw Error(\"The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.\")\n        }\n\n        // Reshape input points\n        for (let i = 0; i < input_points.length; ++i) { // batch_size\n            let originalImageSize = original_sizes[i];\n            let reshapedImageSize = reshaped_input_sizes[i];\n\n            let resizeFactors = [\n                reshapedImageSize[0] / originalImageSize[0],\n                reshapedImageSize[1] / originalImageSize[1]\n            ]\n\n            for (let j = 0; j < input_points[i].length; ++j) { // point_batch_size\n                for (let k = 0; k < input_points[i][j].length; ++k) { // nb_points_per_image\n                    for (let w = 0; w < input_points[i][j][k].length; ++w) { // 2\n                        input_points[i][j][k][w] *= resizeFactors[w];\n                    }\n                }\n            }\n        }\n\n        let input_points_tensor = new Tensor(\n            'int64',\n            BigInt64Array.from(input_points.flat(Infinity)\n                .map(x => BigInt(Math.round(x)))),\n            shape\n        )\n\n        // TODO: allowed to be floats?\n        // let input_points_tensor = new Tensor(\n        //     'float32',\n        //     Float32Array.from(input_points.flat(Infinity)),\n        //     shape\n        // )\n\n        return {\n            pixel_values,\n            original_sizes: original_sizes,\n            reshaped_input_sizes: reshaped_input_sizes,\n            input_points: input_points_tensor\n        }\n    }\n\n    /**\n     * Remove padding and upscale masks to the original image size.\n     * @param {Tensor} masks Batched masks from the mask_decoder in (batch_size, num_channels, height, width) format.\n     * @param {number[][]} original_sizes The original sizes of each image before it was resized to the model's expected input shape, in (height, width) format.\n     * @param {number[][]} reshaped_input_sizes The size of each image as it is fed to the model, in (height, width) format. Used to remove padding.\n     * @param {Object} options Optional parameters for post-processing.\n     * @param {number} [options.mask_threshold] The threshold to use for binarizing the masks.\n     * @param {boolean} [options.binarize] Whether to binarize the masks.\n     * @param {Object} [options.pad_size] The target size the images were padded to before being passed to the model. If `null`, the target size is assumed to be the processor's `pad_size`.\n     * @param {number} [options.pad_size.height] The height the images were padded to.\n     * @param {number} [options.pad_size.width] The width the images were padded to.\n     * @returns {Tensor[]} Batched masks in batch_size, num_channels, height, width) format, where (height, width) is given by original_size.\n     */\n    post_process_masks(masks, original_sizes, reshaped_input_sizes, {\n        mask_threshold = 0.0,\n        binarize = true,\n        pad_size = null,\n    } = {}) {\n        // masks: [1, 1, 3, 256, 256]\n\n        let output_masks = [];\n\n        pad_size = pad_size ?? this.pad_size;\n\n        let target_image_size = [pad_size.height, pad_size.width];\n\n        for (let i = 0; i < original_sizes.length; ++i) {\n            let original_size = original_sizes[i];\n            let reshaped_input_size = reshaped_input_sizes[i];\n\n            let mask = masks[i]; // [b, c, h, w]\n\n            // TODO: improve\n            let interpolated_masks = [];\n            for (let j = 0; j < mask.dims[0]; ++j) {\n                let m = mask[j]; // 3d tensor\n\n                // Upscale mask to padded size\n                let interpolated_mask = interpolate(m, target_image_size, 'bilinear', false);\n\n                // Crop mask\n                interpolated_mask = interpolated_mask.slice(null, [0, reshaped_input_size[0]], [0, reshaped_input_size[1]]);\n\n                // Downscale mask\n                interpolated_mask = interpolate(mask, original_size, 'bilinear', false);\n\n                if (binarize) {\n                    interpolated_mask = new Tensor(\n                        'bool',\n                        Array.from(interpolated_mask.data).map(x => x > mask_threshold),\n                        interpolated_mask.dims\n                    )\n                }\n\n                // add back batch dim for concat\n                interpolated_mask.dims = [1, ...interpolated_mask.dims];\n\n                interpolated_masks.push(interpolated_mask);\n            }\n\n            let concatenated = cat(interpolated_masks);\n            output_masks.push(concatenated);\n        }\n\n        return output_masks;\n\n    }\n}\n\n\nexport class WhisperFeatureExtractor extends FeatureExtractor {\n\n    constructor(config) {\n        super(config);\n\n        // Prefer given `mel_filters` from preprocessor_config.json, or calculate them if they don't exist.\n        this.config.mel_filters ??= getMelFilters(this.config.sampling_rate, this.config.n_fft, this.config.feature_size);\n    }\n    /**\n     * Calculates the index offset for a given index and window size.\n     * @param {number} i The index.\n     * @param {number} w The window size.\n     * @returns {number} The index offset.\n     */\n    calcOffset(i, w) {\n        return Math.abs((i + w) % (2 * w) - w);\n    }\n\n    /**\n     * Pads an array with a reflected version of itself on both ends.\n     * @param {Float32Array} array The array to pad.\n     * @param {number} left The amount of padding to add to the left.\n     * @param {number} right The amount of padding to add to the right.\n     * @returns {Float32Array} The padded array.\n     */\n    padReflect(array, left, right) {\n        const padded = new Float32Array(array.length + left + right);\n        const w = array.length - 1;\n\n        for (let i = 0; i < array.length; ++i) {\n            padded[left + i] = array[i];\n        }\n\n        for (let i = 1; i <= left; ++i) {\n            padded[left - i] = array[this.calcOffset(i, w)];\n        }\n\n        for (let i = 1; i <= right; ++i) {\n            padded[w + left + i] = array[this.calcOffset(w - i, w)];\n        }\n\n        return padded;\n    }\n\n    /**\n     * Calculates the complex Short-Time Fourier Transform (STFT) of the given framed signal.\n     * \n     * @param {number[][]} frames A 2D array representing the signal frames.\n     * @param {number[]} window A 1D array representing the window to be applied to the frames.\n     * @returns {Object} An object with the following properties:\n     * - data: A 1D array representing the complex STFT of the signal.\n     * - dims: An array representing the dimensions of the STFT data, i.e. [num_frames, num_fft_bins].\n     */\n    stft(frames, window) {\n        // Calculates the complex Short-Time Fourier Transform (STFT) of the given framed signal.\n        // \n        // NOTE: Since the window width is not a power of 2, we must \n        // perform Fast Fourier Transform with chirp-z transform:\n        // https://math.stackexchange.com/questions/77118/non-power-of-2-ffts/77156#77156\n\n        // Helper variables\n        const fft_size = this.config.n_fft;\n        const a = 2 * (fft_size - 1);\n        const b = 2 * (2 * fft_size - 1);\n        const nextP2 = 2 ** (Math.ceil(Math.log2(b)))\n        const num_fft_bins = fft_size + 2;\n\n        // Preallocate array to store output\n        // double since we store complex numbers\n        const data = new Float32Array(num_fft_bins * frames.length);\n\n        // Define buffers\n        // Compute chirp for transform\n        const chirp = new Float32Array(b);\n        const ichirp = new Float32Array(nextP2);\n        const buffer1 = new Float32Array(nextP2);\n        const buffer2 = new Float32Array(nextP2);\n        const outBuffer = new Float32Array(nextP2);\n        const outBuffer2 = new Float32Array(nextP2);\n        const outBuffer3 = new Float32Array(nextP2);\n\n        // Compute complex exponentiation\n        const theta = -2 * Math.PI / fft_size;\n        const baseR = Math.cos(theta);\n        const baseI = Math.sin(theta);\n\n        // Precompute helper for chirp-z transform\n        for (let i = 0; i < b >> 1; ++i) {\n            // Compute complex power:\n            const e = (i + 1 - fft_size) ** 2 / 2.0;\n\n            // Compute the modulus and argument of the result\n            const result_mod = Math.sqrt(baseR ** 2 + baseI ** 2) ** e;\n            const result_arg = e * Math.atan2(baseI, baseR);\n\n            // Convert the result back to rectangular form\n            // and assign to chirp and ichirp\n            let i2 = 2 * i;\n            chirp[i2] = result_mod * Math.cos(result_arg);\n            chirp[i2 + 1] = result_mod * Math.sin(result_arg);\n\n            // conjugate\n            ichirp[i2] = chirp[i2];\n            ichirp[i2 + 1] = - chirp[i2 + 1];\n        }\n        const slicedChirp = chirp.subarray(a, b);\n\n        // create object to perform Fast Fourier Transforms\n        // with `nextP2` complex numbers\n        const f = new FFT(nextP2 >> 1);\n        // TODO: decide between Float32Array and Float64Array\n        f.transform(outBuffer, ichirp);\n\n        for (let i = 0; i < frames.length; ++i) {\n            const frame = frames[i];\n\n            for (let j = 0; j < slicedChirp.length; j += 2) {\n                const j2 = j + 1\n                const j3 = j >> 1;\n\n                const a_real = frame[j3] * window[j3];\n                buffer1[j] = a_real * slicedChirp[j];\n                buffer1[j2] = a_real * slicedChirp[j2];\n            }\n            // TODO: decide between Float32Array and Float64Array\n            f.transform(outBuffer2, buffer1);\n\n            for (let j = 0; j < outBuffer.length; j += 2) {\n                const j2 = j + 1;\n\n                buffer2[j] = outBuffer2[j] * outBuffer[j] - outBuffer2[j2] * outBuffer[j2]\n                buffer2[j2] = outBuffer2[j] * outBuffer[j2] + outBuffer2[j2] * outBuffer[j]\n            }\n            // TODO: decide between Float32Array and Float64Array\n            f.inverseTransform(outBuffer3, buffer2)\n\n            const offset = i * num_fft_bins;\n            for (let j = 0; j < num_fft_bins; j += 2) {\n                const a_real = outBuffer3[j + a];\n                const a_imag = outBuffer3[j + a + 1];\n                const b_real = slicedChirp[j];\n                const b_imag = slicedChirp[j + 1];\n\n                // TODO write as transpose\n                const o1 = offset + j;\n                data[o1] = a_real * b_real - a_imag * b_imag\n                data[o1 + 1] = a_real * b_imag + a_imag * b_real\n            }\n        }\n\n        return {\n            data: data,\n            dims: [frames.length, num_fft_bins] // [3001, 402]\n        };\n    }\n\n    /**\n     * Creates an array of frames from a given waveform.\n     *\n     * @param {Float32Array} waveform The waveform to create frames from.\n     * @param {boolean} [center=true] Whether to center the frames on their corresponding positions in the waveform. Defaults to true.\n     * @returns {Array} An array of frames.\n     */\n    fram_wave(waveform, center = true) {\n        const frames = [];\n        const half_window = Math.floor((this.config.n_fft - 1) / 2) + 1;\n        const waveformLength = waveform.length;\n\n        for (let i = 0; i < waveformLength + 1; i += this.config.hop_length) {\n\n            let frame;\n            if (center) {\n\n                let frameStart = i > half_window ? i - half_window : 0;\n                let frameEnd =\n                    i < waveformLength - half_window\n                        ? i + half_window\n                        : waveformLength;\n\n                frame = waveform.subarray(frameStart, frameEnd)\n\n                if (frameStart === 0) {\n                    frame = this.padReflect(\n                        frame,\n                        -i + half_window,\n                        0\n                    )\n\n                } else if (frameEnd === waveformLength) {\n                    frame = this.padReflect(\n                        frame,\n                        0,\n                        i - waveformLength + half_window\n                    )\n                }\n\n            } else {\n                frame = new Float32Array(this.config.n_fft);\n                const frameArray = waveform.subarray(i, i + this.config.n_fft);\n\n                if (frameArray.length < this.config.n_fft) {\n                    frame.set(frameArray);\n                    frame.fill(0, frameArray.length, this.config.n_fft)\n                } else {\n                    frame = frameArray;\n                }\n\n            }\n            frames.push(frame);\n        }\n\n        return frames;\n    }\n\n    /**\n     * Generates a Hanning window of length M.\n     *\n     * @param {number} M The length of the Hanning window to generate.\n     * @returns {*} The generated Hanning window.\n     */\n    hanning(M) {\n        if (M < 1) {\n            return [];\n        }\n        if (M === 1) {\n            return [1];\n        }\n        const denom = M - 1;\n        const cos_vals = new Float32Array(denom);\n        for (let i = 0; i < denom; ++i) {\n            const n = 2 * i - M + 1;\n            cos_vals[i] = 0.5 + 0.5 * Math.cos(Math.PI * n / denom);\n        }\n        return cos_vals;\n    }\n\n    /**\n     * Computes the log-Mel spectrogram of the provided audio waveform.\n     * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n     * @returns {{data: Float32Array, dims: number[]}} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n     */\n    _extract_fbank_features(waveform) {\n        // Compute the log-Mel spectrogram of the provided audio\n\n        const buffer = new Float32Array(this.config.n_samples);\n        buffer.set(waveform)\n\n        const window = this.hanning(this.config.n_fft + 1)\n        const frames = this.fram_wave(buffer)\n\n        const stft = this.stft(frames, window)\n\n        const stftData = stft.data;\n        const d1 = stft.dims[0] - 1; // Ignore last row\n        const d2 = stft.dims[1] >> 1; // Only need to store real numbers now\n\n        // compute magnitudes\n        // NOTE: Unlike the original implementation, we do not\n        // transpose since we perform matrix multiplication later\n        const magnitudes = new Float32Array(d1 * d2);\n        for (let i = 0; i < d1; ++i) {\n            for (let j = 0; j < d2; ++j) {\n                // let outOffset = (j * d1 + i); // transpose\n                let outOffset = i * d2 + j;\n                let inOffset = outOffset << 1; // * 2 since complex\n                let magnitude = stftData[inOffset] ** 2 + stftData[inOffset + 1] ** 2\n                magnitudes[outOffset] = magnitude;\n            }\n        }\n\n        const mel_filters = this.config.mel_filters;\n        const num_mel_filters = mel_filters.length;\n\n        const mel_spec = new Float32Array(num_mel_filters * d1);\n        let mIndex = 0;\n\n        // Perform matrix muliplication:\n        // mel_spec = filters @ magnitudes\n        //  - filters.shape=(80, 201)\n        //  - magnitudes.shape=(201, 3000)\n        //  - mel_spec.shape=(80, 3000)\n        for (let i = 0; i < num_mel_filters; ++i) {\n            const mel_filter = mel_filters[i];\n\n            for (let j = 0; j < d1; ++j) {\n                let sum = 0;\n\n                // perform dot product\n                for (let k = 0; k < d2; ++k) {\n                    sum += mel_filter[k] * magnitudes[j * d2 + k];\n                }\n\n                mel_spec[mIndex++] = sum;\n            }\n        }\n\n        const a_min = 1e-10;\n        const log_spec = new Float32Array(mel_spec.length);\n\n        let maxLogSpec = 0;\n        for (let i = 0; i < mel_spec.length; ++i) {\n            const clipped = Math.max(a_min, mel_spec[i]);\n            const log10 = Math.log10(clipped);\n            log_spec[i] = log10;\n            maxLogSpec = Math.max(log10, maxLogSpec)\n        }\n\n        for (let i = 0; i < log_spec.length; ++i) {\n            log_spec[i] = Math.max(log_spec[i], maxLogSpec - 8);\n            log_spec[i] = (log_spec[i] + 4) / 4;\n        }\n\n        return {\n            data: log_spec,\n            dims: [num_mel_filters, d1]\n        };\n    }\n\n    /**\n     * Asynchronously extracts features from a given audio using the provided configuration.\n     * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n     * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.\n     */\n    async _call(audio) {\n        if (!(audio instanceof Float32Array || audio instanceof Float64Array)) {\n            throw new Error(\n                // @ts-ignore\n                `WhisperFeatureExtractor expects input to be a Float32Array or a Float64Array, but got ${audio?.constructor?.name ?? typeof audio} instead.` +\n                `If using the feature extractor directly, remember to use \\`read_audio(url, sampling_rate)\\` to obtain the raw audio data of the file/url.`\n            )\n        }\n\n        if (audio.length > this.config.n_samples) {\n            console.warn(\n                \"Attempting to extract features for audio longer than 30 seconds. \" +\n                \"If using a pipeline to extract transcript from a long audio clip, \" +\n                \"remember to specify `chunk_length_s` and/or `stride_length_s`.\"\n            );\n        }\n        let waveform = audio.slice(0, this.config.n_samples);\n\n        let features = this._extract_fbank_features(waveform);\n\n        return {\n            input_features: new Tensor('float32',\n                features.data,\n                [1, ...features.dims]\n            )\n        };\n    }\n}\n\nexport class Wav2Vec2FeatureExtractor extends FeatureExtractor {\n\n    /**\n     * @param {Float32Array} input_values \n     * @returns {Float32Array} \n     */\n    _zero_mean_unit_var_norm(input_values) {\n        // TODO support batch?\n        const sum = input_values.reduce((a, b) => a + b, 0);\n        const mean = sum / input_values.length;\n        const variance = input_values.reduce((a, b) => a + (b - mean) ** 2, 0) / input_values.length;\n        return input_values.map(x => (x - mean) / Math.sqrt(variance + 1e-7));\n    }\n\n    /**\n     * Asynchronously extracts features from a given audio using the provided configuration.\n     * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n     * @returns {Promise<{ input_values: Tensor; attention_mask: Tensor }>} A Promise resolving to an object containing the extracted input features and attention mask as Tensors.\n     */\n    async _call(audio) {\n        // TODO: remove duplication\n        if (!(audio instanceof Float32Array || audio instanceof Float64Array)) {\n            throw new Error(\n                // @ts-ignore\n                `Wav2Vec2FeatureExtractor expects input to be a Float32Array or a Float64Array, but got ${audio?.constructor?.name ?? typeof audio} instead.` +\n                `If using the feature extractor directly, remember to use \\`read_audio(url, sampling_rate)\\` to obtain the raw audio data of the file/url.`\n            )\n        }\n        if (audio instanceof Float64Array) {\n            audio = new Float32Array(audio);\n        }\n\n        let input_values = audio;\n\n        // zero-mean and unit-variance normalization\n        if (this.config.do_normalize) {\n            input_values = this._zero_mean_unit_var_norm(input_values);\n        }\n\n        // TODO: allow user to pass in attention mask\n        const shape = [1, input_values.length];\n        return {\n            input_values: new Tensor('float32', input_values, shape),\n            attention_mask: new Tensor('int64', new BigInt64Array(input_values.length).fill(1n), shape)\n        };\n    }\n}\n\nexport class SpeechT5FeatureExtractor extends FeatureExtractor { }\n\n/**\n * Represents a Processor that extracts features from an input.\n * @extends Callable\n */\nexport class Processor extends Callable {\n    /**\n     * Creates a new Processor with the given feature extractor.\n     * @param {FeatureExtractor} feature_extractor The function used to extract features from the input.\n     */\n    constructor(feature_extractor) {\n        super();\n        this.feature_extractor = feature_extractor;\n        // TODO use tokenizer here?\n    }\n\n    /**\n     * Calls the feature_extractor function with the given input.\n     * @param {any} input The input to extract features from.\n     * @param {...any} args Additional arguments.\n     * @returns {Promise<any>} A Promise that resolves with the extracted features.\n     */\n    async _call(input, ...args) {\n        return await this.feature_extractor(input);\n    }\n}\n\nexport class SamProcessor extends Processor {\n    /**\n     * @param {*} images \n     * @param {*} input_points \n     * @returns {Promise<any>}\n     */\n    async _call(images, input_points) {\n        return await this.feature_extractor(images, input_points);\n    }\n\n    /**\n     * @borrows SamImageProcessor#post_process_masks as post_process_masks\n     */\n    post_process_masks(...args) {\n        // @ts-ignore\n        return this.feature_extractor.post_process_masks(...args);\n    }\n}\n\n/**\n * Represents a WhisperProcessor that extracts features from an audio input.\n * @extends Processor\n */\nexport class WhisperProcessor extends Processor {\n    /**\n     * Calls the feature_extractor function with the given audio input.\n     * @param {any} audio The audio input to extract features from.\n     * @returns {Promise<any>} A Promise that resolves with the extracted features.\n     */\n    async _call(audio) {\n        return await this.feature_extractor(audio)\n    }\n}\n\n\nexport class Wav2Vec2ProcessorWithLM extends Processor {\n    /**\n     * Calls the feature_extractor function with the given audio input.\n     * @param {any} audio The audio input to extract features from.\n     * @returns {Promise<any>} A Promise that resolves with the extracted features.\n     */\n    async _call(audio) {\n        return await this.feature_extractor(audio)\n    }\n}\n\nexport class SpeechT5Processor extends Processor {\n    /**\n     * Calls the feature_extractor function with the given input.\n     * @param {any} input The input to extract features from.\n     * @returns {Promise<any>} A Promise that resolves with the extracted features.\n     */\n    async _call(input) {\n        return await this.feature_extractor(input)\n    }\n}\n\n\n//////////////////////////////////////////////////\n/**\n * Helper class which is used to instantiate pretrained processors with the `from_pretrained` function.\n * The chosen processor class is determined by the type specified in the processor config.\n * \n * **Example:** Load a processor using `from_pretrained`.\n * ```javascript\n * let processor = await AutoProcessor.from_pretrained('openai/whisper-tiny.en');\n * ```\n * \n * **Example:** Run an image through a processor.\n * ```javascript\n * let processor = await AutoProcessor.from_pretrained('Xenova/clip-vit-base-patch16');\n * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');\n * let image_inputs = await processor(image);\n * // {\n * //   \"pixel_values\": {\n * //     \"dims\": [ 1, 3, 224, 224 ],\n * //     \"type\": \"float32\",\n * //     \"data\": Float32Array [ -1.558687686920166, -1.558687686920166, -1.5440893173217773, ... ],\n * //     \"size\": 150528\n * //   },\n * //   \"original_sizes\": [\n * //     [ 533, 800 ]\n * //   ],\n * //   \"reshaped_input_sizes\": [\n * //     [ 224, 224 ]\n * //   ]\n * // }\n * ```\n */\nexport class AutoProcessor {\n    static FEATURE_EXTRACTOR_CLASS_MAPPING = {\n        WhisperFeatureExtractor,\n        ViTFeatureExtractor,\n        MobileViTFeatureExtractor,\n        ConvNextFeatureExtractor,\n        BeitFeatureExtractor,\n        DeiTFeatureExtractor,\n        DetrFeatureExtractor,\n        YolosFeatureExtractor,\n        DonutFeatureExtractor,\n\n        SamImageProcessor,\n        Wav2Vec2FeatureExtractor,\n        SpeechT5FeatureExtractor,\n    }\n\n    static PROCESSOR_CLASS_MAPPING = {\n        WhisperProcessor,\n        Wav2Vec2ProcessorWithLM,\n        SamProcessor,\n        SpeechT5Processor,\n    }\n\n    /**\n     * Instantiate one of the processor classes of the library from a pretrained model.\n     * \n     * The processor class to instantiate is selected based on the `feature_extractor_type` property of the config object\n     * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n     * \n     * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n     * - A string, the *model id* of a pretrained processor hosted inside a model repo on huggingface.co.\n     *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n     *   user or organization name, like `dbmdz/bert-base-german-cased`.\n     * - A path to a *directory* containing processor files, e.g., `./my_model_directory/`.\n     * @param {import('./utils/hub.js').PretrainedOptions} options Additional options for loading the processor.\n     * \n     * @returns {Promise<Processor>} A new instance of the Processor class.\n     */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n    } = {}) {\n\n        let preprocessorConfig = config ?? await getModelJSON(pretrained_model_name_or_path, 'preprocessor_config.json', true, {\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n        })\n\n        // Determine feature extractor class\n        // TODO: Ensure backwards compatibility with old configs\n        let key = preprocessorConfig.feature_extractor_type ?? preprocessorConfig.image_processor_type;\n        let feature_extractor_class = this.FEATURE_EXTRACTOR_CLASS_MAPPING[key];\n\n        if (!feature_extractor_class) {\n            if (preprocessorConfig.size !== undefined) {\n                // Assume ImageFeatureExtractor\n                console.warn(`Feature extractor type \"${key}\" not found, assuming ImageFeatureExtractor due to size parameter in config.`);\n                feature_extractor_class = ImageFeatureExtractor;\n            } else {\n                throw new Error(`Unknown Feature Extractor type: ${key}`);\n            }\n        }\n\n        // If no associated processor class, use default\n        let processor_class = this.PROCESSOR_CLASS_MAPPING[preprocessorConfig.processor_class] ?? Processor;\n\n        // Instantiate processor and feature extractor\n        let feature_extractor = new feature_extractor_class(preprocessorConfig);\n        return new processor_class(feature_extractor);\n    }\n}\n//////////////////////////////////////////////////\n\n","\n/**\n * @file Helper module for image processing. \n * \n * These functions and classes are only used internally, \n * meaning an end-user shouldn't need to access anything here.\n * \n * @module utils/image\n */\n\nimport { isString } from './core.js';\nimport { getFile } from './hub.js';\nimport { env } from '../env.js';\n\n// Will be empty (or not used) if running in browser or web-worker\nimport sharp from 'sharp';\n\nconst BROWSER_ENV = typeof self !== 'undefined';\n\nlet createCanvasFunction;\nlet ImageDataClass;\nlet loadImageFunction;\nif (BROWSER_ENV) {\n    // Running in browser or web-worker\n    createCanvasFunction = (/** @type {number} */ width, /** @type {number} */ height) => {\n        if (!self.OffscreenCanvas) {\n            throw new Error('OffscreenCanvas not supported by this browser.');\n        }\n        return new self.OffscreenCanvas(width, height)\n    };\n    loadImageFunction = self.createImageBitmap;\n    ImageDataClass = self.ImageData;\n\n} else if (sharp) {\n    // Running in Node.js, electron, or other non-browser environment\n\n    loadImageFunction = async (/**@type {sharp.Sharp}*/img) => {\n        const metadata = await img.metadata();\n        const rawChannels = metadata.channels;\n\n        let { data, info } = await img.raw().toBuffer({ resolveWithObject: true });\n\n        const newImage = new RawImage(new Uint8ClampedArray(data), info.width, info.height, info.channels);\n        if (rawChannels !== undefined && rawChannels !== info.channels) {\n            // Make sure the new image has the same number of channels as the input image.\n            // This is necessary for grayscale images.\n            newImage.convert(rawChannels);\n        }\n        return newImage;\n    }\n\n} else {\n    throw new Error('Unable to load image processing library.');\n}\n\n\n// Defined here: https://github.com/python-pillow/Pillow/blob/a405e8406b83f8bfb8916e93971edc7407b8b1ff/src/libImaging/Imaging.h#L262-L268\nconst RESAMPLING_MAPPING = {\n    0: 'nearest',\n    1: 'lanczos',\n    2: 'bilinear',\n    3: 'bicubic',\n    4: 'box',\n    5: 'hamming',\n}\n\nexport class RawImage {\n\n    /**\n     * Mapping from file extensions to MIME types.\n     */\n    _CONTENT_TYPE_MAP = {\n        'png': 'image/png',\n        'jpg': 'image/jpeg',\n        'jpeg': 'image/jpeg',\n        'gif': 'image/gif',\n    }\n\n    /**\n     * Create a new `RawImage` object.\n     * @param {Uint8ClampedArray} data The pixel data.\n     * @param {number} width The width of the image.\n     * @param {number} height The height of the image.\n     * @param {1|2|3|4} channels The number of channels.\n     */\n    constructor(data, width, height, channels) {\n        this.data = data;\n        this.width = width;\n        this.height = height;\n        this.channels = channels;\n    }\n\n    /**\n     * Helper method for reading an image from a variety of input types.\n     * @param {RawImage|string|URL} input \n     * @returns The image object.\n     * \n     * **Example:** Read image from a URL.\n     * ```javascript\n     * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');\n     * // RawImage {\n     * //   \"data\": Uint8ClampedArray [ 25, 25, 25, 19, 19, 19, ... ],\n     * //   \"width\": 800,\n     * //   \"height\": 533,\n     * //   \"channels\": 3\n     * // }\n     * ```\n     */\n    static async read(input) {\n        if (input instanceof RawImage) {\n            return input;\n        } else if (isString(input) || input instanceof URL) {\n            return await this.fromURL(input);\n        } else {\n            throw new Error(`Unsupported input type: ${typeof input}`);\n        }\n    }\n\n\n    /**\n     * Read an image from a URL or file path.\n     * @param {string|URL} url The URL or file path to read the image from.\n     * @returns {Promise<RawImage>} The image object.\n     */\n    static async fromURL(url) {\n        let response = await getFile(url);\n        if (response.status !== 200) {\n            throw new Error(`Unable to read image from \"${url}\" (${response.status} ${response.statusText})`);\n        }\n        let blob = await response.blob();\n        return this.fromBlob(blob);\n    }\n\n    /**\n     * Helper method to create a new Image from a blob.\n     * @param {Blob} blob The blob to read the image from.\n     * @returns {Promise<RawImage>} The image object.\n     */\n    static async fromBlob(blob) {\n        if (BROWSER_ENV) {\n            // Running in environment with canvas\n            let img = await loadImageFunction(blob);\n\n            const ctx = createCanvasFunction(img.width, img.height).getContext('2d');\n\n            // Draw image to context\n            ctx.drawImage(img, 0, 0);\n\n            return new this(ctx.getImageData(0, 0, img.width, img.height).data, img.width, img.height, 4);\n\n        } else {\n            // Use sharp.js to read (and possible resize) the image.\n            let img = sharp(await blob.arrayBuffer());\n\n            return await loadImageFunction(img);\n        }\n    }\n\n    /**\n     * Convert the image to grayscale format.\n     * @returns {RawImage} `this` to support chaining.\n     */\n    grayscale() {\n        if (this.channels === 1) {\n            return this;\n        }\n\n        let newData = new Uint8ClampedArray(this.width * this.height * 1);\n        switch (this.channels) {\n            case 3: // rgb to grayscale\n            case 4: // rgba to grayscale\n                for (let i = 0, offset = 0; i < this.data.length; i += this.channels) {\n                    const red = this.data[i];\n                    const green = this.data[i + 1];\n                    const blue = this.data[i + 2];\n\n                    newData[offset++] = Math.round(0.2989 * red + 0.5870 * green + 0.1140 * blue);\n                }\n                break;\n            default:\n                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n        }\n        return this._update(newData, this.width, this.height, 1);\n    }\n\n    /**\n     * Convert the image to RGB format.\n     * @returns {RawImage} `this` to support chaining.\n     */\n    rgb() {\n        if (this.channels === 3) {\n            return this;\n        }\n\n        let newData = new Uint8ClampedArray(this.width * this.height * 3);\n\n        switch (this.channels) {\n            case 1: // grayscale to rgb\n                for (let i = 0, offset = 0; i < this.data.length; ++i) {\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i];\n                }\n                break;\n            case 4: // rgba to rgb\n                for (let i = 0, offset = 0; i < this.data.length; i += 4) {\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i + 1];\n                    newData[offset++] = this.data[i + 2];\n                }\n                break;\n            default:\n                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n        }\n        return this._update(newData, this.width, this.height, 3);\n\n    }\n\n    /**\n     * Convert the image to RGBA format.\n     * @returns {RawImage} `this` to support chaining.\n     */\n    rgba() {\n        if (this.channels === 4) {\n            return this;\n        }\n\n        let newData = new Uint8ClampedArray(this.width * this.height * 4);\n\n        switch (this.channels) {\n            case 1: // grayscale to rgba\n                for (let i = 0, offset = 0; i < this.data.length; ++i) {\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = 255;\n                }\n                break;\n            case 3: // rgb to rgba\n                for (let i = 0, offset = 0; i < this.data.length; i += 3) {\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i + 1];\n                    newData[offset++] = this.data[i + 2];\n                    newData[offset++] = 255;\n                }\n                break;\n            default:\n                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n        }\n\n        return this._update(newData, this.width, this.height, 4);\n    }\n\n    /**\n     * Resize the image to the given dimensions. This method uses the canvas API to perform the resizing.\n     * @param {number} width The width of the new image.\n     * @param {number} height The height of the new image.\n     * @param {Object} options Additional options for resizing.\n     * @param {0|1|2|3|4|5|string} [options.resample] The resampling method to use.\n     * @returns {Promise<RawImage>} `this` to support chaining.\n     */\n    async resize(width, height, {\n        resample = 2,\n    } = {}) {\n\n        // Ensure resample method is a string\n        let resampleMethod = RESAMPLING_MAPPING[resample] ?? resample;\n\n        if (BROWSER_ENV) {\n            // TODO use `resample` in browser environment\n\n            // Store number of channels before resizing\n            let numChannels = this.channels;\n\n            // Create canvas object for this image\n            let canvas = this.toCanvas();\n\n            // Actually perform resizing using the canvas API\n            const ctx = createCanvasFunction(width, height).getContext('2d');\n\n            // Draw image to context, resizing in the process\n            ctx.drawImage(canvas, 0, 0, width, height);\n\n            // Create image from the resized data\n            let resizedImage = new RawImage(ctx.getImageData(0, 0, width, height).data, width, height, 4);\n\n            // Convert back so that image has the same number of channels as before\n            return resizedImage.convert(numChannels);\n\n        } else {\n            // Create sharp image from raw data, and resize\n            let img = this.toSharp();\n\n            switch (resampleMethod) {\n                case 'box':\n                case 'hamming':\n                    if (resampleMethod === 'box' || resampleMethod === 'hamming') {\n                        console.warn(`Resampling method ${resampleMethod} is not yet supported. Using bilinear instead.`);\n                        resampleMethod = 'bilinear';\n                    }\n\n                case 'nearest':\n                case 'bilinear':\n                case 'bicubic':\n                    // Perform resizing using affine transform. \n                    // This matches how the python Pillow library does it.\n                    img = img.affine([width / this.width, 0, 0, height / this.height], {\n                        interpolator: resampleMethod\n                    });\n                    break;\n\n                case 'lanczos':\n                    // https://github.com/python-pillow/Pillow/discussions/5519\n                    // https://github.com/lovell/sharp/blob/main/docs/api-resize.md\n                    img = img.resize({\n                        width, height,\n                        fit: 'fill',\n                        kernel: 'lanczos3', // PIL Lanczos uses a kernel size of 3 \n                    });\n                    break;\n\n                default:\n                    throw new Error(`Resampling method ${resampleMethod} is not supported.`);\n            }\n\n            return await loadImageFunction(img);\n        }\n\n    }\n\n    async pad([left, right, top, bottom]) {\n        left = Math.max(left, 0);\n        right = Math.max(right, 0);\n        top = Math.max(top, 0);\n        bottom = Math.max(bottom, 0);\n\n        if (left === 0 && right === 0 && top === 0 && bottom === 0) {\n            // No padding needed\n            return this;\n        }\n\n        if (BROWSER_ENV) {\n            // Store number of channels before padding\n            let numChannels = this.channels;\n\n            // Create canvas object for this image\n            let canvas = this.toCanvas();\n\n            let newWidth = this.width + left + right;\n            let newHeight = this.height + top + bottom;\n\n            // Create a new canvas of the desired size.\n            const ctx = createCanvasFunction(newWidth, newHeight).getContext('2d');\n\n            // Draw image to context, padding in the process\n            ctx.drawImage(canvas,\n                0, 0, this.width, this.height,\n                left, top, newWidth, newHeight\n            );\n\n            // Create image from the padded data\n            let paddedImage = new RawImage(\n                ctx.getImageData(0, 0, newWidth, newHeight).data,\n                newWidth, newHeight, 4);\n\n            // Convert back so that image has the same number of channels as before\n            return paddedImage.convert(numChannels);\n\n        } else {\n            let img = this.toSharp().extend({ left, right, top, bottom });\n            return await loadImageFunction(img);\n        }\n    }\n\n    async center_crop(crop_width, crop_height) {\n        // If the image is already the desired size, return it\n        if (this.width === crop_width && this.height === crop_height) {\n            return this;\n        }\n\n        // Determine bounds of the image in the new canvas\n        let width_offset = (this.width - crop_width) / 2;\n        let height_offset = (this.height - crop_height) / 2;\n\n\n        if (BROWSER_ENV) {\n            // Store number of channels before resizing\n            let numChannels = this.channels;\n\n            // Create canvas object for this image\n            let canvas = this.toCanvas();\n\n            // Create a new canvas of the desired size. This is needed since if the \n            // image is too small, we need to pad it with black pixels.\n            const ctx = createCanvasFunction(crop_width, crop_height).getContext('2d');\n\n            let sourceX = 0;\n            let sourceY = 0;\n            let destX = 0;\n            let destY = 0;\n\n            if (width_offset >= 0) {\n                sourceX = width_offset;\n            } else {\n                destX = -width_offset;\n            }\n\n            if (height_offset >= 0) {\n                sourceY = height_offset;\n            } else {\n                destY = -height_offset;\n            }\n\n            // Draw image to context, cropping in the process\n            ctx.drawImage(canvas,\n                sourceX, sourceY, crop_width, crop_height,\n                destX, destY, crop_width, crop_height\n            );\n\n            // Create image from the resized data\n            let resizedImage = new RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);\n\n            // Convert back so that image has the same number of channels as before\n            return resizedImage.convert(numChannels);\n\n        } else {\n            // Create sharp image from raw data\n            let img = this.toSharp();\n\n            if (width_offset >= 0 && height_offset >= 0) {\n                // Cropped image lies entirely within the original image\n                img = img.extract({\n                    left: Math.floor(width_offset),\n                    top: Math.floor(height_offset),\n                    width: crop_width,\n                    height: crop_height,\n                })\n            } else if (width_offset <= 0 && height_offset <= 0) {\n                // Cropped image lies entirely outside the original image,\n                // so we add padding\n                let top = Math.floor(-height_offset);\n                let left = Math.floor(-width_offset);\n                img = img.extend({\n                    top: top,\n                    left: left,\n\n                    // Ensures the resulting image has the desired dimensions\n                    right: crop_width - this.width - left,\n                    bottom: crop_height - this.height - top,\n                });\n            } else {\n                // Cropped image lies partially outside the original image.\n                // We first pad, then crop.\n\n                let y_padding = [0, 0];\n                let y_extract = 0;\n                if (height_offset < 0) {\n                    y_padding[0] = Math.floor(-height_offset);\n                    y_padding[1] = crop_height - this.height - y_padding[0];\n                } else {\n                    y_extract = Math.floor(height_offset);\n                }\n\n                let x_padding = [0, 0];\n                let x_extract = 0;\n                if (width_offset < 0) {\n                    x_padding[0] = Math.floor(-width_offset);\n                    x_padding[1] = crop_width - this.width - x_padding[0];\n                } else {\n                    x_extract = Math.floor(width_offset);\n                }\n\n                img = img.extend({\n                    top: y_padding[0],\n                    bottom: y_padding[1],\n                    left: x_padding[0],\n                    right: x_padding[1],\n                }).extract({\n                    left: x_extract,\n                    top: y_extract,\n                    width: crop_width,\n                    height: crop_height,\n                })\n            }\n\n            return await loadImageFunction(img);\n        }\n    }\n\n    toCanvas() {\n        if (!BROWSER_ENV) {\n            throw new Error('toCanvas() is only supported in browser environments.')\n        }\n\n        // Clone, and convert data to RGBA before drawing to canvas.\n        // This is because the canvas API only supports RGBA\n        let cloned = this.clone().rgba();\n\n        // Create canvas object for the cloned image\n        let clonedCanvas = createCanvasFunction(cloned.width, cloned.height);\n\n        // Draw image to context\n        let data = new ImageDataClass(cloned.data, cloned.width, cloned.height);\n        clonedCanvas.getContext('2d').putImageData(data, 0, 0);\n\n        return clonedCanvas;\n    }\n\n    /**\n     * Helper method to update the image data.\n     * @param {Uint8ClampedArray} data The new image data.\n     * @param {number} width The new width of the image.\n     * @param {number} height The new height of the image.\n     * @param {1|2|3|4|null} [channels] The new number of channels of the image.\n     * @private\n     */\n    _update(data, width, height, channels = null) {\n        this.data = data;\n        this.width = width;\n        this.height = height;\n        if (channels !== null) {\n            this.channels = channels;\n        }\n        return this;\n    }\n\n    /**\n     * Clone the image\n     * @returns {RawImage} The cloned image\n     */\n    clone() {\n        return new RawImage(this.data.slice(), this.width, this.height, this.channels);\n    }\n\n    /**\n     * Helper method for converting image to have a certain number of channels\n     * @param {number} numChannels The number of channels. Must be 1, 3, or 4.\n     * @returns {RawImage} `this` to support chaining.\n     */\n    convert(numChannels) {\n        if (this.channels === numChannels) return this; // Already correct number of channels\n\n        switch (numChannels) {\n            case 1:\n                this.grayscale();\n                break;\n            case 3:\n                this.rgb();\n                break;\n            case 4:\n                this.rgba();\n                break;\n            default:\n                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n        }\n        return this;\n    }\n\n    /**\n     * Save the image to the given path.\n     * @param {string} path The path to save the image to.\n     */\n    save(path) {\n\n        if (BROWSER_ENV) {\n            const extension = path.split('.').pop().toLowerCase();\n            const mime = this._CONTENT_TYPE_MAP[extension] ?? 'image/png';\n\n            // Convert image to canvas\n            const canvas = this.toCanvas();\n\n            // Convert the canvas content to a data URL\n            const dataURL = canvas.toDataURL(mime);\n\n            // Create an anchor element with the data URL as the href attribute\n            const downloadLink = document.createElement('a');\n            downloadLink.href = dataURL;\n\n            // Set the download attribute to specify the desired filename for the downloaded image\n            downloadLink.download = path;\n\n            // Trigger the download\n            downloadLink.click();\n\n            // Clean up: remove the anchor element from the DOM\n            downloadLink.remove();\n\n        } else if (!env.useFS) {\n            throw new Error('Unable to save the image because filesystem is disabled in this environment.')\n\n        } else {\n            const img = this.toSharp();\n            img.toFile(path);\n        }\n    }\n\n    toSharp() {\n        if (BROWSER_ENV) {\n            throw new Error('toSharp() is only supported in server-side environments.')\n        }\n\n        return sharp(this.data, {\n            raw: {\n                width: this.width,\n                height: this.height,\n                channels: this.channels\n            }\n        });\n    }\n}\n","/**\n * @file Helper module for audio processing. \n * \n * These functions and classes are only used internally, \n * meaning an end-user shouldn't need to access anything here.\n * \n * @module utils/audio\n */\n\nimport {\n    getFile,\n} from './hub.js';\nimport { rfftfreq } from './maths.js';\n\n/**\n * Helper function to read audio from a path/URL.\n * @param {string|URL} url The path/URL to load the audio from.\n * @param {number} sampling_rate The sampling rate to use when decoding the audio.\n * @returns {Promise<Float32Array>} The decoded audio as a `Float32Array`.\n */\nexport async function read_audio(url, sampling_rate) {\n    if (typeof AudioContext === 'undefined') {\n        // Running in node or an environment without AudioContext\n        throw Error(\n            \"Unable to load audio from path/URL since `AudioContext` is not available in your environment. \" +\n            \"Instead, audio data should be passed directly to the pipeline/processor. \" +\n            \"For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.\"\n        )\n    }\n\n    const response = await (await getFile(url)).arrayBuffer();\n    const audioCTX = new AudioContext({ sampleRate: sampling_rate });\n    if (typeof sampling_rate === 'undefined') {\n        console.warn(`No sampling rate provided, using default of ${audioCTX.sampleRate}Hz.`)\n    }\n    const decoded = await audioCTX.decodeAudioData(response);\n\n    /** @type {Float32Array} */\n    let audio;\n\n    // We now replicate HuggingFace's `ffmpeg_read` method:\n    if (decoded.numberOfChannels === 2) {\n        // When downmixing a stereo audio file to mono using the -ac 1 option in FFmpeg,\n        // the audio signal is summed across both channels to create a single mono channel.\n        // However, if the audio is at full scale (i.e. the highest possible volume level),\n        // the summing of the two channels can cause the audio signal to clip or distort.\n\n        // To prevent this clipping, FFmpeg applies a scaling factor of 1/sqrt(2) (~ 0.707)\n        // to the audio signal before summing the two channels. This scaling factor ensures\n        // that the combined audio signal will not exceed the maximum possible level, even\n        // if both channels are at full scale.\n\n        // After applying this scaling factor, the audio signal from both channels is summed\n        // to create a single mono channel. It's worth noting that this scaling factor is\n        // only applied when downmixing stereo audio to mono using the -ac 1 option in FFmpeg.\n        // If you're using a different downmixing method, or if you're not downmixing the\n        // audio at all, this scaling factor may not be needed.\n        const SCALING_FACTOR = Math.sqrt(2);\n\n        let left = decoded.getChannelData(0);\n        let right = decoded.getChannelData(1);\n\n        audio = new Float32Array(left.length);\n        for (let i = 0; i < decoded.length; ++i) {\n            audio[i] = SCALING_FACTOR * (left[i] + right[i]) / 2;\n        }\n\n    } else {\n        // If the audio is not stereo, we can just use the first channel:\n        audio = decoded.getChannelData(0);\n    }\n\n    return audio;\n}\n\n/**\n * Creates a frequency bin conversion matrix used to obtain a mel spectrogram.\n * @param {number} sr Sample rate of the audio waveform.\n * @param {number} n_fft Number of frequencies used to compute the spectrogram (should be the same as in `stft`).\n * @param {number} n_mels Number of mel filters to generate.\n * @returns {number[][]} Projection matrix to go from a spectrogram to a mel spectrogram.\n */\nexport function getMelFilters(sr, n_fft, n_mels = 128) {\n    n_mels = Math.floor(n_mels);\n\n    // Initialize the weights\n    const mel_size = Math.floor(1 + n_fft / 2);\n    const weights = new Array(n_mels);\n\n    // Center freqs of each FFT bin\n    const fftfreqs = rfftfreq(n_fft, 1 / sr);\n\n    // 'Center freqs' of mel bands - uniformly spaced between limits\n    const min_mel = 0.0;\n    const max_mel = 45.245640471924965;\n    const mel_range = max_mel - min_mel;\n    const mel_scale = mel_range / (n_mels + 1);\n\n    // Fill in the linear scale\n    const f_min = 0.0;\n    const f_sp = 200.0 / 3;\n    const freqs = new Array(n_mels + 2);\n\n    // And now the nonlinear scale\n    const min_log_hz = 1000.0; // beginning of log region (Hz)\n    const min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)\n    const logstep = Math.log(6.4) / 27.0; // step size for log region\n\n    const ramps = new Array(freqs.length);\n    for (let i = 0; i < freqs.length; ++i) {\n        const mel = i * mel_scale + min_mel;\n        if (mel >= min_log_mel) {\n            freqs[i] = min_log_hz * Math.exp(logstep * (mel - min_log_mel));\n        } else {\n            freqs[i] = f_min + f_sp * mel;\n        }\n        ramps[i] = fftfreqs.map(k => freqs[i] - k);\n    }\n\n    const fdiffinv = freqs.slice(1).map((v, i) => 1 / (v - freqs[i]));\n\n    for (let i = 0; i < weights.length; ++i) {\n        weights[i] = new Array(mel_size);\n\n        const a = fdiffinv[i];\n        const b = fdiffinv[i + 1];\n        const c = ramps[i];\n        const d = ramps[i + 2];\n\n        // Slaney-style mel is scaled to be approx constant energy per channel\n        const enorm = 2.0 / (freqs[i + 2] - freqs[i]);\n\n        for (let j = 0; j < weights[i].length; ++j) {\n            // lower and upper slopes for all bins\n            const lower = -c[j] * a;\n            const upper = d[j] * b;\n            weights[i][j] = Math.max(0, Math.min(lower, upper)) * enorm;\n        }\n    }\n\n    return weights;\n}\n","import * as lf from 'localforage'\r\nimport { CacheDocument } from './types'\r\n\r\nconst CACHE_KEY = `agnai-documents`\r\n\r\nexport const docCache = {\r\n  getIds: getCachedIds,\r\n  getDoc: getDocument,\r\n  saveDoc: saveDocument,\r\n  deleteDoc: deleteDocument,\r\n}\r\n\r\nasync function getCachedIds() {\r\n  const json = (await lf.getItem(CACHE_KEY)) as string | null\r\n  if (!json) return []\r\n\r\n  const docs = JSON.parse(json)\r\n  return docs as string[]\r\n}\r\n\r\nasync function getDocument(id: string) {\r\n  const ids = await getCachedIds()\r\n  const json = (await lf.getItem(`${CACHE_KEY}_${id}`)) as string | null\r\n  if (!json) {\r\n    if (!ids.includes(id)) return\r\n    const next = ids.filter((i) => i !== id)\r\n    await lf.setItem(CACHE_KEY, JSON.stringify(next))\r\n    return\r\n  }\r\n\r\n  return JSON.parse(json) as CacheDocument\r\n}\r\n\r\nasync function saveDocument(id: string, doc: CacheDocument) {\r\n  const ids = await getCachedIds()\r\n\r\n  if (!ids.includes(id)) {\r\n    ids.push(id)\r\n    await lf.setItem(CACHE_KEY, JSON.stringify(ids))\r\n  }\r\n\r\n  await lf.setItem(`${CACHE_KEY}_${id}`, JSON.stringify(doc))\r\n}\r\n\r\nasync function deleteDocument(docId: string) {\r\n  const ids = await getCachedIds()\r\n  const nextIds = ids.filter((id) => id !== docId)\r\n  await lf.setItem(CACHE_KEY, JSON.stringify(nextIds))\r\n  await lf.removeItem(`${CACHE_KEY}_${docId}`)\r\n  return nextIds\r\n}\r\n","/*!\n    localForage -- Offline Storage, Improved\n    Version 1.10.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb || !idb.open) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\n        // Note: this creates issues with `window.fetch` polyfills and\n        // overrides; see:\n        // https://github.com/localForage/localForage/issues/856\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            var db = openreq.result;\n            db.onversionchange = function (e) {\n                // Triggered when the database is modified (e.g. adding an objectStore) or\n                // deleted (even when initiated by other sessions in different tabs).\n                // Closing the connection here prevents those operations from being blocked.\n                // If the database is accessed again later by this instance, the connection\n                // will be reopened or the database recreated as needed.\n                e.target.close();\n            };\n            resolve(db);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback returns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openKeyCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openKeyCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(req.error);\n                    };\n\n                    req.onblocked = function () {\n                        // Closing all open connections in onversionchange handler should prevent this situation, but if\n                        // we do get here, it just means the request remains pending - eventually it will succeed or error\n                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__1670__","_scriptDir","t","document","currentScript","src","n","E","buffer","D","z","j","e","F","r","U","Y","I","u","o","c","ready","Promise","f","s","l","p","h","m","d","Object","assign","y","b","g","window","_","importScripts","v","process","versions","node","w","ENVIRONMENT_IS_PTHREAD","T","O","locateFile","__dirname","normalize","readFileSync","Uint8Array","readFile","argv","length","replace","slice","on","ot","J","exitCode","x","exit","inspect","console","error","Worker","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","S","log","bind","A","warn","writeSync","M","C","print","printErr","thisProgram","quit","wasmBinary","R","noExitRuntime","WebAssembly","rt","k","W","P","TextDecoder","H","decode","SharedArrayBuffer","subarray","String","fromCharCode","q","B","charCodeAt","G","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","N","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","Error","byteLength","V","L","X","Z","$","Q","preRun","shift","unshift","K","tt","nt","et","postMessage","cmd","arg","onAbort","RuntimeError","it","startsWith","at","ut","this","name","message","ct","pt","Vb","mc","ft","Cc","ac","push","Ub","start_routine","Ic","zc","pthread_ptr","$b","time","now","Nc","loaded","st","Vt","oc","onExit","lt","dt","bn","ht","yn","en","rn","Yb","qc","fc","Ec","Pc","receiveObjectTransfer","Gc","threadInitTLS","pc","setExitStatus","nc","values","terminate","splice","Tn","forEach","Fc","onmessage","data","Bc","targetThread","hn","Qc","transferList","Ht","queue","thread","threadId","text","alert","target","filename","lineno","urlOrBlob","mainScriptUrlOrBlob","wasmModule","yc","pop","mt","Mn","Cn","PThread","establishStackSpace","An","yt","bt","get","invokeEntryPoint","On","gt","_t","vt","wt","Tt","Ot","Zb","Sb","xc","bc","wc","Dc","rc","hc","uc","ic","kc","cc","sc","Atomics","add","Hc","sub","tc","vc","En","St","dn","At","Mt","Oc","Ct","xt","Rt","Et","kt","Dt","jt","Ft","Ut","Yt","It","Wt","Pt","store","wn","compareExchange","qt","Bt","Gt","zt","mn","Nt","toTimeString","match","Date","getFullYear","getTimezoneOffset","Math","max","Number","arguments","xn","vn","executeNotifiedProxyingQueue","hrtime","__performance_now_clock_drift","Lt","Xt","Zt","$t","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","Jt","Qt","Kt","tn","nn","an","un","cn","fn","sn","toString","getMonth","getDate","getDay","Wb","Xb","getTime","setDate","setMonth","setFullYear","Lc","Kc","dc","jc","ec","Tb","Rc","Jc","Mc","RegExp","split","substring","floor","abs","includes","Array","set","ln","pn","ma","Sn","prototype","call","Rn","pa","Fa","gn","xa","Ma","ua","wa","oa","Ka","Ca","Ja","va","sa","La","ta","Ta","Ua","ya","Oa","za","setTimeout","Ea","Pa","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","Qa","getSeconds","getMinutes","getHours","min","Ra","setTime","Aa","Ba","Sa","Ac","ra","Ia","copyWithin","hardwareConcurrency","Da","apply","qa","grow","Na","Ga","Ha","ga","na","lc","crypto","getRandomValues","randomBytes","ia","ja","aa","Pn","Dn","Hn","ca","In","kn","ba","Wn","jn","ha","ka","fa","Fn","da","Yn","ea","Un","la","asm","sb","ub","Va","monitorRunDependencies","clearInterval","instance","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","Wa","_OrtCreateSessionOptions","Xa","_OrtAppendExecutionProvider","Ya","_OrtAddSessionConfigEntry","Za","_OrtReleaseSessionOptions","_a","_OrtCreateSession","$a","_OrtReleaseSession","ab","_OrtGetInputCount","bb","_OrtGetOutputCount","cb","_OrtGetInputName","db","_OrtGetOutputName","eb","_OrtFree","fb","_OrtCreateTensor","gb","_OrtGetTensorData","hb","_OrtReleaseTensor","ib","_OrtCreateRunOptions","jb","_OrtAddRunConfigEntry","kb","_OrtReleaseRunOptions","lb","_OrtRun","mb","_OrtEndProfiling","nb","_pthread_self","ob","_malloc","pb","_free","qb","_fflush","rb","__emscripten_tls_init","___funcs_on_exit","tb","__emscripten_thread_init","vb","__emscripten_thread_crashed","wb","_n","_emscripten_run_in_main_runtime_thread_js","xb","__emscripten_proxy_execute_task_queue","yb","__emscripten_thread_free_data","zb","__emscripten_thread_exit","Ab","_setThrew","Bb","_emscripten_stack_set_limits","Cb","stackSave","Db","stackRestore","Eb","stackAlloc","Fb","___cxa_can_catch","Gb","___cxa_is_pointer_type","Hb","dynCall_j","Ib","dynCall_iiiiij","Jb","dynCall_jii","Kb","dynCall_viiiiij","Lb","dynCall_vjji","Mb","dynCall_viiijjjii","Nb","dynCall_iij","Ob","dynCall_ji","Pb","dynCall_iiiiiij","Qb","dynCall_iiij","Rb","qn","calledRun","onRuntimeInitialized","postRun","setStatus","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","ExitStatus","preInit","ortWasm","undefined","fs","ctx","params","offset","index","pending","reject","err","base64","string","charAt","ceil","b64","s64","encode","start","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","args","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","__esModule","Guid","guid","TypeError","value","EMPTY","isGuid","validator","create","gen","createEmpty","parse","raw","count","out","random","equals","other","isEmpty","toJSON","Long","wasm","Instance","Module","low","high","unsigned","isLong","obj","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","RangeError","radixToPower","result","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","bytes","fromBytesLE","fromBytesBE","valuesById","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","type","newBuffer","emptyArray","writer","hasOwnProperty","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","int32","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","object","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","key","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","version","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","finish","endedByRPC","zero","zzEncode","zeroHash","from","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","async","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","env","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","initWasm","handler","OnnxruntimeWebAssemblySessionHandler","onnxjsBackend","registerBackend","wasmBackend","AttributeWithCacheKeyImpl","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","static","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","EncodingGlslLib","encodeFloat32","decodeFloat32","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","scale","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","canvas","OffscreenCanvas","createElement","createCanvas","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","GraphImpl","Value","_from","_to","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawDataLength","rawDataArray","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","graphInputTypes","graphInputDims","_model","promisify","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","isValidBroadcast","typeProto","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","path","getLogLevel","modelData","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","executionProviders","ep","epName","epNameDataOffset","setExecutionProviders","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","BigInt64Array","BigUint64Array","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__","pipeline","Pipeline","RawImage","EmbedDocument","RequestChatEmbed","RequestDocEmbed","WorkerRequest","WorkerResponse","docCache","allowLocalModels","TextEmbed","entityId","embed","meta","RankedMsg","similarity","Embeddings","chatId","msgId","Embedder","Captioner","embeddings","documents","Record","handlers","Extract","post","id","initSimilarity","progress_callback","file","progress","initCaptioning","captionImage","image","fromBlob","generated_text","requestId","caption","ex","embedChat","embedDocument","documentId","saveDoc","messages","pooling","embeds","isBefore","beforeDate","created","calculateCosineSimilarity","payload","Omit","dotProduct","queryMagnitude","embeddingMagnitude","left","embedQueue","EMBEDDING","kind","filtered","prev","adapter","ooc","embedding","characterId","userId","createdAt","deleted","cachedId","pre","embedded","item","percent","lf","CacheDocument","CACHE_KEY","getIds","getCachedIds","getDoc","getDocument","saveDocument","deleteDoc","deleteDocument","getItem","docs","ids","setItem","doc","docId","nextIds","removeItem"],"version":3,"file":"worker.368c1aee.js.map"}