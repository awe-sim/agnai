{"mappings":"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","sources":["web/pages/GenerationPresets/index.tsx"],"sourcesContent":["import { A, useNavigate, useParams, useSearchParams } from '@solidjs/router'\r\nimport { Edit, Plus, Save, X } from 'lucide-solid'\r\nimport { Component, createSignal, onMount, Show } from 'solid-js'\r\nimport { defaultPresets, isDefaultPreset } from '../../../common/presets'\r\nimport { AppSchema } from '../../../common/types/schema'\r\nimport Button from '../../shared/Button'\r\nimport Select, { Option } from '../../shared/Select'\r\nimport GenerationSettings, { getPresetFormData } from '../../shared/GenerationSettings'\r\nimport Modal, { ConfirmModal } from '../../shared/Modal'\r\nimport PageHeader from '../../shared/PageHeader'\r\nimport TextInput from '../../shared/TextInput'\r\nimport { getStrictForm, setComponentPageTitle } from '../../shared/util'\r\nimport { presetStore, toastStore } from '../../store'\r\nimport Loading from '/web/shared/Loading'\r\nimport { TitleCard } from '/web/shared/Card'\r\n\r\nexport const GenerationPresetsPage: Component = () => {\r\n  const { updateTitle } = setComponentPageTitle('Preset')\r\n  let ref: any\r\n\r\n  const params = useParams()\r\n  const [query] = useSearchParams()\r\n\r\n  const nav = useNavigate()\r\n  const [edit, setEdit] = createSignal(false)\r\n  const [editing, setEditing] = createSignal<AppSchema.UserGenPreset>()\r\n  const [deleting, setDeleting] = createSignal(false)\r\n\r\n  const onEdit = (preset: AppSchema.UserGenPreset) => {\r\n    nav(`/presets/${preset._id}`)\r\n  }\r\n\r\n  const state = presetStore(({ presets, saving, importing }) => ({\r\n    saving,\r\n    presets,\r\n    items: presets.map<Option>((p) => ({ label: p.name, value: p._id })),\r\n    importing,\r\n    editing: isDefaultPreset(query.preset)\r\n      ? defaultPresets[query.preset]\r\n      : presets.find((pre) => pre._id === query.preset || params.id),\r\n  }))\r\n\r\n  onMount(async () => {\r\n    if (params.id === 'new') {\r\n      const copySource = query.preset\r\n      if (copySource) {\r\n        updateTitle(`Copy preset ${copySource}`)\r\n      } else if (state.importing) {\r\n        updateTitle(`Import preset`)\r\n      } else {\r\n        updateTitle(`Create preset`)\r\n      }\r\n\r\n      setEditing()\r\n      await Promise.resolve()\r\n\r\n      if (state.importing) {\r\n        setEditing({ ...state.importing, kind: 'gen-setting', userId: '', _id: '', name: '' })\r\n        presetStore.setImportPreset()\r\n        return\r\n      }\r\n\r\n      const template = isDefaultPreset(query.preset)\r\n        ? defaultPresets[query.preset]\r\n        : state.presets.find((p) => p._id === query.preset)\r\n      const preset = template ? { ...template } : { ...emptyPreset }\r\n      setEditing({ ...emptyPreset, ...preset, _id: '', kind: 'gen-setting', userId: '' })\r\n      return\r\n    } else if (params.id === 'default') {\r\n      setEditing()\r\n      await Promise.resolve()\r\n      if (!isDefaultPreset(query.preset)) return\r\n      setEditing({\r\n        ...emptyPreset,\r\n        ...defaultPresets[query.preset],\r\n        _id: '',\r\n        kind: 'gen-setting',\r\n        userId: 'SYSTEM',\r\n      })\r\n      return\r\n    }\r\n\r\n    const preset = editing()\r\n\r\n    if (params.id && !preset) {\r\n      const preset = state.presets.find((p) => p._id === params.id)\r\n      setEditing(preset)\r\n      return\r\n    }\r\n\r\n    if (params.id && preset && preset._id !== params.id) {\r\n      setEditing()\r\n      await Promise.resolve()\r\n      const preset = state.presets.find((p) => p._id === params.id)\r\n      setEditing(preset)\r\n    }\r\n\r\n    if (params.id && preset) {\r\n      updateTitle(`Edit preset ${preset.name}`)\r\n    }\r\n  })\r\n\r\n  const startNew = () => {\r\n    nav('/presets/new')\r\n  }\r\n\r\n  const deletePreset = () => {\r\n    const preset = editing()\r\n    if (!preset) return\r\n\r\n    presetStore.deletePreset(preset._id, () => nav('/presets'))\r\n    setEditing()\r\n  }\r\n\r\n  const onSave = (_ev: Event, force?: boolean) => {\r\n    if (state.saving) return\r\n    const body = getPresetFormData(ref)\r\n\r\n    if (!body.service) {\r\n      toastStore.error(`You must select an AI service before saving`)\r\n      return\r\n    }\r\n\r\n    const prev = editing()\r\n\r\n    if (prev?._id) {\r\n      presetStore.updatePreset(prev._id, body as any)\r\n    } else {\r\n      presetStore.createPreset(body as any, (newPreset) => {\r\n        nav(`/presets/${newPreset._id}`)\r\n        setEditing(newPreset)\r\n      })\r\n    }\r\n  }\r\n\r\n  if (params.id && params.id !== 'new' && !state.editing) {\r\n    return (\r\n      <>\r\n        <PageHeader title=\"Generation Presets\" />\r\n        <Loading />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader title=\"Generation Presets\" />\r\n      <div class=\"flex flex-col gap-2 pb-10\">\r\n        <Show when={params.id === 'default'}>\r\n          <TitleCard type=\"orange\" class=\"font-bold\">\r\n            This is a built-in preset and cannot be saved.{' '}\r\n            <A class=\"link\" href={`/presets/new?preset=${query.preset}`}>\r\n              Click here\r\n            </A>{' '}\r\n            if you'd like to create a copy of this preset.\r\n          </TitleCard>\r\n        </Show>\r\n        <div class=\"flex flex-col gap-4 p-2\">\r\n          <Show when={editing()}>\r\n            <form ref={ref} onSubmit={onSave} class=\"flex flex-col gap-4\">\r\n              <div class=\"flex gap-4\">\r\n                <Show when={state.presets.length > 1}>\r\n                  <Button onClick={() => setEdit(true)}>Load Preset</Button>\r\n                </Show>\r\n                <Button onClick={startNew}>\r\n                  <Plus />\r\n                  New Preset\r\n                </Button>\r\n              </div>\r\n              <div class=\"flex flex-col\">\r\n                <div>ID: {editing()?._id || 'New Preset'}</div>\r\n                <TextInput\r\n                  fieldName=\"id\"\r\n                  value={editing()?._id || 'New Preset'}\r\n                  disabled\r\n                  class=\"hidden\"\r\n                />\r\n                <TextInput\r\n                  fieldName=\"name\"\r\n                  label=\"Name\"\r\n                  helperText=\"A name or short description of your preset\"\r\n                  placeholder=\"Preset name\"\r\n                  value={editing()?.name}\r\n                  required\r\n                  parentClass=\"mb-2\"\r\n                />\r\n                <GenerationSettings\r\n                  inherit={editing()}\r\n                  disabled={params.id === 'default'}\r\n                  onSave={() => {}}\r\n                />\r\n              </div>\r\n              <Show when={editing()?.userId !== 'SYSTEM'}>\r\n                <div class=\"flex flex-row justify-end\">\r\n                  <Button disabled={state.saving} onClick={onSave}>\r\n                    <Save /> Save\r\n                  </Button>\r\n                </div>\r\n              </Show>\r\n            </form>\r\n          </Show>\r\n        </div>\r\n      </div>\r\n      <EditPreset show={edit()} close={() => setEdit(false)} select={onEdit} />\r\n      <ConfirmModal\r\n        show={deleting()}\r\n        close={() => setDeleting(false)}\r\n        confirm={deletePreset}\r\n        message=\"Are you sure you wish to delete this preset?\"\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GenerationPresetsPage\r\n\r\nconst emptyPreset: AppSchema.GenSettings = {\r\n  ...defaultPresets.basic,\r\n  service: '' as any,\r\n  name: '',\r\n  maxTokens: 300,\r\n}\r\n\r\nconst EditPreset: Component<{\r\n  show: boolean\r\n  close: () => void\r\n  select: (preset: AppSchema.UserGenPreset) => void\r\n}> = (props) => {\r\n  const params = useParams()\r\n\r\n  let ref: any\r\n  const state = presetStore()\r\n\r\n  const select = () => {\r\n    const body = getStrictForm(ref, { preset: 'string' })\r\n    const preset = state.presets.find((preset) => preset._id === body.preset)\r\n    props.select(preset!)\r\n    props.close()\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      close={props.close}\r\n      title=\"Load Preset\"\r\n      footer={\r\n        <>\r\n          <Button schema=\"secondary\" onClick={props.close}>\r\n            <X /> Cancel\r\n          </Button>\r\n          <Button onClick={select}>\r\n            <Edit /> Load Preset\r\n          </Button>\r\n        </>\r\n      }\r\n    >\r\n      <form ref={ref}>\r\n        <Select\r\n          fieldName=\"preset\"\r\n          label=\"Preset\"\r\n          helperText=\"Select a preset to start editing. If you are currently editing a preset, it won't be in the list.\"\r\n          items={state.presets\r\n            .filter((pre) => pre._id !== params.id)\r\n            .map((pre) => ({ label: pre.name, value: pre._id }))}\r\n        />\r\n      </form>\r\n    </Modal>\r\n  )\r\n}\r\n"],"names":["A","useNavigate","useParams","useSearchParams","Edit","Plus","Save","X","Component","createSignal","onMount","Show","defaultPresets","isDefaultPreset","AppSchema","Button","Select","Option","GenerationSettings","getPresetFormData","Modal","ConfirmModal","PageHeader","TextInput","getStrictForm","setComponentPageTitle","presetStore","toastStore","Loading","TitleCard","GenerationPresetsPage","updateTitle","ref","params","query","nav","edit","setEdit","editing","setEditing","UserGenPreset","deleting","setDeleting","onEdit","preset","_id","state","presets","saving","importing","items","map","p","label","name","value","find","pre","id","copySource","Promise","resolve","kind","userId","setImportPreset","template","emptyPreset","startNew","deletePreset","onSave","_ev","Event","force","body","service","error","prev","updatePreset","createPreset","newPreset","_$createComponent","title","_el$","_tmpl$3","cloneNode","_el$2","firstChild","_$insert","when","children","type","href","_el$3","_tmpl$2","_el$4","_el$5","nextSibling","_el$6","_el$7","addEventListener","_ref$","_$use","length","onClick","fieldName","disabled","helperText","placeholder","required","parentClass","inherit","_el$8","_tmpl$","EditPreset","show","close","select","confirm","message","GenSettings","basic","maxTokens","props","footer","schema","_el$9","_tmpl$4","_ref$2","filter"],"version":3,"file":"GenerationPresets.cd674ede.js.map"}