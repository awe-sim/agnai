{"mappings":"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","sources":["web/pages/Scenario/EditScenario.tsx","web/pages/Scenario/components/DownloadScenarioModal.tsx","web/pages/Scenario/EditScenarioEvents.tsx"],"sourcesContent":["import { Component, Show, createSignal, onMount } from 'solid-js'\r\nimport { scenarioStore } from '../../store'\r\nimport PageHeader from '../../shared/PageHeader'\r\nimport Button from '../../shared/Button'\r\nimport { Copy, Download, Trash } from 'lucide-solid'\r\nimport { useNavigate, useParams } from '@solidjs/router'\r\nimport TextInput from '../../shared/TextInput'\r\nimport { deepCloneAndRemoveFields } from '../../shared/util'\r\nimport Divider from '/web/shared/Divider'\r\nimport { Toggle } from '/web/shared/Toggle'\r\nimport { ConfirmModal } from '/web/shared/Modal'\r\nimport { ExportScenarioModal } from './components/DownloadScenarioModal'\r\nimport EditScenarioEvents from './EditScenarioEvents'\r\n\r\nconst CreateScenario: Component = () => {\r\n  let ref: any\r\n  const params = useParams<{ editId: string }>()\r\n  const nav = useNavigate()\r\n  const state = scenarioStore((x) => ({\r\n    loading: x.loading,\r\n    scenario: x.scenarios.find((s) => s._id === params.editId),\r\n  }))\r\n\r\n  const [showDelete, setShowDelete] = createSignal(false)\r\n  const [showDownload, setShowDownload] = createSignal(false)\r\n\r\n  onMount(() => {\r\n    scenarioStore.getOne(params.editId)\r\n  })\r\n\r\n  const confirmDelete = () => {\r\n    scenarioStore.remove(params.editId, () => nav('/scenario'))\r\n  }\r\n\r\n  const duplicateScenario = () => {\r\n    if (!state.scenario) return\r\n    const clone = deepCloneAndRemoveFields(state.scenario, ['_id', 'userId', 'kind'])\r\n    scenarioStore.create(clone, (r) => nav(`/scenario/${r._id}/edit`))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        title={\r\n          <div class=\"flex w-full justify-between\">\r\n            <div>Edit Scenario</div>\r\n            <div class=\"flex text-base\">\r\n              <div class=\"px-1\">\r\n                <Button schema=\"secondary\" onClick={() => duplicateScenario()}>\r\n                  <Copy />\r\n                  <span class=\"hidden sm:inline\">Duplicate</span>\r\n                </Button>\r\n              </div>\r\n              <div class=\"px-1\">\r\n                <Button schema=\"secondary\" onClick={() => setShowDownload(true)}>\r\n                  <Download />\r\n                  <span class=\"hidden sm:inline\">Download</span>\r\n                </Button>\r\n              </div>\r\n              <div class=\"px-1\">\r\n                <Button schema=\"red\" onClick={() => setShowDelete(true)}>\r\n                  <Trash />\r\n                  <span class=\"hidden sm:inline\">Delete</span>\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        }\r\n      />\r\n\r\n      <div class=\"flex items-center gap-2\">\r\n        <Show\r\n          when={state.scenario?.entries.length ?? 0 > 0}\r\n          fallback={<p>No events attached to this scenario</p>}\r\n        >\r\n          <p>{state.scenario!.entries.length} event(s)</p>\r\n        </Show>\r\n      </div>\r\n\r\n      <Divider />\r\n\r\n      <div class=\"text-lg font-bold\">Scenario Details</div>\r\n\r\n      <form class=\"flex flex-col gap-4\" ref={ref}>\r\n        <TextInput\r\n          fieldName=\"name\"\r\n          required\r\n          label=\"Name\"\r\n          helperText=\"The name of your scenario.\"\r\n          placeholder=\"My scenario\"\r\n          value={state.scenario?.name}\r\n        />\r\n\r\n        <TextInput\r\n          fieldName=\"description\"\r\n          label=\"Description\"\r\n          helperText=\"More information about your scenario.\"\r\n          placeholder=\"This scenario is about...\"\r\n          value={state.scenario?.description}\r\n        />\r\n\r\n        <TextInput\r\n          fieldName=\"text\"\r\n          isMultiline\r\n          label=\"Prompt Text\"\r\n          helperText=\"Optional. Additional text to add to the scenario prompt.\"\r\n          placeholder=\"{{char}} and {{user}} are in a scenario. They are...\"\r\n          value={state.scenario?.text}\r\n        />\r\n\r\n        <Toggle\r\n          fieldName=\"overwriteCharacterScenario\"\r\n          label=\"Overwrite character's scenario\"\r\n          helperText=\"If the character already has a scenario, overwrite it with this one. Otherwise, append to it.\"\r\n          value={state.scenario?.overwriteCharacterScenario}\r\n        />\r\n\r\n        <TextInput\r\n          fieldName=\"instructions\"\r\n          isMultiline\r\n          label=\"User Instructions\"\r\n          helperText=\"Optional. Text to display to the user to help them understand how to use this scenario.\"\r\n          placeholder=\"Thanks for trying out my scenario! Use the Trigger Event menu to move the story forward.\"\r\n          value={state.scenario?.instructions}\r\n        />\r\n\r\n        <EditScenarioEvents editId={params.editId} form={ref} />\r\n      </form>\r\n\r\n      <ConfirmModal\r\n        show={!!showDelete()}\r\n        close={() => setShowDelete(false)}\r\n        confirm={confirmDelete}\r\n        message=\"Are you sure wish to delete this scenario?\"\r\n      />\r\n\r\n      <ExportScenarioModal\r\n        show={!!showDownload()}\r\n        close={() => setShowDownload(false)}\r\n        scenario={showDownload() ? state.scenario : undefined}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateScenario\r\n","import { Component, createMemo } from 'solid-js'\r\nimport { AppSchema } from '/common/types'\r\nimport Modal from '/web/shared/Modal'\r\nimport Button from '/web/shared/Button'\r\nimport { Save, X } from 'lucide-solid'\r\nimport { deepCloneAndRemoveFields } from '/web/shared/util'\r\n\r\nexport const ExportScenarioModal: Component<{\r\n  show: boolean\r\n  close: () => void\r\n  scenario: AppSchema.ScenarioBook | undefined\r\n}> = (props) => {\r\n  const filename = createMemo(() => {\r\n    if (!props.scenario) return\r\n    const name = props.scenario.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()\r\n    return `${name}.scenario.json`\r\n  })\r\n\r\n  const encodedJson = createMemo(() => {\r\n    if (!props.scenario) return ''\r\n    const clone = deepCloneAndRemoveFields(props.scenario, ['_id', 'userId', 'kind'])\r\n\r\n    const dataStr =\r\n      'data:text/json;charset=utf-8,' +\r\n      encodeURIComponent(\r\n        JSON.stringify({ ...clone, $schema: 'https://agnai.chat/schemas/scenario-schema-v1.json' })\r\n      )\r\n    return dataStr\r\n  })\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      close={props.close}\r\n      title=\"Download Scenario\"\r\n      footer={\r\n        <Button schema=\"secondary\" onClick={props.close}>\r\n          <X /> Close\r\n        </Button>\r\n      }\r\n    >\r\n      <div class=\"flex w-full justify-center\">\r\n        <a href={encodedJson()} download={filename()}>\r\n          <Button>\r\n            <Save />\r\n            {filename()}\r\n          </Button>\r\n        </a>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n","import {\r\n  Component,\r\n  For,\r\n  Index,\r\n  Match,\r\n  Show,\r\n  Switch,\r\n  createEffect,\r\n  createMemo,\r\n  createSignal,\r\n  onMount,\r\n} from 'solid-js'\r\nimport { scenarioStore } from '../../store'\r\nimport Button from '../../shared/Button'\r\nimport { ChevronDown, ChevronUp, Plus, Save, X } from 'lucide-solid'\r\nimport { useNavigate } from '@solidjs/router'\r\nimport TextInput from '../../shared/TextInput'\r\nimport { AppSchema, NewScenario } from '/common/types'\r\nimport Accordian from '/web/shared/Accordian'\r\nimport Select, { Option } from '/web/shared/Select'\r\nimport RangeInput from '/web/shared/RangeInput'\r\nimport { getForm, getStrictForm } from '/web/shared/util'\r\nimport TagInput from '/web/shared/TagInput'\r\nimport PromptEditor from '/web/shared/PromptEditor'\r\nimport { FormLabel } from '/web/shared/FormLabel'\r\nimport { Card, Pill, TitleCard } from '/web/shared/Card'\r\n\r\nconst eventTypeOptions: Option<AppSchema.ScenarioEventType>[] = [\r\n  { value: 'hidden', label: 'Hidden (not shown to the user)' },\r\n  { value: 'world', label: 'World (shown, external to the character)' },\r\n  { value: 'character', label: 'Character (shown, thought or action by the character)' },\r\n  { value: 'ooc', label: 'Out Of Character (only visible by the user)' },\r\n]\r\n\r\nconst triggerTypeOptions: Array<Option<AppSchema.ScenarioTriggerKind>> = [\r\n  {\r\n    value: 'onGreeting',\r\n    label: 'Greeting',\r\n  },\r\n  {\r\n    value: 'onManualTrigger',\r\n    label: 'Manual Trigger',\r\n  },\r\n  {\r\n    value: 'onChatOpened',\r\n    label: 'Chat Opened',\r\n  },\r\n  {\r\n    value: 'onCharacterMessageReceived',\r\n    label: 'Message Received',\r\n  },\r\n]\r\n\r\nconst EditScenarioEvents: Component<{ editId: string; form: HTMLFormElement }> = (props) => {\r\n  const nav = useNavigate()\r\n  const state = scenarioStore((x) => ({\r\n    loading: x.loading,\r\n    scenario: x.scenarios.find((s) => s._id === props.editId),\r\n  }))\r\n\r\n  const [entries, setEntries] = createSignal<AppSchema.ScenarioEvent[]>([])\r\n\r\n  const availableStates = createMemo(() => {\r\n    const states = new Set<string>()\r\n\r\n    for (const entry of entries()) {\r\n      for (const state of entry.assigns.concat(entry.requires)) {\r\n        if (state.startsWith('!')) continue\r\n        states.add(state)\r\n      }\r\n    }\r\n\r\n    for (const state of Array.from(states)) {\r\n      states.add(`!${state}`)\r\n    }\r\n\r\n    return Array.from(states)\r\n  })\r\n\r\n  onMount(() => {\r\n    scenarioStore.getAll()\r\n  })\r\n\r\n  const invalidStates = createMemo(() => {\r\n    const bad = new Set<string>()\r\n    const mod = availableStates()\r\n    const set = new Set(mod)\r\n\r\n    for (const entry of entries()) {\r\n      const both = entry.requires.concat(entry.assigns)\r\n      for (const tag of both) {\r\n        if (!set.has(tag)) bad.add(tag)\r\n      }\r\n    }\r\n\r\n    return Array.from(bad.keys())\r\n  })\r\n\r\n  createEffect(() => {\r\n    setEntries(state.scenario?.entries || [])\r\n  })\r\n\r\n  const updateEntry = <T extends AppSchema.ScenarioEventTrigger = AppSchema.ScenarioEventTrigger>(\r\n    index: number,\r\n    update: Partial<AppSchema.ScenarioEvent<T>>\r\n  ) => {\r\n    setEntries((prev) => {\r\n      return prev.map((entry, i) => (index !== i ? entry : { ...entry, ...update }))\r\n    })\r\n  }\r\n\r\n  const addEntry = () => {\r\n    const requiresGreeting =\r\n      state.scenario?.overwriteCharacterScenario &&\r\n      !entries().some((e) => e.trigger.kind === 'onGreeting')\r\n    const newEvent: AppSchema.ScenarioEvent = {\r\n      name: requiresGreeting ? 'Greeting' : '',\r\n      type: 'world',\r\n      text: '',\r\n      requires: [],\r\n      assigns: [],\r\n      trigger: requiresGreeting\r\n        ? { kind: 'onGreeting' }\r\n        : {\r\n            kind: 'onManualTrigger',\r\n            probability: 1,\r\n          },\r\n    }\r\n    setEntries([...entries(), newEvent])\r\n  }\r\n\r\n  const moveItem = (index: number, direction: number) => {\r\n    const newItems = [...entries()]\r\n    const itemToMove = newItems.splice(index, 1)[0]\r\n    newItems.splice(index + direction, 0, itemToMove)\r\n    setEntries(newItems)\r\n  }\r\n\r\n  const removeEntry = (entry: AppSchema.ScenarioEvent) => {\r\n    setEntries(entries().filter((e) => e !== entry))\r\n  }\r\n\r\n  const changeTriggerKind = (\r\n    entry: AppSchema.ScenarioEvent,\r\n    kind: AppSchema.ScenarioTriggerKind\r\n  ) => {\r\n    let trigger: AppSchema.ScenarioEventTrigger\r\n    switch (kind) {\r\n      case 'onGreeting':\r\n        trigger = {\r\n          kind: 'onGreeting',\r\n        }\r\n        break\r\n\r\n      case 'onManualTrigger':\r\n        trigger = {\r\n          kind: 'onManualTrigger',\r\n          probability: 1,\r\n        }\r\n        break\r\n\r\n      case 'onChatOpened':\r\n        trigger = {\r\n          kind: 'onChatOpened',\r\n          awayHours: 2,\r\n        }\r\n        break\r\n\r\n      case 'onCharacterMessageReceived':\r\n        trigger = {\r\n          kind: 'onCharacterMessageReceived',\r\n          minMessagesSinceLastEvent: 5,\r\n        }\r\n        break\r\n    }\r\n    const newEntry = { ...entry, trigger }\r\n    setEntries(entries().map((e) => (e === entry ? newEntry : e)))\r\n  }\r\n\r\n  const onSubmit = () => {\r\n    if (!state.scenario) return\r\n\r\n    const body = getStrictForm(props.form, {\r\n      name: 'string',\r\n      description: 'string?',\r\n      text: 'string',\r\n      overwriteCharacterScenario: 'boolean',\r\n      instructions: 'string?',\r\n    })\r\n\r\n    const inputs = getForm<any>(props.form)\r\n\r\n    const ents = entries()\r\n\r\n    for (let i = 0; i < ents.length; i++) {\r\n      const entry = ents[i]\r\n      entry.name = inputs['name.' + i]\r\n      entry.text = inputs['text.' + i]\r\n      entry.type = inputs['type.' + i]\r\n      entry.trigger.kind = inputs['trigger-kind.' + i]\r\n\r\n      switch (entry.trigger.kind) {\r\n        case 'onManualTrigger':\r\n          entry.trigger.probability = +inputs['trigger-probability.' + i]\r\n          break\r\n\r\n        case 'onCharacterMessageReceived':\r\n          entry.trigger.minMessagesSinceLastEvent =\r\n            +inputs['trigger-minMessagesSinceLastEvent.' + i]\r\n          break\r\n\r\n        case 'onChatOpened':\r\n          entry.trigger.awayHours = +inputs['trigger-awayHours.' + i]\r\n          break\r\n      }\r\n    }\r\n\r\n    const update: NewScenario = {\r\n      name: body.name,\r\n      description: body.description,\r\n      text: body.text,\r\n      states: [],\r\n      overwriteCharacterScenario: body.overwriteCharacterScenario,\r\n      instructions: body.instructions,\r\n      entries: ents,\r\n    }\r\n\r\n    scenarioStore.update(state.scenario._id, update)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <EventsHelp />\r\n\r\n      <FormLabel label=\"States Used\" helperText=\"The states you have used in your events so far\" />\r\n      <div class=\"flex gap-2\">\r\n        <For each={availableStates()}>\r\n          {(state) => {\r\n            if (state.startsWith('!')) return null\r\n            return <Pill type=\"hl\">{state}</Pill>\r\n          }}\r\n        </For>\r\n      </div>\r\n\r\n      <div class=\"relative flex flex-col gap-4\">\r\n        <div class=\"sticky top-0 z-[1] flex items-center justify-between rounded-md bg-[var(--bg-900)] p-2\">\r\n          <div class=\"text-lg font-bold\">Events</div>\r\n          <Button onClick={addEntry}>\r\n            <Plus /> Create Event\r\n          </Button>\r\n        </div>\r\n\r\n        <Switch>\r\n          <Match when={!entries().length}>\r\n            <div class=\"mt-16 flex w-full justify-center rounded-full text-xl\">\r\n              You have no events yet.\r\n            </div>\r\n          </Match>\r\n\r\n          <Match when={true}>\r\n            <Index each={entries()}>\r\n              {(entry, index) => (\r\n                <Accordian\r\n                  open={!entry().text}\r\n                  title={\r\n                    <div class={`mb-1 flex w-full items-start justify-between gap-2`}>\r\n                      <TextInput\r\n                        fieldName={`name.${index}`}\r\n                        required\r\n                        class=\"border-[1px]\"\r\n                        parentClass=\"w-full\"\r\n                        value={entry().name}\r\n                        placeholder='Event name, e.g. \"Greeting\"'\r\n                        onChange={(ev) => updateEntry(index, { name: ev.currentTarget.value })}\r\n                      />\r\n                      <div class=\"flex gap-2\">\r\n                        <div class=\"ml-2 flex flex-col justify-center space-y-1\">\r\n                          <Show when={index !== 0}>\r\n                            <button class=\"ml-2\" onClick={() => moveItem(index, -1)}>\r\n                              <ChevronUp size={16} />\r\n                            </button>\r\n                          </Show>\r\n                          <Show when={index !== entries().length - 1}>\r\n                            <button class=\"ml-2\" onClick={() => moveItem(index, 1)}>\r\n                              <ChevronDown size={16} />\r\n                            </button>\r\n                          </Show>\r\n                        </div>\r\n                        <Button\r\n                          schema=\"clear\"\r\n                          class=\"icon-button\"\r\n                          onClick={() => removeEntry(entry())}\r\n                        >\r\n                          <X />\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                >\r\n                  <div class=\"flex flex-col gap-2 p-4\">\r\n                    <Card>\r\n                      <Select\r\n                        fieldName={`trigger-kind.${index}`}\r\n                        label=\"Trigger\"\r\n                        items={triggerTypeOptions}\r\n                        value={entry().trigger.kind}\r\n                        onChange={(option) =>\r\n                          changeTriggerKind(entry(), option.value as AppSchema.ScenarioTriggerKind)\r\n                        }\r\n                      />\r\n                      <FormLabel\r\n                        label=\"Required States\"\r\n                        helperText=\"Which state(s) are required before this event can be triggered.\"\r\n                      />\r\n                      <TagInput\r\n                        fieldName={`requires.${index}`}\r\n                        disabled={entry().trigger.kind === 'onGreeting'}\r\n                        availableTags={availableStates()}\r\n                        value={entry().requires || []}\r\n                        placeholder=\"States required to trigger\"\r\n                        onSelect={(ev) => updateEntry(index, { requires: ev })}\r\n                      />\r\n                      <FormLabel\r\n                        label=\"States to Assign\"\r\n                        helperText=\"When triggered, which states will be assigned to the chat\"\r\n                      />\r\n                      <TagInput\r\n                        fieldName={`assigns.${index}`}\r\n                        availableTags={availableStates()}\r\n                        value={entry().assigns}\r\n                        placeholder=\"States to add when triggered\"\r\n                        onSelect={(ev) => updateEntry(index, { assigns: ev })}\r\n                      />\r\n                    </Card>\r\n                    <Card>\r\n                      <Select\r\n                        fieldName={`type.${index}`}\r\n                        label=\"Type\"\r\n                        helperText=\"How will this event be shown to the user.\"\r\n                        items={eventTypeOptions}\r\n                        value={entry().type}\r\n                        onChange={(ev) => updateEntry(index, { type: ev.value as any })}\r\n                      />\r\n                    </Card>\r\n\r\n                    <FormLabel\r\n                      label=\"Prompt Text\"\r\n                      helperText=\"The prompt text to send whenever this event occurs. The (OOC: something) text will be hidden from the user.\"\r\n                    />\r\n                    <PromptEditor\r\n                      fieldName={`text.${index}`}\r\n                      showHelp\r\n                      placeholder=\"*{{char}} suddenly remembers something important to say to {{user}}!* (OOC: Make up a personal memory with {{user}}.)\"\r\n                      hideHelperText\r\n                      noDummyPreview\r\n                      value={entry().text}\r\n                      onChange={(ev) => updateEntry(index, { text: ev })}\r\n                      include={['char', 'user', 'random', 'roll', 'idle_duration', 'chat_age']}\r\n                    />\r\n\r\n                    <Switch>\r\n                      <Match when={entry().trigger.kind === 'onGreeting'}>\r\n                        <TitleCard>Automatically sent when starting a new chat.</TitleCard>\r\n                      </Match>\r\n\r\n                      <Match when={entry().trigger.kind === 'onManualTrigger'}>\r\n                        <Card>\r\n                          <RangeInput\r\n                            fieldName={`trigger-probability.${index}`}\r\n                            label=\"Probability\"\r\n                            helperText=\"Manual triggers will be randomly selected, with higher probability for higher values.\"\r\n                            value={(entry().trigger as AppSchema.ScenarioOnManual).probability}\r\n                            min={0}\r\n                            max={100}\r\n                            step={0.01}\r\n                            onChange={(ev) =>\r\n                              updateEntry(index, {\r\n                                trigger: { kind: 'onManualTrigger', probability: ev },\r\n                              })\r\n                            }\r\n                          />\r\n                        </Card>\r\n                      </Match>\r\n\r\n                      <Match when={entry().trigger.kind === 'onChatOpened'}>\r\n                        <Card>\r\n                          <RangeInput\r\n                            fieldName={`trigger-awayHours.${index}`}\r\n                            label=\"After (hours)\"\r\n                            helperText=\"After how many hours should this trigger be activated? The longest trigger will be selected.\"\r\n                            value={(entry().trigger as AppSchema.ScenarioOnChatOpened).awayHours}\r\n                            min={0}\r\n                            max={24 * 7}\r\n                            step={1}\r\n                            onChange={(ev) =>\r\n                              updateEntry(index, {\r\n                                trigger: { kind: 'onChatOpened', awayHours: ev },\r\n                              })\r\n                            }\r\n                          />\r\n                        </Card>\r\n                      </Match>\r\n\r\n                      <Match when={entry().trigger.kind === 'onCharacterMessageReceived'}>\r\n                        <Card>\r\n                          <RangeInput\r\n                            fieldName={`trigger-minMessagesSinceLastEvent.${index}`}\r\n                            label=\"After (messages since last event)\"\r\n                            helperText=\"After how many message should this trigger be activated? The shortest trigger will be selected.\"\r\n                            value={\r\n                              (entry().trigger as AppSchema.ScenarioOnCharacterMessageRx)\r\n                                .minMessagesSinceLastEvent\r\n                            }\r\n                            min={2}\r\n                            max={100}\r\n                            step={1}\r\n                            onChange={(ev) =>\r\n                              updateEntry(index, {\r\n                                trigger: {\r\n                                  kind: 'onCharacterMessageReceived',\r\n                                  minMessagesSinceLastEvent: ev,\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </Card>\r\n                      </Match>\r\n                    </Switch>\r\n                  </div>\r\n                </Accordian>\r\n              )}\r\n            </Index>\r\n          </Match>\r\n        </Switch>\r\n\r\n        <div class=\"mt-4 flex justify-end gap-2\">\r\n          <Button onClick={() => nav(`/memory?tab=1`)} schema=\"secondary\">\r\n            <X />\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={onSubmit} disabled={state.loading || invalidStates().length > 0}>\r\n            <Save />\r\n            Update\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditScenarioEvents\r\n\r\nconst EventsHelp: Component = () => {\r\n  return (\r\n    <Accordian\r\n      class=\"mb-2 bg-[var(--bg-800)]\"\r\n      open={false}\r\n      titleClickOpen\r\n      title={<div class=\"text-lg font-bold\">Scenario Events Help</div>}\r\n    >\r\n      <div class=\"space-y-4\">\r\n        <p>Events are triggers when:</p>\r\n        <ul class=\"list-inside list-disc\">\r\n          <li>\r\n            <code>Greeting</code>: The very first time the user starts a chat\r\n          </li>\r\n          <li>\r\n            <code>Manual Trigger</code>: When the user uses the <i>Trigger Event</i> menu in the\r\n            chat\r\n          </li>\r\n          <li>\r\n            <code>Chat Opened</code>: When the user opens a chat with a character after some time\r\n          </li>\r\n          <li>\r\n            <code>Message Received</code>: When the character writes something\r\n          </li>\r\n        </ul>\r\n        <p>Whenever an event is triggered, a prompt will be sent to the character.</p>\r\n        <ul class=\"list-inside list-disc\">\r\n          <li>\r\n            <code>World</code>: The event will be shown as if something happened independently of\r\n            the character.\r\n          </li>\r\n          <li>\r\n            <code>Character</code>: The event will be shown as if the character wrote it, for\r\n            example if the character does something.\r\n          </li>\r\n          <li>\r\n            <code>Hidden</code>: The event will be hidden from the user. This is useful to make the\r\n            character do something, and make it look like it was on their own initiative.\r\n          </li>\r\n          <li>\r\n            <code>OOC</code>: The event will be hidden from the character. This is useful to give\r\n            information or clues to the user.\r\n          </li>\r\n        </ul>\r\n        <p>The prompt text will have processing.</p>\r\n        <ul class=\"list-inside list-disc\">\r\n          <li>\r\n            The <code>{'{{char}}'}</code> and <code>{'{{user}}'}</code> placeholders will be\r\n            replaced\r\n          </li>\r\n          <li>\r\n            Any text with <code>(OOC: TEXT)</code> will be hidden from the user, so you can add\r\n            additional instructions for the character.\r\n          </li>\r\n          <li>\r\n            It is recommended to wrap your text in <code>*asterisks*</code> unless you want the\r\n            character to <i>say</i> the prompt text.\r\n          </li>\r\n        </ul>\r\n        <p>\r\n          Finally, you can use the states to control which events are triggered under which\r\n          conditions. The chat will keep track of a list of <i>states</i>, which can be assigned by\r\n          events.\r\n        </p>\r\n        <ul class=\"list-inside list-disc\">\r\n          <li>\r\n            Required states are states that must exist in the chat to allow the trigger to run. You\r\n            can also prefix a required state by <code>!</code> to require the state <i>not</i> to\r\n            exist in the chat for the event to run. You can specify multiple states by separating\r\n            them with a comma.\r\n          </li>\r\n          <li>\r\n            Assigned states are states that will be added to the chat whenever the event is\r\n            triggered. You can also prefix an assigned state by <code>!</code> to <i>remove</i> the\r\n            state from the chat. You can specify multiple states by separating them with a comma.\r\n          </li>\r\n        </ul>\r\n        <p>When multiple events can run, they will be randomly selected.</p>\r\n      </div>\r\n    </Accordian>\r\n  )\r\n}\r\n"],"names":["Component","Show","createSignal","onMount","scenarioStore","PageHeader","Button","Copy","Download","Trash","useNavigate","useParams","TextInput","deepCloneAndRemoveFields","Divider","Toggle","ConfirmModal","ExportScenarioModal","EditScenarioEvents","CreateScenario","ref","params","editId","nav","state","x","loading","scenario","scenarios","find","s","_id","showDelete","setShowDelete","showDownload","setShowDownload","getOne","confirmDelete","remove","duplicateScenario","clone","create","r","_$createComponent","title","_el$6","_tmpl$8","cloneNode","_el$7","firstChild","_el$8","nextSibling","_el$9","_el$11","_el$13","_$insert","schema","onClick","children","_tmpl$5","_tmpl$6","_tmpl$7","_el$","_tmpl$2","when","entries","length","fallback","_tmpl$9","_el$2","_tmpl$","_el$3","_tmpl$3","_el$5","_tmpl$4","_ref$","_$use","fieldName","required","label","helperText","placeholder","value","name","description","isMultiline","text","overwriteCharacterScenario","instructions","form","show","close","confirm","message","undefined","createMemo","AppSchema","Modal","Save","X","ScenarioBook","props","filename","replace","toLowerCase","encodedJson","dataStr","encodeURIComponent","JSON","stringify","$schema","footer","_$memo","_$effect","_p$","_v$","_v$2","_$setAttribute","For","Index","Match","Switch","createEffect","ChevronDown","ChevronUp","Plus","NewScenario","Accordian","Select","Option","RangeInput","getForm","getStrictForm","TagInput","PromptEditor","FormLabel","Card","Pill","TitleCard","eventTypeOptions","ScenarioEventType","triggerTypeOptions","Array","ScenarioTriggerKind","HTMLFormElement","setEntries","ScenarioEvent","availableStates","states","Set","entry","assigns","concat","requires","startsWith","add","from","getAll","invalidStates","bad","mod","set","both","tag","has","keys","updateEntry","ScenarioEventTrigger","index","update","Partial","T","prev","map","i","addEntry","requiresGreeting","some","e","trigger","kind","newEvent","type","probability","moveItem","direction","newItems","itemToMove","splice","removeEntry","filter","changeTriggerKind","awayHours","minMessagesSinceLastEvent","newEntry","onSubmit","body","inputs","ents","EventsHelp","each","_el$4","open","_el$10","parentClass","onChange","ev","currentTarget","$$click","size","_el$12","items","option","disabled","availableTags","onSelect","showHelp","hideHelperText","noDummyPreview","include","ScenarioOnManual","min","max","step","ScenarioOnChatOpened","ScenarioOnCharacterMessageRx","titleClickOpen","_$delegateEvents"],"version":3,"file":"EditScenario.da052a76.js.map"}