{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A,M,+B,W,G,C,G,e,E,C,sD,C,E,I,gC,W,G,C,G,e,E,C,+E,C,E,I,gC,W,G,C,G,e,E,C,6I,C,E,I,gC,W,G,C,G,e,E,C,kG,C,E,I,gC,W,G,C,G,e,E,C,qJ,C,E,I,gC,W,G,C,G,e,E,C,kD,C,E;AAaA,MAAM6B,mCAAwBA;IAC5BP,CAAAA,GAAAA,4BAAAA,EAAsB;IACtB,MAAMQ,MAAM7B,CAAAA,GAAAA,kBAAAA;IACZ,MAAM8B,QAAQb,CAAAA,GAAAA,kBAAAA,EAAac,CAAAA,IAAO,CAAA;YAChCC,SAASD,EAAEC,OAAO,CACfC,GAAG,CAAEC,CAAAA,MAAS,CAAA;oBAAE,GAAGA,GAAG;oBAAEC,OAAQ,CAAA,CAAA,EAAGb,CAAAA,GAAAA,qBAAAA,EAAeY,IAAIE,OAAO,EAAE,EAAA,EAAIF,IAAIG,IAAK,CAApDF,CAAAA;gBAAsD,CAAA,GAC9EG,IAAI,CAACf,CAAAA,GAAAA,kBAAAA;QACV,CAAA;IACA,MAAMgB,MAAMrB,CAAAA,GAAAA,mBAAAA,EAAca,CAAAA,IAAMA,EAAES,MAAM;IAExC,MAAMC,kBAAkBnC,CAAAA,GAAAA,iBAAAA,EAAW,IAAMc,CAAAA,GAAAA,wBAAAA;IAEzC,MAAMsB,WAAWC,OAAOC,OAAO,CAAC7B,CAAAA,GAAAA,qBAAAA,GAC7B8B,MAAM,CAAC,CAAC,CAACC,GAAGZ,IAAI;QACf,IAAI,CAACK,IAAIQ,QAAQ,CAACC,QAAQ,CAACd,IAAIE,OAAO,GAAG,OAAO;QAChD,IAAI,CAACK,kBAAkBO,QAAQ,CAACd,IAAIE,OAAO,GAAG,OAAO;QACrD,IAAIF,IAAIE,OAAO,KAAK,aAAa,OAAO;QACxC,OAAOG,IAAIU,IAAI,CAACC,MAAM,GAAG;IAC3B,GACCjB,GAAG,CAAC,CAAC,CAACkB,IAAIZ,IAAI,GAAM,CAAA;YAAE,GAAGA,GAAG;YAAEJ,OAAQ,CAAA,CAAA,EAAGI,IAAIH,OAAQ,CAAA,EAAA,EAAIG,IAAIF,IAAK,CAAA,CAAC;YAAEe,KAAKD;QAAG,CAAA,GAC7Eb,IAAI,CAACf,CAAAA,GAAAA,kBAAAA;IAER,MAAM,CAAC8B,UAAUC,YAAY,GAAG/C,CAAAA,GAAAA,mBAAAA;IAChC,MAAM,CAACgD,WAAWC,aAAa,GAAGjD,CAAAA,GAAAA,mBAAAA,EAAa;IAE/C,MAAMkD,eAAeA;QACnB,MAAMC,WAAWL;QACjB,IAAI,CAACK,UAAU;QAEfzC,CAAAA,GAAAA,kBAAAA,EAAYwC,YAAY,CAACC,UAAU,IAAM7B,IAAI;QAC7CyB;IACF;IAEA7C,CAAAA,GAAAA,cAAAA,EAAQ;QACNQ,CAAAA,GAAAA,kBAAAA,EAAY0C,UAAU;IACxB;IAEA,OAAA;QAAAC,CAAAA,GAAAA,sBAAAA,EAEK9C,CAAAA,GAAAA,cAAAA,GAFL;YAEgB+C,OAAAA;QAAK;QAAA,CAAA;YAAA,MAAAC,OAAAC,6BAAAC,SAAA,CAAA;YAAAC,CAAAA,GAAAA,aAAAA,EAAAH,MAAAF,CAAAA,GAAAA,sBAAAA,EAEd7D,CAAAA,GAAAA,QAAAA,GAFckE;gBAEZC,MAAAA;gBAAI,IAAAC,YAAA;oBAAA,OAAAP,CAAAA,GAAAA,sBAAAA,EACJjD,CAAAA,GAAAA,cAAAA,GADI;wBACE,IAAAwD,YAAA;4BAAA,OAAA;gCAAAP,CAAAA,GAAAA,sBAAAA,EACJzD,CAAAA,GAAAA,WAAAA,GADI,CAAA;gCAAA;6BAAA;wBACA;oBAAA;gBAAA;YAAA,IAAA;YAAA8D,CAAAA,GAAAA,aAAAA,EAAAH,MAAAF,CAAAA,GAAAA,sBAAAA,EAIRjD,CAAAA,GAAAA,cAAAA,GAJQsD;gBAIDG,SAASA,IAAMZ,aAAa;gBAAK,IAAAW,YAAA;oBAAA,OAAA;wBAAAP,CAAAA,GAAAA,sBAAAA,EACtC1D,CAAAA,GAAAA,aAAAA,GADsC;4BAC/BmE,MAAM;wBAAE;wBAAA;qBAAA;gBAAA;YAAA,IAAA;YAAA,OAAAP;QAAA,CAAA;QAAA,CAAA;YAAA,MAAAQ,QAAAC,8BAAAP,SAAA,CAAA,OAAAQ,QAAAF,MAAAG,UAAA;YAAAR,CAAAA,GAAAA,aAAAA,EAAAK,OAAAV,CAAAA,GAAAA,sBAAAA,EAKjBpD,CAAAA,GAAAA,UAAAA,GALiByD;gBAKd,IAACS,QAAD;oBAAK,OAAE5C,MAAME,OAAO;gBAAA;gBAAAmC,UACpBQ,CAAAA,SADoBR,AAAAA,CAAAA;wBACd,MAAAS,QAAAC,8BAAAb,SAAA,CAAA;wBAAAC,CAAAA,GAAAA,aAAAA,EAAAW,OAAAhB,CAAAA,GAAAA,sBAAAA,EAEH7D,CAAAA,GAAAA,QAAAA,GAFGkE;4BAEF,IAACC,QAAD;gCAAK,OAAG,CAAA,SAAA,EAAWS,OAAOvB,GAAI,CAAA,CAAC;4BAAA;4BAAA,SAAA;4BAAA,IAAAe,YAAA;gCAAA,MAAAW,QAAAC,8BAAAf,SAAA,CAAA,OAAAgB,QAAAF,MAAAL,UAAA,EAAAQ,QAAAD,MAAAP,UAAA,EAAAS,QAAAD,MAAAE,WAAA;gCAAAlB,CAAAA,GAAAA,aAAAA,EAAAgB,OAAA,IAGrBN,OAAOtC,IAAI;gCAAA4B,CAAAA,GAAAA,aAAAA,EAAAiB,OAAA,IAEd5D,CAAAA,GAAAA,qBAAAA,EAAeqD,OAAOvC,OAAO;gCAAC,OAAA0C;4BAAA;wBAAA,IAAA;wBAAAb,CAAAA,GAAAA,aAAAA,EAAAW,OAAAhB,CAAAA,GAAAA,sBAAAA,EAKtCjD,CAAAA,GAAAA,cAAAA,GALsCsD;4BAMrCmB,QAAAA;4BACAf,MAAAA;4BACAD,SAASA,IAAMvC,IAAK,CAAA,oBAAA,EAAsB8C,OAAOvB,GAAI,CAAA,CAAC;4BAAC,SAAA;4BAAA,IAAAe,YAAA;gCAAA,OAAAP,CAAAA,GAAAA,sBAAAA,EAGtD3D,CAAAA,GAAAA,WAAAA,GAHsD,CAAA;4BAGlD;wBAAA,IAAA;wBAAAgE,CAAAA,GAAAA,aAAAA,EAAAW,OAAAhB,CAAAA,GAAAA,sBAAAA,EAENjD,CAAAA,GAAAA,cAAAA,GAFMsD;4BAGLmB,QAAAA;4BACAf,MAAAA;4BACAD,SAASA,IAAMd,YAAYqB,OAAOvB,GAAG;4BAAC,SAAA;4BAAA,IAAAe,YAAA;gCAAA,OAAAP,CAAAA,GAAAA,sBAAAA,EAGrCxD,CAAAA,GAAAA,YAAAA,GAHqC,CAAA;4BAGhC;wBAAA,IAAA;wBAAA,OAAAwE;oBAAA,CAAA;YAGX,IAAAJ;YAAAP,CAAAA,GAAAA,aAAAA,EAAAK,OAAAV,CAAAA,GAAAA,sBAAAA,EAIFpD,CAAAA,GAAAA,UAAAA,GAJEyD;gBAIES,MAAMhC;gBAAQyB,UACfQ,CAAAA,SADeR,AAAAA,CAAAA;wBACT,MAAAkB,QAAAC,8BAAAtB,SAAA,CAAA;wBAAAC,CAAAA,GAAAA,aAAAA,EAAAoB,OAAAzB,CAAAA,GAAAA,sBAAAA,EAEH7D,CAAAA,GAAAA,QAAAA,GAFGkE;4BAEF,IACAC,QADA;gCACI,OAAG,CAAA,oBAAA,EAAsBS,OAAOvB,GAAI,CAAA,CAAC;4BAAA;4BAAA,SAAA;4BAAA,IAAAe,YAAA;gCAAA,MAAAoB,SAAAC,8BAAAxB,SAAA,CAAA,OAAAyB,SAAAF,OAAAd,UAAA,EAAAiB,SAAAD,OAAAN,WAAA,EAAAQ,SAAAD,OAAAP,WAAA;gCAAAlB,CAAAA,GAAAA,aAAAA,EAAAyB,QAAA,IAKjBf,OAAOtC,IAAI;gCAAA4B,CAAAA,GAAAA,aAAAA,EAAA0B,QAAA,IAE9BrE,CAAAA,GAAAA,qBAAAA,EAAeqD,OAAOvC,OAAO;gCAAC,OAAAmD;4BAAA;wBAAA;wBAAA,OAAAF;oBAAA,CAAA;YAKxC,IAAA;YAAA,OAAAf;QAAA,CAAA;QAAAV,CAAAA,GAAAA,sBAAAA,EAIJlD,CAAAA,GAAAA,WAAAA,GAJI;YAIA,IAACkF,QAAD;gBAAK,OAAErC;YAAW;YAAA,IAAAY,YAAA;gBAAA,OAAAP,CAAAA,GAAAA,sBAAAA,EACpBiC,oCADoB;oBACPC,SAASA,IAAMjE,IAAK,CAAA,YAAA,CAAa;oBAAGkE,OAAOA,IAAMvC,aAAa;gBAAM;YAAA;QAAA;QAAAI,CAAAA,GAAAA,sBAAAA,EAGnF/C,CAAAA,GAAAA,mBAAAA,GAHmF;YAGvE,IACXmF,QADW;gBACP,OAAE,CAAC,CAAC3C;YAAU;YAClB0C,OAAOA,IAAMzC;YACb2C,SAASxC;YACTyC,SAAAA;QAAO;KAAA;AAIf;AAEA,MAAMC,oCAAc;IAClB,GAAGnF,CAAAA,GAAAA,sBAAAA,CAAe;IAClBoF,OAAO;IACPC,kBAAkB;IAClBhE,MAAM;IACNiE,UAAU;IACVC,aAAa;AACf;AAEA,MAAMV,qCAAuEY,CAAAA;IAC3E,MAAMC,WAAW,OAAOC;QACtB,IAAI,CAACA,MAAMzD,MAAM,EACf;QAGF,IAAI;YACF,MAAM0D,UAAU,MAAMlF,CAAAA,GAAAA,sBAAAA,EAAgBiF,KAAK,CAAC,EAAE;YAC9C,MAAME,SAASC,KAAKC,KAAK,CAACH;YAE1B,MAAM,UAAEI,MAAM,UAAEC,MAAAA,EAAQ,GAAGtF,CAAAA,GAAAA,mBAAAA,EAAawE,mCAAaU,QAAQ;gBAAEK,UAAU;YAAK;YAC9E,IAAIF,OAAO9D,MAAM,EAAE;gBACjB/B,CAAAA,GAAAA,iBAAAA,EAAWgG,KAAK,CAAE,CAAA,qBAAA,EAAuBH,OAAOI,IAAI,CAAC,MAAM,CAAC;gBAC5DC,QAAQC,GAAG,CAACN;gBACZ;YACF;YAEA/F,CAAAA,GAAAA,kBAAAA,EAAYsG,eAAe,CAACN;YAC5BR,MAAMX,OAAO;QACf,EAAE,OAAO0B,IAAS;YAChBrG,CAAAA,GAAAA,iBAAAA,EAAWgG,KAAK,CAAE,CAAA,wBAAA,EAA0BK,GAAGtB,OAAQ,CAAA,CAAC;YACxD;QACF;IACF;IAEA,OAAAtC,CAAAA,GAAAA,sBAAAA,EACGhD,CAAAA,GAAAA,cAAAA,GADH;QACSoF,MAAAA;QAAI,IAACD,SAAD;YAAM,OAAEU,MAAMV,KAAK;QAAA;QAAElC,OAAAA;QAAK,IAAAM,YAAA;YAAA,OAAAP,CAAAA,GAAAA,sBAAAA,EAClCpC,CAAAA,GAAAA,cAAAA,GADkC;gBACxBiG,WAAAA;gBAAiBtF,OAAAA;gBAAoBuF,UAAUhB;YAAQ;QAAA;IAAA;AAGxE;IAEA,2CAAe9E","sources":["web/pages/GenerationPresets/PresetList.tsx"],"sourcesContent":["import { A, useNavigate } from '@solidjs/router'\r\nimport { Copy, Import, Plus, Trash } from 'lucide-solid'\r\nimport { Component, createMemo, createSignal, For, onMount, Show } from 'solid-js'\r\nimport Button from '../../shared/Button'\r\nimport Modal, { ConfirmModal } from '../../shared/Modal'\r\nimport PageHeader from '../../shared/PageHeader'\r\nimport { defaultPresets, presetValidator } from '../../../common/presets'\r\nimport { presetStore, settingStore, toastStore } from '../../store'\r\nimport { getUsableServices, setComponentPageTitle } from '../../shared/util'\r\nimport { getServiceName, sortByLabel } from '/web/shared/adapter'\r\nimport FileInput, { FileInputResult, getFileAsString } from '/web/shared/FileInput'\r\nimport { validateBody } from '/common/valid'\r\n\r\nconst PresetList: Component = () => {\r\n  setComponentPageTitle('Presets')\r\n  const nav = useNavigate()\r\n  const state = presetStore((s) => ({\r\n    presets: s.presets\r\n      .map((pre) => ({ ...pre, label: `[${getServiceName(pre.service)}] ${pre.name}` }))\r\n      .sort(sortByLabel),\r\n  }))\r\n  const cfg = settingStore((s) => s.config)\r\n\r\n  const useableServices = createMemo(() => getUsableServices())\r\n\r\n  const defaults = Object.entries(defaultPresets)\r\n    .filter(([_, pre]) => {\r\n      if (!cfg.adapters.includes(pre.service)) return false\r\n      if (!useableServices().includes(pre.service)) return false\r\n      if (pre.service !== 'agnaistic') return true\r\n      return cfg.subs.length > 0\r\n    })\r\n    .map(([id, cfg]) => ({ ...cfg, label: `[${cfg.service}] ${cfg.name}`, _id: id }))\r\n    .sort(sortByLabel)\r\n\r\n  const [deleting, setDeleting] = createSignal<string>()\r\n  const [importing, setImporting] = createSignal(false)\r\n\r\n  const deletePreset = () => {\r\n    const presetId = deleting()\r\n    if (!presetId) return\r\n\r\n    presetStore.deletePreset(presetId, () => nav('/presets'))\r\n    setDeleting()\r\n  }\r\n\r\n  onMount(() => {\r\n    presetStore.getPresets()\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <PageHeader title=\"Generation Presets\" />\r\n      <div class=\"mb-4 flex w-full justify-end gap-2\">\r\n        <A href=\"/presets/new\">\r\n          <Button>\r\n            <Plus />\r\n            New\r\n          </Button>\r\n        </A>\r\n        <Button onClick={() => setImporting(true)}>\r\n          <Import size={20} /> Import\r\n        </Button>\r\n      </div>\r\n\r\n      <div class=\"flex flex-col items-center gap-2\">\r\n        <For each={state.presets}>\r\n          {(preset) => (\r\n            <div class=\"bg-800 flex w-full items-center gap-2 rounded-xl py-1 hover:bg-[var(--bg-600)]\">\r\n              <A href={`/presets/${preset._id}`} class=\" flex w-full\">\r\n                <div class=\"ml-4 flex w-full flex-col items-start\">\r\n                  <div>\r\n                    <div>{preset.name}</div>\r\n                    <div class=\"mr-1 text-xs italic text-[var(--text-600)]\">\r\n                      {getServiceName(preset.service)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </A>\r\n              <Button\r\n                schema=\"clear\"\r\n                size=\"sm\"\r\n                onClick={() => nav(`/presets/new?preset=${preset._id}`)}\r\n                class=\"icon-button\"\r\n              >\r\n                <Copy />\r\n              </Button>\r\n              <Button\r\n                schema=\"clear\"\r\n                size=\"sm\"\r\n                onClick={() => setDeleting(preset._id)}\r\n                class=\"icon-button\"\r\n              >\r\n                <Trash />\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </For>\r\n\r\n        <div>Built-in Presets</div>\r\n        <For each={defaults}>\r\n          {(preset) => (\r\n            <div class=\"flex w-full items-center gap-2\">\r\n              <A\r\n                href={`/presets/new?preset=${preset._id}`}\r\n                class=\"bg-800 flex w-full gap-2 rounded-xl hover:bg-[var(--bg-600)]\"\r\n              >\r\n                <div class=\"x ml-4 flex w-full flex-col items-start\">\r\n                  {' '}\r\n                  <div class=\"text-md\">{preset.name}</div>\r\n                  <div class=\"mr-1 text-xs italic text-[var(--text-600)]\">\r\n                    {getServiceName(preset.service)}\r\n                  </div>\r\n                </div>\r\n              </A>\r\n            </div>\r\n          )}\r\n        </For>\r\n      </div>\r\n\r\n      <Show when={importing()}>\r\n        <ImportPreset success={() => nav(`/presets/new`)} close={() => setImporting(false)} />\r\n      </Show>\r\n\r\n      <ConfirmModal\r\n        show={!!deleting()}\r\n        close={() => setDeleting()}\r\n        confirm={deletePreset}\r\n        message=\"Are you sure you wish to delete this preset?\"\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst importValid = {\r\n  ...presetValidator,\r\n  order: 'any',\r\n  disabledSamplers: 'any',\r\n  name: 'string?',\r\n  oaiModel: 'string?',\r\n  claudeModel: 'string?',\r\n} as const\r\n\r\nconst ImportPreset: Component<{ close: () => void; success: () => void }> = (props) => {\r\n  const onChange = async (files: FileInputResult[]) => {\r\n    if (!files.length) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      const content = await getFileAsString(files[0])\r\n      const parsed = JSON.parse(content)\r\n\r\n      const { errors, actual } = validateBody(importValid, parsed, { notThrow: true })\r\n      if (errors.length) {\r\n        toastStore.error(`Preset is not valid: ${errors.join(', ')}`)\r\n        console.log(errors)\r\n        return\r\n      }\r\n\r\n      presetStore.setImportPreset(actual as any)\r\n      props.success()\r\n    } catch (ex: any) {\r\n      toastStore.error(`Could not parse preset: ${ex.message}`)\r\n      return\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal show close={props.close} title=\"Import Preset\">\r\n      <FileInput fieldName=\"file\" label=\"Preset JSON\" onUpdate={onChange} />\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default PresetList\r\n"],"names":["A","useNavigate","Copy","Import","Plus","Trash","Component","createMemo","createSignal","For","onMount","Show","Button","Modal","ConfirmModal","PageHeader","defaultPresets","presetValidator","presetStore","settingStore","toastStore","getUsableServices","setComponentPageTitle","getServiceName","sortByLabel","FileInput","FileInputResult","getFileAsString","validateBody","PresetList","nav","state","s","presets","map","pre","label","service","name","sort","cfg","config","useableServices","defaults","Object","entries","filter","_","adapters","includes","subs","length","id","_id","deleting","setDeleting","importing","setImporting","deletePreset","presetId","getPresets","_$createComponent","title","_el$","_tmpl$","cloneNode","_$insert","href","children","onClick","size","_el$2","_tmpl$2","_el$3","firstChild","each","preset","_el$4","_tmpl$4","_el$5","_tmpl$3","_el$6","_el$7","_el$8","nextSibling","schema","_el$9","_tmpl$6","_el$10","_tmpl$5","_el$11","_el$12","_el$13","when","ImportPreset","success","close","show","confirm","message","importValid","order","disabledSamplers","oaiModel","claudeModel","const","props","onChange","files","content","parsed","JSON","parse","errors","actual","notThrow","error","join","console","log","setImportPreset","ex","fieldName","onUpdate"],"version":3,"file":"PresetList.f0e45518.js.map"}