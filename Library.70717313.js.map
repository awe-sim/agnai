{"mappings":"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","sources":["web/pages/Memory/Library.tsx","web/pages/PromptTemplates/index.tsx","web/pages/Memory/Memory.tsx"],"sourcesContent":["import { Component, Match, Switch, createEffect, createMemo } from 'solid-js'\r\nimport Tabs, { useTabs } from '/web/shared/Tabs'\r\nimport { setComponentPageTitle } from '/web/shared/util'\r\nimport ScenarioList from '../Scenario/ScenarioList'\r\nimport PromptTemplates from '../PromptTemplates'\r\nimport { BooksTab, EmbedsTab } from './Memory'\r\nimport { useSearchParams } from '@solidjs/router'\r\n\r\nexport { Library as default }\r\n\r\nconst Library: Component = () => {\r\n  const [params, setParams] = useSearchParams()\r\n  setComponentPageTitle('Library')\r\n\r\n  const allowed = createMemo(() => {\r\n    const base = ['Memories', 'Scenarios', 'Prompt Templates', 'Embeddings']\r\n\r\n    return base\r\n  })\r\n\r\n  const tabs = useTabs(allowed(), +(params.tab || '0'))\r\n\r\n  createEffect(() => {\r\n    const index = tabs.selected()\r\n    setParams({ tab: index })\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <Tabs tabs={tabs.tabs} select={tabs.select} selected={tabs.selected} />\r\n\r\n      <Switch>\r\n        <Match when={tabs.current() === 'Memories'}>\r\n          <BooksTab />\r\n        </Match>\r\n\r\n        <Match when={tabs.current() === 'Scenarios'}>\r\n          <ScenarioList />\r\n        </Match>\r\n\r\n        <Match when={tabs.current() === 'Prompt Templates'}>\r\n          <PromptTemplates />\r\n        </Match>\r\n\r\n        <Match when={tabs.current() === 'Embeddings'}>\r\n          <EmbedsTab />\r\n        </Match>\r\n      </Switch>\r\n    </>\r\n  )\r\n}\r\n","import { Component, For, Show, createMemo, createSignal, onMount } from 'solid-js'\r\nimport PageHeader from '/web/shared/PageHeader'\r\nimport Button from '/web/shared/Button'\r\nimport { presetStore } from '/web/store/presets'\r\nimport { Copy, Plus, Save, Trash } from 'lucide-solid'\r\nimport Divider from '/web/shared/Divider'\r\nimport { templates } from '../../../common/presets/templates'\r\nimport { useRootModal } from '/web/shared/hooks'\r\nimport Modal from '/web/shared/Modal'\r\nimport PromptEditor from '/web/shared/PromptEditor'\r\nimport TextInput from '/web/shared/TextInput'\r\nimport { AppSchema } from '/common/types'\r\nimport { getStrictForm } from '/web/shared/util'\r\nimport { toastStore } from '/web/store'\r\n\r\nexport { PromptTemplates as default }\r\n\r\nconst PromptTemplates: Component = () => {\r\n  const state = presetStore((s) => ({ templates: s.templates }))\r\n\r\n  const [show, setShow] = createSignal<boolean>(false)\r\n  const [edit, setEdit] = createSignal<AppSchema.PromptTemplate>()\r\n  const [initial, setInitial] = createSignal<string>()\r\n\r\n  const builtins = createMemo(() =>\r\n    Object.entries(templates).map(([name, template]) => ({\r\n      name,\r\n      template,\r\n    }))\r\n  )\r\n\r\n  onMount(() => {\r\n    presetStore.getTemplates()\r\n  })\r\n\r\n  const close = () => {\r\n    setEdit()\r\n    setShow(false)\r\n    setInitial('')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader title=\"Prompt Templates\" />\r\n\r\n      <div class=\"flex w-full flex-col gap-4\">\r\n        <div class=\"flex w-full justify-end\">\r\n          <Button onClick={() => setShow(true)}>\r\n            <Plus size={16} /> Template\r\n          </Button>\r\n        </div>\r\n\r\n        <div class=\"flex w-full flex-col gap-2\">\r\n          <Show when={state.templates.length === 0}>\r\n            <div class=\"flex justify-center\">You have no prompt templates saved</div>\r\n          </Show>\r\n          <For each={state.templates}>\r\n            {(each) => (\r\n              <div class=\"flex gap-2\">\r\n                <div\r\n                  class=\"bg-800 hover:bg-700 w-full cursor-pointer rounded-md p-2\"\r\n                  onClick={() => {\r\n                    setEdit(each)\r\n                    setShow(true)\r\n                  }}\r\n                >\r\n                  {each.name}\r\n                </div>\r\n                <Button\r\n                  schema=\"secondary\"\r\n                  onClick={() => {\r\n                    setInitial(each.template)\r\n                    setShow(true)\r\n                  }}\r\n                >\r\n                  <Copy />\r\n                </Button>\r\n                <Button\r\n                  schema=\"red\"\r\n                  onClick={() => {\r\n                    presetStore.deleteTemplate(each._id)\r\n                  }}\r\n                >\r\n                  <Trash />\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </For>\r\n          <Divider />\r\n          <div class=\"flex justify-center text-xl font-bold\">Built-in Templates</div>\r\n          <For each={builtins()}>\r\n            {(each) => (\r\n              <div class=\"flex w-full gap-2 font-bold\">\r\n                <div\r\n                  class=\"bg-800 hover:bg-700 w-full cursor-pointer rounded-md p-2\"\r\n                  onClick={() => {\r\n                    setInitial(each.template)\r\n                    setShow(true)\r\n                  }}\r\n                >\r\n                  {each.name}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </For>\r\n        </div>\r\n      </div>\r\n      <TemplateModal show={show()} close={close} initial={initial()} edit={edit()} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst TemplateModal: Component<{\r\n  show: boolean\r\n  edit?: AppSchema.PromptTemplate\r\n  initial?: string\r\n  close: () => void\r\n}> = (props) => {\r\n  let form: HTMLFormElement\r\n\r\n  const submit = () => {\r\n    const { name, template } = getStrictForm(form, { name: 'string', template: 'string' })\r\n\r\n    form.reportValidity()\r\n    if (!form.checkValidity()) {\r\n      return\r\n    }\r\n\r\n    if (props.edit) {\r\n      presetStore.updateTemplate(props.edit._id, { name, template }, () => {\r\n        toastStore.success('Template updated')\r\n        props.close()\r\n      })\r\n      return\r\n    }\r\n\r\n    presetStore.createTemplate(name, template, () => {\r\n      toastStore.success('Template created')\r\n      props.close()\r\n    })\r\n  }\r\n\r\n  const Footer = (\r\n    <>\r\n      <Button schema=\"secondary\" onClick={props.close}>\r\n        Cancel\r\n      </Button>\r\n      <Button schema=\"primary\" onClick={submit}>\r\n        <Save /> Save\r\n      </Button>\r\n    </>\r\n  )\r\n\r\n  useRootModal({\r\n    id: 'prompt-templates',\r\n    element: (\r\n      <Modal\r\n        title={'Prompt Templates'}\r\n        maxWidth=\"half\"\r\n        show={props.show}\r\n        close={props.close}\r\n        footer={Footer}\r\n      >\r\n        <form ref={form!} class=\"flex flex-col gap-4 text-sm\">\r\n          <TextInput\r\n            fieldName=\"name\"\r\n            placeholder=\"Name\"\r\n            label=\"Name\"\r\n            value={props.edit?.name || ''}\r\n            required\r\n          />\r\n          <PromptEditor\r\n            fieldName=\"template\"\r\n            value={props.edit?.template || props.initial || ''}\r\n            minHeight={100}\r\n            showHelp\r\n          />\r\n        </form>\r\n      </Modal>\r\n    ),\r\n  })\r\n\r\n  return null\r\n}\r\n","import { A } from '@solidjs/router'\r\nimport { assertValid } from '/common/valid'\r\nimport { Download, Plus, Trash, Upload, X, Edit, FileX, FileCheck } from 'lucide-solid'\r\nimport { Component, createEffect, createSignal, For, Show } from 'solid-js'\r\nimport { AppSchema } from '../../../common/types/schema'\r\nimport Button from '../../shared/Button'\r\nimport FileInput, { FileInputResult, getFileAsString } from '../../shared/FileInput'\r\nimport Modal, { ConfirmModal } from '../../shared/Modal'\r\nimport PageHeader from '../../shared/PageHeader'\r\nimport { memoryStore, toastStore } from '../../store'\r\nimport { SolidCard } from '/web/shared/Card'\r\nimport EmbedContent from './EmbedContent'\r\nimport { embedApi } from '/web/store/embeddings'\r\nimport { EditEmbedModal } from '/web/shared/EditEmbedModal'\r\n\r\nexport const EmbedsTab: Component = (props) => {\r\n  const state = memoryStore()\r\n  const [editing, setEditing] = createSignal<string>()\r\n  const [deleting, setDeleting] = createSignal<string>()\r\n\r\n  return (\r\n    <>\r\n      <PageHeader title=\"Memory - Embeddings\" />\r\n      <EmbedContent />\r\n\r\n      <div class=\"flex flex-col gap-2\">\r\n        <For each={state.embeds}>\r\n          {(each) => (\r\n            <div class=\"mt-2 flex w-full items-center gap-4\">\r\n              <SolidCard size=\"md\" class=\"flex w-full items-center gap-1\" bg=\"bg-800\">\r\n                <div\r\n                  class=\"flex cursor-pointer\"\r\n                  title={each.state === 'loaded' ? 'Loaded' : 'Not loaded'}\r\n                >\r\n                  {each.state === 'loaded' ? <FileCheck /> : <FileX class=\"text-gray-500\" />}\r\n                </div>\r\n                <div class=\"ellipsis font-bold\">{each.id}</div>\r\n              </SolidCard>\r\n\r\n              <div class=\"icon-button\" onClick={() => setEditing(each.id)}>\r\n                <Edit />\r\n              </div>\r\n\r\n              <div class=\"icon-button\" onClick={() => setDeleting(each.id)}>\r\n                <Trash />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </For>\r\n      </div>\r\n      <EditEmbedModal show={!!editing()} embedId={editing()} close={() => setEditing()} />\r\n      <ConfirmModal\r\n        confirm={() => embedApi.removeDocument(deleting()!)}\r\n        show={!!deleting()}\r\n        close={() => setDeleting()}\r\n        message={`Are you sure you wish to delete this embedding?\\n\\n${deleting()}`}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport const BooksTab: Component = (props) => {\r\n  const state = memoryStore()\r\n  const [showImport, setImport] = createSignal(false)\r\n  const [deleting, setDeleting] = createSignal<AppSchema.MemoryBook>()\r\n\r\n  const removeBook = (book: AppSchema.MemoryBook) => {\r\n    memoryStore.remove(book._id)\r\n  }\r\n\r\n  createEffect(() => {\r\n    memoryStore.getAll()\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        title=\"Memory - Books\"\r\n        subtitle={\r\n          <>\r\n            {' '}\r\n            <a\r\n              href=\"https://github.com/agnaistic/agnai/blob/dev/instructions/memory.md\"\r\n              target=\"_blank\"\r\n              class=\"link\"\r\n            >\r\n              Memory Book Guide\r\n            </a>\r\n          </>\r\n        }\r\n      />\r\n\r\n      <div class=\"flex w-full justify-end gap-4\">\r\n        <Button onClick={() => setImport(true)}>\r\n          <Upload /> Import Book\r\n        </Button>\r\n        <A href=\"/memory/new\">\r\n          <Button>\r\n            <Plus />\r\n            Create Book\r\n          </Button>\r\n        </A>\r\n      </div>\r\n\r\n      <Show when={!state.books.list.length}>\r\n        <NoBooks />\r\n      </Show>\r\n\r\n      <Show when={state.books.list.length}>\r\n        <For each={state.books.list}>\r\n          {(book) => (\r\n            <div class=\"mt-2 flex w-full items-center gap-4\">\r\n              <A\r\n                href={`/memory/${book._id}`}\r\n                class=\"ellipsis flex h-12 w-full cursor-pointer items-center gap-2 rounded-xl bg-[var(--bg-800)] px-4 hover:bg-[var(--bg-700)]\"\r\n              >\r\n                <span class=\"ellipsis font-bold\">{book.name}</span>\r\n                <span class=\"ml-2\">{book.description}</span>\r\n              </A>\r\n\r\n              <a\r\n                class=\"icon-button\"\r\n                href={`data:text/json:charset=utf-8,${encodeBook(book)}`}\r\n                download={`book-${book._id.slice(0, 4)}-${book.name}.json`}\r\n              >\r\n                <Download />\r\n              </a>\r\n              <div class=\"icon-button\" onClick={() => setDeleting(book)}>\r\n                <Trash />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </For>\r\n      </Show>\r\n\r\n      <div class=\"flex flex-col items-center\"></div>\r\n      <ImportMemoryModal show={showImport()} close={() => setImport(false)} />\r\n      <ConfirmModal\r\n        confirm={() => removeBook(deleting()!)}\r\n        message={`Are you sure you wish to delete this memory book?\\n\\n${deleting()?.name}`}\r\n        close={() => setDeleting()}\r\n        show={!!deleting()}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst NoBooks = () => (\r\n  <div class=\"flex justify-center\">You have no memory books yet. Click Create to get started.</div>\r\n)\r\n\r\ntype ImportProps = {\r\n  show: boolean\r\n  close: () => void\r\n}\r\n\r\nconst ImportMemoryModal: Component<ImportProps> = (props) => {\r\n  const [json, setJson] = createSignal<any>()\r\n\r\n  const updateJson = async (files: FileInputResult[]) => {\r\n    if (!files.length) return setJson()\r\n    try {\r\n      const content = await getFileAsString(files[0])\r\n      const json = JSON.parse(content)\r\n      validateBookJson(json)\r\n      setJson(json)\r\n      toastStore.success('Character file accepted')\r\n    } catch (ex: any) {\r\n      toastStore.warn(`Invalid memory book JSON. ${ex.message}`)\r\n    }\r\n  }\r\n\r\n  const onImport = () => {\r\n    if (!json()) return\r\n    memoryStore.create(json(), props.close)\r\n  }\r\n\r\n  const Footer = (\r\n    <>\r\n      <Button onClick={props.close}>\r\n        <X /> Cancel\r\n      </Button>\r\n      <Button onClick={onImport}>\r\n        <Upload /> Import\r\n      </Button>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <Modal show={props.show} close={props.close} title=\"Import Memory Book\" footer={Footer}>\r\n      <FileInput\r\n        fieldName=\"json\"\r\n        label=\"JSON File\"\r\n        accept=\"text/json,application/json\"\r\n        helperText=\"Only Agnaistic exported memory books are currently supported.\"\r\n        required\r\n        onUpdate={updateJson}\r\n      />\r\n    </Modal>\r\n  )\r\n}\r\n\r\nfunction encodeBook(book: AppSchema.MemoryBook) {\r\n  const { _id, userId, ...body } = book\r\n  return encodeURIComponent(JSON.stringify(body, null, 2))\r\n}\r\n\r\nfunction validateBookJson(json: any) {\r\n  const book = json as AppSchema.MemoryBook\r\n\r\n  const entries: AppSchema.MemoryEntry[] = []\r\n\r\n  /**\r\n   * - Attempt to convert any \"should-be\" numbers to numbers\r\n   * - Remove entries with no prompt text\r\n   * - Remove entries with no keywords\r\n   * - Coalesce enable to true\r\n   * - Coalese name to empty string\r\n   */\r\n\r\n  if (Array.isArray(book?.entries)) {\r\n    for (const entry of book.entries) {\r\n      entry.priority = toNumber(entry.priority)\r\n      entry.weight = toNumber(entry.weight)\r\n      if (entry.enabled === undefined) entry.enabled = true\r\n      if (!entry.name) entry.name = ''\r\n      if (!entry.entry) continue\r\n      if (!Array.isArray(entry.keywords)) continue\r\n\r\n      entries.push(entry)\r\n    }\r\n  }\r\n\r\n  json.entries = entries\r\n\r\n  assertValid(\r\n    {\r\n      kind: ['memory'],\r\n      name: 'string',\r\n      description: 'string?',\r\n      entries: [\r\n        {\r\n          name: 'string',\r\n          entry: 'string',\r\n          keywords: ['string'],\r\n          priority: 'number',\r\n          weight: 'number',\r\n          enabled: 'boolean',\r\n        },\r\n      ],\r\n    },\r\n    json\r\n  )\r\n}\r\n\r\nfunction toNumber(value: any) {\r\n  const num = +value\r\n\r\n  if (isNaN(num)) return 0\r\n  return num\r\n}\r\n"],"names":["Component","Match","Switch","createEffect","createMemo","Tabs","useTabs","setComponentPageTitle","ScenarioList","PromptTemplates","BooksTab","EmbedsTab","useSearchParams","Library","default","params","setParams","allowed","base","tabs","tab","index","selected","_$createComponent","select","children","when","current","For","Show","createSignal","onMount","PageHeader","Button","presetStore","Copy","Plus","Save","Trash","Divider","templates","useRootModal","Modal","PromptEditor","TextInput","AppSchema","getStrictForm","toastStore","state","s","show","setShow","edit","setEdit","PromptTemplate","initial","setInitial","builtins","Object","entries","map","name","template","getTemplates","close","title","_el$","_tmpl$2","cloneNode","_el$2","firstChild","_el$3","nextSibling","_el$5","_$insert","onClick","size","length","_tmpl$","each","_el$6","_tmpl$3","_el$7","$$click","schema","deleteTemplate","_id","_el$8","_tmpl$4","_el$9","TemplateModal","props","form","HTMLFormElement","submit","reportValidity","checkValidity","updateTemplate","success","createTemplate","Footer","id","element","maxWidth","footer","_el$10","_tmpl$5","_ref$","_$use","fieldName","placeholder","label","value","required","minHeight","showHelp","_$delegateEvents","A","assertValid","Download","Upload","X","Edit","FileX","FileCheck","FileInput","FileInputResult","getFileAsString","ConfirmModal","memoryStore","SolidCard","EmbedContent","embedApi","EditEmbedModal","editing","setEditing","deleting","setDeleting","embeds","bg","_c$","_$memo","_$effect","_$setAttribute","_el$4","embedId","confirm","removeDocument","message","showImport","setImport","MemoryBook","removeBook","book","remove","getAll","subtitle","_tmpl$7","href","books","list","NoBooks","_tmpl$10","_el$13","_el$14","_el$11","_tmpl$8","_el$12","_tmpl$9","description","_p$","_v$","encodeBook","_v$2","slice","undefined","_tmpl$6","ImportMemoryModal","_tmpl$11","ImportProps","json","setJson","updateJson","files","content","JSON","parse","validateBookJson","ex","warn","onImport","create","accept","helperText","onUpdate","userId","body","encodeURIComponent","stringify","MemoryEntry","Array","isArray","entry","priority","toNumber","weight","enabled","keywords","push","kind","num","isNaN"],"version":3,"file":"Library.70717313.js.map"}