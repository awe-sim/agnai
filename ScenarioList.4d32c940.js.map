{"mappings":"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","sources":["web/pages/Scenario/ScenarioList.tsx","web/pages/Scenario/components/ImportScenarioModal.tsx"],"sourcesContent":["import { Component, For, Match, Show, Switch, createSignal, onMount } from 'solid-js'\r\nimport { scenarioStore } from '../../store'\r\nimport { A, useNavigate } from '@solidjs/router'\r\nimport PageHeader from '../../shared/PageHeader'\r\nimport Loading from '/web/shared/Loading'\r\nimport Button from '/web/shared/Button'\r\nimport { Plus, Upload } from 'lucide-solid'\r\nimport ImportScenarioModal from './components/ImportScenarioModal'\r\n\r\nconst ScenarioList: Component = () => {\r\n  const scenarioState = scenarioStore()\r\n  const nav = useNavigate()\r\n\r\n  const [showImport, setShowImport] = createSignal(false)\r\n\r\n  onMount(() => {\r\n    scenarioStore.getAll()\r\n  })\r\n\r\n  const create = () => {\r\n    scenarioStore.create(\r\n      {\r\n        name: '',\r\n        description: '',\r\n        overwriteCharacterScenario: false,\r\n        text: '',\r\n        instructions: '',\r\n        states: [],\r\n        entries: [],\r\n      },\r\n      (r) => nav(`/scenario/${r._id}`)\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        title={\r\n          <div class=\"flex w-full justify-between\">\r\n            <div>Scenarios</div>\r\n            <div class=\"flex text-base\">\r\n              <div class=\"px-1\">\r\n                <Button schema=\"secondary\" onClick={() => setShowImport(true)}>\r\n                  <Upload />\r\n                  <span class=\"hidden sm:inline\">Import Scenario</span>\r\n                </Button>\r\n              </div>\r\n              <div class=\"px-1\">\r\n                <Button schema=\"primary\" onClick={() => create()}>\r\n                  <Plus />\r\n                  <span class=\"hidden sm:inline\">Create Scenario</span>\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        }\r\n      />\r\n\r\n      <Switch>\r\n        <Match when={scenarioState.loading}>\r\n          <div class=\"flex justify-center\">\r\n            <Loading />\r\n          </div>\r\n        </Match>\r\n        <Match when={scenarioState.scenarios.length === 0}>\r\n          <div class=\"mt-16 flex w-full justify-center rounded-full text-xl\">\r\n            You have no scenarios yet.\r\n          </div>\r\n        </Match>\r\n        <Match when={scenarioState.scenarios.length > 0}>\r\n          <div class=\"flex flex-col gap-2\">\r\n            <For each={scenarioState.scenarios}>\r\n              {(scenario) => (\r\n                <div class=\"flex w-full justify-between gap-2 rounded-lg bg-[var(--bg-800)] p-1 hover:bg-[var(--bg-700)]\">\r\n                  <A class=\"flex w-full cursor-pointer gap-2\" href={`/scenario/${scenario._id}`}>\r\n                    <div class=\"flex flex-col justify-center gap-0 p-2\">\r\n                      <div class=\"overflow-hidden text-ellipsis whitespace-nowrap font-bold leading-5\">\r\n                        {scenario.name || 'Unnamed Scenario'}\r\n                      </div>\r\n                      <Show when={scenario.description}>\r\n                        <div class=\"overflow-hidden text-ellipsis whitespace-nowrap text-sm leading-4\">\r\n                          {scenario.description}\r\n                        </div>\r\n                      </Show>\r\n                    </div>\r\n                  </A>\r\n                </div>\r\n              )}\r\n            </For>\r\n          </div>\r\n        </Match>\r\n      </Switch>\r\n\r\n      <ImportScenarioModal show={showImport()} close={() => setShowImport(false)} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ScenarioList\r\n","import { Component, createMemo, createSignal, For, Show } from 'solid-js'\r\nimport { Check, Upload, X } from 'lucide-solid'\r\nimport { AppSchema, NewScenario } from '/common/types'\r\nimport Button from '../../../shared/Button'\r\nimport FileInput, { FileInputResult, getFileAsString } from '../../../shared/FileInput'\r\nimport Modal from '../../../shared/Modal'\r\nimport { scenarioStore, toastStore } from '../../../store'\r\n\r\ntype ImportStatus = 'success' | 'failed' | 'pending'\r\n\r\nconst supportedScenarioSchemas = ['https://agnai.chat/schemas/scenario-schema-v1.json']\r\n\r\nconst ImportScenarioModal: Component<{\r\n  show: boolean\r\n  close: () => void\r\n  char?: AppSchema.Character\r\n}> = (props) => {\r\n  const [status, setStatus] = createSignal<ImportStatus>('pending')\r\n  const [importing, setImporting] = createSignal(false)\r\n  const [json, setJson] = createSignal<{ scenario: NewScenario; status: ImportStatus }[]>([])\r\n  const canImport = createMemo(() => json().some((s) => s.status === 'pending'))\r\n\r\n  const onFileSelect = async (files: FileInputResult[]) => {\r\n    if (importing()) return\r\n    setJson([])\r\n    if (!files.length) return\r\n    for (let file of files) {\r\n      try {\r\n        const content = await getFileAsString(file)\r\n        const parsed = JSON.parse(content)\r\n        if (!parsed) {\r\n          toastStore.error(`File was not a valid JSON: ${file.file.name}`)\r\n          continue\r\n        }\r\n        if (!supportedScenarioSchemas.includes(parsed.$schema)) {\r\n          toastStore.error(\r\n            `File was not a supported scenario (incorrect schema): ${file.file.name}`\r\n          )\r\n          continue\r\n        }\r\n        delete parsed.$schema\r\n        setJson([...json(), { scenario: parsed, status: 'pending' }])\r\n      } catch (ex) {\r\n        const message = ex instanceof Error ? ex.message : 'Unknown error'\r\n        toastStore.warn(`Invalid scenario: ${message}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  const onImport = () => {\r\n    if (importing()) return\r\n    setImporting(true)\r\n    importNext()\r\n  }\r\n\r\n  const importNext = () => {\r\n    const next = json().find((s) => s.status === 'pending')\r\n    if (!next) {\r\n      setImporting(false)\r\n      setStatus(json().every((s) => s.status === 'success') ? 'success' : 'failed')\r\n      return\r\n    }\r\n    scenarioStore.create(\r\n      next.scenario,\r\n      () => {\r\n        setJson([\r\n          ...json().map((s) => (s === next ? { ...next, status: 'success' as ImportStatus } : s)),\r\n        ])\r\n        importNext()\r\n      },\r\n      () => {\r\n        setJson([\r\n          ...json().map((s) => (s === next ? { ...next, status: 'failed' as ImportStatus } : s)),\r\n        ])\r\n        importNext()\r\n      }\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      title=\"Import Scenario\"\r\n      close={props.close}\r\n      footer={\r\n        <>\r\n          <Show when={status() === 'success'}>\r\n            <Button schema=\"primary\" onClick={props.close}>\r\n              <Check />\r\n              Done\r\n            </Button>\r\n          </Show>\r\n          <Show when={status() !== 'success'}>\r\n            <Button schema=\"secondary\" onClick={props.close}>\r\n              <X />\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={onImport} disabled={!canImport()}>\r\n              <Upload />\r\n              Import\r\n            </Button>\r\n          </Show>\r\n        </>\r\n      }\r\n    >\r\n      <div class=\"flex flex-col gap-2\">\r\n        <Show when={!importing() && status() !== 'success'}>\r\n          <FileInput\r\n            label=\"Scenario JSON File\"\r\n            fieldName=\"json\"\r\n            accept=\"application/json,text/json\"\r\n            helperText=\"Supported formats: Agnaistic\"\r\n            required\r\n            onUpdate={onFileSelect}\r\n          />\r\n        </Show>\r\n        <Show when={json().length}>\r\n          <ul class=\"list-inside list-disc\">\r\n            <For each={json()}>\r\n              {(s) => (\r\n                <li class=\"flex flex-row items-center gap-2\">\r\n                  <div\r\n                    classList={{\r\n                      'text-green-500': s.status === 'success',\r\n                      'text-gray-500': s.status === 'pending',\r\n                      'text-red-500': s.status === 'failed',\r\n                    }}\r\n                  >\r\n                    <Check size={16} />\r\n                  </div>\r\n                  <span>{s.scenario.name}</span>\r\n                </li>\r\n              )}\r\n            </For>\r\n          </ul>\r\n        </Show>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ImportScenarioModal\r\n"],"names":["Component","For","Match","Show","Switch","createSignal","onMount","scenarioStore","A","useNavigate","PageHeader","Loading","Button","Plus","Upload","ImportScenarioModal","ScenarioList","scenarioState","nav","showImport","setShowImport","getAll","create","name","description","overwriteCharacterScenario","text","instructions","states","entries","r","_id","_$createComponent","title","_el$4","_tmpl$6","cloneNode","_el$5","firstChild","_el$6","nextSibling","_el$7","_el$9","_$insert","schema","onClick","children","_tmpl$4","_tmpl$5","when","loading","_el$","_tmpl$","scenarios","length","_tmpl$2","_el$3","_tmpl$3","each","scenario","_el$11","_tmpl$9","href","_el$12","_tmpl$8","_el$13","_el$14","_tmpl$7","show","close","createMemo","Check","X","AppSchema","NewScenario","FileInput","FileInputResult","getFileAsString","Modal","toastStore","ImportStatus","supportedScenarioSchemas","char","Character","props","status","setStatus","importing","setImporting","json","setJson","canImport","some","s","onFileSelect","files","file","content","parsed","JSON","parse","error","includes","$schema","ex","message","Error","warn","onImport","importNext","next","find","every","map","footer","disabled","_$memo","label","fieldName","accept","helperText","required","onUpdate","_el$2","size","_$effect","_p$","_v$","_v$2","_v$3","classList","toggle","undefined"],"version":3,"file":"ScenarioList.4d32c940.js.map"}